// +build !noasm !appengine
// Code generated by asm2asm, DO NOT EDIT.

#include "go_asm.h"
#include "funcdata.h"
#include "textflag.h"

TEXT Â·__native_entry__(SB), NOSPLIT, $0
	NO_LOCAL_POINTERS
	LONG $0xf9058d48; WORD $0xffff; BYTE $0xff // leaq         $-7(%rip), %rax
	LONG $0x24448948; BYTE $0x08               // movq         %rax, $8(%rsp)
	BYTE $0xc3                                 // retq
	WORD $0x9090; BYTE $0x90                   // .p2align 4, 0x90

_lzero:
	BYTE $0x55                           // pushq        %rbp
	WORD $0x8948; BYTE $0xe5             // movq         %rsp, %rbp
	WORD $0x5641                         // pushq        %r14
	BYTE $0x53                           // pushq        %rbx
	WORD $0x8948; BYTE $0xf3             // movq         %rsi, %rbx
	WORD $0x8949; BYTE $0xfe             // movq         %rdi, %r14
	LONG $0x20fe8348                     // cmpq         $32, %rsi
	LONG $0x002d820f; WORD $0x0000       // jb           LBB0_3, $45(%rip)
	QUAD $0x9090909090909090; BYTE $0x90 // .p2align 4, 0x90

LBB0_1:
	LONG $0x107cc1c4; BYTE $0x06   // vmovups      (%r14), %ymm0
	LONG $0x0000e6e8; BYTE $0x00   // callq        _is_zero_avx, $230(%rip)
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x00cd840f; WORD $0x0000 // je           LBB0_17, $205(%rip)
	LONG $0x20c68349               // addq         $32, %r14
	LONG $0xe0c38348               // addq         $-32, %rbx
	LONG $0x1ffb8348               // cmpq         $31, %rbx
	LONG $0xffdc870f; WORD $0xffff // ja           LBB0_1, $-36(%rip)

LBB0_3:
	WORD $0xf8c5; BYTE $0x77                                             // vzeroupper
	LONG $0x10fb8348                                                     // cmpq         $16, %rbx
	LONG $0x0033820f; WORD $0x0000                                       // jb           LBB0_6, $51(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB0_4:
	LONG $0x1078c1c4; BYTE $0x06   // vmovups      (%r14), %xmm0
	LONG $0x0000c6e8; BYTE $0x00   // callq        _is_zero_sse, $198(%rip)
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x0090840f; WORD $0x0000 // je           LBB0_18, $144(%rip)
	LONG $0x10c68349               // addq         $16, %r14
	LONG $0xf0c38348               // addq         $-16, %rbx
	LONG $0x0ffb8348               // cmpq         $15, %rbx
	LONG $0xffdc870f; WORD $0xffff // ja           LBB0_4, $-36(%rip)

LBB0_6:
	LONG $0x08fb8348               // cmpq         $8, %rbx
	LONG $0x0017820f; WORD $0x0000 // jb           LBB0_9, $23(%rip)
	LONG $0x000001b8; BYTE $0x00   // movl         $1, %eax
	LONG $0x003e8349               // cmpq         $0, (%r14)
	LONG $0x006a850f; WORD $0x0000 // jne          LBB0_19, $106(%rip)
	LONG $0x08c68349               // addq         $8, %r14
	LONG $0xf8c38348               // addq         $-8, %rbx

LBB0_9:
	LONG $0x04fb8348               // cmpq         $4, %rbx
	LONG $0x0017820f; WORD $0x0000 // jb           LBB0_12, $23(%rip)
	LONG $0x000001b8; BYTE $0x00   // movl         $1, %eax
	LONG $0x003e8341               // cmpl         $0, (%r14)
	LONG $0x0049850f; WORD $0x0000 // jne          LBB0_19, $73(%rip)
	LONG $0x04c68349               // addq         $4, %r14
	LONG $0xfcc38348               // addq         $-4, %rbx

LBB0_12:
	LONG $0x02fb8348               // cmpq         $2, %rbx
	LONG $0x0018820f; WORD $0x0000 // jb           LBB0_15, $24(%rip)
	LONG $0x000001b8; BYTE $0x00   // movl         $1, %eax
	LONG $0x3e834166; BYTE $0x00   // cmpw         $0, (%r14)
	LONG $0x0027850f; WORD $0x0000 // jne          LBB0_19, $39(%rip)
	LONG $0x02c68349               // addq         $2, %r14
	LONG $0xfec38348               // addq         $-2, %rbx

LBB0_15:
	WORD $0xc031                   // xorl         %eax, %eax
	WORD $0x8548; BYTE $0xdb       // testq        %rbx, %rbx
	LONG $0x0014840f; WORD $0x0000 // je           LBB0_19, $20(%rip)
	LONG $0x003e8041               // cmpb         $0, (%r14)
	WORD $0x950f; BYTE $0xc0       // setne        %al
	LONG $0x000008e9; BYTE $0x00   // jmp          LBB0_19, $8(%rip)

LBB0_17:
	WORD $0xf8c5; BYTE $0x77 // vzeroupper

LBB0_18:
	LONG $0x000001b8; BYTE $0x00 // movl         $1, %eax

LBB0_19:
	BYTE $0x5b       // popq         %rbx
	WORD $0x5e41     // popq         %r14
	BYTE $0x5d       // popq         %rbp
	BYTE $0xc3       // retq
	LONG $0x90909090 // .p2align 4, 0x90

_is_zero_avx:
	BYTE $0x55                                             // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                               // movq         %rsp, %rbp
	WORD $0xc031                                           // xorl         %eax, %eax
	LONG $0x177de2c4; BYTE $0xc0                           // vptest       %ymm0, %ymm0
	WORD $0x940f; BYTE $0xc0                               // sete         %al
	BYTE $0x5d                                             // popq         %rbp
	WORD $0xf8c5; BYTE $0x77                               // vzeroupper
	BYTE $0xc3                                             // retq
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

_is_zero_sse:
	BYTE $0x55                   // pushq        %rbp
	WORD $0x8948; BYTE $0xe5     // movq         %rsp, %rbp
	WORD $0xc031                 // xorl         %eax, %eax
	LONG $0x1779e2c4; BYTE $0xc0 // vptest       %xmm0, %xmm0
	WORD $0x940f; BYTE $0xc0     // sete         %al
	BYTE $0x5d                   // popq         %rbp
	BYTE $0xc3                   // retq

	// .p2align 4, 0x00
LCPI3_0:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI3_1:
	QUAD $0x0909090909090909; QUAD $0x0909090909090909 // .space 16, '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'

LCPI3_2:
	QUAD $0x0a0a0a0a0a0a0a0a; QUAD $0x0a0a0a0a0a0a0a0a // .space 16, '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'

LCPI3_3:
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'

	// .p2align 4, 0x90
_lspace:
	BYTE $0x55                             // pushq        %rbp
	WORD $0x8948; BYTE $0xe5               // movq         %rsp, %rbp
	WORD $0x8948; BYTE $0xd0               // movq         %rdx, %rax
	LONG $0x17148d4c                       // leaq         (%rdi,%rdx), %r10
	WORD $0x8948; BYTE $0xf2               // movq         %rsi, %rdx
	WORD $0x2948; BYTE $0xc2               // subq         %rax, %rdx
	LONG $0x0069840f; WORD $0x0000         // je           LBB3_7, $105(%rip)
	WORD $0x8944; BYTE $0xd1               // movl         %r10d, %ecx
	WORD $0xe183; BYTE $0x0f               // andl         $15, %ecx
	WORD $0x8548; BYTE $0xc9               // testq        %rcx, %rcx
	LONG $0x005a840f; WORD $0x0000         // je           LBB3_7, $90(%rip)
	LONG $0x014f8d4c                       // leaq         $1(%rdi), %r9
	LONG $0xff4e8d48                       // leaq         $-1(%rsi), %rcx
	QUAD $0x000100002600b849; WORD $0x0000 // movabsq      $4294977024, %r8
	QUAD $0x9090909090909090               // .p2align 4, 0x90

LBB3_3:
	LONG $0x0714be0f               // movsbl       (%rdi,%rax), %edx
	WORD $0xfa83; BYTE $0x20       // cmpl         $32, %edx
	LONG $0x0111870f; WORD $0x0000 // ja           LBB3_21, $273(%rip)
	LONG $0xd0a30f49               // btq          %rdx, %r8
	LONG $0x0107830f; WORD $0x0000 // jae          LBB3_21, $263(%rip)
	LONG $0x01508d48               // leaq         $1(%rax), %rdx
	WORD $0x3948; BYTE $0xc1       // cmpq         %rax, %rcx
	LONG $0x0012840f; WORD $0x0000 // je           LBB3_6, $18(%rip)
	WORD $0x0144; BYTE $0xc8       // addl         %r9d, %eax
	WORD $0xe083; BYTE $0x0f       // andl         $15, %eax
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	LONG $0xffca850f; WORD $0xffff // jne          LBB3_3, $-54(%rip)

LBB3_6:
	LONG $0x17148d4c         // leaq         (%rdi,%rdx), %r10
	WORD $0x2948; BYTE $0xd6 // subq         %rdx, %rsi
	WORD $0x8948; BYTE $0xf2 // movq         %rsi, %rdx

LBB3_7:
	QUAD $0xffffff38056ff9c5                           // vmovdqa      $-200(%rip), %xmm0  /* LCPI3_0(%rip) */
	QUAD $0xffffff400d6ff9c5                           // vmovdqa      $-192(%rip), %xmm1  /* LCPI3_1(%rip) */
	QUAD $0xffffff48156ff9c5                           // vmovdqa      $-184(%rip), %xmm2  /* LCPI3_2(%rip) */
	QUAD $0xffffff501d6ff9c5                           // vmovdqa      $-176(%rip), %xmm3  /* LCPI3_3(%rip) */
	LONG $0x00001de9; BYTE $0x00                       // jmp          LBB3_8, $29(%rip)
	QUAD $0x9090909090909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB3_16:
	LONG $0x10c28349 // addq         $16, %r10
	LONG $0xf0c28348 // addq         $-16, %rdx

LBB3_17:
	LONG $0xfffe8366               // cmpw         $-1, %si
	LONG $0x009c850f; WORD $0x0000 // jne          LBB3_21, $156(%rip)

LBB3_8:
	LONG $0x0ffa8348               // cmpq         $15, %rdx
	LONG $0x0045860f; WORD $0x0000 // jbe          LBB3_9, $69(%rip)
	LONG $0x6f79c1c4; BYTE $0x22   // vmovdqa      (%r10), %xmm4
	LONG $0xe874d9c5               // vpcmpeqb     %xmm0, %xmm4, %xmm5
	LONG $0xf174d9c5               // vpcmpeqb     %xmm1, %xmm4, %xmm6
	LONG $0xeeebd1c5               // vpor         %xmm6, %xmm5, %xmm5
	LONG $0xf274d9c5               // vpcmpeqb     %xmm2, %xmm4, %xmm6
	LONG $0xe374d9c5               // vpcmpeqb     %xmm3, %xmm4, %xmm4
	LONG $0xe6ebd9c5               // vpor         %xmm6, %xmm4, %xmm4
	LONG $0xe5ebd9c5               // vpor         %xmm5, %xmm4, %xmm4
	LONG $0xf4d7f9c5               // vpmovmskb    %xmm4, %esi
	LONG $0xfffe8366               // cmpw         $-1, %si
	LONG $0xffb5840f; WORD $0xffff // je           LBB3_16, $-75(%rip)
	WORD $0xb70f; BYTE $0xc6       // movzwl       %si, %eax
	WORD $0x894c; BYTE $0xd1       // movq         %r10, %rcx
	WORD $0x2948; BYTE $0xf9       // subq         %rdi, %rcx
	WORD $0xd0f7                   // notl         %eax
	WORD $0xbc0f; BYTE $0xc0       // bsfl         %eax, %eax
	WORD $0x0148; BYTE $0xc8       // addq         %rcx, %rax
	LONG $0xffffa7e9; BYTE $0xff   // jmp          LBB3_17, $-89(%rip)

LBB3_9:
	WORD $0x8548; BYTE $0xd2               // testq        %rdx, %rdx
	LONG $0x003e840f; WORD $0x0000         // je           LBB3_20, $62(%rip)
	LONG $0x12048d4d                       // leaq         (%r10,%rdx), %r8
	WORD $0xc031                           // xorl         %eax, %eax
	QUAD $0x000100002600b949; WORD $0x0000 // movabsq      $4294977024, %r9
	LONG $0x90909090; WORD $0x9090         // .p2align 4, 0x90

LBB3_11:
	LONG $0x34be0f41; BYTE $0x02   // movsbl       (%r10,%rax), %esi
	WORD $0xfe83; BYTE $0x20       // cmpl         $32, %esi
	LONG $0x0022870f; WORD $0x0000 // ja           LBB3_13, $34(%rip)
	LONG $0xf1a30f49               // btq          %rsi, %r9
	LONG $0x0018830f; WORD $0x0000 // jae          LBB3_13, $24(%rip)
	LONG $0x01c08348               // addq         $1, %rax
	WORD $0x3948; BYTE $0xc2       // cmpq         %rax, %rdx
	LONG $0xffdb850f; WORD $0xffff // jne          LBB3_11, $-37(%rip)
	WORD $0x894d; BYTE $0xc2       // movq         %r8, %r10

LBB3_20:
	WORD $0x2949; BYTE $0xfa // subq         %rdi, %r10
	WORD $0x894c; BYTE $0xd0 // movq         %r10, %rax

LBB3_21:
	BYTE $0x5d // popq         %rbp
	BYTE $0xc3 // retq

LBB3_13:
	WORD $0xf748; BYTE $0xd7 // notq         %rdi
	WORD $0x014c; BYTE $0xd7 // addq         %r10, %rdi
	WORD $0x0148; BYTE $0xf8 // addq         %rdi, %rax
	LONG $0x01c08348         // addq         $1, %rax
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq
	BYTE $0x90               // .p2align 4, 0x90

_is_div_pow2:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0xf189                               // movl         %esi, %ecx
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	WORD $0xd348; BYTE $0xe0                   // shlq         %cl, %rax
	WORD $0xf748; BYTE $0xd0                   // notq         %rax
	WORD $0x8548; BYTE $0xf8                   // testq        %rdi, %rax
	WORD $0x940f; BYTE $0xc0                   // sete         %al
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq
	LONG $0x90909090; BYTE $0x90               // .p2align 4, 0x90

_f64toa:
	BYTE $0x55                             // pushq        %rbp
	WORD $0x8948; BYTE $0xe5               // movq         %rsp, %rbp
	WORD $0x5641                           // pushq        %r14
	BYTE $0x53                             // pushq        %rbx
	WORD $0x8949; BYTE $0xfe               // movq         %rdi, %r14
	LONG $0x000081e8; BYTE $0x00           // callq        _f64toraw, $129(%rip)
	WORD $0x8948; BYTE $0xc6               // movq         %rax, %rsi
	LONG $0x34eec148                       // shrq         $52, %rsi
	LONG $0x07ffe681; WORD $0x0000         // andl         $2047, %esi
	LONG $0x07fffe81; WORD $0x0000         // cmpl         $2047, %esi
	LONG $0x005d840f; WORD $0x0000         // je           LBB5_1, $93(%rip)
	LONG $0x2d06c641                       // movb         $45, (%r14)
	WORD $0x8948; BYTE $0xc3               // movq         %rax, %rbx
	LONG $0x3febc148                       // shrq         $63, %rbx
	WORD $0x014c; BYTE $0xf3               // addq         %r14, %rbx
	QUAD $0x00000000450c8d48               // leaq         (,%rax,2), %rcx
	WORD $0x8548; BYTE $0xc9               // testq        %rcx, %rcx
	LONG $0x002e840f; WORD $0x0000         // je           LBB5_3, $46(%rip)
	QUAD $0xffffffffffffb948; WORD $0x000f // movabsq      $4503599627370495, %rcx
	WORD $0x2148; BYTE $0xc8               // andq         %rcx, %rax
	WORD $0x8948; BYTE $0xc7               // movq         %rax, %rdi
	LONG $0x000044e8; BYTE $0x00           // callq        _f64todec, $68(%rip)
	WORD $0x8948; BYTE $0xc7               // movq         %rax, %rdi
	WORD $0x8948; BYTE $0xd6               // movq         %rdx, %rsi
	WORD $0x8948; BYTE $0xda               // movq         %rbx, %rdx
	LONG $0x000236e8; BYTE $0x00           // callq        _write_dec, $566(%rip)
	WORD $0x8948; BYTE $0xc3               // movq         %rax, %rbx
	WORD $0x2944; BYTE $0xf3               // subl         %r14d, %ebx
	LONG $0x000009e9; BYTE $0x00           // jmp          LBB5_5, $9(%rip)

LBB5_3:
	WORD $0x03c6; BYTE $0x30 // movb         $48, (%rbx)
	WORD $0x2944; BYTE $0xf3 // subl         %r14d, %ebx
	WORD $0xc383; BYTE $0x01 // addl         $1, %ebx

LBB5_5:
	WORD $0xd889 // movl         %ebx, %eax
	BYTE $0x5b   // popq         %rbx
	WORD $0x5e41 // popq         %r14
	BYTE $0x5d   // popq         %rbp
	BYTE $0xc3   // retq

LBB5_1:
	WORD $0xdb31                 // xorl         %ebx, %ebx
	LONG $0xfffff2e9; BYTE $0xff // jmp          LBB5_5, $-14(%rip)
	LONG $0x90909090             // .p2align 4, 0x90

_f64toraw:
	BYTE $0x55                   // pushq        %rbp
	WORD $0x8948; BYTE $0xe5     // movq         %rsp, %rbp
	LONG $0x7ef9e1c4; BYTE $0xc0 // vmovq        %xmm0, %rax
	BYTE $0x5d                   // popq         %rbp
	BYTE $0xc3                   // retq
	LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

_f64todec:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	LONG $0x28ec8348                           // subq         $40, %rsp
	WORD $0xf389                               // movl         %esi, %ebx
	WORD $0x8949; BYTE $0xfe                   // movq         %rdi, %r14
	WORD $0xf685                               // testl        %esi, %esi
	LONG $0x004c840f; WORD $0x0000             // je           LBB7_1, $76(%rip)
	QUAD $0x000000000000bd49; WORD $0x0010     // movabsq      $4503599627370496, %r13
	WORD $0x094d; BYTE $0xf5                   // orq          %r14, %r13
	LONG $0xcda38d44; WORD $0xfffb; BYTE $0xff // leal         $-1075(%rbx), %r12d
	LONG $0xfc01838d; WORD $0xffff             // leal         $-1023(%rbx), %eax
	WORD $0xf883; BYTE $0x34                   // cmpl         $52, %eax
	LONG $0x0032870f; WORD $0x0000             // ja           LBB7_2, $50(%rip)
	LONG $0x0433bf41; WORD $0x0000             // movl         $1075, %r15d
	WORD $0x2941; BYTE $0xdf                   // subl         %ebx, %r15d
	WORD $0x894c; BYTE $0xef                   // movq         %r13, %rdi
	WORD $0x8944; BYTE $0xfe                   // movl         %r15d, %esi
	LONG $0xfffeebe8; BYTE $0xff               // callq        _is_div_pow2, $-277(%rip)
	WORD $0xc084                               // testb        %al, %al
	LONG $0x0016840f; WORD $0x0000             // je           LBB7_2, $22(%rip)
	WORD $0x8944; BYTE $0xf9                   // movl         %r15d, %ecx
	WORD $0xd349; BYTE $0xed                   // shrq         %cl, %r13
	WORD $0xd231                               // xorl         %edx, %edx
	LONG $0x000184e9; BYTE $0x00               // jmp          LBB7_13, $388(%rip)

LBB7_1:
	LONG $0xfbcebc41; WORD $0xffff // movl         $-1074, %r12d
	WORD $0x894d; BYTE $0xf5       // movq         %r14, %r13

LBB7_2:
	WORD $0x854d; BYTE $0xf6                   // testq        %r14, %r14
	WORD $0x940f; BYTE $0xc0                   // sete         %al
	WORD $0xfb83; BYTE $0x02                   // cmpl         $2, %ebx
	WORD $0x9d0f; BYTE $0xc1                   // setge        %cl
	WORD $0xc120                               // andb         %al, %cl
	QUAD $0x00000000ad048d4a                   // leaq         (,%r13,4), %rax
	LONG $0xc0458948                           // movq         %rax, $-64(%rbp)
	WORD $0xb60f; BYTE $0xc1                   // movzbl       %cl, %eax
	LONG $0xa83c8d4e                           // leaq         (%rax,%r13,4), %r15
	LONG $0xfec78349                           // addq         $-2, %r15
	QUAD $0x00000002ad0c8d4a                   // leaq         $2(,%r13,4), %rcx
	LONG $0xb84d8948                           // movq         %rcx, $-72(%rbp)
	LONG $0x13cc6941; WORD $0x1344; BYTE $0x00 // imull        $1262611, %r12d, %ecx
	LONG $0x0101918d; WORD $0xfff8             // leal         $-524031(%rcx), %edx
	WORD $0xc084                               // testb        %al, %al
	WORD $0x440f; BYTE $0xd1                   // cmovel       %ecx, %edx
	WORD $0xfac1; BYTE $0x16                   // sarl         $22, %edx
	WORD $0xd789                               // movl         %edx, %edi
	WORD $0xdff7                               // negl         %edi
	WORD $0x5589; BYTE $0xd4                   // movl         %edx, $-44(%rbp)
	LONG $0x6cb1da69; WORD $0xffe5             // imull        $-1741647, %edx, %ebx
	WORD $0xebc1; BYTE $0x13                   // shrl         $19, %ebx
	WORD $0x0144; BYTE $0xe3                   // addl         %r12d, %ebx
	LONG $0x00398fe8; BYTE $0x00               // callq        _pow10_ceil_sig, $14735(%rip)
	WORD $0x8949; BYTE $0xc4                   // movq         %rax, %r12
	WORD $0x8949; BYTE $0xd6                   // movq         %rdx, %r14
	WORD $0xc380; BYTE $0x01                   // addb         $1, %bl
	WORD $0xd989                               // movl         %ebx, %ecx
	WORD $0xd349; BYTE $0xe7                   // shlq         %cl, %r15
	WORD $0x8948; BYTE $0xc7                   // movq         %rax, %rdi
	WORD $0x8948; BYTE $0xd6                   // movq         %rdx, %rsi
	WORD $0x894c; BYTE $0xfa                   // movq         %r15, %rdx
	LONG $0x003993e8; BYTE $0x00               // callq        _round_odd, $14739(%rip)
	LONG $0xc8458948                           // movq         %rax, $-56(%rbp)
	WORD $0xd989                               // movl         %ebx, %ecx
	LONG $0xc0558b48                           // movq         $-64(%rbp), %rdx
	WORD $0xd348; BYTE $0xe2                   // shlq         %cl, %rdx
	WORD $0x894c; BYTE $0xe7                   // movq         %r12, %rdi
	WORD $0x894c; BYTE $0xf6                   // movq         %r14, %rsi
	LONG $0x00397be8; BYTE $0x00               // callq        _round_odd, $14715(%rip)
	WORD $0x8949; BYTE $0xc7                   // movq         %rax, %r15
	WORD $0xd989                               // movl         %ebx, %ecx
	LONG $0xb8558b48                           // movq         $-72(%rbp), %rdx
	WORD $0xd348; BYTE $0xe2                   // shlq         %cl, %rdx
	WORD $0x894c; BYTE $0xe7                   // movq         %r12, %rdi
	WORD $0x894c; BYTE $0xf6                   // movq         %r14, %rsi
	LONG $0x003964e8; BYTE $0x00               // callq        _round_odd, $14692(%rip)
	LONG $0xc8758b48                           // movq         $-56(%rbp), %rsi
	WORD $0x8948; BYTE $0xc1                   // movq         %rax, %rcx
	LONG $0x01e58341                           // andl         $1, %r13d
	WORD $0x014c; BYTE $0xee                   // addq         %r13, %rsi
	WORD $0x294c; BYTE $0xe9                   // subq         %r13, %rcx
	LONG $0x28ff8349                           // cmpq         $40, %r15
	LONG $0x0041820f; WORD $0x0000             // jb           LBB7_8, $65(%rip)
	QUAD $0xcccccccccccdba48; WORD $0xcccc     // movabsq      $-3689348814741910323, %rdx
	WORD $0x894c; BYTE $0xf8                   // movq         %r15, %rax
	WORD $0xf748; BYTE $0xe2                   // mulq         %rdx
	WORD $0x8949; BYTE $0xd5                   // movq         %rdx, %r13
	LONG $0x05edc149                           // shrq         $5, %r13
	QUAD $0x00000000ed048d4a                   // leaq         (,%r13,8), %rax
	LONG $0x80148d48                           // leaq         (%rax,%rax,4), %rdx
	WORD $0x3948; BYTE $0xd6                   // cmpq         %rdx, %rsi
	WORD $0x970f; BYTE $0xc3                   // seta         %bl
	LONG $0x80148d48                           // leaq         (%rax,%rax,4), %rdx
	LONG $0x28c28348                           // addq         $40, %rdx
	WORD $0xc031                               // xorl         %eax, %eax
	WORD $0x3948; BYTE $0xca                   // cmpq         %rcx, %rdx
	WORD $0x960f; BYTE $0xc2                   // setbe        %dl
	WORD $0xd338                               // cmpb         %dl, %bl
	LONG $0x0068840f; WORD $0x0000             // je           LBB7_4, $104(%rip)

LBB7_8:
	WORD $0x894c; BYTE $0xf8       // movq         %r15, %rax
	LONG $0x02e8c148               // shrq         $2, %rax
	WORD $0x894c; BYTE $0xfa       // movq         %r15, %rdx
	LONG $0xfce28348               // andq         $-4, %rdx
	WORD $0x3948; BYTE $0xd6       // cmpq         %rdx, %rsi
	LONG $0xc7970f40               // seta         %dil
	LONG $0x04728d48               // leaq         $4(%rdx), %rsi
	WORD $0x3948; BYTE $0xce       // cmpq         %rcx, %rsi
	WORD $0x960f; BYTE $0xc3       // setbe        %bl
	WORD $0x3040; BYTE $0xfb       // xorb         %dil, %bl
	LONG $0x002d840f; WORD $0x0000 // je           LBB7_9, $45(%rip)
	LONG $0x02ca8348               // orq          $2, %rdx
	LONG $0x0001bd41; WORD $0x0000 // movl         $1, %r13d
	WORD $0x3949; BYTE $0xd7       // cmpq         %rdx, %r15
	LONG $0x000e870f; WORD $0x0000 // ja           LBB7_12, $14(%rip)
	WORD $0x940f; BYTE $0xc1       // sete         %cl
	LONG $0x02efc041               // shrb         $2, %r15b
	WORD $0x2041; BYTE $0xcf       // andb         %cl, %r15b
	LONG $0xefb60f45               // movzbl       %r15b, %r13d

LBB7_12:
	WORD $0x0149; BYTE $0xc5     // addq         %rax, %r13
	LONG $0xd4556348             // movslq       $-44(%rbp), %rdx
	LONG $0x000021e9; BYTE $0x00 // jmp          LBB7_13, $33(%rip)

LBB7_9:
	WORD $0x3948; BYTE $0xf1     // cmpq         %rsi, %rcx
	LONG $0xffd88348             // sbbq         $-1, %rax
	LONG $0xd4556348             // movslq       $-44(%rbp), %rdx
	WORD $0x8949; BYTE $0xc5     // movq         %rax, %r13
	LONG $0x00000ee9; BYTE $0x00 // jmp          LBB7_13, $14(%rip)

LBB7_4:
	WORD $0xd088             // movb         %dl, %al
	WORD $0x0149; BYTE $0xc5 // addq         %rax, %r13
	WORD $0x458b; BYTE $0xd4 // movl         $-44(%rbp), %eax
	WORD $0xc083; BYTE $0x01 // addl         $1, %eax
	WORD $0x6348; BYTE $0xd0 // movslq       %eax, %rdx

LBB7_13:
	WORD $0x894c; BYTE $0xe8 // movq         %r13, %rax
	LONG $0x28c48348         // addq         $40, %rsp
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

	// .p2align 4, 0x90
_write_dec:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0x5741                   // pushq        %r15
	WORD $0x5641                   // pushq        %r14
	BYTE $0x53                     // pushq        %rbx
	BYTE $0x50                     // pushq        %rax
	WORD $0x8949; BYTE $0xd6       // movq         %rdx, %r14
	WORD $0x8949; BYTE $0xf7       // movq         %rsi, %r15
	WORD $0x8948; BYTE $0xfb       // movq         %rdi, %rbx
	LONG $0x003898e8; BYTE $0x00   // callq        _ctz10, $14488(%rip)
	LONG $0x070c8d41               // leal         (%r15,%rax), %ecx
	WORD $0xc183; BYTE $0x05       // addl         $5, %ecx
	WORD $0x8948; BYTE $0xdf       // movq         %rbx, %rdi
	WORD $0x894c; BYTE $0xfe       // movq         %r15, %rsi
	WORD $0x894c; BYTE $0xf2       // movq         %r14, %rdx
	WORD $0xf983; BYTE $0x1b       // cmpl         $27, %ecx
	LONG $0x000c820f; WORD $0x0000 // jb           LBB8_2, $12(%rip)
	WORD $0xc189                   // movl         %eax, %ecx
	LONG $0x0039c8e8; BYTE $0x00   // callq        _print_exponent, $14792(%rip)
	LONG $0x000007e9; BYTE $0x00   // jmp          LBB8_3, $7(%rip)

LBB8_2:
	WORD $0xc189                 // movl         %eax, %ecx
	LONG $0x003adce8; BYTE $0x00 // callq        _print_decimal, $15068(%rip)

LBB8_3:
	LONG $0x08c48348 // addq         $8, %rsp
	BYTE $0x5b       // popq         %rbx
	WORD $0x5e41     // popq         %r14
	WORD $0x5f41     // popq         %r15
	BYTE $0x5d       // popq         %rbp
	BYTE $0xc3       // retq
	BYTE $0x90       // .p2align 4, 0x90

_i64toa:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x0007880f; WORD $0x0000 // js           LBB9_2, $7(%rip)
	LONG $0x00001ee8; BYTE $0x00   // callq        _u64toa, $30(%rip)
	BYTE $0x5d                     // popq         %rbp
	BYTE $0xc3                     // retq

LBB9_2:
	WORD $0x07c6; BYTE $0x2d     // movb         $45, (%rdi)
	LONG $0x01c78348             // addq         $1, %rdi
	WORD $0xf748; BYTE $0xde     // negq         %rsi
	LONG $0x00000de8; BYTE $0x00 // callq        _u64toa, $13(%rip)
	WORD $0xc083; BYTE $0x01     // addl         $1, %eax
	BYTE $0x5d                   // popq         %rbp
	BYTE $0xc3                   // retq
	QUAD $0x9090909090909090     // .p2align 4, 0x90

_u64toa:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	LONG $0x0ffe8148; WORD $0x0027; BYTE $0x00 // cmpq         $9999, %rsi
	LONG $0x0007870f; WORD $0x0000             // ja           LBB10_2, $7(%rip)
	LONG $0x00003ae8; BYTE $0x00               // callq        _u32toa_small, $58(%rip)
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq

LBB10_2:
	LONG $0xfffe8148; WORD $0xf5e0; BYTE $0x05 // cmpq         $99999999, %rsi
	LONG $0x0007870f; WORD $0x0000             // ja           LBB10_4, $7(%rip)
	LONG $0x0000c6e8; BYTE $0x00               // callq        _u32toa_medium, $198(%rip)
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq

LBB10_4:
	QUAD $0x86f26fc0ffffb848; WORD $0x0023 // movabsq      $9999999999999999, %rax
	WORD $0x3948; BYTE $0xc6               // cmpq         %rax, %rsi
	LONG $0x0007870f; WORD $0x0000         // ja           LBB10_6, $7(%rip)
	LONG $0x0001cce8; BYTE $0x00           // callq        _u64toa_large_sse2, $460(%rip)
	BYTE $0x5d                             // popq         %rbp
	BYTE $0xc3                             // retq

LBB10_6:
	LONG $0x000265e8; BYTE $0x00 // callq        _u64toa_xlarge_sse2, $613(%rip)
	BYTE $0x5d                   // popq         %rbp
	BYTE $0xc3                   // retq
	WORD $0x9090; BYTE $0x90     // .p2align 4, 0x90

_u32toa_small:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0xf089                               // movl         %esi, %eax
	LONG $0x1fc06948; WORD $0xeb85; BYTE $0x51 // imulq        $1374389535, %rax, %rax
	LONG $0x25e8c148                           // shrq         $37, %rax
	LONG $0x00148d48                           // leaq         (%rax,%rax), %rdx
	WORD $0xc06b; BYTE $0x64                   // imull        $100, %eax, %eax
	WORD $0xf189                               // movl         %esi, %ecx
	WORD $0xc129                               // subl         %eax, %ecx
	WORD $0xc031                               // xorl         %eax, %eax
	LONG $0x03e8fe81; WORD $0x0000             // cmpl         $1000, %esi
	LONG $0x0011820f; WORD $0x0000             // jb           LBB11_2, $17(%rip)
	LONG $0xbf058d48; WORD $0x00a6; BYTE $0x00 // leaq         $42687(%rip), %rax  /* _Digits(%rip) */
	WORD $0x048a; BYTE $0x02                   // movb         (%rdx,%rax), %al
	WORD $0x0788                               // movb         %al, (%rdi)
	LONG $0x000001b8; BYTE $0x00               // movl         $1, %eax

LBB11_2:
	WORD $0x0148; BYTE $0xc9                   // addq         %rcx, %rcx
	WORD $0xfe83; BYTE $0x64                   // cmpl         $100, %esi
	LONG $0x001b820f; WORD $0x0000             // jb           LBB11_4, $27(%rip)
	WORD $0x8941; BYTE $0xd0                   // movl         %edx, %r8d
	LONG $0x01c88349                           // orq          $1, %r8
	LONG $0x9b158d48; WORD $0x00a6; BYTE $0x00 // leaq         $42651(%rip), %rdx  /* _Digits(%rip) */
	LONG $0x10048a45                           // movb         (%r8,%rdx), %r8b
	WORD $0xc289                               // movl         %eax, %edx
	WORD $0xc083; BYTE $0x01                   // addl         $1, %eax
	LONG $0x17048844                           // movb         %r8b, (%rdi,%rdx)

LBB11_4:
	WORD $0xfe83; BYTE $0x0a                   // cmpl         $10, %esi
	LONG $0x0012820f; WORD $0x0000             // jb           LBB11_6, $18(%rip)
	LONG $0x7e158d48; WORD $0x00a6; BYTE $0x00 // leaq         $42622(%rip), %rdx  /* _Digits(%rip) */
	WORD $0x148a; BYTE $0x11                   // movb         (%rcx,%rdx), %dl
	WORD $0xc689                               // movl         %eax, %esi
	WORD $0xc083; BYTE $0x01                   // addl         $1, %eax
	WORD $0x1488; BYTE $0x37                   // movb         %dl, (%rdi,%rsi)

LBB11_6:
	WORD $0xc989                               // movl         %ecx, %ecx
	LONG $0x01c98348                           // orq          $1, %rcx
	LONG $0x66158d48; WORD $0x00a6; BYTE $0x00 // leaq         $42598(%rip), %rdx  /* _Digits(%rip) */
	WORD $0x0c8a; BYTE $0x11                   // movb         (%rcx,%rdx), %cl
	WORD $0xc289                               // movl         %eax, %edx
	WORD $0xc083; BYTE $0x01                   // addl         $1, %eax
	WORD $0x0c88; BYTE $0x17                   // movb         %cl, (%rdi,%rdx)
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq
	QUAD $0x9090909090909090; BYTE $0x90       // .p2align 4, 0x90

_u32toa_medium:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0xf089                               // movl         %esi, %eax
	LONG $0xb71759ba; BYTE $0xd1               // movl         $3518437209, %edx
	LONG $0xd0af0f48                           // imulq        %rax, %rdx
	LONG $0x2deac148                           // shrq         $45, %rdx
	LONG $0x2710ca69; WORD $0x0000             // imull        $10000, %edx, %ecx
	WORD $0x8941; BYTE $0xf0                   // movl         %esi, %r8d
	WORD $0x2941; BYTE $0xc8                   // subl         %ecx, %r8d
	LONG $0x83c86948; WORD $0x1bde; BYTE $0x43 // imulq        $1125899907, %rax, %rcx
	LONG $0x31e9c148                           // shrq         $49, %rcx
	WORD $0xe183; BYTE $0xfe                   // andl         $-2, %ecx
	LONG $0x1fc26948; WORD $0xeb85; BYTE $0x51 // imulq        $1374389535, %rdx, %rax
	LONG $0x25e8c148                           // shrq         $37, %rax
	WORD $0xc06b; BYTE $0x64                   // imull        $100, %eax, %eax
	WORD $0xc229                               // subl         %eax, %edx
	LONG $0x1fc8694d; WORD $0xeb85; BYTE $0x51 // imulq        $1374389535, %r8, %r9
	LONG $0x25e9c149                           // shrq         $37, %r9
	LONG $0x64c16b41                           // imull        $100, %r9d, %eax
	WORD $0x2941; BYTE $0xc0                   // subl         %eax, %r8d
	WORD $0xc031                               // xorl         %eax, %eax
	LONG $0x9680fe81; WORD $0x0098             // cmpl         $10000000, %esi
	LONG $0x0011820f; WORD $0x0000             // jb           LBB12_2, $17(%rip)
	LONG $0xec058d48; WORD $0x00a5; BYTE $0x00 // leaq         $42476(%rip), %rax  /* _Digits(%rip) */
	WORD $0x048a; BYTE $0x01                   // movb         (%rcx,%rax), %al
	WORD $0x0788                               // movb         %al, (%rdi)
	LONG $0x000001b8; BYTE $0x00               // movl         $1, %eax

LBB12_2:
	WORD $0x0148; BYTE $0xd2                   // addq         %rdx, %rdx
	WORD $0x014d; BYTE $0xc9                   // addq         %r9, %r9
	WORD $0x014d; BYTE $0xc0                   // addq         %r8, %r8
	LONG $0x4240fe81; WORD $0x000f             // cmpl         $1000000, %esi
	LONG $0x001b820f; WORD $0x0000             // jb           LBB12_4, $27(%rip)
	WORD $0x8941; BYTE $0xca                   // movl         %ecx, %r10d
	LONG $0x01ca8349                           // orq          $1, %r10
	LONG $0xbf0d8d48; WORD $0x00a5; BYTE $0x00 // leaq         $42431(%rip), %rcx  /* _Digits(%rip) */
	LONG $0x0a148a45                           // movb         (%r10,%rcx), %r10b
	WORD $0xc189                               // movl         %eax, %ecx
	WORD $0xc083; BYTE $0x01                   // addl         $1, %eax
	LONG $0x0f148844                           // movb         %r10b, (%rdi,%rcx)

LBB12_4:
	LONG $0x86a0fe81; WORD $0x0001             // cmpl         $100000, %esi
	LONG $0x0012820f; WORD $0x0000             // jb           LBB12_6, $18(%rip)
	LONG $0x9f0d8d48; WORD $0x00a5; BYTE $0x00 // leaq         $42399(%rip), %rcx  /* _Digits(%rip) */
	WORD $0x0c8a; BYTE $0x0a                   // movb         (%rdx,%rcx), %cl
	WORD $0xc689                               // movl         %eax, %esi
	WORD $0xc083; BYTE $0x01                   // addl         $1, %eax
	WORD $0x0c88; BYTE $0x37                   // movb         %cl, (%rdi,%rsi)

LBB12_6:
	WORD $0xd189                                             // movl         %edx, %ecx
	LONG $0x01c98348                                         // orq          $1, %rcx
	LONG $0x87158d48; WORD $0x00a5; BYTE $0x00               // leaq         $42375(%rip), %rdx  /* _Digits(%rip) */
	WORD $0x0c8a; BYTE $0x11                                 // movb         (%rcx,%rdx), %cl
	WORD $0xc689                                             // movl         %eax, %esi
	WORD $0x0c88; BYTE $0x37                                 // movb         %cl, (%rdi,%rsi)
	LONG $0x110c8a41                                         // movb         (%r9,%rdx), %cl
	LONG $0x01374c88                                         // movb         %cl, $1(%rdi,%rsi)
	WORD $0x8944; BYTE $0xc9                                 // movl         %r9d, %ecx
	LONG $0x01c98348                                         // orq          $1, %rcx
	WORD $0x0c8a; BYTE $0x11                                 // movb         (%rcx,%rdx), %cl
	LONG $0x02374c88                                         // movb         %cl, $2(%rdi,%rsi)
	LONG $0x100c8a41                                         // movb         (%r8,%rdx), %cl
	LONG $0x03374c88                                         // movb         %cl, $3(%rdi,%rsi)
	WORD $0x8944; BYTE $0xc1                                 // movl         %r8d, %ecx
	LONG $0x01c98348                                         // orq          $1, %rcx
	WORD $0x0c8a; BYTE $0x11                                 // movb         (%rcx,%rdx), %cl
	WORD $0xc083; BYTE $0x05                                 // addl         $5, %eax
	LONG $0x04374c88                                         // movb         %cl, $4(%rdi,%rsi)
	BYTE $0x5d                                               // popq         %rbp
	BYTE $0xc3                                               // retq
	QUAD $0x0000000000000000; LONG $0x00000000; WORD $0x0000 // .p2align 4, 0x00

LCPI13_0:
	QUAD $0x3030303030303030; QUAD $0x3030303030303030 // .space 16, '0000000000000000'

	// .p2align 4, 0x90
_u64toa_large_sse2:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5641                               // pushq        %r14
	BYTE $0x53                                 // pushq        %rbx
	LONG $0x10ec8348                           // subq         $16, %rsp
	WORD $0x8948; BYTE $0xf3                   // movq         %rsi, %rbx
	QUAD $0x77118461cefdb948; WORD $0xabcc     // movabsq      $-6067343680855748867, %rcx
	WORD $0x8948; BYTE $0xf0                   // movq         %rsi, %rax
	WORD $0xf748; BYTE $0xe1                   // mulq         %rcx
	WORD $0x8949; BYTE $0xfe                   // movq         %rdi, %r14
	LONG $0x1aeac148                           // shrq         $26, %rdx
	LONG $0xe100c269; WORD $0x05f5             // imull        $100000000, %edx, %eax
	WORD $0xc329                               // subl         %eax, %ebx
	WORD $0xd789                               // movl         %edx, %edi
	LONG $0x003c0ce8; BYTE $0x00               // callq        _itoa8_sse2, $15372(%rip)
	LONG $0x457ff9c5; BYTE $0xe0               // vmovdqa      %xmm0, $-32(%rbp)
	WORD $0xdf89                               // movl         %ebx, %edi
	LONG $0x003c00e8; BYTE $0x00               // callq        _itoa8_sse2, $15360(%rip)
	LONG $0x4d6ff9c5; BYTE $0xe0               // vmovdqa      $-32(%rbp), %xmm1
	LONG $0xc067f1c5                           // vpackuswb    %xmm0, %xmm1, %xmm0
	QUAD $0xffffff9f0dfcf9c5                   // vpaddb       $-97(%rip), %xmm0, %xmm1  /* LCPI13_0(%rip) */
	LONG $0xd2efe9c5                           // vpxor        %xmm2, %xmm2, %xmm2
	LONG $0xc274f9c5                           // vpcmpeqb     %xmm2, %xmm0, %xmm0
	LONG $0xc0d7f9c5                           // vpmovmskb    %xmm0, %eax
	WORD $0xd0f7                               // notl         %eax
	LONG $0x0080000d; BYTE $0x00               // orl          $32768, %eax
	WORD $0xbc0f; BYTE $0xc8                   // bsfl         %eax, %ecx
	LONG $0x000010b8; BYTE $0x00               // movl         $16, %eax
	WORD $0xc829                               // subl         %ecx, %eax
	LONG $0x04e1c148                           // shlq         $4, %rcx
	LONG $0x87158d48; WORD $0x00a5; BYTE $0x00 // leaq         $42375(%rip), %rdx  /* _VecShiftShuffles(%rip) */
	LONG $0x0071e2c4; WORD $0x1104             // vpshufb      (%rcx,%rdx), %xmm1, %xmm0
	LONG $0x7f7ac1c4; BYTE $0x06               // vmovdqu      %xmm0, (%r14)
	LONG $0x10c48348                           // addq         $16, %rsp
	BYTE $0x5b                                 // popq         %rbx
	WORD $0x5e41                               // popq         %r14
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq
	WORD $0x0000; BYTE $0x00                   // .p2align 4, 0x00

LCPI14_0:
	QUAD $0x3030303030303030; QUAD $0x3030303030303030 // .space 16, '0000000000000000'

	// .p2align 4, 0x90
_u64toa_xlarge_sse2:
	BYTE $0x55                             // pushq        %rbp
	WORD $0x8948; BYTE $0xe5               // movq         %rsp, %rbp
	WORD $0x5741                           // pushq        %r15
	WORD $0x5641                           // pushq        %r14
	WORD $0x5441                           // pushq        %r12
	BYTE $0x53                             // pushq        %rbx
	LONG $0x10ec8348                       // subq         $16, %rsp
	WORD $0x8949; BYTE $0xf7               // movq         %rsi, %r15
	WORD $0x8949; BYTE $0xfe               // movq         %rdi, %r14
	QUAD $0x652fb1137857b948; WORD $0x39a5 // movabsq      $4153837486827862103, %rcx
	WORD $0x8948; BYTE $0xf0               // movq         %rsi, %rax
	WORD $0xf748; BYTE $0xe1               // mulq         %rcx
	WORD $0x8948; BYTE $0xd3               // movq         %rdx, %rbx
	LONG $0x33ebc148                       // shrq         $51, %rbx
	QUAD $0x86f26fc10000b848; WORD $0x0023 // movabsq      $10000000000000000, %rax
	LONG $0xc3af0f48                       // imulq        %rbx, %rax
	WORD $0x2949; BYTE $0xc7               // subq         %rax, %r15
	WORD $0xfb83; BYTE $0x09               // cmpl         $9, %ebx
	LONG $0x0015870f; WORD $0x0000         // ja           LBB14_2, $21(%rip)
	WORD $0x894c; BYTE $0xf7               // movq         %r14, %rdi
	WORD $0xde89                           // movl         %ebx, %esi
	LONG $0x003bb0e8; BYTE $0x00           // callq        _itoa1, $15280(%rip)
	LONG $0x0001bc41; WORD $0x0000         // movl         $1, %r12d
	LONG $0x00007ae9; BYTE $0x00           // jmp          LBB14_8, $122(%rip)

LBB14_2:
	WORD $0xfb83; BYTE $0x63       // cmpl         $99, %ebx
	LONG $0x000c870f; WORD $0x0000 // ja           LBB14_4, $12(%rip)
	WORD $0xdb01                   // addl         %ebx, %ebx
	WORD $0x894c; BYTE $0xf7       // movq         %r14, %rdi
	WORD $0xf631                   // xorl         %esi, %esi
	LONG $0x00005be9; BYTE $0x00   // jmp          LBB14_7, $91(%rip)

LBB14_4:
	WORD $0x8941; BYTE $0xdc                   // movl         %ebx, %r12d
	LONG $0x1fd46949; WORD $0xeb85; BYTE $0x51 // imulq        $1374389535, %r12, %rdx
	LONG $0x25eac148                           // shrq         $37, %rdx
	LONG $0x03e7fb81; WORD $0x0000             // cmpl         $999, %ebx
	LONG $0x0029870f; WORD $0x0000             // ja           LBB14_6, $41(%rip)
	WORD $0x894c; BYTE $0xf7                   // movq         %r14, %rdi
	WORD $0xd689                               // movl         %edx, %esi
	LONG $0x003b6ce8; BYTE $0x00               // callq        _itoa1, $15212(%rip)
	LONG $0x1fc46949; WORD $0xeb85; BYTE $0x51 // imulq        $1374389535, %r12, %rax
	LONG $0x25e8c148                           // shrq         $37, %rax
	WORD $0xc06b; BYTE $0x64                   // imull        $100, %eax, %eax
	WORD $0xc329                               // subl         %eax, %ebx
	WORD $0xdb01                               // addl         %ebx, %ebx
	WORD $0x894c; BYTE $0xf7                   // movq         %r14, %rdi
	LONG $0x000001be; BYTE $0x00               // movl         $1, %esi
	LONG $0x000018e9; BYTE $0x00               // jmp          LBB14_7, $24(%rip)

LBB14_6:
	WORD $0xc26b; BYTE $0x64     // imull        $100, %edx, %eax
	WORD $0xc329                 // subl         %eax, %ebx
	WORD $0xd201                 // addl         %edx, %edx
	WORD $0x894c; BYTE $0xf7     // movq         %r14, %rdi
	WORD $0xf631                 // xorl         %esi, %esi
	LONG $0x003b4ce8; BYTE $0x00 // callq        _itoa2, $15180(%rip)
	WORD $0xdb01                 // addl         %ebx, %ebx
	WORD $0x894c; BYTE $0xf7     // movq         %r14, %rdi
	WORD $0xc689                 // movl         %eax, %esi

LBB14_7:
	WORD $0xda89                 // movl         %ebx, %edx
	LONG $0x003b3ee8; BYTE $0x00 // callq        _itoa2, $15166(%rip)
	WORD $0x8941; BYTE $0xc4     // movl         %eax, %r12d

LBB14_8:
	QUAD $0x77118461cefdb948; WORD $0xabcc                 // movabsq      $-6067343680855748867, %rcx
	WORD $0x894c; BYTE $0xf8                               // movq         %r15, %rax
	WORD $0xf748; BYTE $0xe1                               // mulq         %rcx
	WORD $0x8948; BYTE $0xd3                               // movq         %rdx, %rbx
	LONG $0x1aebc148                                       // shrq         $26, %rbx
	WORD $0xdf89                                           // movl         %ebx, %edi
	LONG $0x003aade8; BYTE $0x00                           // callq        _itoa8_sse2, $15021(%rip)
	LONG $0x457ff9c5; BYTE $0xd0                           // vmovdqa      %xmm0, $-48(%rbp)
	LONG $0xe100c369; WORD $0x05f5                         // imull        $100000000, %ebx, %eax
	WORD $0x2941; BYTE $0xc7                               // subl         %eax, %r15d
	WORD $0x8944; BYTE $0xff                               // movl         %r15d, %edi
	LONG $0x003a97e8; BYTE $0x00                           // callq        _itoa8_sse2, $14999(%rip)
	LONG $0x4d6ff9c5; BYTE $0xd0                           // vmovdqa      $-48(%rbp), %xmm1
	LONG $0xc067f1c5                                       // vpackuswb    %xmm0, %xmm1, %xmm0
	QUAD $0xfffffed605fcf9c5                               // vpaddb       $-298(%rip), %xmm0, %xmm0  /* LCPI14_0(%rip) */
	WORD $0x6349; BYTE $0xc4                               // movslq       %r12d, %rax
	LONG $0x7f7ac1c4; WORD $0x0604                         // vmovdqu      %xmm0, (%r14,%rax)
	WORD $0xc083; BYTE $0x10                               // addl         $16, %eax
	LONG $0x10c48348                                       // addq         $16, %rsp
	BYTE $0x5b                                             // popq         %rbx
	WORD $0x5c41                                           // popq         %r12
	WORD $0x5e41                                           // popq         %r14
	WORD $0x5f41                                           // popq         %r15
	BYTE $0x5d                                             // popq         %rbp
	BYTE $0xc3                                             // retq
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

_quote:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	LONG $0x38ec8348                           // subq         $56, %rsp
	WORD $0x8949; BYTE $0xcf                   // movq         %rcx, %r15
	WORD $0x8b4c; BYTE $0x31                   // movq         (%rcx), %r14
	LONG $0x01c0f641                           // testb        $1, %r8b
	LONG $0x8e058d48; WORD $0x00a4; BYTE $0x00 // leaq         $42126(%rip), %rax  /* __SingleQuoteTab(%rip) */
	LONG $0x870d8d48; WORD $0x00b4; BYTE $0x00 // leaq         $46215(%rip), %rcx  /* __DoubleQuoteTab(%rip) */
	LONG $0xc8440f48                           // cmoveq       %rax, %rcx
	QUAD $0x00000000f5048d48                   // leaq         (,%rsi,8), %rax
	WORD $0x3949; BYTE $0xc6                   // cmpq         %rax, %r14
	LONG $0x015e8d0f; WORD $0x0000             // jge          LBB15_18, $350(%rip)
	LONG $0xff478d48                           // leaq         $-1(%rdi), %rax
	LONG $0xa8458948                           // movq         %rax, $-88(%rbp)
	WORD $0x8949; BYTE $0xfd                   // movq         %rdi, %r13
	WORD $0x8948; BYTE $0xd0                   // movq         %rdx, %rax
	LONG $0xc8558948                           // movq         %rdx, $-56(%rbp)
	WORD $0x8948; BYTE $0xd3                   // movq         %rdx, %rbx
	LONG $0xb87d8948                           // movq         %rdi, $-72(%rbp)
	LONG $0xd07d894c                           // movq         %r15, $-48(%rbp)
	LONG $0xb04d8948                           // movq         %rcx, $-80(%rbp)
	LONG $0x000037e9; BYTE $0x00               // jmp          LBB15_2, $55(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090 // .p2align 4, 0x90

LBB15_4:
	LONG $0xc84d8b48         // movq         $-56(%rbp), %rcx
	WORD $0x0148; BYTE $0xc1 // addq         %rax, %rcx
	WORD $0xf748; BYTE $0xd1 // notq         %rcx
	WORD $0x0148; BYTE $0xd9 // addq         %rbx, %rcx
	WORD $0x8949; BYTE $0x0f // movq         %rcx, (%r15)
	LONG $0xb8458b4c         // movq         $-72(%rbp), %r8
	WORD $0x294d; BYTE $0xe8 // subq         %r13, %r8
	WORD $0x0149; BYTE $0xc0 // addq         %rax, %r8
	WORD $0xc031             // xorl         %eax, %eax
	WORD $0x894c; BYTE $0xe6 // movq         %r12, %rsi

LBB15_15:
	LONG $0xc045894c               // movq         %r8, $-64(%rbp)
	WORD $0xc084                   // testb        %al, %al
	LONG $0x0122840f; WORD $0x0000 // je           LBB15_17, $290(%rip)

LBB15_2:
	WORD $0x8548; BYTE $0xf6                           // testq        %rsi, %rsi
	LONG $0x010b840f; WORD $0x0000                     // je           LBB15_16, $267(%rip)
	WORD $0x894c; BYTE $0xef                           // movq         %r13, %rdi
	WORD $0x8949; BYTE $0xf4                           // movq         %rsi, %r12
	WORD $0x8948; BYTE $0xda                           // movq         %rbx, %rdx
	WORD $0x894c; BYTE $0xf1                           // movq         %r14, %rcx
	LONG $0x00037be8; BYTE $0x00                       // callq        _memcchr_quote, $891(%rip)
	WORD $0x8548; BYTE $0xc0                           // testq        %rax, %rax
	LONG $0xffb2880f; WORD $0xffff                     // js           LBB15_4, $-78(%rip)
	WORD $0x894c; BYTE $0xfa                           // movq         %r15, %rdx
	LONG $0x283c8d4e                                   // leaq         (%rax,%r13), %r15
	WORD $0x0148; BYTE $0xc3                           // addq         %rax, %rbx
	WORD $0x2949; BYTE $0xc6                           // subq         %rax, %r14
	WORD $0x2949; BYTE $0xc4                           // subq         %rax, %r12
	WORD $0x894c; BYTE $0xe6                           // movq         %r12, %rsi
	LONG $0xb04d8b48                                   // movq         $-80(%rbp), %rcx
	LONG $0x0095840f; WORD $0x0000                     // je           LBB15_6, $149(%rip)
	WORD $0x0149; BYTE $0xc5                           // addq         %rax, %r13
	LONG $0xa8458b4c                                   // movq         $-88(%rbp), %r8
	WORD $0x294d; BYTE $0xe8                           // subq         %r13, %r8
	QUAD $0x9090909090909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB15_8:
	LONG $0x07b60f41               // movzbl       (%r15), %eax
	LONG $0x04e0c148               // shlq         $4, %rax
	LONG $0x01148b48               // movq         (%rcx,%rax), %rdx
	WORD $0xd285                   // testl        %edx, %edx
	LONG $0x0051840f; WORD $0x0000 // je           LBB15_13, $81(%rip)
	WORD $0x634c; BYTE $0xea       // movslq       %edx, %r13
	WORD $0x894d; BYTE $0xf4       // movq         %r14, %r12
	WORD $0x294d; BYTE $0xec       // subq         %r13, %r12
	LONG $0x006e8c0f; WORD $0x0000 // jl           LBB15_10, $110(%rip)
	LONG $0xa0758948               // movq         %rsi, $-96(%rbp)
	LONG $0x01348d48               // leaq         (%rcx,%rax), %rsi
	LONG $0x08c68348               // addq         $8, %rsi
	WORD $0x894d; BYTE $0xc6       // movq         %r8, %r14
	WORD $0x8948; BYTE $0xdf       // movq         %rbx, %rdi
	WORD $0x894c; BYTE $0xea       // movq         %r13, %rdx
	LONG $0x0004a3e8; BYTE $0x00   // callq        _memcpy_p8, $1187(%rip)
	WORD $0x894d; BYTE $0xf0       // movq         %r14, %r8
	LONG $0xb04d8b48               // movq         $-80(%rbp), %rcx
	LONG $0xa0758b48               // movq         $-96(%rbp), %rsi
	LONG $0x01c78349               // addq         $1, %r15
	WORD $0x014c; BYTE $0xeb       // addq         %r13, %rbx
	LONG $0xffc08349               // addq         $-1, %r8
	WORD $0x894d; BYTE $0xe6       // movq         %r12, %r14
	LONG $0xffc68348               // addq         $-1, %rsi
	LONG $0xffa0850f; WORD $0xffff // jne          LBB15_8, $-96(%rip)
	WORD $0x894d; BYTE $0xe6       // movq         %r12, %r14
	WORD $0xf631                   // xorl         %esi, %esi

LBB15_13:
	WORD $0x894d; BYTE $0xfd                           // movq         %r15, %r13
	LONG $0xc0458b4c                                   // movq         $-64(%rbp), %r8
	LONG $0xd07d8b4c                                   // movq         $-48(%rbp), %r15
	LONG $0x000015e9; BYTE $0x00                       // jmp          LBB15_14, $21(%rip)
	QUAD $0x9090909090909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB15_6:
	WORD $0x894d; BYTE $0xfd // movq         %r15, %r13
	LONG $0xc0458b4c         // movq         $-64(%rbp), %r8
	WORD $0x8949; BYTE $0xd7 // movq         %rdx, %r15

LBB15_14:
	WORD $0x01b0                 // movb         $1, %al
	LONG $0xffff0ee9; BYTE $0xff // jmp          LBB15_15, $-242(%rip)

LBB15_10:
	WORD $0x8948; BYTE $0xd8     // movq         %rbx, %rax
	LONG $0xc8452b48             // subq         $-56(%rbp), %rax
	LONG $0xd0558b48             // movq         $-48(%rbp), %rdx
	WORD $0x8948; BYTE $0x02     // movq         %rax, (%rdx)
	WORD $0xc031                 // xorl         %eax, %eax
	WORD $0x894d; BYTE $0xfd     // movq         %r15, %r13
	WORD $0x8949; BYTE $0xd7     // movq         %rdx, %r15
	LONG $0xfffef3e9; BYTE $0xff // jmp          LBB15_15, $-269(%rip)

LBB15_18:
	WORD $0x8948; BYTE $0xf3     // movq         %rsi, %rbx
	LONG $0x00002ce8; BYTE $0x00 // callq        _memcchr_quote_unsafe, $44(%rip)
	WORD $0x8949; BYTE $0x07     // movq         %rax, (%r15)
	WORD $0x8949; BYTE $0xd8     // movq         %rbx, %r8
	LONG $0x00000ee9; BYTE $0x00 // jmp          LBB15_17, $14(%rip)

LBB15_16:
	LONG $0xc85d2b48         // subq         $-56(%rbp), %rbx
	WORD $0x8949; BYTE $0x1f // movq         %rbx, (%r15)
	LONG $0xb86d2b4c         // subq         $-72(%rbp), %r13
	WORD $0x894d; BYTE $0xe8 // movq         %r13, %r8

LBB15_17:
	WORD $0x894c; BYTE $0xc0 // movq         %r8, %rax
	LONG $0x38c48348         // addq         $56, %rsp
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq
	BYTE $0x90               // .p2align 4, 0x90

_memcchr_quote_unsafe:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	LONG $0x18ec8348                           // subq         $24, %rsp
	WORD $0x8949; BYTE $0xcf                   // movq         %rcx, %r15
	WORD $0x8949; BYTE $0xd4                   // movq         %rdx, %r12
	WORD $0x8949; BYTE $0xf5                   // movq         %rsi, %r13
	WORD $0x8948; BYTE $0xfb                   // movq         %rdi, %rbx
	LONG $0xbc358d4c; WORD $0x00c2; BYTE $0x00 // leaq         $49852(%rip), %r14  /* __EscTab(%rip) */
	LONG $0xd0558948                           // movq         %rdx, $-48(%rbp)

LBB16_1:
	LONG $0x10fd8349               // cmpq         $16, %r13
	LONG $0x00748d0f; WORD $0x0000 // jge          LBB16_2, $116(%rip)

LBB16_9:
	LONG $0x08fd8349               // cmpq         $8, %r13
	LONG $0x00c48c0f; WORD $0x0000 // jl           LBB16_21, $196(%rip)
	WORD $0x8948; BYTE $0xdf       // movq         %rbx, %rdi
	LONG $0x00395ce8; BYTE $0x00   // callq        _escape_mask4, $14684(%rip)
	WORD $0x8b48; BYTE $0x0b       // movq         (%rbx), %rcx
	LONG $0x240c8949               // movq         %rcx, (%r12)
	WORD $0xc084                   // testb        %al, %al
	LONG $0x012d850f; WORD $0x0000 // jne          LBB16_11, $301(%rip)
	LONG $0x047b8d48               // leaq         $4(%rbx), %rdi
	LONG $0x003944e8; BYTE $0x00   // callq        _escape_mask4, $14660(%rip)
	WORD $0xc084                   // testb        %al, %al
	LONG $0x0135850f; WORD $0x0000 // jne          LBB16_13, $309(%rip)
	LONG $0x08c48349               // addq         $8, %r12
	LONG $0x08c38348               // addq         $8, %rbx
	LONG $0xf8c58349               // addq         $-8, %r13
	WORD $0xc031                   // xorl         %eax, %eax

LBB16_15:
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x0086840f; WORD $0x0000 // je           LBB16_21, $134(%rip)
	WORD $0xf883; BYTE $0x06       // cmpl         $6, %eax
	LONG $0x0170840f; WORD $0x0000 // je           LBB16_17, $368(%rip)
	LONG $0x0001bae9; BYTE $0x00   // jmp          LBB16_31, $442(%rip)
	QUAD $0x9090909090909090       // .p2align 4, 0x90

LBB16_5:
	LONG $0x10c38348               // addq         $16, %rbx
	LONG $0x10c48349               // addq         $16, %r12
	LONG $0xf0c58349               // addq         $-16, %r13
	WORD $0xc031                   // xorl         %eax, %eax
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x004c850f; WORD $0x0000 // jne          LBB16_7, $76(%rip)

LBB16_2:
	LONG $0x10fd8349               // cmpq         $16, %r13
	LONG $0xff828c0f; WORD $0xffff // jl           LBB16_9, $-126(%rip)
	LONG $0x036ffac5               // vmovdqu      (%rbx), %xmm0
	LONG $0x457ff9c5; BYTE $0xc0   // vmovdqa      %xmm0, $-64(%rbp)
	LONG $0x0038a2e8; BYTE $0x00   // callq        __mm_find_quote, $14498(%rip)
	LONG $0x4d28f8c5; BYTE $0xc0   // vmovaps      $-64(%rbp), %xmm1
	LONG $0x1178c1c4; WORD $0x240c // vmovups      %xmm1, (%r12)
	LONG $0xc0d7f9c5               // vpmovmskb    %xmm0, %eax
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0xffbb840f; WORD $0xffff // je           LBB16_5, $-69(%rip)
	LONG $0xc0bc0f66               // bsfw         %ax, %ax
	WORD $0xb70f; BYTE $0xc0       // movzwl       %ax, %eax
	WORD $0x0148; BYTE $0xc3       // addq         %rax, %rbx
	WORD $0x2949; BYTE $0xc5       // subq         %rax, %r13
	WORD $0x0149; BYTE $0xc4       // addq         %rax, %r12
	LONG $0x000006b8; BYTE $0x00   // movl         $6, %eax
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0xffb4840f; WORD $0xffff // je           LBB16_2, $-76(%rip)

LBB16_7:
	WORD $0xf883; BYTE $0x06       // cmpl         $6, %eax
	LONG $0x00f8840f; WORD $0x0000 // je           LBB16_17, $248(%rip)
	LONG $0x000142e9; BYTE $0x00   // jmp          LBB16_8, $322(%rip)

	// .p2align 4, 0x90
LBB16_21:
	LONG $0x04fd8349               // cmpq         $4, %r13
	LONG $0x00358c0f; WORD $0x0000 // jl           LBB16_27, $53(%rip)
	WORD $0x8948; BYTE $0xdf       // movq         %rbx, %rdi
	LONG $0x00388ee8; BYTE $0x00   // callq        _escape_mask4, $14478(%rip)
	WORD $0x0b8b                   // movl         (%rbx), %ecx
	LONG $0x240c8941               // movl         %ecx, (%r12)
	WORD $0xc084                   // testb        %al, %al
	LONG $0x009e850f; WORD $0x0000 // jne          LBB16_23, $158(%rip)
	LONG $0x04c48349               // addq         $4, %r12
	LONG $0x04c38348               // addq         $4, %rbx
	LONG $0xfcc58349               // addq         $-4, %r13
	WORD $0xc031                   // xorl         %eax, %eax
	WORD $0xf883; BYTE $0x06       // cmpl         $6, %eax
	LONG $0x00bc840f; WORD $0x0000 // je           LBB16_17, $188(%rip)

LBB16_26:
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x0103850f; WORD $0x0000 // jne          LBB16_31, $259(%rip)

LBB16_27:
	WORD $0x854d; BYTE $0xed       // testq        %r13, %r13
	LONG $0x00f18e0f; WORD $0x0000 // jle          LBB16_30, $241(%rip)
	QUAD $0x9090909090909090       // .p2align 4, 0x90

LBB16_28:
	WORD $0xb60f; BYTE $0x03       // movzbl       (%rbx), %eax
	LONG $0x303c8042; BYTE $0x00   // cmpb         $0, (%rax,%r14)
	LONG $0x0095850f; WORD $0x0000 // jne          LBB16_17, $149(%rip)
	LONG $0x01c38348               // addq         $1, %rbx
	LONG $0x24048841               // movb         %al, (%r12)
	LONG $0x01c48349               // addq         $1, %r12
	LONG $0xff458d49               // leaq         $-1(%r13), %rax
	LONG $0x01fd8349               // cmpq         $1, %r13
	WORD $0x8949; BYTE $0xc5       // movq         %rax, %r13
	LONG $0xffd58f0f; WORD $0xffff // jg           LBB16_28, $-43(%rip)
	LONG $0x0000b9e9; BYTE $0x00   // jmp          LBB16_30, $185(%rip)

LBB16_11:
	WORD $0xb60f; BYTE $0xc0     // movzbl       %al, %eax
	WORD $0xbc0f; BYTE $0xc0     // bsfl         %eax, %eax
	WORD $0x0148; BYTE $0xc3     // addq         %rax, %rbx
	WORD $0x2949; BYTE $0xc5     // subq         %rax, %r13
	WORD $0x0149; BYTE $0xc4     // addq         %rax, %r12
	LONG $0x000006b8; BYTE $0x00 // movl         $6, %eax
	LONG $0xfffed9e9; BYTE $0xff // jmp          LBB16_15, $-295(%rip)

LBB16_13:
	WORD $0xb60f; BYTE $0xc0     // movzbl       %al, %eax
	WORD $0xbc0f; BYTE $0xc0     // bsfl         %eax, %eax
	LONG $0x04488d48             // leaq         $4(%rax), %rcx
	WORD $0x0148; BYTE $0xc3     // addq         %rax, %rbx
	LONG $0x04c38348             // addq         $4, %rbx
	WORD $0x2949; BYTE $0xcd     // subq         %rcx, %r13
	WORD $0x0149; BYTE $0xc4     // addq         %rax, %r12
	LONG $0x04c48349             // addq         $4, %r12
	LONG $0x000006b8; BYTE $0x00 // movl         $6, %eax
	LONG $0xfffeb4e9; BYTE $0xff // jmp          LBB16_15, $-332(%rip)

LBB16_23:
	WORD $0xb60f; BYTE $0xc0       // movzbl       %al, %eax
	WORD $0xbc0f; BYTE $0xc0       // bsfl         %eax, %eax
	WORD $0x0148; BYTE $0xc3       // addq         %rax, %rbx
	WORD $0x2949; BYTE $0xc5       // subq         %rax, %r13
	WORD $0x0149; BYTE $0xc4       // addq         %rax, %r12
	LONG $0x000006b8; BYTE $0x00   // movl         $6, %eax
	WORD $0xf883; BYTE $0x06       // cmpl         $6, %eax
	LONG $0xff5c850f; WORD $0xffff // jne          LBB16_26, $-164(%rip)
	LONG $0x000013e9; BYTE $0x00   // jmp          LBB16_17, $19(%rip)

	// .p2align 4, 0x90
LBB16_19:
	LONG $0x01c38348               // addq         $1, %rbx
	WORD $0x0149; BYTE $0xcc       // addq         %rcx, %r12
	LONG $0xffc58349               // addq         $-1, %r13
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x003d850f; WORD $0x0000 // jne          LBB16_20, $61(%rip)

LBB16_17:
	WORD $0xb60f; BYTE $0x03       // movzbl       (%rbx), %eax
	LONG $0x04e0c148               // shlq         $4, %rax
	LONG $0x070c6349               // movslq       (%r15,%rax), %rcx
	LONG $0x07448b49; BYTE $0x08   // movq         $8(%r15,%rax), %rax
	LONG $0x24048949               // movq         %rax, (%r12)
	LONG $0x000009b8; BYTE $0x00   // movl         $9, %eax
	LONG $0x02fd8349               // cmpq         $2, %r13
	LONG $0xffca8c0f; WORD $0xffff // jl           LBB16_19, $-54(%rip)
	LONG $0x0153b60f               // movzbl       $1(%rbx), %edx
	WORD $0xc031                   // xorl         %eax, %eax
	LONG $0x323c8042; BYTE $0x00   // cmpb         $0, (%rdx,%r14)
	WORD $0x940f; BYTE $0xc0       // sete         %al
	WORD $0xc001                   // addl         %eax, %eax
	LONG $0xffffb5e9; BYTE $0xff   // jmp          LBB16_19, $-75(%rip)
	LONG $0x90909090; BYTE $0x90   // .p2align 4, 0x90

LBB16_20:
	WORD $0xf883; BYTE $0x02       // cmpl         $2, %eax
	LONG $0xfdef840f; WORD $0xffff // je           LBB16_1, $-529(%rip)

LBB16_30:
	LONG $0xd0652b4c             // subq         $-48(%rbp), %r12
	LONG $0x000000e9; BYTE $0x00 // jmp          LBB16_31, $0(%rip)

LBB16_8:
LBB16_31:
	WORD $0x894c; BYTE $0xe0                   // movq         %r12, %rax
	LONG $0x18c48348                           // addq         $24, %rsp
	BYTE $0x5b                                 // popq         %rbx
	WORD $0x5c41                               // popq         %r12
	WORD $0x5d41                               // popq         %r13
	WORD $0x5e41                               // popq         %r14
	WORD $0x5f41                               // popq         %r15
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq
	QUAD $0x9090909090909090; LONG $0x90909090 // .p2align 4, 0x90

_memcchr_quote:
	BYTE $0x55                             // pushq        %rbp
	WORD $0x8948; BYTE $0xe5               // movq         %rsp, %rbp
	WORD $0x5741                           // pushq        %r15
	WORD $0x5641                           // pushq        %r14
	WORD $0x5541                           // pushq        %r13
	WORD $0x5441                           // pushq        %r12
	BYTE $0x53                             // pushq        %rbx
	LONG $0x18ec8348                       // subq         $24, %rsp
	WORD $0x8949; BYTE $0xcf               // movq         %rcx, %r15
	WORD $0x8949; BYTE $0xd4               // movq         %rdx, %r12
	WORD $0x8949; BYTE $0xf5               // movq         %rsi, %r13
	WORD $0x8949; BYTE $0xfe               // movq         %rdi, %r14
	LONG $0xd07d8948                       // movq         %rdi, $-48(%rbp)
	LONG $0x000023e9; BYTE $0x00           // jmp          LBB17_1, $35(%rip)
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

LBB17_5:
	LONG $0x10c68349 // addq         $16, %r14
	LONG $0x10c48349 // addq         $16, %r12
	LONG $0xf0c58349 // addq         $-16, %r13
	LONG $0xf0c78349 // addq         $-16, %r15

LBB17_6:
	WORD $0x8566; BYTE $0xc0       // testw        %ax, %ax
	LONG $0x013a850f; WORD $0x0000 // jne          LBB17_23, $314(%rip)

LBB17_1:
	LONG $0x10fd8349               // cmpq         $16, %r13
	LONG $0x00468c0f; WORD $0x0000 // jl           LBB17_7, $70(%rip)
	LONG $0x10ff8349               // cmpq         $16, %r15
	LONG $0x003c8c0f; WORD $0x0000 // jl           LBB17_7, $60(%rip)
	LONG $0x6f7ac1c4; BYTE $0x06   // vmovdqu      (%r14), %xmm0
	LONG $0x457ff9c5; BYTE $0xc0   // vmovdqa      %xmm0, $-64(%rbp)
	LONG $0x003694e8; BYTE $0x00   // callq        __mm_find_quote, $13972(%rip)
	LONG $0x4d28f8c5; BYTE $0xc0   // vmovaps      $-64(%rbp), %xmm1
	LONG $0x1178c1c4; WORD $0x240c // vmovups      %xmm1, (%r12)
	LONG $0xc0d7f9c5               // vpmovmskb    %xmm0, %eax
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0xffad840f; WORD $0xffff // je           LBB17_5, $-83(%rip)
	WORD $0x894c; BYTE $0xf1       // movq         %r14, %rcx
	LONG $0xd04d2b48               // subq         $-48(%rbp), %rcx
	LONG $0xd0bc0f66               // bsfw         %ax, %dx
	WORD $0xb70f; BYTE $0xda       // movzwl       %dx, %ebx
	WORD $0x0148; BYTE $0xcb       // addq         %rcx, %rbx
	LONG $0xffffa7e9; BYTE $0xff   // jmp          LBB17_6, $-89(%rip)

LBB17_7:
	LONG $0x0ffd8349               // cmpq         $15, %r13
	LONG $0x003f8e0f; WORD $0x0000 // jle          LBB17_8, $63(%rip)
	LONG $0x6f7ac1c4; BYTE $0x06   // vmovdqu      (%r14), %xmm0
	LONG $0x003653e8; BYTE $0x00   // callq        __mm_find_quote, $13907(%rip)
	LONG $0xc0d7f9c5               // vpmovmskb    %xmm0, %eax
	LONG $0x0100000d; BYTE $0x00   // orl          $65536, %eax
	WORD $0xbc0f; BYTE $0xd8       // bsfl         %eax, %ebx
	WORD $0x894c; BYTE $0xe7       // movq         %r12, %rdi
	WORD $0x894c; BYTE $0xf6       // movq         %r14, %rsi
	WORD $0x3949; BYTE $0xdf       // cmpq         %rbx, %r15
	LONG $0x00948d0f; WORD $0x0000 // jge          LBB17_14, $148(%rip)
	WORD $0x894c; BYTE $0xfa       // movq         %r15, %rdx
	LONG $0x0036b0e8; BYTE $0x00   // callq        _memcpy_p16, $14000(%rip)
	WORD $0x014d; BYTE $0xf7       // addq         %r14, %r15
	WORD $0xf749; BYTE $0xd7       // notq         %r15
	LONG $0xd07d034c               // addq         $-48(%rbp), %r15
	WORD $0x894c; BYTE $0xfb       // movq         %r15, %rbx
	LONG $0x0000a1e9; BYTE $0x00   // jmp          LBB17_23, $161(%rip)

LBB17_8:
	WORD $0x854d; BYTE $0xed                   // testq        %r13, %r13
	LONG $0x005c8e0f; WORD $0x0000             // jle          LBB17_19, $92(%rip)
	WORD $0x854d; BYTE $0xff                   // testq        %r15, %r15
	LONG $0x00538e0f; WORD $0x0000             // jle          LBB17_19, $83(%rip)
	WORD $0xc031                               // xorl         %eax, %eax
	LONG $0x83158d48; WORD $0x009f; BYTE $0x00 // leaq         $40835(%rip), %rdx  /* __SingleQuoteTab(%rip) */
	WORD $0xc931                               // xorl         %ecx, %ecx
	BYTE $0x90                                 // .p2align 4, 0x90

LBB17_11:
	LONG $0x34b60f41; BYTE $0x06   // movzbl       (%r14,%rax), %esi
	WORD $0x8948; BYTE $0xf7       // movq         %rsi, %rdi
	LONG $0x04e7c148               // shlq         $4, %rdi
	LONG $0x173c8348; BYTE $0x00   // cmpq         $0, (%rdi,%rdx)
	LONG $0x0062850f; WORD $0x0000 // jne          LBB17_12, $98(%rip)
	LONG $0x293c8d4a               // leaq         (%rcx,%r13), %rdi
	LONG $0x04348841               // movb         %sil, (%r12,%rax)
	LONG $0xff718d48               // leaq         $-1(%rcx), %rsi
	LONG $0x02ff8348               // cmpq         $2, %rdi
	LONG $0x00148c0f; WORD $0x0000 // jl           LBB17_18, $20(%rip)
	WORD $0x014c; BYTE $0xf9       // addq         %r15, %rcx
	LONG $0x01c08348               // addq         $1, %rax
	LONG $0x01f98348               // cmpq         $1, %rcx
	WORD $0x8948; BYTE $0xf1       // movq         %rsi, %rcx
	LONG $0xffbf8f0f; WORD $0xffff // jg           LBB17_11, $-65(%rip)

LBB17_18:
	WORD $0x2949; BYTE $0xf6 // subq         %rsi, %r14
	WORD $0x0149; BYTE $0xf5 // addq         %rsi, %r13

LBB17_19:
	WORD $0x854d; BYTE $0xed       // testq        %r13, %r13
	LONG $0x0020840f; WORD $0x0000 // je           LBB17_20, $32(%rip)
	WORD $0xf749; BYTE $0xd6       // notq         %r14
	LONG $0xd075034c               // addq         $-48(%rbp), %r14
	LONG $0x000024e9; BYTE $0x00   // jmp          LBB17_22, $36(%rip)

LBB17_14:
	WORD $0x8948; BYTE $0xda     // movq         %rbx, %rdx
	LONG $0x00361ce8; BYTE $0x00 // callq        _memcpy_p16, $13852(%rip)
	LONG $0xd0752b4c             // subq         $-48(%rbp), %r14
	WORD $0x0149; BYTE $0xde     // addq         %rbx, %r14
	LONG $0x000010e9; BYTE $0x00 // jmp          LBB17_22, $16(%rip)

LBB17_20:
	LONG $0xd0752b4c             // subq         $-48(%rbp), %r14
	LONG $0x000007e9; BYTE $0x00 // jmp          LBB17_22, $7(%rip)

LBB17_12:
	LONG $0xd0752b4c         // subq         $-48(%rbp), %r14
	WORD $0x2949; BYTE $0xce // subq         %rcx, %r14

LBB17_22:
	WORD $0x894c; BYTE $0xf3 // movq         %r14, %rbx

LBB17_23:
	WORD $0x8948; BYTE $0xd8                           // movq         %rbx, %rax
	LONG $0x18c48348                                   // addq         $24, %rsp
	BYTE $0x5b                                         // popq         %rbx
	WORD $0x5c41                                       // popq         %r12
	WORD $0x5d41                                       // popq         %r13
	WORD $0x5e41                                       // popq         %r14
	WORD $0x5f41                                       // popq         %r15
	BYTE $0x5d                                         // popq         %rbp
	BYTE $0xc3                                         // retq
	QUAD $0x9090909090909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

_memcpy_p8:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	LONG $0x04fa8348               // cmpq         $4, %rdx
	LONG $0x00198d0f; WORD $0x0000 // jge          LBB18_1, $25(%rip)
	LONG $0x02fa8348               // cmpq         $2, %rdx
	LONG $0x00298d0f; WORD $0x0000 // jge          LBB18_3, $41(%rip)

LBB18_4:
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0x00048e0f; WORD $0x0000 // jle          LBB18_6, $4(%rip)

LBB18_5:
	WORD $0x068a // movb         (%rsi), %al
	WORD $0x0788 // movb         %al, (%rdi)

LBB18_6:
	BYTE $0x5d // popq         %rbp
	BYTE $0xc3 // retq

LBB18_1:
	WORD $0x068b                   // movl         (%rsi), %eax
	WORD $0x0789                   // movl         %eax, (%rdi)
	LONG $0x04c68348               // addq         $4, %rsi
	LONG $0x04c78348               // addq         $4, %rdi
	LONG $0xfcc28348               // addq         $-4, %rdx
	LONG $0x02fa8348               // cmpq         $2, %rdx
	LONG $0xffd78c0f; WORD $0xffff // jl           LBB18_4, $-41(%rip)

LBB18_3:
	WORD $0xb70f; BYTE $0x06                                             // movzwl       (%rsi), %eax
	WORD $0x8966; BYTE $0x07                                             // movw         %ax, (%rdi)
	LONG $0x02c68348                                                     // addq         $2, %rsi
	LONG $0x02c78348                                                     // addq         $2, %rdi
	LONG $0xfec28348                                                     // addq         $-2, %rdx
	WORD $0x8548; BYTE $0xd2                                             // testq        %rdx, %rdx
	LONG $0xffc58f0f; WORD $0xffff                                       // jg           LBB18_5, $-59(%rip)
	LONG $0xffffc4e9; BYTE $0xff                                         // jmp          LBB18_6, $-60(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

_unquote:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	LONG $0x68ec8348                           // subq         $104, %rsp
	WORD $0x8949; BYTE $0xd7                   // movq         %rdx, %r15
	WORD $0x8949; BYTE $0xf4                   // movq         %rsi, %r12
	LONG $0xd0558948                           // movq         %rdx, $-48(%rbp)
	WORD $0x8548; BYTE $0xf6                   // testq        %rsi, %rsi
	LONG $0x0519840f; WORD $0x0000             // je           LBB19_71, $1305(%rip)
	WORD $0x8948; BYTE $0xcb                   // movq         %rcx, %rbx
	WORD $0x894c; BYTE $0xc0                   // movq         %r8, %rax
	LONG $0xb845894c                           // movq         %r8, $-72(%rbp)
	LONG $0x01e08341                           // andl         $1, %r8d
	WORD $0x8948; BYTE $0xf8                   // movq         %rdi, %rax
	WORD $0xf748; BYTE $0xd0                   // notq         %rax
	LONG $0xa0458948                           // movq         %rax, $-96(%rbp)
	LONG $0x000001b8; BYTE $0x00               // movl         $1, %eax
	WORD $0x2948; BYTE $0xf8                   // subq         %rdi, %rax
	LONG $0x80458948                           // movq         %rax, $-128(%rbp)
	LONG $0xfcc1c748; WORD $0xffff; BYTE $0xff // movq         $-4, %rcx
	LONG $0xfcc0c748; WORD $0xffff; BYTE $0xff // movq         $-4, %rax
	WORD $0x2948; BYTE $0xf8                   // subq         %rdi, %rax
	LONG $0xa8458948                           // movq         %rax, $-88(%rbp)
	LONG $0x000002b8; BYTE $0x00               // movl         $2, %eax
	WORD $0x2948; BYTE $0xf8                   // subq         %rdi, %rax
	LONG $0x88458948                           // movq         %rax, $-120(%rbp)
	LONG $0x9845894c                           // movq         %r8, $-104(%rbp)
	WORD $0x294c; BYTE $0xc1                   // subq         %r8, %rcx
	WORD $0x2948; BYTE $0xf9                   // subq         %rdi, %rcx
	LONG $0x904d8948                           // movq         %rcx, $-112(%rbp)
	LONG $0x78bd8948; WORD $0xffff; BYTE $0xff // movq         %rdi, $-136(%rbp)
	WORD $0x8949; BYTE $0xfd                   // movq         %rdi, %r13
	LONG $0xc065894c                           // movq         %r12, $-64(%rbp)
	LONG $0xc87d894c                           // movq         %r15, $-56(%rbp)
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB19_2:
	LONG $0x007d8041; BYTE $0x5c   // cmpb         $92, (%r13)
	LONG $0x0015850f; WORD $0x0000 // jne          LBB19_4, $21(%rip)
	WORD $0xc031                   // xorl         %eax, %eax
	LONG $0xfff88348               // cmpq         $-1, %rax
	LONG $0x0022850f; WORD $0x0000 // jne          LBB19_6, $34(%rip)
	LONG $0x000491e9; BYTE $0x00   // jmp          LBB19_71, $1169(%rip)
	LONG $0x90909090               // .p2align 4, 0x90

LBB19_4:
	LONG $0xd0558b48               // movq         $-48(%rbp), %rdx
	WORD $0x894c; BYTE $0xef       // movq         %r13, %rdi
	WORD $0x894c; BYTE $0xe6       // movq         %r12, %rsi
	LONG $0x0004b1e8; BYTE $0x00   // callq        _memcchr_p32, $1201(%rip)
	LONG $0xfff88348               // cmpq         $-1, %rax
	LONG $0x0474840f; WORD $0x0000 // je           LBB19_71, $1140(%rip)

LBB19_6:
	LONG $0xd0558b48               // movq         $-48(%rbp), %rdx
	WORD $0x0148; BYTE $0xc2       // addq         %rax, %rdx
	LONG $0xd0558948               // movq         %rdx, $-48(%rbp)
	WORD $0x0149; BYTE $0xc5       // addq         %rax, %r13
	LONG $0x02c58349               // addq         $2, %r13
	LONG $0x02c08348               // addq         $2, %rax
	WORD $0x2949; BYTE $0xc4       // subq         %rax, %r12
	LONG $0x0052880f; WORD $0x0000 // js           LBB19_7, $82(%rip)
	LONG $0x987d8348; BYTE $0x00   // cmpq         $0, $-104(%rbp)
	LONG $0x0284850f; WORD $0x0000 // jne          LBB19_9, $644(%rip)

LBB19_22:
	LONG $0x45b60f41; BYTE $0xff               // movzbl       $-1(%r13), %eax
	LONG $0x710d8d48; WORD $0x00be; BYTE $0x00 // leaq         $48753(%rip), %rcx  /* __UnquoteTab(%rip) */
	WORD $0x048a; BYTE $0x08                   // movb         (%rax,%rcx), %al
	WORD $0xff3c                               // cmpb         $-1, %al
	LONG $0x0026840f; WORD $0x0000             // je           LBB19_26, $38(%rip)
	WORD $0xc084                               // testb        %al, %al
	LONG $0x004e850f; WORD $0x0000             // jne          LBB19_25, $78(%rip)
	LONG $0xa0458b48                           // movq         $-96(%rbp), %rax
	WORD $0x014c; BYTE $0xe8                   // addq         %r13, %rax
	WORD $0x8948; BYTE $0x03                   // movq         %rax, (%rbx)
	LONG $0xfdc6c749; WORD $0xffff; BYTE $0xff // movq         $-3, %r14
	LONG $0x000001b9; BYTE $0x00               // movl         $1, %ecx
	LONG $0x000233e9; BYTE $0x00               // jmp          LBB19_69, $563(%rip)
	WORD $0x9090; BYTE $0x90                   // .p2align 4, 0x90

LBB19_26:
	LONG $0x03fc8349               // cmpq         $3, %r12
	LONG $0x003a8f0f; WORD $0x0000 // jg           LBB19_27, $58(%rip)

LBB19_7:
	LONG $0xc0458b48                                         // movq         $-64(%rbp), %rax
	WORD $0x8948; BYTE $0x03                                 // movq         %rax, (%rbx)
	LONG $0xffc6c749; WORD $0xffff; BYTE $0xff               // movq         $-1, %r14
	LONG $0x000001b9; BYTE $0x00                             // movl         $1, %ecx
	LONG $0x00020ee9; BYTE $0x00                             // jmp          LBB19_69, $526(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB19_25:
	LONG $0x014a8d48             // leaq         $1(%rdx), %rcx
	LONG $0xd04d8948             // movq         %rcx, $-48(%rbp)
	WORD $0x0288                 // movb         %al, (%rdx)
	LONG $0x000002b9; BYTE $0x00 // movl         $2, %ecx
	LONG $0x0001ece9; BYTE $0x00 // jmp          LBB19_69, $492(%rip)

LBB19_27:
	WORD $0x894c; BYTE $0xef       // movq         %r13, %rdi
	LONG $0x0004b4e8; BYTE $0x00   // callq        _unhex16_is, $1204(%rip)
	WORD $0xc084                   // testb        %al, %al
	LONG $0x016b840f; WORD $0x0000 // je           LBB19_28, $363(%rip)
	WORD $0x894c; BYTE $0xef       // movq         %r13, %rdi
	LONG $0x000544e8; BYTE $0x00   // callq        _unhex16_fast, $1348(%rip)
	WORD $0x8941; BYTE $0xc7       // movl         %eax, %r15d
	LONG $0x04c58349               // addq         $4, %r13
	LONG $0xfcc48349               // addq         $-4, %r12
	LONG $0x0000803d; BYTE $0x00   // cmpl         $128, %eax
	LONG $0x0134820f; WORD $0x0000 // jb           LBB19_33, $308(%rip)

LBB19_35:
	WORD $0x8944; BYTE $0xf8                   // movl         %r15d, %eax
	LONG $0xffff8141; WORD $0x0007; BYTE $0x00 // cmpl         $2047, %r15d
	LONG $0x021b860f; WORD $0x0000             // jbe          LBB19_36, $539(%rip)
	LONG $0xfff80025; BYTE $0xff               // andl         $-2048, %eax
	LONG $0x00d8003d; BYTE $0x00               // cmpl         $55296, %eax
	LONG $0x00de850f; WORD $0x0000             // jne          LBB19_39, $222(%rip)
	LONG $0x987d8348; BYTE $0x00               // cmpq         $0, $-104(%rbp)
	LONG $0x0090850f; WORD $0x0000             // jne          LBB19_41, $144(%rip)
	LONG $0x06fc8349                           // cmpq         $6, %r12
	LONG $0x00ac8c0f; WORD $0x0000             // jl           LBB19_52, $172(%rip)

LBB19_49:
	LONG $0xffff8141; WORD $0x00db; BYTE $0x00 // cmpl         $56319, %r15d
	LONG $0x009f870f; WORD $0x0000             // ja           LBB19_52, $159(%rip)
	LONG $0x007d8041; BYTE $0x5c               // cmpb         $92, (%r13)
	LONG $0x0094850f; WORD $0x0000             // jne          LBB19_52, $148(%rip)
	LONG $0x017d8041; BYTE $0x75               // cmpb         $117, $1(%r13)
	LONG $0x0089850f; WORD $0x0000             // jne          LBB19_52, $137(%rip)
	LONG $0x027d8d49                           // leaq         $2(%r13), %rdi
	LONG $0xb07d8948                           // movq         %rdi, $-80(%rbp)
	LONG $0x000429e8; BYTE $0x00               // callq        _unhex16_is, $1065(%rip)
	WORD $0xc084                               // testb        %al, %al
	LONG $0x020c840f; WORD $0x0000             // je           LBB19_59, $524(%rip)
	LONG $0xb07d8b48                           // movq         $-80(%rbp), %rdi
	LONG $0x0004b8e8; BYTE $0x00               // callq        _unhex16_fast, $1208(%rip)
	LONG $0x06c58349                           // addq         $6, %r13
	LONG $0xfac48349                           // addq         $-6, %r12
	WORD $0xc189                               // movl         %eax, %ecx
	LONG $0xfc00e181; WORD $0xffff             // andl         $-1024, %ecx
	LONG $0xdc00f981; WORD $0x0000             // cmpl         $56320, %ecx
	LONG $0x022d840f; WORD $0x0000             // je           LBB19_65, $557(%rip)
	LONG $0x02b845f6                           // testb        $2, $-72(%rbp)
	LONG $0x02ce840f; WORD $0x0000             // je           LBB19_56, $718(%rip)
	WORD $0x8949; BYTE $0xc7                   // movq         %rax, %r15
	LONG $0xd07d8d48                           // leaq         $-48(%rbp), %rdi
	LONG $0x0004c6e8; BYTE $0x00               // callq        _unirep, $1222(%rip)
	WORD $0x894c; BYTE $0xf8                   // movq         %r15, %rax
	LONG $0x0000803d; BYTE $0x00               // cmpl         $128, %eax
	LONG $0xff4a830f; WORD $0xffff             // jae          LBB19_35, $-182(%rip)
	LONG $0x000079e9; BYTE $0x00               // jmp          LBB19_33, $121(%rip)

LBB19_41:
	WORD $0x854d; BYTE $0xe4       // testq        %r12, %r12
	LONG $0x027c8e0f; WORD $0x0000 // jle          LBB19_42, $636(%rip)
	LONG $0x007d8041; BYTE $0x5c   // cmpb         $92, (%r13)
	LONG $0x0291850f; WORD $0x0000 // jne          LBB19_54, $657(%rip)
	LONG $0xffc48349               // addq         $-1, %r12
	LONG $0x01c58349               // addq         $1, %r13
	LONG $0x06fc8349               // cmpq         $6, %r12
	LONG $0xff548d0f; WORD $0xffff // jge          LBB19_49, $-172(%rip)

LBB19_52:
	LONG $0x02b845f6               // testb        $2, $-72(%rbp)
	LONG $0x024c840f; WORD $0x0000 // je           LBB19_53, $588(%rip)

LBB19_55:
	LONG $0xd07d8d48             // leaq         $-48(%rbp), %rdi
	LONG $0x00047ae8; BYTE $0x00 // callq        _unirep, $1146(%rip)
	LONG $0x000002b9; BYTE $0x00 // movl         $2, %ecx
	LONG $0x0000b9e9; BYTE $0x00 // jmp          LBB19_68, $185(%rip)

LBB19_39:
	WORD $0x8944; BYTE $0xf8 // movl         %r15d, %eax
	WORD $0xe8c1; BYTE $0x0c // shrl         $12, %eax
	WORD $0xe00c             // orb          $-32, %al
	LONG $0xd04d8b48         // movq         $-48(%rbp), %rcx
	LONG $0x01518d48         // leaq         $1(%rcx), %rdx
	LONG $0xd0558948         // movq         %rdx, $-48(%rbp)
	WORD $0x0188             // movb         %al, (%rcx)
	WORD $0x8944; BYTE $0xf8 // movl         %r15d, %eax
	WORD $0xe8c1; BYTE $0x06 // shrl         $6, %eax
	WORD $0x3f24             // andb         $63, %al
	WORD $0x800c             // orb          $-128, %al

LBB19_37:
	LONG $0xd04d8b48 // movq         $-48(%rbp), %rcx
	LONG $0x01518d48 // leaq         $1(%rcx), %rdx
	LONG $0xd0558948 // movq         %rdx, $-48(%rbp)
	WORD $0x0188     // movb         %al, (%rcx)
	LONG $0x3fe78041 // andb         $63, %r15b
	LONG $0x80cf8041 // orb          $-128, %r15b

LBB19_33:
	LONG $0xd0458b48             // movq         $-48(%rbp), %rax
	LONG $0x01488d48             // leaq         $1(%rax), %rcx
	LONG $0xd04d8948             // movq         %rcx, $-48(%rbp)
	WORD $0x8844; BYTE $0x38     // movb         %r15b, (%rax)
	LONG $0x000002b9; BYTE $0x00 // movl         $2, %ecx
	LONG $0x00006ae9; BYTE $0x00 // jmp          LBB19_68, $106(%rip)

LBB19_28:
	WORD $0x894c; BYTE $0xe8                   // movq         %r13, %rax
	LONG $0x78852b48; WORD $0xffff; BYTE $0xff // subq         $-136(%rbp), %rax
	WORD $0x8948; BYTE $0x03                   // movq         %rax, (%rbx)
	LONG $0x04458d49                           // leaq         $4(%r13), %rax
	LONG $0xb0458948                           // movq         %rax, $-80(%rbp)
	WORD $0x3145; BYTE $0xff                   // xorl         %r15d, %r15d
	QUAD $0x9090909090909090; BYTE $0x90       // .p2align 4, 0x90

LBB19_29:
	LONG $0x7cbe0f43; WORD $0x003d             // movsbl       (%r13,%r15), %edi
	LONG $0x000385e8; BYTE $0x00               // callq        _ishex, $901(%rip)
	WORD $0xc084                               // testb        %al, %al
	LONG $0x0027840f; WORD $0x0000             // je           LBB19_66, $39(%rip)
	LONG $0x01038348                           // addq         $1, (%rbx)
	LONG $0x01c78349                           // addq         $1, %r15
	LONG $0xfec6c749; WORD $0xffff; BYTE $0xff // movq         $-2, %r14
	LONG $0x000001b9; BYTE $0x00               // movl         $1, %ecx
	LONG $0x04ff8341                           // cmpl         $4, %r15d
	LONG $0xffcf850f; WORD $0xffff             // jne          LBB19_29, $-49(%rip)
	LONG $0xb06d8b4c                           // movq         $-80(%rbp), %r13
	LONG $0x00000fe9; BYTE $0x00               // jmp          LBB19_68, $15(%rip)

LBB19_66:
	WORD $0x014d; BYTE $0xfd                   // addq         %r15, %r13
	LONG $0xfec6c749; WORD $0xffff; BYTE $0xff // movq         $-2, %r14

LBB19_67:
	LONG $0x000001b9; BYTE $0x00 // movl         $1, %ecx

LBB19_68:
	LONG $0xc87d8b4c         // movq         $-56(%rbp), %r15
	WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB19_69:
	WORD $0xc1f6; BYTE $0x01       // testb        $1, %cl
	LONG $0x01de850f; WORD $0x0000 // jne          LBB19_72, $478(%rip)
	WORD $0x854d; BYTE $0xe4       // testq        %r12, %r12
	LONG $0xfd1e850f; WORD $0xffff // jne          LBB19_2, $-738(%rip)
	LONG $0x0001c6e9; BYTE $0x00   // jmp          LBB19_71, $454(%rip)

LBB19_9:
	WORD $0x8545; BYTE $0xe4       // testl        %r12d, %r12d
	LONG $0x0020840f; WORD $0x0000 // je           LBB19_10, $32(%rip)
	LONG $0xff7d8041; BYTE $0x5c   // cmpb         $92, $-1(%r13)
	LONG $0x002a850f; WORD $0x0000 // jne          LBB19_12, $42(%rip)
	LONG $0x007d8041; BYTE $0x5c   // cmpb         $92, (%r13)
	LONG $0x005d850f; WORD $0x0000 // jne          LBB19_20, $93(%rip)
	LONG $0x01fc8341               // cmpl         $1, %r12d
	LONG $0x00378f0f; WORD $0x0000 // jg           LBB19_16, $55(%rip)

LBB19_10:
	LONG $0xc0458b48                           // movq         $-64(%rbp), %rax
	WORD $0x8948; BYTE $0x03                   // movq         %rax, (%rbx)
	LONG $0xffc6c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r14
	WORD $0xc031                               // xorl         %eax, %eax
	LONG $0x000048e9; BYTE $0x00               // jmp          LBB19_21, $72(%rip)

LBB19_12:
	LONG $0xa0458b48         // movq         $-96(%rbp), %rax
	WORD $0x014c; BYTE $0xe8 // addq         %r13, %rax

LBB19_13:
	WORD $0x8948; BYTE $0x03                   // movq         %rax, (%rbx)
	LONG $0xfec6c749; WORD $0xffff; BYTE $0xff // movq         $-2, %r14
	WORD $0xc031                               // xorl         %eax, %eax
	LONG $0x000030e9; BYTE $0x00               // jmp          LBB19_21, $48(%rip)

LBB19_36:
	WORD $0xe8c1; BYTE $0x06     // shrl         $6, %eax
	WORD $0xc00c                 // orb          $-64, %al
	LONG $0xfffee9e9; BYTE $0xff // jmp          LBB19_37, $-279(%rip)

LBB19_16:
	LONG $0x01458a41               // movb         $1(%r13), %al
	WORD $0x223c                   // cmpb         $34, %al
	LONG $0x0008840f; WORD $0x0000 // je           LBB19_19, $8(%rip)
	WORD $0x5c3c                   // cmpb         $92, %al
	LONG $0x0024850f; WORD $0x0000 // jne          LBB19_18, $36(%rip)

LBB19_19:
	LONG $0x01c58349 // addq         $1, %r13
	LONG $0xffc48349 // addq         $-1, %r12

LBB19_20:
	LONG $0x01c58349 // addq         $1, %r13
	LONG $0xffc48349 // addq         $-1, %r12
	WORD $0x01b0     // movb         $1, %al

LBB19_21:
	LONG $0x000001b9; BYTE $0x00   // movl         $1, %ecx
	WORD $0xc084                   // testb        %al, %al
	LONG $0xfce9850f; WORD $0xffff // jne          LBB19_22, $-791(%rip)
	LONG $0xffff51e9; BYTE $0xff   // jmp          LBB19_69, $-175(%rip)

LBB19_18:
	LONG $0x80458b48             // movq         $-128(%rbp), %rax
	WORD $0x014c; BYTE $0xe8     // addq         %r13, %rax
	LONG $0xffffa1e9; BYTE $0xff // jmp          LBB19_13, $-95(%rip)

LBB19_59:
	LONG $0x88458b48               // movq         $-120(%rbp), %rax
	WORD $0x014c; BYTE $0xe8       // addq         %r13, %rax
	WORD $0x8948; BYTE $0x03       // movq         %rax, (%rbx)
	LONG $0x0002bf41; WORD $0x0000 // movl         $2, %r15d

LBB19_60:
	LONG $0x7cbe0f43; WORD $0x003d             // movsbl       (%r13,%r15), %edi
	LONG $0x00026ae8; BYTE $0x00               // callq        _ishex, $618(%rip)
	LONG $0xfec6c749; WORD $0xffff; BYTE $0xff // movq         $-2, %r14
	LONG $0x000001b9; BYTE $0x00               // movl         $1, %ecx
	WORD $0xc084                               // testb        %al, %al
	LONG $0xff0f840f; WORD $0xffff             // je           LBB19_68, $-241(%rip)
	LONG $0x01038348                           // addq         $1, (%rbx)
	LONG $0x01c78349                           // addq         $1, %r15
	LONG $0x06ff8349                           // cmpq         $6, %r15
	LONG $0xffcf850f; WORD $0xffff             // jne          LBB19_60, $-49(%rip)
	LONG $0xfffef8e9; BYTE $0xff               // jmp          LBB19_68, $-264(%rip)

LBB19_65:
	LONG $0x0ae7c141               // shll         $10, %r15d
	WORD $0x8941; BYTE $0xc0       // movl         %eax, %r8d
	WORD $0x0145; BYTE $0xf8       // addl         %r15d, %r8d
	LONG $0x380c8d42               // leal         (%rax,%r15), %ecx
	LONG $0x2400c181; WORD $0xfca0 // addl         $-56613888, %ecx
	WORD $0xca89                   // movl         %ecx, %edx
	WORD $0xeac1; BYTE $0x12       // shrl         $18, %edx
	WORD $0xca80; BYTE $0xf0       // orb          $-16, %dl
	LONG $0xd0758b48               // movq         $-48(%rbp), %rsi
	LONG $0x017e8d48               // leaq         $1(%rsi), %rdi
	LONG $0xd07d8948               // movq         %rdi, $-48(%rbp)
	WORD $0x1688                   // movb         %dl, (%rsi)
	WORD $0xca89                   // movl         %ecx, %edx
	WORD $0xeac1; BYTE $0x0c       // shrl         $12, %edx
	WORD $0xe280; BYTE $0x3f       // andb         $63, %dl
	WORD $0xca80; BYTE $0x80       // orb          $-128, %dl
	LONG $0xd0758b48               // movq         $-48(%rbp), %rsi
	LONG $0x017e8d48               // leaq         $1(%rsi), %rdi
	LONG $0xd07d8948               // movq         %rdi, $-48(%rbp)
	WORD $0x1688                   // movb         %dl, (%rsi)
	WORD $0xe9c1; BYTE $0x06       // shrl         $6, %ecx
	WORD $0xe180; BYTE $0x3f       // andb         $63, %cl
	WORD $0xc980; BYTE $0x80       // orb          $-128, %cl
	LONG $0xd0558b48               // movq         $-48(%rbp), %rdx
	LONG $0x01728d48               // leaq         $1(%rdx), %rsi
	LONG $0xd0758948               // movq         %rsi, $-48(%rbp)
	WORD $0x0a88                   // movb         %cl, (%rdx)
	LONG $0x3fe08041               // andb         $63, %r8b
	LONG $0x80c88041               // orb          $-128, %r8b
	LONG $0xd04d8b48               // movq         $-48(%rbp), %rcx
	LONG $0x01518d48               // leaq         $1(%rcx), %rdx
	LONG $0xd0558948               // movq         %rdx, $-48(%rbp)
	WORD $0x8844; BYTE $0x01       // movb         %r8b, (%rcx)
	WORD $0xc931                   // xorl         %ecx, %ecx
	LONG $0xfffe80e9; BYTE $0xff   // jmp          LBB19_68, $-384(%rip)

LBB19_53:
	LONG $0x90458b48             // movq         $-112(%rbp), %rax
	LONG $0x00002ee9; BYTE $0x00 // jmp          LBB19_57, $46(%rip)

LBB19_42:
	LONG $0x02b845f6               // testb        $2, $-72(%rbp)
	LONG $0x0036840f; WORD $0x0000 // je           LBB19_44, $54(%rip)
	LONG $0xd07d8d48               // leaq         $-48(%rbp), %rdi
	LONG $0x00021be8; BYTE $0x00   // callq        _unirep, $539(%rip)
	LONG $0x000002b9; BYTE $0x00   // movl         $2, %ecx
	WORD $0x3145; BYTE $0xe4       // xorl         %r12d, %r12d
	LONG $0xfffe57e9; BYTE $0xff   // jmp          LBB19_68, $-425(%rip)

LBB19_54:
	LONG $0x02b845f6               // testb        $2, $-72(%rbp)
	LONG $0xfd81850f; WORD $0xffff // jne          LBB19_55, $-639(%rip)

LBB19_56:
	LONG $0xa8458b48 // movq         $-88(%rbp), %rax

LBB19_57:
	WORD $0x014c; BYTE $0xe8                   // addq         %r13, %rax
	WORD $0x8948; BYTE $0x03                   // movq         %rax, (%rbx)
	LONG $0xfcc6c749; WORD $0xffff; BYTE $0xff // movq         $-4, %r14
	LONG $0xfffe32e9; BYTE $0xff               // jmp          LBB19_67, $-462(%rip)

LBB19_44:
	LONG $0xc0458b48                           // movq         $-64(%rbp), %rax
	WORD $0x8948; BYTE $0x03                   // movq         %rax, (%rbx)
	LONG $0xffc6c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r14
	LONG $0x000001b9; BYTE $0x00               // movl         $1, %ecx
	WORD $0x3145; BYTE $0xe4                   // xorl         %r12d, %r12d
	LONG $0xfffe1ce9; BYTE $0xff               // jmp          LBB19_68, $-484(%rip)

LBB19_71:
	LONG $0xd065034c         // addq         $-48(%rbp), %r12
	WORD $0x294d; BYTE $0xfc // subq         %r15, %r12
	WORD $0x894d; BYTE $0xe6 // movq         %r12, %r14

LBB19_72:
	WORD $0x894c; BYTE $0xf0                   // movq         %r14, %rax
	LONG $0x68c48348                           // addq         $104, %rsp
	BYTE $0x5b                                 // popq         %rbx
	WORD $0x5c41                               // popq         %r12
	WORD $0x5d41                               // popq         %r13
	WORD $0x5e41                               // popq         %r14
	WORD $0x5f41                               // popq         %r15
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq
	LONG $0x00000000; WORD $0x0000; BYTE $0x00 // .p2align 4, 0x00

LCPI20_0:
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'

	// .p2align 4, 0x90
_memcchr_p32:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	LONG $0x10fe8348               // cmpq         $16, %rsi
	LONG $0x005b8c0f; WORD $0x0000 // jl           LBB20_1, $91(%rip)
	WORD $0xc031                   // xorl         %eax, %eax
	QUAD $0xffffffd8056ff9c5       // vmovdqa      $-40(%rip), %xmm0  /* LCPI20_0(%rip) */
	WORD $0x3145; BYTE $0xc9       // xorl         %r9d, %r9d
	LONG $0x90909090; BYTE $0x90   // .p2align 4, 0x90

LBB20_9:
	LONG $0x0c6ffac5; BYTE $0x07   // vmovdqu      (%rdi,%rax), %xmm1
	LONG $0x0c7ffac5; BYTE $0x02   // vmovdqu      %xmm1, (%rdx,%rax)
	LONG $0xc874f1c5               // vpcmpeqb     %xmm0, %xmm1, %xmm1
	LONG $0xc9d7f9c5               // vpmovmskb    %xmm1, %ecx
	WORD $0xc985                   // testl        %ecx, %ecx
	LONG $0x0068850f; WORD $0x0000 // jne          LBB20_10, $104(%rip)
	LONG $0x10c08348               // addq         $16, %rax
	LONG $0x0e0c8d4a               // leaq         (%rsi,%r9), %rcx
	LONG $0xf0c18348               // addq         $-16, %rcx
	LONG $0xf0c18349               // addq         $-16, %r9
	LONG $0x10c18348               // addq         $16, %rcx
	LONG $0x1ff98348               // cmpq         $31, %rcx
	LONG $0xffc88f0f; WORD $0xffff // jg           LBB20_9, $-56(%rip)
	WORD $0x8949; BYTE $0xf8       // movq         %rdi, %r8
	WORD $0x294d; BYTE $0xc8       // subq         %r9, %r8
	WORD $0x294c; BYTE $0xca       // subq         %r9, %rdx
	WORD $0x2948; BYTE $0xc6       // subq         %rax, %rsi
	LONG $0x000003e9; BYTE $0x00   // jmp          LBB20_4, $3(%rip)

LBB20_1:
	WORD $0x8949; BYTE $0xf8 // movq         %rdi, %r8

LBB20_4:
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	WORD $0x8548; BYTE $0xf6                   // testq        %rsi, %rsi
	LONG $0x0024840f; WORD $0x0000             // je           LBB20_12, $36(%rip)
	WORD $0xc931                               // xorl         %ecx, %ecx
	WORD $0x9090                               // .p2align 4, 0x90

LBB20_6:
	LONG $0x0cb60f45; BYTE $0x08   // movzbl       (%r8,%rcx), %r9d
	LONG $0x5cf98041               // cmpb         $92, %r9b
	LONG $0x001f840f; WORD $0x0000 // je           LBB20_11, $31(%rip)
	LONG $0x0a0c8844               // movb         %r9b, (%rdx,%rcx)
	LONG $0x01c18348               // addq         $1, %rcx
	WORD $0x3948; BYTE $0xce       // cmpq         %rcx, %rsi
	LONG $0xffe0850f; WORD $0xffff // jne          LBB20_6, $-32(%rip)

LBB20_12:
	BYTE $0x5d // popq         %rbp
	BYTE $0xc3 // retq

LBB20_10:
	LONG $0xc1bc0f66         // bsfw         %cx, %ax
	WORD $0xb70f; BYTE $0xc0 // movzwl       %ax, %eax
	WORD $0x294c; BYTE $0xc8 // subq         %r9, %rax
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

LBB20_11:
	WORD $0x2949; BYTE $0xf8                   // subq         %rdi, %r8
	WORD $0x0149; BYTE $0xc8                   // addq         %rcx, %r8
	WORD $0x894c; BYTE $0xc0                   // movq         %r8, %rax
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

_unhex16_is:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	BYTE $0x53                     // pushq        %rbx
	BYTE $0x50                     // pushq        %rax
	WORD $0x1f8b                   // movl         (%rdi), %ebx
	WORD $0xdf89                   // movl         %ebx, %edi
	LONG $0x002fc1e8; BYTE $0x00   // callq        _hasless, $12225(%rip)
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x0028850f; WORD $0x0000 // jne          LBB21_1, $40(%rip)
	WORD $0xdf89                   // movl         %ebx, %edi
	LONG $0x002fd2e8; BYTE $0x00   // callq        _hasmore, $12242(%rip)
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x0019850f; WORD $0x0000 // jne          LBB21_1, $25(%rip)
	WORD $0xdf89                   // movl         %ebx, %edi
	LONG $0x000039be; BYTE $0x00   // movl         $57, %esi
	LONG $0x000041ba; BYTE $0x00   // movl         $65, %edx
	LONG $0x002fd9e8; BYTE $0x00   // callq        _hasbetween, $12249(%rip)
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x000c840f; WORD $0x0000 // je           LBB21_6, $12(%rip)

LBB21_1:
	WORD $0xc031 // xorl         %eax, %eax

LBB21_7:
	WORD $0xb60f; BYTE $0xc0 // movzbl       %al, %eax
	LONG $0x08c48348         // addq         $8, %rsp
	BYTE $0x5b               // popq         %rbx
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

LBB21_6:
	WORD $0xdf89                           // movl         %ebx, %edi
	LONG $0x000046be; BYTE $0x00           // movl         $70, %esi
	LONG $0x000061ba; BYTE $0x00           // movl         $97, %edx
	LONG $0x002fb4e8; BYTE $0x00           // callq        _hasbetween, $12212(%rip)
	WORD $0xc085                           // testl        %eax, %eax
	WORD $0x940f; BYTE $0xc0               // sete         %al
	LONG $0xffffdbe9; BYTE $0xff           // jmp          LBB21_7, $-37(%rip)
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

_ishex:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x478d; BYTE $0xd0                   // leal         $-48(%rdi), %eax
	WORD $0x0a3c                               // cmpb         $10, %al
	WORD $0x920f; BYTE $0xc0                   // setb         %al
	WORD $0x4f8d; BYTE $0x9f                   // leal         $-97(%rdi), %ecx
	WORD $0xf980; BYTE $0x06                   // cmpb         $6, %cl
	WORD $0x920f; BYTE $0xc1                   // setb         %cl
	WORD $0xc108                               // orb          %al, %cl
	LONG $0xbfc78040                           // addb         $-65, %dil
	LONG $0x06ff8040                           // cmpb         $6, %dil
	WORD $0x920f; BYTE $0xc0                   // setb         %al
	WORD $0xc808                               // orb          %cl, %al
	WORD $0xb60f; BYTE $0xc0                   // movzbl       %al, %eax
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

_unhex16_fast:
	BYTE $0x55                             // pushq        %rbp
	WORD $0x8948; BYTE $0xe5               // movq         %rsp, %rbp
	WORD $0x078b                           // movl         (%rdi), %eax
	WORD $0xc80f                           // bswapl       %eax
	WORD $0xc189                           // movl         %eax, %ecx
	WORD $0xe9c1; BYTE $0x04               // shrl         $4, %ecx
	WORD $0xd1f7                           // notl         %ecx
	LONG $0x0101e181; WORD $0x0101         // andl         $16843009, %ecx
	WORD $0x0c8d; BYTE $0xc9               // leal         (%rcx,%rcx,8), %ecx
	LONG $0x0f0f0f25; BYTE $0x0f           // andl         $252645135, %eax
	WORD $0xc801                           // addl         %ecx, %eax
	WORD $0xc189                           // movl         %eax, %ecx
	WORD $0xe9c1; BYTE $0x04               // shrl         $4, %ecx
	WORD $0xc109                           // orl          %eax, %ecx
	WORD $0xb60f; BYTE $0xc1               // movzbl       %cl, %eax
	WORD $0xe9c1; BYTE $0x08               // shrl         $8, %ecx
	LONG $0xff00e181; WORD $0x0000         // andl         $65280, %ecx
	WORD $0xc809                           // orl          %ecx, %eax
	BYTE $0x5d                             // popq         %rbp
	BYTE $0xc3                             // retq
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

_unirep:
	BYTE $0x55               // pushq        %rbp
	WORD $0x8948; BYTE $0xe5 // movq         %rsp, %rbp
	WORD $0x8b48; BYTE $0x07 // movq         (%rdi), %rax
	LONG $0x01488d48         // leaq         $1(%rax), %rcx
	WORD $0x8948; BYTE $0x0f // movq         %rcx, (%rdi)
	WORD $0x00c6; BYTE $0xef // movb         $-17, (%rax)
	WORD $0x8b48; BYTE $0x07 // movq         (%rdi), %rax
	LONG $0x01488d48         // leaq         $1(%rax), %rcx
	WORD $0x8948; BYTE $0x0f // movq         %rcx, (%rdi)
	WORD $0x00c6; BYTE $0xbf // movb         $-65, (%rax)
	WORD $0x8b48; BYTE $0x07 // movq         (%rdi), %rax
	LONG $0x01488d48         // leaq         $1(%rax), %rcx
	WORD $0x8948; BYTE $0x0f // movq         %rcx, (%rdi)
	WORD $0x00c6; BYTE $0xbd // movb         $-67, (%rax)
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq
	WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

_html_escape:
	BYTE $0x55                                             // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                               // movq         %rsp, %rbp
	WORD $0x5741                                           // pushq        %r15
	WORD $0x5641                                           // pushq        %r14
	WORD $0x5541                                           // pushq        %r13
	WORD $0x5441                                           // pushq        %r12
	BYTE $0x53                                             // pushq        %rbx
	LONG $0x28ec8348                                       // subq         $40, %rsp
	LONG $0xc04d8948                                       // movq         %rcx, $-64(%rbp)
	WORD $0x8948; BYTE $0xd3                               // movq         %rdx, %rbx
	WORD $0x8949; BYTE $0xfe                               // movq         %rdi, %r14
	WORD $0x8948; BYTE $0xd0                               // movq         %rdx, %rax
	LONG $0xc8558948                                       // movq         %rdx, $-56(%rbp)
	LONG $0xd07d8948                                       // movq         %rdi, $-48(%rbp)
	WORD $0x8548; BYTE $0xf6                               // testq        %rsi, %rsi
	LONG $0x01ba8e0f; WORD $0x0000                         // jle          LBB25_23, $442(%rip)
	LONG $0xc0458b48                                       // movq         $-64(%rbp), %rax
	WORD $0x8b4c; BYTE $0x00                               // movq         (%rax), %r8
	LONG $0xd0758b4c                                       // movq         $-48(%rbp), %r14
	LONG $0xc85d8b48                                       // movq         $-56(%rbp), %rbx
	LONG $0x000016e9; BYTE $0x00                           // jmp          LBB25_2, $22(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

LBB25_22:
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x01908e0f; WORD $0x0000 // jle          LBB25_23, $400(%rip)

LBB25_2:
	WORD $0x854d; BYTE $0xc0       // testq        %r8, %r8
	LONG $0x015e8e0f; WORD $0x0000 // jle          LBB25_3, $350(%rip)
	WORD $0x894c; BYTE $0xf7       // movq         %r14, %rdi
	WORD $0x8949; BYTE $0xf7       // movq         %rsi, %r15
	WORD $0x8948; BYTE $0xda       // movq         %rbx, %rdx
	WORD $0x894c; BYTE $0xc1       // movq         %r8, %rcx
	WORD $0x894d; BYTE $0xc5       // movq         %r8, %r13
	LONG $0x00019ae8; BYTE $0x00   // callq        _memcchr_html_quote, $410(%rip)
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x0071880f; WORD $0x0000 // js           LBB25_5, $113(%rip)
	WORD $0x0149; BYTE $0xc6       // addq         %rax, %r14
	WORD $0x0148; BYTE $0xc3       // addq         %rax, %rbx
	WORD $0x2949; BYTE $0xc5       // subq         %rax, %r13
	WORD $0x2949; BYTE $0xc7       // subq         %rax, %r15
	WORD $0x894c; BYTE $0xfe       // movq         %r15, %rsi
	WORD $0x894d; BYTE $0xe8       // movq         %r13, %r8
	LONG $0x00878e0f; WORD $0x0000 // jle          LBB25_7, $135(%rip)
	LONG $0x06b60f41               // movzbl       (%r14), %eax
	WORD $0xe23c                   // cmpb         $-30, %al
	LONG $0x00b8840f; WORD $0x0000 // je           LBB25_10, $184(%rip)
	WORD $0x894c; BYTE $0xf7       // movq         %r14, %rdi

LBB25_14:
	WORD $0xb60f; BYTE $0x07                   // movzbl       (%rdi), %eax
	LONG $0x04e0c148                           // shlq         $4, %rax
	LONG $0x7c0d8d48; WORD $0x00b8; BYTE $0x00 // leaq         $47228(%rip), %rcx  /* __HtmlQuoteTab(%rip) */
	LONG $0x082c634c                           // movslq       (%rax,%rcx), %r13
	WORD $0x894d; BYTE $0xc7                   // movq         %r8, %r15
	WORD $0x294d; BYTE $0xef                   // subq         %r13, %r15
	LONG $0x00648d0f; WORD $0x0000             // jge          LBB25_18, $100(%rip)
	WORD $0x8948; BYTE $0xd8                   // movq         %rbx, %rax
	LONG $0xc8452b48                           // subq         $-56(%rbp), %rax
	LONG $0xc0558b48                           // movq         $-64(%rbp), %rdx
	WORD $0x8948; BYTE $0x02                   // movq         %rax, (%rdx)
	WORD $0xf749; BYTE $0xd6                   // notq         %r14
	WORD $0x894d; BYTE $0xf4                   // movq         %r14, %r12
	LONG $0xd065034c                           // addq         $-48(%rbp), %r12
	LONG $0x000001b8; BYTE $0x00               // movl         $1, %eax
	WORD $0x8949; BYTE $0xfe                   // movq         %rdi, %r14
	LONG $0x0000e6e9; BYTE $0x00               // jmp          LBB25_19, $230(%rip)
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB25_5:
	LONG $0xc84d8b48             // movq         $-56(%rbp), %rcx
	WORD $0x0148; BYTE $0xc1     // addq         %rax, %rcx
	WORD $0xf748; BYTE $0xd1     // notq         %rcx
	WORD $0x0148; BYTE $0xd9     // addq         %rbx, %rcx
	LONG $0xc0558b48             // movq         $-64(%rbp), %rdx
	WORD $0x8948; BYTE $0x0a     // movq         %rcx, (%rdx)
	LONG $0xd0658b4c             // movq         $-48(%rbp), %r12
	WORD $0x294d; BYTE $0xf4     // subq         %r14, %r12
	WORD $0x0149; BYTE $0xc4     // addq         %rax, %r12
	LONG $0x000001b8; BYTE $0x00 // movl         $1, %eax
	WORD $0x894c; BYTE $0xfe     // movq         %r15, %rsi
	WORD $0x894d; BYTE $0xe8     // movq         %r13, %r8
	LONG $0x0000b1e9; BYTE $0x00 // jmp          LBB25_19, $177(%rip)

LBB25_7:
	LONG $0x000003b8; BYTE $0x00 // movl         $3, %eax
	LONG $0x0000a7e9; BYTE $0x00 // jmp          LBB25_19, $167(%rip)

LBB25_18:
	LONG $0xb8758948             // movq         %rsi, $-72(%rbp)
	LONG $0x08348d48             // leaq         (%rax,%rcx), %rsi
	LONG $0x08c68348             // addq         $8, %rsi
	WORD $0x8949; BYTE $0xfe     // movq         %rdi, %r14
	WORD $0x8948; BYTE $0xdf     // movq         %rbx, %rdi
	WORD $0x894c; BYTE $0xea     // movq         %r13, %rdx
	LONG $0xfff70ee8; BYTE $0xff // callq        _memcpy_p8, $-2290(%rip)
	LONG $0xb8758b48             // movq         $-72(%rbp), %rsi
	LONG $0x01c68349             // addq         $1, %r14
	LONG $0xffc68348             // addq         $-1, %rsi
	WORD $0x014c; BYTE $0xeb     // addq         %r13, %rbx
	WORD $0xc031                 // xorl         %eax, %eax
	WORD $0x894d; BYTE $0xf8     // movq         %r15, %r8
	LONG $0x000074e9; BYTE $0x00 // jmp          LBB25_19, $116(%rip)

LBB25_10:
	LONG $0x03fe8348               // cmpq         $3, %rsi
	LONG $0x00298c0f; WORD $0x0000 // jl           LBB25_16, $41(%rip)
	LONG $0x017e8041; BYTE $0x80   // cmpb         $-128, $1(%r14)
	LONG $0x001e850f; WORD $0x0000 // jne          LBB25_16, $30(%rip)
	LONG $0x4eb60f41; BYTE $0x02   // movzbl       $2(%r14), %ecx
	WORD $0xe180; BYTE $0xfe       // andb         $-2, %cl
	WORD $0xf980; BYTE $0xa8       // cmpb         $-88, %cl
	LONG $0x000d850f; WORD $0x0000 // jne          LBB25_16, $13(%rip)
	LONG $0x027e8d49               // leaq         $2(%r14), %rdi
	LONG $0xfec68348               // addq         $-2, %rsi
	LONG $0xffff18e9; BYTE $0xff   // jmp          LBB25_14, $-232(%rip)

LBB25_16:
	WORD $0x854d; BYTE $0xc0                               // testq        %r8, %r8
	LONG $0x00298e0f; WORD $0x0000                         // jle          LBB25_3, $41(%rip)
	LONG $0x01c68349                                       // addq         $1, %r14
	WORD $0x0388                                           // movb         %al, (%rbx)
	LONG $0x01c38348                                       // addq         $1, %rbx
	LONG $0xffc68348                                       // addq         $-1, %rsi
	LONG $0xffc08349                                       // addq         $-1, %r8
	LONG $0x000002b8; BYTE $0x00                           // movl         $2, %eax
	LONG $0x00001ce9; BYTE $0x00                           // jmp          LBB25_19, $28(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

LBB25_3:
	WORD $0x894d; BYTE $0xf4     // movq         %r14, %r12
	WORD $0xf749; BYTE $0xd4     // notq         %r12
	LONG $0xd065034c             // addq         $-48(%rbp), %r12
	LONG $0x000001b8; BYTE $0x00 // movl         $1, %eax

LBB25_19:
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0xfe79840f; WORD $0xffff // je           LBB25_22, $-391(%rip)
	WORD $0xf883; BYTE $0x02       // cmpl         $2, %eax
	LONG $0xfe70840f; WORD $0xffff // je           LBB25_22, $-400(%rip)
	WORD $0xf883; BYTE $0x03       // cmpl         $3, %eax
	LONG $0x0012850f; WORD $0x0000 // jne          LBB25_24, $18(%rip)

LBB25_23:
	LONG $0xc85d2b48         // subq         $-56(%rbp), %rbx
	LONG $0xc0458b48         // movq         $-64(%rbp), %rax
	WORD $0x8948; BYTE $0x18 // movq         %rbx, (%rax)
	LONG $0xd0752b4c         // subq         $-48(%rbp), %r14
	WORD $0x894d; BYTE $0xf4 // movq         %r14, %r12

LBB25_24:
	WORD $0x894c; BYTE $0xe0 // movq         %r12, %rax
	LONG $0x28c48348         // addq         $40, %rsp
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq
	WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

_memcchr_html_quote:
	BYTE $0x55                             // pushq        %rbp
	WORD $0x8948; BYTE $0xe5               // movq         %rsp, %rbp
	WORD $0x5741                           // pushq        %r15
	WORD $0x5641                           // pushq        %r14
	WORD $0x5541                           // pushq        %r13
	WORD $0x5441                           // pushq        %r12
	BYTE $0x53                             // pushq        %rbx
	LONG $0x18ec8348                       // subq         $24, %rsp
	WORD $0x8949; BYTE $0xcf               // movq         %rcx, %r15
	WORD $0x8949; BYTE $0xd4               // movq         %rdx, %r12
	WORD $0x8949; BYTE $0xf5               // movq         %rsi, %r13
	WORD $0x8949; BYTE $0xfe               // movq         %rdi, %r14
	LONG $0xd07d8948                       // movq         %rdi, $-48(%rbp)
	LONG $0x000023e9; BYTE $0x00           // jmp          LBB26_1, $35(%rip)
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

LBB26_5:
	LONG $0x10c68349 // addq         $16, %r14
	LONG $0x10c48349 // addq         $16, %r12
	LONG $0xf0c58349 // addq         $-16, %r13
	LONG $0xf0c78349 // addq         $-16, %r15

LBB26_6:
	WORD $0x8566; BYTE $0xc0       // testw        %ax, %ax
	LONG $0x0156850f; WORD $0x0000 // jne          LBB26_25, $342(%rip)

LBB26_1:
	LONG $0x10fd8349               // cmpq         $16, %r13
	LONG $0x00468c0f; WORD $0x0000 // jl           LBB26_7, $70(%rip)
	LONG $0x10ff8349               // cmpq         $16, %r15
	LONG $0x003c8c0f; WORD $0x0000 // jl           LBB26_7, $60(%rip)
	LONG $0x6f7ac1c4; BYTE $0x06   // vmovdqu      (%r14), %xmm0
	LONG $0x457ff9c5; BYTE $0xc0   // vmovdqa      %xmm0, $-64(%rbp)
	LONG $0x002d04e8; BYTE $0x00   // callq        __mm_find_html, $11524(%rip)
	LONG $0x4d28f8c5; BYTE $0xc0   // vmovaps      $-64(%rbp), %xmm1
	LONG $0x1178c1c4; WORD $0x240c // vmovups      %xmm1, (%r12)
	LONG $0xc0d7f9c5               // vpmovmskb    %xmm0, %eax
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0xffad840f; WORD $0xffff // je           LBB26_5, $-83(%rip)
	WORD $0x894c; BYTE $0xf1       // movq         %r14, %rcx
	LONG $0xd04d2b48               // subq         $-48(%rbp), %rcx
	LONG $0xd0bc0f66               // bsfw         %ax, %dx
	WORD $0xb70f; BYTE $0xda       // movzwl       %dx, %ebx
	WORD $0x0148; BYTE $0xcb       // addq         %rcx, %rbx
	LONG $0xffffa7e9; BYTE $0xff   // jmp          LBB26_6, $-89(%rip)

LBB26_7:
	LONG $0x0ffd8349               // cmpq         $15, %r13
	LONG $0x003f8e0f; WORD $0x0000 // jle          LBB26_8, $63(%rip)
	LONG $0x6f7ac1c4; BYTE $0x06   // vmovdqu      (%r14), %xmm0
	LONG $0x002cc3e8; BYTE $0x00   // callq        __mm_find_html, $11459(%rip)
	LONG $0xc0d7f9c5               // vpmovmskb    %xmm0, %eax
	LONG $0x0100000d; BYTE $0x00   // orl          $65536, %eax
	WORD $0xbc0f; BYTE $0xd8       // bsfl         %eax, %ebx
	WORD $0x894c; BYTE $0xe7       // movq         %r12, %rdi
	WORD $0x894c; BYTE $0xf6       // movq         %r14, %rsi
	WORD $0x3949; BYTE $0xdf       // cmpq         %rbx, %r15
	LONG $0x00b08d0f; WORD $0x0000 // jge          LBB26_19, $176(%rip)
	WORD $0x894c; BYTE $0xfa       // movq         %r15, %rdx
	LONG $0x002b50e8; BYTE $0x00   // callq        _memcpy_p16, $11088(%rip)
	WORD $0x014d; BYTE $0xf7       // addq         %r14, %r15
	WORD $0xf749; BYTE $0xd7       // notq         %r15
	LONG $0xd07d034c               // addq         $-48(%rbp), %r15
	WORD $0x894c; BYTE $0xfb       // movq         %r15, %rbx
	LONG $0x0000bde9; BYTE $0x00   // jmp          LBB26_25, $189(%rip)

LBB26_8:
	WORD $0x854d; BYTE $0xed                                 // testq        %r13, %r13
	LONG $0x00788e0f; WORD $0x0000                           // jle          LBB26_16, $120(%rip)
	WORD $0x854d; BYTE $0xff                                 // testq        %r15, %r15
	LONG $0x006f8e0f; WORD $0x0000                           // jle          LBB26_16, $111(%rip)
	WORD $0xc031                                             // xorl         %eax, %eax
	QUAD $0x004000000000ba48; WORD $0x5000                   // movabsq      $5764607797912141824, %rdx
	WORD $0xc931                                             // xorl         %ecx, %ecx
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB26_11:
	LONG $0x34b60f41; BYTE $0x06   // movzbl       (%r14,%rax), %esi
	LONG $0x3efe8348               // cmpq         $62, %rsi
	LONG $0x000a870f; WORD $0x0000 // ja           LBB26_12, $10(%rip)
	LONG $0xf2a30f48               // btq          %rsi, %rdx
	LONG $0x0063820f; WORD $0x0000 // jb           LBB26_22, $99(%rip)

LBB26_12:
	LONG $0xe2fe8040               // cmpb         $-30, %sil
	LONG $0x0059840f; WORD $0x0000 // je           LBB26_22, $89(%rip)
	LONG $0x293c8d4a               // leaq         (%rcx,%r13), %rdi
	LONG $0x04348841               // movb         %sil, (%r12,%rax)
	LONG $0xff718d48               // leaq         $-1(%rcx), %rsi
	LONG $0x02ff8348               // cmpq         $2, %rdi
	LONG $0x00148c0f; WORD $0x0000 // jl           LBB26_15, $20(%rip)
	WORD $0x014c; BYTE $0xf9       // addq         %r15, %rcx
	LONG $0x01c08348               // addq         $1, %rax
	LONG $0x01f98348               // cmpq         $1, %rcx
	WORD $0x8948; BYTE $0xf1       // movq         %rsi, %rcx
	LONG $0xffb38f0f; WORD $0xffff // jg           LBB26_11, $-77(%rip)

LBB26_15:
	WORD $0x2949; BYTE $0xf6 // subq         %rsi, %r14
	WORD $0x0149; BYTE $0xf5 // addq         %rsi, %r13

LBB26_16:
	WORD $0x854d; BYTE $0xed       // testq        %r13, %r13
	LONG $0x002c840f; WORD $0x0000 // je           LBB26_17, $44(%rip)
	WORD $0xf749; BYTE $0xd6       // notq         %r14
	LONG $0xd075034c               // addq         $-48(%rbp), %r14
	LONG $0x000024e9; BYTE $0x00   // jmp          LBB26_24, $36(%rip)

LBB26_19:
	WORD $0x8948; BYTE $0xda     // movq         %rbx, %rdx
	LONG $0x002aa0e8; BYTE $0x00 // callq        _memcpy_p16, $10912(%rip)
	LONG $0xd0752b4c             // subq         $-48(%rbp), %r14
	WORD $0x0149; BYTE $0xde     // addq         %rbx, %r14
	LONG $0x000010e9; BYTE $0x00 // jmp          LBB26_24, $16(%rip)

LBB26_22:
	LONG $0xd0752b4c             // subq         $-48(%rbp), %r14
	WORD $0x2949; BYTE $0xce     // subq         %rcx, %r14
	LONG $0x000004e9; BYTE $0x00 // jmp          LBB26_24, $4(%rip)

LBB26_17:
	LONG $0xd0752b4c // subq         $-48(%rbp), %r14

LBB26_24:
	WORD $0x894c; BYTE $0xf3 // movq         %r14, %rbx

LBB26_25:
	WORD $0x8948; BYTE $0xd8                                             // movq         %rbx, %rax
	LONG $0x18c48348                                                     // addq         $24, %rsp
	BYTE $0x5b                                                           // popq         %rbx
	WORD $0x5c41                                                         // popq         %r12
	WORD $0x5d41                                                         // popq         %r13
	WORD $0x5e41                                                         // popq         %r14
	WORD $0x5f41                                                         // popq         %r15
	BYTE $0x5d                                                           // popq         %rbp
	BYTE $0xc3                                                           // retq
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

_atof_eisel_lemire64:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	LONG $0x18ec8348                           // subq         $24, %rsp
	WORD $0x8941; BYTE $0xf4                   // movl         %esi, %r12d
	QUAD $0x0000015c249c8d41                   // leal         $348(%r12), %ebx
	LONG $0x02b7fb81; WORD $0x0000             // cmpl         $695, %ebx
	LONG $0x011f870f; WORD $0x0000             // ja           LBB27_1, $287(%rip)
	WORD $0x8949; BYTE $0xff                   // movq         %rdi, %r15
	WORD $0x5589; BYTE $0xd4                   // movl         %edx, $-44(%rbp)
	LONG $0xc84d8948                           // movq         %rcx, $-56(%rbp)
	LONG $0x000169e8; BYTE $0x00               // callq        _count_leading_zeroes_u64, $361(%rip)
	WORD $0x4589; BYTE $0xd0                   // movl         %eax, $-48(%rbp)
	WORD $0xc189                               // movl         %eax, %ecx
	WORD $0xd349; BYTE $0xe7                   // shlq         %cl, %r15
	WORD $0x8941; BYTE $0xdd                   // movl         %ebx, %r13d
	LONG $0x04e5c149                           // shlq         $4, %r13
	LONG $0x63058d48; WORD $0x003f; BYTE $0x00 // leaq         $16227(%rip), %rax  /* _POW10_M128_TAB(%rip) */
	LONG $0x05748b49; BYTE $0x08               // movq         $8(%r13,%rax), %rsi
	WORD $0x894c; BYTE $0xff                   // movq         %r15, %rdi
	LONG $0x000166e8; BYTE $0x00               // callq        _mul_u64, $358(%rip)
	WORD $0x8948; BYTE $0xc3                   // movq         %rax, %rbx
	WORD $0x8949; BYTE $0xd6                   // movq         %rdx, %r14
	WORD $0xd0f7                               // notl         %eax
	LONG $0x0001ffa9; BYTE $0x00               // testl        $511, %eax
	LONG $0xc065894c                           // movq         %r12, $-64(%rbp)
	LONG $0x005b850f; WORD $0x0000             // jne          LBB27_6, $91(%rip)
	WORD $0x894d; BYTE $0xfc                   // movq         %r15, %r12
	WORD $0xf749; BYTE $0xd4                   // notq         %r12
	WORD $0x394d; BYTE $0xe6                   // cmpq         %r12, %r14
	LONG $0x004c860f; WORD $0x0000             // jbe          LBB27_6, $76(%rip)
	LONG $0x29058d48; WORD $0x003f; BYTE $0x00 // leaq         $16169(%rip), %rax  /* _POW10_M128_TAB(%rip) */
	LONG $0x05748b49; BYTE $0x00               // movq         (%r13,%rax), %rsi
	WORD $0x894c; BYTE $0xff                   // movq         %r15, %rdi
	LONG $0x00012ce8; BYTE $0x00               // callq        _mul_u64, $300(%rip)
	WORD $0x014c; BYTE $0xf0                   // addq         %r14, %rax
	WORD $0x8948; BYTE $0xd9                   // movq         %rbx, %rcx
	LONG $0x00d18348                           // adcq         $0, %rcx
	WORD $0xce89                               // movl         %ecx, %esi
	WORD $0xd6f7                               // notl         %esi
	LONG $0x01ffe681; WORD $0x0000             // andl         $511, %esi
	WORD $0x8948; BYTE $0xc7                   // movq         %rax, %rdi
	WORD $0xf748; BYTE $0xd7                   // notq         %rdi
	WORD $0x0948; BYTE $0xf7                   // orq          %rsi, %rdi
	LONG $0xc6940f40                           // sete         %sil
	WORD $0x394c; BYTE $0xe2                   // cmpq         %r12, %rdx
	WORD $0x970f; BYTE $0xc2                   // seta         %dl
	WORD $0x8440; BYTE $0xd6                   // testb        %dl, %sil
	LONG $0xf0440f4c                           // cmoveq       %rax, %r14
	LONG $0xd9440f48                           // cmoveq       %rcx, %rbx
	LONG $0x007b850f; WORD $0x0000             // jne          LBB27_1, $123(%rip)

LBB27_6:
	WORD $0x8948; BYTE $0xd8       // movq         %rbx, %rax
	LONG $0x3fe8c148               // shrq         $63, %rax
	WORD $0x488d; BYTE $0x09       // leal         $9(%rax), %ecx
	WORD $0x8948; BYTE $0xda       // movq         %rbx, %rdx
	WORD $0xd348; BYTE $0xea       // shrq         %cl, %rdx
	WORD $0x854d; BYTE $0xf6       // testq        %r14, %r14
	LONG $0x001d850f; WORD $0x0000 // jne          LBB27_10, $29(%rip)
	LONG $0x01ffe381; WORD $0x0000 // andl         $511, %ebx
	WORD $0x8548; BYTE $0xdb       // testq        %rbx, %rbx
	LONG $0x000e850f; WORD $0x0000 // jne          LBB27_10, $14(%rip)
	WORD $0xd189                   // movl         %edx, %ecx
	WORD $0xe183; BYTE $0x03       // andl         $3, %ecx
	WORD $0xf983; BYTE $0x01       // cmpl         $1, %ecx
	LONG $0x0045840f; WORD $0x0000 // je           LBB27_1, $69(%rip)

LBB27_10:
	LONG $0x6ac04d69; WORD $0x0352; BYTE $0x00 // imull        $217706, $-64(%rbp), %ecx
	WORD $0xf9c1; BYTE $0x10                   // sarl         $16, %ecx
	LONG $0x043fc181; WORD $0x0000             // addl         $1087, %ecx
	WORD $0x6348; BYTE $0xf9                   // movslq       %ecx, %rdi
	LONG $0xd04d6348                           // movslq       $-48(%rbp), %rcx
	WORD $0x2948; BYTE $0xcf                   // subq         %rcx, %rdi
	WORD $0xd689                               // movl         %edx, %esi
	WORD $0xe683; BYTE $0x01                   // andl         $1, %esi
	WORD $0x0148; BYTE $0xd6                   // addq         %rdx, %rsi
	WORD $0x8948; BYTE $0xf1                   // movq         %rsi, %rcx
	LONG $0x36e9c148                           // shrq         $54, %rcx
	WORD $0x0148; BYTE $0xf8                   // addq         %rdi, %rax
	LONG $0x01f98348                           // cmpq         $1, %rcx
	LONG $0x00d88348                           // sbbq         $0, %rax
	LONG $0xff508d48                           // leaq         $-1(%rax), %rdx
	LONG $0xfdfa8148; WORD $0x0007; BYTE $0x00 // cmpq         $2045, %rdx
	LONG $0x0011860f; WORD $0x0000             // jbe          LBB27_12, $17(%rip)

LBB27_1:
	WORD $0xc031 // xorl         %eax, %eax

LBB27_13:
	LONG $0x18c48348 // addq         $24, %rsp
	BYTE $0x5b       // popq         %rbx
	WORD $0x5c41     // popq         %r12
	WORD $0x5d41     // popq         %r13
	WORD $0x5e41     // popq         %r14
	WORD $0x5f41     // popq         %r15
	BYTE $0x5d       // popq         %rbp
	BYTE $0xc3       // retq

LBB27_12:
	LONG $0x01f98348                       // cmpq         $1, %rcx
	WORD $0x02b1                           // movb         $2, %cl
	WORD $0xd980; BYTE $0x00               // sbbb         $0, %cl
	WORD $0xd348; BYTE $0xee               // shrq         %cl, %rsi
	LONG $0x34e0c148                       // shlq         $52, %rax
	QUAD $0xffffffffffffb948; WORD $0x000f // movabsq      $4503599627370495, %rcx
	WORD $0x2148; BYTE $0xf1               // andq         %rsi, %rcx
	WORD $0x0948; BYTE $0xc1               // orq          %rax, %rcx
	QUAD $0x000000000000b848; WORD $0x8000 // movabsq      $-9223372036854775808, %rax
	WORD $0x0948; BYTE $0xc8               // orq          %rcx, %rax
	LONG $0xffd47d83                       // cmpl         $-1, $-44(%rbp)
	LONG $0xc1450f48                       // cmovneq      %rcx, %rax
	LONG $0xc84d8b48                       // movq         $-56(%rbp), %rcx
	WORD $0x8948; BYTE $0x01               // movq         %rax, (%rcx)
	WORD $0x01b0                           // movb         $1, %al
	LONG $0xffffaee9; BYTE $0xff           // jmp          LBB27_13, $-82(%rip)
	LONG $0x90909090; BYTE $0x90           // .p2align 4, 0x90

_count_leading_zeroes_u64:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0x000a840f; WORD $0x0000 // je           LBB28_1, $10(%rip)
	LONG $0xc7bd0f48               // bsrq         %rdi, %rax
	LONG $0x3ff08348               // xorq         $63, %rax
	BYTE $0x5d                     // popq         %rbp
	BYTE $0xc3                     // retq

LBB28_1:
	LONG $0x000040b8; BYTE $0x00 // movl         $64, %eax
	BYTE $0x5d                   // popq         %rbp
	BYTE $0xc3                   // retq
	WORD $0x9090                 // .p2align 4, 0x90

_mul_u64:
	BYTE $0x55                                         // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                           // movq         %rsp, %rbp
	WORD $0x8948; BYTE $0xf0                           // movq         %rsi, %rax
	WORD $0xf748; BYTE $0xe7                           // mulq         %rdi
	WORD $0x8948; BYTE $0xc1                           // movq         %rax, %rcx
	WORD $0x8948; BYTE $0xd0                           // movq         %rdx, %rax
	WORD $0x8948; BYTE $0xca                           // movq         %rcx, %rdx
	BYTE $0x5d                                         // popq         %rbp
	BYTE $0xc3                                         // retq
	QUAD $0x9090909090909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

_decimal_to_f64:
	BYTE $0x55                             // pushq        %rbp
	WORD $0x8948; BYTE $0xe5               // movq         %rsp, %rbp
	WORD $0x5741                           // pushq        %r15
	WORD $0x5641                           // pushq        %r14
	WORD $0x5541                           // pushq        %r13
	WORD $0x5441                           // pushq        %r12
	BYTE $0x53                             // pushq        %rbx
	BYTE $0x50                             // pushq        %rax
	WORD $0x8949; BYTE $0xff               // movq         %rdi, %r15
	QUAD $0x000000000000bd49; WORD $0x0010 // movabsq      $4503599627370496, %r13
	LONG $0x00107f83                       // cmpl         $0, $16(%rdi)
	LONG $0x002e840f; WORD $0x0000         // je           LBB30_1, $46(%rip)
	QUAD $0x000000000000bb48; WORD $0x7ff0 // movabsq      $9218868437227405312, %rbx
	LONG $0x14478b41                       // movl         $20(%r15), %eax
	WORD $0x3145; BYTE $0xe4               // xorl         %r12d, %r12d
	LONG $0x0001363d; BYTE $0x00           // cmpl         $310, %eax
	LONG $0x01888f0f; WORD $0x0000         // jg           LBB30_26, $392(%rip)
	LONG $0xfffeb63d; BYTE $0xff           // cmpl         $-330, %eax
	LONG $0x00118d0f; WORD $0x0000         // jge          LBB30_5, $17(%rip)
	WORD $0xdb31                           // xorl         %ebx, %ebx
	LONG $0x000176e9; BYTE $0x00           // jmp          LBB30_26, $374(%rip)

LBB30_1:
	WORD $0xdb31                 // xorl         %ebx, %ebx
	WORD $0x3145; BYTE $0xe4     // xorl         %r12d, %r12d
	LONG $0x00016ce9; BYTE $0x00 // jmp          LBB30_26, $364(%rip)

LBB30_5:
	LONG $0xd0758948                           // movq         %rsi, $-48(%rbp)
	WORD $0xc085                               // testl        %eax, %eax
	LONG $0x004b8e0f; WORD $0x0000             // jle          LBB30_10, $75(%rip)
	WORD $0x3145; BYTE $0xe4                   // xorl         %r12d, %r12d
	LONG $0xed358d4c; WORD $0x0068; BYTE $0x00 // leaq         $26861(%rip), %r14  /* _POW_TAB(%rip) */
	LONG $0x000023e9; BYTE $0x00               // jmp          LBB30_7, $35(%rip)
	QUAD $0x9090909090909090                   // .p2align 4, 0x90

LBB30_9:
	WORD $0xde89                   // movl         %ebx, %esi
	WORD $0xdef7                   // negl         %esi
	WORD $0x894c; BYTE $0xff       // movq         %r15, %rdi
	LONG $0x000174e8; BYTE $0x00   // callq        _decimal_shift, $372(%rip)
	WORD $0x0141; BYTE $0xdc       // addl         %ebx, %r12d
	LONG $0x14478b41               // movl         $20(%r15), %eax
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x00198e0f; WORD $0x0000 // jle          LBB30_10, $25(%rip)

LBB30_7:
	LONG $0x00001bbb; BYTE $0x00   // movl         $27, %ebx
	WORD $0xf883; BYTE $0x08       // cmpl         $8, %eax
	LONG $0xffd78f0f; WORD $0xffff // jg           LBB30_9, $-41(%rip)
	WORD $0x9848                   // cltq
	LONG $0x861c8b41               // movl         (%r14,%rax,4), %ebx
	LONG $0xffffcce9; BYTE $0xff   // jmp          LBB30_9, $-52(%rip)

LBB30_10:
	LONG $0xa5358d4c; WORD $0x0068; BYTE $0x00 // leaq         $26789(%rip), %r14  /* _POW_TAB(%rip) */
	LONG $0x00000de9; BYTE $0x00               // jmp          LBB30_11, $13(%rip)

	// .p2align 4, 0x90
LBB30_16:
	WORD $0x894c; BYTE $0xff     // movq         %r15, %rdi
	WORD $0xde89                 // movl         %ebx, %esi
	LONG $0x000136e8; BYTE $0x00 // callq        _decimal_shift, $310(%rip)
	WORD $0x2941; BYTE $0xdc     // subl         %ebx, %r12d

LBB30_11:
	LONG $0x14476349               // movslq       $20(%r15), %rax
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x0014880f; WORD $0x0000 // js           LBB30_14, $20(%rip)
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x002b850f; WORD $0x0000 // jne          LBB30_17, $43(%rip)
	WORD $0x8b49; BYTE $0x0f       // movq         (%r15), %rcx
	WORD $0x3980; BYTE $0x34       // cmpb         $52, (%rcx)
	LONG $0x001f8f0f; WORD $0x0000 // jg           LBB30_17, $31(%rip)

LBB30_14:
	LONG $0x00001bbb; BYTE $0x00   // movl         $27, %ebx
	WORD $0xf883; BYTE $0xf8       // cmpl         $-8, %eax
	LONG $0xffc48c0f; WORD $0xffff // jl           LBB30_16, $-60(%rip)
	LONG $0x02e0c148               // shlq         $2, %rax
	WORD $0x894c; BYTE $0xf1       // movq         %r14, %rcx
	WORD $0x2948; BYTE $0xc1       // subq         %rax, %rcx
	WORD $0x198b                   // movl         (%rcx), %ebx
	LONG $0xffffb3e9; BYTE $0xff   // jmp          LBB30_16, $-77(%rip)

LBB30_17:
	LONG $0x02fc8141; WORD $0xfffc; BYTE $0xff // cmpl         $-1022, %r12d
	LONG $0x00288f0f; WORD $0x0000             // jg           LBB30_18, $40(%rip)
	LONG $0xfdc48141; WORD $0x0003; BYTE $0x00 // addl         $1021, %r12d
	WORD $0x894c; BYTE $0xff                   // movq         %r15, %rdi
	WORD $0x8944; BYTE $0xe6                   // movl         %r12d, %esi
	LONG $0x0000d4e8; BYTE $0x00               // callq        _decimal_shift, $212(%rip)
	LONG $0xfffc02bb; BYTE $0xff               // movl         $-1022, %ebx
	LONG $0x03fffb81; WORD $0x0000             // cmpl         $1023, %ebx
	LONG $0x00188e0f; WORD $0x0000             // jle          LBB30_22, $24(%rip)
	LONG $0x00004ae9; BYTE $0x00               // jmp          LBB30_21, $74(%rip)

LBB30_18:
	LONG $0xffc48341               // addl         $-1, %r12d
	WORD $0x8944; BYTE $0xe3       // movl         %r12d, %ebx
	LONG $0x03fffb81; WORD $0x0000 // cmpl         $1023, %ebx
	LONG $0x00378f0f; WORD $0x0000 // jg           LBB30_21, $55(%rip)

LBB30_22:
	WORD $0x894c; BYTE $0xff               // movq         %r15, %rdi
	LONG $0x000035be; BYTE $0x00           // movl         $53, %esi
	LONG $0x00009ee8; BYTE $0x00           // callq        _decimal_shift, $158(%rip)
	WORD $0x894c; BYTE $0xff               // movq         %r15, %rdi
	LONG $0x000166e8; BYTE $0x00           // callq        _rounded_integer, $358(%rip)
	WORD $0x8949; BYTE $0xc4               // movq         %rax, %r12
	QUAD $0x000000000000b848; WORD $0x0020 // movabsq      $9007199254740992, %rax
	WORD $0x3949; BYTE $0xc4               // cmpq         %rax, %r12
	LONG $0x0028850f; WORD $0x0000         // jne          LBB30_25, $40(%rip)
	LONG $0x03fefb81; WORD $0x0000         // cmpl         $1022, %ebx
	LONG $0x00168e0f; WORD $0x0000         // jle          LBB30_24, $22(%rip)

LBB30_21:
	WORD $0x3145; BYTE $0xe4               // xorl         %r12d, %r12d
	LONG $0xd0758b48                       // movq         $-48(%rbp), %rsi
	QUAD $0x000000000000bb48; WORD $0x7ff0 // movabsq      $9218868437227405312, %rbx
	LONG $0x000027e9; BYTE $0x00           // jmp          LBB30_26, $39(%rip)

LBB30_24:
	WORD $0xc383; BYTE $0x01 // addl         $1, %ebx
	WORD $0x894d; BYTE $0xec // movq         %r13, %r12

LBB30_25:
	WORD $0x894c; BYTE $0xe0       // movq         %r12, %rax
	WORD $0x214c; BYTE $0xe8       // andq         %r13, %rax
	LONG $0x03ffc381; WORD $0x0000 // addl         $1023, %ebx
	LONG $0x07ffe381; WORD $0x0000 // andl         $2047, %ebx
	LONG $0x34e3c148               // shlq         $52, %rbx
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0xd8440f48               // cmoveq       %rax, %rbx
	LONG $0xd0758b48               // movq         $-48(%rbp), %rsi

LBB30_26:
	LONG $0xffc58349                       // addq         $-1, %r13
	WORD $0x214d; BYTE $0xe5               // andq         %r12, %r13
	WORD $0x0949; BYTE $0xdd               // orq          %rbx, %r13
	QUAD $0x000000000000b848; WORD $0x8000 // movabsq      $-9223372036854775808, %rax
	WORD $0x094c; BYTE $0xe8               // orq          %r13, %rax
	LONG $0x187f8341; BYTE $0x00           // cmpl         $0, $24(%r15)
	LONG $0xc5440f49                       // cmoveq       %r13, %rax
	WORD $0x8948; BYTE $0x06               // movq         %rax, (%rsi)
	WORD $0xc031                           // xorl         %eax, %eax
	LONG $0x08c48348                       // addq         $8, %rsp
	BYTE $0x5b                             // popq         %rbx
	WORD $0x5c41                           // popq         %r12
	WORD $0x5d41                           // popq         %r13
	WORD $0x5e41                           // popq         %r14
	WORD $0x5f41                           // popq         %r15
	BYTE $0x5d                             // popq         %rbp
	BYTE $0xc3                             // retq
	WORD $0x9090; BYTE $0x90               // .p2align 4, 0x90

_decimal_shift:
	BYTE $0x55                                               // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                                 // movq         %rsp, %rbp
	WORD $0x5741                                             // pushq        %r15
	WORD $0x5641                                             // pushq        %r14
	BYTE $0x53                                               // pushq        %rbx
	BYTE $0x50                                               // pushq        %rax
	LONG $0x00107f83                                         // cmpl         $0, $16(%rdi)
	LONG $0x00ac840f; WORD $0x0000                           // je           LBB31_12, $172(%rip)
	WORD $0x8941; BYTE $0xf7                                 // movl         %esi, %r15d
	WORD $0xf685                                             // testl        %esi, %esi
	LONG $0x00a1840f; WORD $0x0000                           // je           LBB31_12, $161(%rip)
	WORD $0x8949; BYTE $0xfe                                 // movq         %rdi, %r14
	LONG $0x004b8e0f; WORD $0x0000                           // jle          LBB31_7, $75(%rip)
	LONG $0x3dff8341                                         // cmpl         $61, %r15d
	LONG $0x00318c0f; WORD $0x0000                           // jl           LBB31_4, $49(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB31_5:
	WORD $0x894c; BYTE $0xf7       // movq         %r14, %rdi
	LONG $0x00003cbe; BYTE $0x00   // movl         $60, %esi
	LONG $0x0027b3e8; BYTE $0x00   // callq        _left_shift, $10163(%rip)
	LONG $0xc45f8d41               // leal         $-60(%r15), %ebx
	LONG $0x78ff8341               // cmpl         $120, %r15d
	WORD $0x8941; BYTE $0xdf       // movl         %ebx, %r15d
	LONG $0xffe28f0f; WORD $0xffff // jg           LBB31_5, $-30(%rip)
	LONG $0x000003e9; BYTE $0x00   // jmp          LBB31_6, $3(%rip)

LBB31_4:
	WORD $0x8944; BYTE $0xfb // movl         %r15d, %ebx

LBB31_6:
	WORD $0x894c; BYTE $0xf7     // movq         %r14, %rdi
	WORD $0xde89                 // movl         %ebx, %esi
	LONG $0x002790e8; BYTE $0x00 // callq        _left_shift, $10128(%rip)
	WORD $0x8941; BYTE $0xdf     // movl         %ebx, %r15d

LBB31_7:
	WORD $0x8545; BYTE $0xff               // testl        %r15d, %r15d
	LONG $0x0044890f; WORD $0x0000         // jns          LBB31_12, $68(%rip)
	LONG $0xc3ff8341                       // cmpl         $-61, %r15d
	LONG $0x002d8f0f; WORD $0x0000         // jg           LBB31_9, $45(%rip)
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

LBB31_10:
	WORD $0x894c; BYTE $0xf7       // movq         %r14, %rdi
	LONG $0x00003cbe; BYTE $0x00   // movl         $60, %esi
	LONG $0x002903e8; BYTE $0x00   // callq        _right_shift, $10499(%rip)
	LONG $0x3c778d41               // leal         $60(%r15), %esi
	LONG $0x88ff8341               // cmpl         $-120, %r15d
	WORD $0x8941; BYTE $0xf7       // movl         %esi, %r15d
	LONG $0xffe28c0f; WORD $0xffff // jl           LBB31_10, $-30(%rip)
	LONG $0x000003e9; BYTE $0x00   // jmp          LBB31_11, $3(%rip)

LBB31_9:
	WORD $0x8944; BYTE $0xfe // movl         %r15d, %esi

LBB31_11:
	WORD $0xdef7                 // negl         %esi
	WORD $0x894c; BYTE $0xf7     // movq         %r14, %rdi
	LONG $0x0028e0e8; BYTE $0x00 // callq        _right_shift, $10464(%rip)

LBB31_12:
	LONG $0x08c48348             // addq         $8, %rsp
	BYTE $0x5b                   // popq         %rbx
	WORD $0x5e41                 // popq         %r14
	WORD $0x5f41                 // popq         %r15
	BYTE $0x5d                   // popq         %rbp
	BYTE $0xc3                   // retq
	LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

_rounded_integer:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	BYTE $0x53                                 // pushq        %rbx
	BYTE $0x50                                 // pushq        %rax
	WORD $0x778b; BYTE $0x14                   // movl         $20(%rdi), %esi
	LONG $0xffc3c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rbx
	WORD $0xfe83; BYTE $0x14                   // cmpl         $20, %esi
	LONG $0x00838f0f; WORD $0x0000             // jg           LBB32_10, $131(%rip)
	WORD $0xf685                               // testl        %esi, %esi
	LONG $0x00468e0f; WORD $0x0000             // jle          LBB32_2, $70(%rip)
	WORD $0x4f8b; BYTE $0x10                   // movl         $16(%rdi), %ecx
	WORD $0xc031                               // xorl         %eax, %eax
	WORD $0xc985                               // testl        %ecx, %ecx
	WORD $0x4e0f; BYTE $0xc8                   // cmovlel      %eax, %ecx
	WORD $0xdb31                               // xorl         %ebx, %ebx
	WORD $0x9090; BYTE $0x90                   // .p2align 4, 0x90

LBB32_4:
	WORD $0x3948; BYTE $0xc1       // cmpq         %rax, %rcx
	LONG $0x0021840f; WORD $0x0000 // je           LBB32_6, $33(%rip)
	LONG $0x9b148d48               // leaq         (%rbx,%rbx,4), %rdx
	WORD $0x8b48; BYTE $0x1f       // movq         (%rdi), %rbx
	LONG $0x1cbe0f48; BYTE $0x03   // movsbq       (%rbx,%rax), %rbx
	LONG $0x531c8d48               // leaq         (%rbx,%rdx,2), %rbx
	LONG $0xd0c38348               // addq         $-48, %rbx
	LONG $0x01c08348               // addq         $1, %rax
	WORD $0x3948; BYTE $0xc6       // cmpq         %rax, %rsi
	LONG $0xffd6850f; WORD $0xffff // jne          LBB32_4, $-42(%rip)

LBB32_6:
	WORD $0xf039                   // cmpl         %esi, %eax
	LONG $0x00118c0f; WORD $0x0000 // jl           LBB32_7, $17(%rip)
	LONG $0x000029e9; BYTE $0x00   // jmp          LBB32_9, $41(%rip)

LBB32_2:
	WORD $0xc031                   // xorl         %eax, %eax
	WORD $0xdb31                   // xorl         %ebx, %ebx
	WORD $0xf039                   // cmpl         %esi, %eax
	LONG $0x001d8d0f; WORD $0x0000 // jge          LBB32_9, $29(%rip)

LBB32_7:
	WORD $0xf189                         // movl         %esi, %ecx
	WORD $0xc129                         // subl         %eax, %ecx
	QUAD $0x9090909090909090; BYTE $0x90 // .p2align 4, 0x90

LBB32_8:
	WORD $0x0148; BYTE $0xdb       // addq         %rbx, %rbx
	LONG $0x9b1c8d48               // leaq         (%rbx,%rbx,4), %rbx
	WORD $0xc183; BYTE $0xff       // addl         $-1, %ecx
	LONG $0xfff0850f; WORD $0xffff // jne          LBB32_8, $-16(%rip)

LBB32_9:
	LONG $0x002a5be8; BYTE $0x00 // callq        _should_roundup, $10843(%rip)
	WORD $0xf883; BYTE $0x01     // cmpl         $1, %eax
	LONG $0xffdb8348             // sbbq         $-1, %rbx

LBB32_10:
	WORD $0x8948; BYTE $0xd8               // movq         %rbx, %rax
	LONG $0x08c48348                       // addq         $8, %rsp
	BYTE $0x5b                             // popq         %rbx
	BYTE $0x5d                             // popq         %rbp
	BYTE $0xc3                             // retq
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

_atof_native:
	BYTE $0x55                                                           // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                                             // movq         %rsp, %rbp
	BYTE $0x53                                                           // pushq        %rbx
	LONG $0x28ec8348                                                     // subq         $40, %rsp
	WORD $0x8949; BYTE $0xc8                                             // movq         %rcx, %r8
	WORD $0x8948; BYTE $0xd1                                             // movq         %rdx, %rcx
	WORD $0x8948; BYTE $0xf2                                             // movq         %rsi, %rdx
	WORD $0x8948; BYTE $0xfe                                             // movq         %rdi, %rsi
	QUAD $0x00000000f045c748                                             // movq         $0, $-16(%rbp)
	LONG $0xd05d8d48                                                     // leaq         $-48(%rbp), %rbx
	WORD $0x8948; BYTE $0xdf                                             // movq         %rbx, %rdi
	LONG $0x000027e8; BYTE $0x00                                         // callq        _decimal_set, $39(%rip)
	LONG $0xf0758d48                                                     // leaq         $-16(%rbp), %rsi
	WORD $0x8948; BYTE $0xdf                                             // movq         %rbx, %rdi
	LONG $0xfffc4be8; BYTE $0xff                                         // callq        _decimal_to_f64, $-949(%rip)
	LONG $0x4510fbc5; BYTE $0xf0                                         // vmovsd       $-16(%rbp), %xmm0
	LONG $0x28c48348                                                     // addq         $40, %rsp
	BYTE $0x5b                                                           // popq         %rbx
	BYTE $0x5d                                                           // popq         %rbp
	BYTE $0xc3                                                           // retq
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

_decimal_set:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	BYTE $0x53                                 // pushq        %rbx
	BYTE $0x50                                 // pushq        %rax
	WORD $0x8949; BYTE $0xd6                   // movq         %rdx, %r14
	WORD $0x8949; BYTE $0xf7                   // movq         %rsi, %r15
	WORD $0x8948; BYTE $0xfb                   // movq         %rdi, %rbx
	WORD $0x8948; BYTE $0xce                   // movq         %rcx, %rsi
	WORD $0x894c; BYTE $0xc2                   // movq         %r8, %rdx
	LONG $0x002a42e8; BYTE $0x00               // callq        _decimal_init, $10818(%rip)
	WORD $0xc031                               // xorl         %eax, %eax
	LONG $0x2d3f8041                           // cmpb         $45, (%r15)
	LONG $0x000000be; BYTE $0x00               // movl         $0, %esi
	LONG $0x000c850f; WORD $0x0000             // jne          LBB34_2, $12(%rip)
	LONG $0x011843c7; WORD $0x0000; BYTE $0x00 // movl         $1, $24(%rbx)
	LONG $0x000001be; BYTE $0x00               // movl         $1, %esi

LBB34_2:
	WORD $0xf189                   // movl         %esi, %ecx
	WORD $0x394c; BYTE $0xf1       // cmpq         %r14, %rcx
	WORD $0x9c0f; BYTE $0xc2       // setl         %dl
	LONG $0x00168c0f; WORD $0x0000 // jl           LBB34_3, $22(%rip)
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x00bf840f; WORD $0x0000 // je           LBB34_18, $191(%rip)

LBB34_19:
	WORD $0xc2f6; BYTE $0x01       // testb        $1, %dl
	LONG $0x00c5850f; WORD $0x0000 // jne          LBB34_20, $197(%rip)
	LONG $0x000161e9; BYTE $0x00   // jmp          LBB34_33, $353(%rip)

LBB34_3:
	WORD $0xc031                           // xorl         %eax, %eax
	LONG $0x000028e9; BYTE $0x00           // jmp          LBB34_4, $40(%rip)
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

LBB34_9:
	WORD $0x8b48; BYTE $0x3b // movq         (%rbx), %rdi
	LONG $0x17348840         // movb         %sil, (%rdi,%rdx)
	LONG $0x01104383         // addl         $1, $16(%rbx)

LBB34_14:
	LONG $0x01c18348               // addq         $1, %rcx
	WORD $0x394c; BYTE $0xf1       // cmpq         %r14, %rcx
	WORD $0x9c0f; BYTE $0xc2       // setl         %dl
	WORD $0x3949; BYTE $0xce       // cmpq         %rcx, %r14
	LONG $0x0075840f; WORD $0x0000 // je           LBB34_15, $117(%rip)

LBB34_4:
	LONG $0x34b60f41; BYTE $0x0f   // movzbl       (%r15,%rcx), %esi
	WORD $0x7e8d; BYTE $0xd0       // leal         $-48(%rsi), %edi
	LONG $0x09ff8040               // cmpb         $9, %dil
	LONG $0x0040870f; WORD $0x0000 // ja           LBB34_12, $64(%rip)
	LONG $0x30fe8040               // cmpb         $48, %sil
	LONG $0x000a850f; WORD $0x0000 // jne          LBB34_8, $10(%rip)
	LONG $0x00107b83               // cmpl         $0, $16(%rbx)
	LONG $0x0046840f; WORD $0x0000 // je           LBB34_7, $70(%rip)

LBB34_8:
	LONG $0x10536348                           // movslq       $16(%rbx), %rdx
	LONG $0x08533948                           // cmpq         %rdx, $8(%rbx)
	LONG $0xffae870f; WORD $0xffff             // ja           LBB34_9, $-82(%rip)
	LONG $0x30fe8040                           // cmpb         $48, %sil
	LONG $0xffaf840f; WORD $0xffff             // je           LBB34_14, $-81(%rip)
	LONG $0x011c43c7; WORD $0x0000; BYTE $0x00 // movl         $1, $28(%rbx)
	LONG $0xffffa3e9; BYTE $0xff               // jmp          LBB34_14, $-93(%rip)
	QUAD $0x9090909090909090                   // .p2align 4, 0x90

LBB34_12:
	LONG $0x2efe8040               // cmpb         $46, %sil
	LONG $0x001c850f; WORD $0x0000 // jne          LBB34_16, $28(%rip)
	WORD $0x438b; BYTE $0x10       // movl         $16(%rbx), %eax
	WORD $0x4389; BYTE $0x14       // movl         %eax, $20(%rbx)
	LONG $0x000001b8; BYTE $0x00   // movl         $1, %eax
	LONG $0xffff81e9; BYTE $0xff   // jmp          LBB34_14, $-127(%rip)

LBB34_7:
	LONG $0xff144383             // addl         $-1, $20(%rbx)
	LONG $0xffff78e9; BYTE $0xff // jmp          LBB34_14, $-136(%rip)

LBB34_15:
	WORD $0x894c; BYTE $0xf1 // movq         %r14, %rcx

LBB34_16:
	WORD $0xce89                   // movl         %ecx, %esi
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0xff41850f; WORD $0xffff // jne          LBB34_19, $-191(%rip)

LBB34_18:
	WORD $0x438b; BYTE $0x10       // movl         $16(%rbx), %eax
	WORD $0x4389; BYTE $0x14       // movl         %eax, $20(%rbx)
	WORD $0xc2f6; BYTE $0x01       // testb        $1, %dl
	LONG $0x00a1840f; WORD $0x0000 // je           LBB34_33, $161(%rip)

LBB34_20:
	WORD $0xf189                   // movl         %esi, %ecx
	LONG $0x0f048a41               // movb         (%r15,%rcx), %al
	WORD $0x200c                   // orb          $32, %al
	WORD $0x653c                   // cmpb         $101, %al
	LONG $0x0091850f; WORD $0x0000 // jne          LBB34_33, $145(%rip)
	LONG $0x0f548a41; BYTE $0x01   // movb         $1(%r15,%rcx), %dl
	WORD $0xfa80; BYTE $0x2d       // cmpb         $45, %dl
	LONG $0x0016840f; WORD $0x0000 // je           LBB34_25, $22(%rip)
	LONG $0x000001b8; BYTE $0x00   // movl         $1, %eax
	WORD $0xfa80; BYTE $0x2b       // cmpb         $43, %dl
	LONG $0x0015850f; WORD $0x0000 // jne          LBB34_23, $21(%rip)
	WORD $0xc183; BYTE $0x02       // addl         $2, %ecx
	LONG $0x000011e9; BYTE $0x00   // jmp          LBB34_26, $17(%rip)

LBB34_25:
	WORD $0xc183; BYTE $0x02     // addl         $2, %ecx
	LONG $0xffffffb8; BYTE $0xff // movl         $-1, %eax
	LONG $0x000004e9; BYTE $0x00 // jmp          LBB34_26, $4(%rip)

LBB34_23:
	LONG $0x01c18348 // addq         $1, %rcx

LBB34_26:
	WORD $0x6348; BYTE $0xd1                   // movslq       %ecx, %rdx
	WORD $0xc931                               // xorl         %ecx, %ecx
	WORD $0x394c; BYTE $0xf2                   // cmpq         %r14, %rdx
	LONG $0x00488d0f; WORD $0x0000             // jge          LBB34_32, $72(%rip)
	WORD $0xc931                               // xorl         %ecx, %ecx
	QUAD $0x9090909090909090; LONG $0x90909090 // .p2align 4, 0x90

LBB34_28:
	LONG $0x34be0f41; BYTE $0x17   // movsbl       (%r15,%rdx), %esi
	WORD $0xfe83; BYTE $0x30       // cmpl         $48, %esi
	LONG $0x002c8c0f; WORD $0x0000 // jl           LBB34_32, $44(%rip)
	LONG $0x39fe8040               // cmpb         $57, %sil
	LONG $0x00228f0f; WORD $0x0000 // jg           LBB34_32, $34(%rip)
	LONG $0x270ff981; WORD $0x0000 // cmpl         $9999, %ecx
	LONG $0x00168f0f; WORD $0x0000 // jg           LBB34_32, $22(%rip)
	WORD $0x0c8d; BYTE $0x89       // leal         (%rcx,%rcx,4), %ecx
	WORD $0x0c8d; BYTE $0x4e       // leal         (%rsi,%rcx,2), %ecx
	WORD $0xc183; BYTE $0xd0       // addl         $-48, %ecx
	LONG $0x01c28348               // addq         $1, %rdx
	WORD $0x394c; BYTE $0xf2       // cmpq         %r14, %rdx
	LONG $0xffc68c0f; WORD $0xffff // jl           LBB34_28, $-58(%rip)

LBB34_32:
	WORD $0xaf0f; BYTE $0xc8 // imull        %eax, %ecx
	WORD $0x4b01; BYTE $0x14 // addl         %ecx, $20(%rbx)

LBB34_33:
	LONG $0x08c48348             // addq         $8, %rsp
	BYTE $0x5b                   // popq         %rbx
	WORD $0x5e41                 // popq         %r14
	WORD $0x5f41                 // popq         %r15
	BYTE $0x5d                   // popq         %rbp
	BYTE $0xc3                   // retq
	LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

_value:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5641                               // pushq        %r14
	BYTE $0x53                                 // pushq        %rbx
	LONG $0x20ec8348                           // subq         $32, %rsp
	WORD $0x894c; BYTE $0xc3                   // movq         %r8, %rbx
	WORD $0x8949; BYTE $0xce                   // movq         %rcx, %r14
	LONG $0xe8558948                           // movq         %rdx, $-24(%rbp)
	LONG $0xd87d8948                           // movq         %rdi, $-40(%rbp)
	LONG $0xe0758948                           // movq         %rsi, $-32(%rbp)
	LONG $0xd87d8d48                           // leaq         $-40(%rbp), %rdi
	LONG $0xe8758d48                           // leaq         $-24(%rbp), %rsi
	LONG $0x000356e8; BYTE $0x00               // callq        _advance_ns, $854(%rip)
	WORD $0xbe0f; BYTE $0xc0                   // movsbl       %al, %eax
	WORD $0xf883; BYTE $0x7d                   // cmpl         $125, %eax
	LONG $0x003c870f; WORD $0x0000             // ja           LBB35_16, $60(%rip)
	LONG $0x4b0d8d48; WORD $0x0001; BYTE $0x00 // leaq         $331(%rip), %rcx  /* LJTI35_0(%rip) */
	LONG $0x81046348                           // movslq       (%rcx,%rax,4), %rax
	WORD $0x0148; BYTE $0xc8                   // addq         %rcx, %rax
	JMP  AX

LBB35_2:
	LONG $0xd87d8d48             // leaq         $-40(%rbp), %rdi
	LONG $0xe8758d48             // leaq         $-24(%rbp), %rsi
	WORD $0x894c; BYTE $0xf2     // movq         %r14, %rdx
	WORD $0x8948; BYTE $0xd9     // movq         %rbx, %rcx
	LONG $0x000417e8; BYTE $0x00 // callq        _vdigits, $1047(%rip)
	LONG $0xe8458b48             // movq         $-24(%rbp), %rax
	LONG $0x00011ae9; BYTE $0x00 // jmp          LBB35_17, $282(%rip)

LBB35_15:
	LONG $0x0106c749; WORD $0x0000; BYTE $0x00 // movq         $1, (%r14)
	LONG $0xe8458b48                           // movq         $-24(%rbp), %rax
	LONG $0x00010ae9; BYTE $0x00               // jmp          LBB35_17, $266(%rip)

LBB35_16:
	LONG $0xfe06c749; WORD $0xffff; BYTE $0xff // movq         $-2, (%r14)
	LONG $0xe8458b48                           // movq         $-24(%rbp), %rax
	LONG $0xffc08348                           // addq         $-1, %rax
	LONG $0x0000f6e9; BYTE $0x00               // jmp          LBB35_17, $246(%rip)

LBB35_3:
	LONG $0xd87d8d48             // leaq         $-40(%rbp), %rdi
	LONG $0xe8758d48             // leaq         $-24(%rbp), %rsi
	WORD $0x894c; BYTE $0xf2     // movq         %r14, %rdx
	WORD $0x8948; BYTE $0xd9     // movq         %rbx, %rcx
	LONG $0x000427e8; BYTE $0x00 // callq        _vstring, $1063(%rip)
	LONG $0xe8458b48             // movq         $-24(%rbp), %rax
	LONG $0x0000dae9; BYTE $0x00 // jmp          LBB35_17, $218(%rip)

LBB35_12:
	WORD $0xdb85                               // testl        %ebx, %ebx
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x00000bb9; BYTE $0x00               // movl         $11, %ecx
	LONG $0x0000b4e9; BYTE $0x00               // jmp          LBB35_11, $180(%rip)

LBB35_10:
	WORD $0xdb85                               // testl        %ebx, %ebx
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x00000ab9; BYTE $0x00               // movl         $10, %ecx
	LONG $0x0000a1e9; BYTE $0x00               // jmp          LBB35_11, $161(%rip)

LBB35_8:
	LONG $0x0506c749; WORD $0x0000; BYTE $0x00 // movq         $5, (%r14)
	LONG $0xe8458b48                           // movq         $-24(%rbp), %rax
	LONG $0x0000a4e9; BYTE $0x00               // jmp          LBB35_17, $164(%rip)

LBB35_13:
	WORD $0xdb85                               // testl        %ebx, %ebx
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x00000cb9; BYTE $0x00               // movl         $12, %ecx
	LONG $0x00007ee9; BYTE $0x00               // jmp          LBB35_11, $126(%rip)

LBB35_7:
	LONG $0xd87d8d48               // leaq         $-40(%rbp), %rdi
	LONG $0xe8758d48               // leaq         $-24(%rbp), %rsi
	LONG $0x000004b9; BYTE $0x00   // movl         $4, %ecx
	WORD $0xd231                   // xorl         %edx, %edx
	LONG $0x6c61b841; WORD $0x6573 // movl         $1702063201, %r8d
	LONG $0x000035e9; BYTE $0x00   // jmp          LBB35_5, $53(%rip)

LBB35_4:
	LONG $0xd87d8d48               // leaq         $-40(%rbp), %rdi
	LONG $0xe8758d48               // leaq         $-24(%rbp), %rsi
	LONG $0x000001ba; BYTE $0x00   // movl         $1, %edx
	LONG $0x000002b9; BYTE $0x00   // movl         $2, %ecx
	LONG $0x756eb841; WORD $0x6c6c // movl         $1819047278, %r8d
	LONG $0x000018e9; BYTE $0x00   // jmp          LBB35_5, $24(%rip)

LBB35_6:
	LONG $0xd87d8d48               // leaq         $-40(%rbp), %rdi
	LONG $0xe8758d48               // leaq         $-24(%rbp), %rsi
	LONG $0x000001ba; BYTE $0x00   // movl         $1, %edx
	LONG $0x000003b9; BYTE $0x00   // movl         $3, %ecx
	LONG $0x7274b841; WORD $0x6575 // movl         $1702195828, %r8d

LBB35_5:
	LONG $0x000401e8; BYTE $0x00 // callq        _advance_dword, $1025(%rip)
	WORD $0x8949; BYTE $0x06     // movq         %rax, (%r14)
	LONG $0xe8458b48             // movq         $-24(%rbp), %rax
	LONG $0x000031e9; BYTE $0x00 // jmp          LBB35_17, $49(%rip)

LBB35_9:
	LONG $0x0606c749; WORD $0x0000; BYTE $0x00 // movq         $6, (%r14)
	LONG $0xe8458b48                           // movq         $-24(%rbp), %rax
	LONG $0x000021e9; BYTE $0x00               // jmp          LBB35_17, $33(%rip)

LBB35_14:
	WORD $0xdb85                               // testl        %ebx, %ebx
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x00000db9; BYTE $0x00               // movl         $13, %ecx

LBB35_11:
	LONG $0xc8490f48         // cmovnsq      %rax, %rcx
	WORD $0x8949; BYTE $0x0e // movq         %rcx, (%r14)
	WORD $0xfbc1; BYTE $0x1f // sarl         $31, %ebx
	WORD $0xd3f7             // notl         %ebx
	WORD $0x6348; BYTE $0xc3 // movslq       %ebx, %rax
	LONG $0xe8450348         // addq         $-24(%rbp), %rax

LBB35_17:
	LONG $0x20c48348         // addq         $32, %rsp
	BYTE $0x5b               // popq         %rbx
	WORD $0x5e41             // popq         %r14
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq
	WORD $0x9090; BYTE $0x90 // .p2align 2, 0x90

	// .set L35_0_set_15, LBB35_15-LJTI35_0
	// .set L35_0_set_16, LBB35_16-LJTI35_0
	// .set L35_0_set_3, LBB35_3-LJTI35_0
	// .set L35_0_set_12, LBB35_12-LJTI35_0
	// .set L35_0_set_2, LBB35_2-LJTI35_0
	// .set L35_0_set_10, LBB35_10-LJTI35_0
	// .set L35_0_set_8, LBB35_8-LJTI35_0
	// .set L35_0_set_13, LBB35_13-LJTI35_0
	// .set L35_0_set_7, LBB35_7-LJTI35_0
	// .set L35_0_set_4, LBB35_4-LJTI35_0
	// .set L35_0_set_6, LBB35_6-LJTI35_0
	// .set L35_0_set_9, LBB35_9-LJTI35_0
	// .set L35_0_set_14, LBB35_14-LJTI35_0
LJTI35_0:
	LONG $0xfffffeda // .long L35_0_set_15
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffefe // .long L35_0_set_3
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xffffff1a // .long L35_0_set_12
	LONG $0xfffffebe // .long L35_0_set_2
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffebe // .long L35_0_set_2
	LONG $0xfffffebe // .long L35_0_set_2
	LONG $0xfffffebe // .long L35_0_set_2
	LONG $0xfffffebe // .long L35_0_set_2
	LONG $0xfffffebe // .long L35_0_set_2
	LONG $0xfffffebe // .long L35_0_set_2
	LONG $0xfffffebe // .long L35_0_set_2
	LONG $0xfffffebe // .long L35_0_set_2
	LONG $0xfffffebe // .long L35_0_set_2
	LONG $0xfffffebe // .long L35_0_set_2
	LONG $0xffffff2d // .long L35_0_set_10
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xffffff40 // .long L35_0_set_8
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xffffff50 // .long L35_0_set_13
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xffffff63 // .long L35_0_set_7
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xffffff7d // .long L35_0_set_4
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xffffff9a // .long L35_0_set_6
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xffffffc3 // .long L35_0_set_9
	LONG $0xfffffeea // .long L35_0_set_16
	LONG $0xffffffd3 // .long L35_0_set_14

	// .p2align 4, 0x90
_advance_ns:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0x5741                   // pushq        %r15
	WORD $0x5641                   // pushq        %r14
	WORD $0x5541                   // pushq        %r13
	WORD $0x5441                   // pushq        %r12
	BYTE $0x53                     // pushq        %rbx
	BYTE $0x50                     // pushq        %rax
	WORD $0x8949; BYTE $0xf6       // movq         %rsi, %r14
	WORD $0x8b4c; BYTE $0x2e       // movq         (%rsi), %r13
	WORD $0x8b4c; BYTE $0x3f       // movq         (%rdi), %r15
	LONG $0x08678b4c               // movq         $8(%rdi), %r12
	WORD $0x394d; BYTE $0xe5       // cmpq         %r12, %r13
	LONG $0x0012830f; WORD $0x0000 // jae          LBB36_4, $18(%rip)
	LONG $0x3cbe0f43; BYTE $0x2f   // movsbl       (%r15,%r13), %edi
	LONG $0x002522e8; BYTE $0x00   // callq        _isspace, $9506(%rip)
	WORD $0xc084                   // testb        %al, %al
	LONG $0x0093840f; WORD $0x0000 // je           LBB36_2, $147(%rip)

LBB36_4:
	LONG $0x015d8d49               // leaq         $1(%r13), %rbx
	WORD $0x394c; BYTE $0xe3       // cmpq         %r12, %rbx
	LONG $0x0012830f; WORD $0x0000 // jae          LBB36_6, $18(%rip)
	LONG $0x3cbe0f41; BYTE $0x1f   // movsbl       (%r15,%rbx), %edi
	LONG $0x002503e8; BYTE $0x00   // callq        _isspace, $9475(%rip)
	WORD $0xc084                   // testb        %al, %al
	LONG $0x0077840f; WORD $0x0000 // je           LBB36_3, $119(%rip)

LBB36_6:
	LONG $0x025d8d49               // leaq         $2(%r13), %rbx
	WORD $0x394c; BYTE $0xe3       // cmpq         %r12, %rbx
	LONG $0x0012830f; WORD $0x0000 // jae          LBB36_8, $18(%rip)
	LONG $0x3cbe0f41; BYTE $0x1f   // movsbl       (%r15,%rbx), %edi
	LONG $0x0024e4e8; BYTE $0x00   // callq        _isspace, $9444(%rip)
	WORD $0xc084                   // testb        %al, %al
	LONG $0x0058840f; WORD $0x0000 // je           LBB36_3, $88(%rip)

LBB36_8:
	LONG $0x035d8d49               // leaq         $3(%r13), %rbx
	WORD $0x394c; BYTE $0xe3       // cmpq         %r12, %rbx
	LONG $0x0012830f; WORD $0x0000 // jae          LBB36_10, $18(%rip)
	LONG $0x3cbe0f41; BYTE $0x1f   // movsbl       (%r15,%rbx), %edi
	LONG $0x0024c5e8; BYTE $0x00   // callq        _isspace, $9413(%rip)
	WORD $0xc084                   // testb        %al, %al
	LONG $0x0039840f; WORD $0x0000 // je           LBB36_3, $57(%rip)

LBB36_10:
	LONG $0x04c58349               // addq         $4, %r13
	WORD $0x394d; BYTE $0xe5       // cmpq         %r12, %r13
	LONG $0x001f830f; WORD $0x0000 // jae          LBB36_11, $31(%rip)
	WORD $0x894c; BYTE $0xff       // movq         %r15, %rdi
	WORD $0x894c; BYTE $0xe6       // movq         %r12, %rsi
	WORD $0x894c; BYTE $0xea       // movq         %r13, %rdx
	LONG $0xffda62e8; BYTE $0xff   // callq        _lspace, $-9630(%rip)
	WORD $0x8948; BYTE $0xc3       // movq         %rax, %rbx
	WORD $0x394c; BYTE $0xe0       // cmpq         %r12, %rax
	LONG $0x0008830f; WORD $0x0000 // jae          LBB36_13, $8(%rip)
	LONG $0x00000de9; BYTE $0x00   // jmp          LBB36_3, $13(%rip)

LBB36_11:
	WORD $0x894d; BYTE $0x2e // movq         %r13, (%r14)

LBB36_13:
	WORD $0xc031                 // xorl         %eax, %eax
	LONG $0x00000ee9; BYTE $0x00 // jmp          LBB36_14, $14(%rip)

LBB36_2:
	WORD $0x894c; BYTE $0xeb // movq         %r13, %rbx

LBB36_3:
	LONG $0x01438d48         // leaq         $1(%rbx), %rax
	WORD $0x8949; BYTE $0x06 // movq         %rax, (%r14)
	LONG $0x1f048a41         // movb         (%r15,%rbx), %al

LBB36_14:
	WORD $0xbe0f; BYTE $0xc0                   // movsbl       %al, %eax
	LONG $0x08c48348                           // addq         $8, %rsp
	BYTE $0x5b                                 // popq         %rbx
	WORD $0x5c41                               // popq         %r12
	WORD $0x5d41                               // popq         %r13
	WORD $0x5e41                               // popq         %r14
	WORD $0x5f41                               // popq         %r15
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

_vdigits:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	BYTE $0x53                     // pushq        %rbx
	BYTE $0x50                     // pushq        %rax
	WORD $0x8948; BYTE $0xd3       // movq         %rdx, %rbx
	LONG $0xff068348               // addq         $-1, (%rsi)
	WORD $0xc1f6; BYTE $0x02       // testb        $2, %cl
	LONG $0x000d850f; WORD $0x0000 // jne          LBB37_1, $13(%rip)
	WORD $0x8948; BYTE $0xda       // movq         %rbx, %rdx
	LONG $0x000192e8; BYTE $0x00   // callq        _vnumber, $402(%rip)
	LONG $0x000021e9; BYTE $0x00   // jmp          LBB37_5, $33(%rip)

LBB37_1:
	LONG $0x0015b8e8; BYTE $0x00               // callq        _skip_number, $5560(%rip)
	WORD $0x8548; BYTE $0xc0                   // testq        %rax, %rax
	LONG $0x0010880f; WORD $0x0000             // js           LBB37_2, $16(%rip)
	LONG $0x0803c748; WORD $0x0000; BYTE $0x00 // movq         $8, (%rbx)
	LONG $0x18438948                           // movq         %rax, $24(%rbx)
	LONG $0x000003e9; BYTE $0x00               // jmp          LBB37_5, $3(%rip)

LBB37_2:
	WORD $0x8948; BYTE $0x03 // movq         %rax, (%rbx)

LBB37_5:
	LONG $0x08c48348             // addq         $8, %rsp
	BYTE $0x5b                   // popq         %rbx
	BYTE $0x5d                   // popq         %rbp
	BYTE $0xc3                   // retq
	LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

_vstring:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	LONG $0x10ec8348                           // subq         $16, %rsp
	WORD $0x8949; BYTE $0xd6                   // movq         %rdx, %r14
	WORD $0x8948; BYTE $0xf3                   // movq         %rsi, %rbx
	WORD $0x8949; BYTE $0xff                   // movq         %rdi, %r15
	QUAD $0xffffffffd845c748                   // movq         $-1, $-40(%rbp)
	WORD $0x8b4c; BYTE $0x26                   // movq         (%rsi), %r12
	LONG $0xd8558d48                           // leaq         $-40(%rbp), %rdx
	WORD $0x894c; BYTE $0xe6                   // movq         %r12, %rsi
	LONG $0x0000f1e8; BYTE $0x00               // callq        _advance_string, $241(%rip)
	WORD $0x8548; BYTE $0xc0                   // testq        %rax, %rax
	LONG $0x0029880f; WORD $0x0000             // js           LBB38_1, $41(%rip)
	WORD $0x8948; BYTE $0x03                   // movq         %rax, (%rbx)
	LONG $0x1066894d                           // movq         %r12, $16(%r14)
	LONG $0x0706c749; WORD $0x0000; BYTE $0x00 // movq         $7, (%r14)
	LONG $0xd84d8b48                           // movq         $-40(%rbp), %rcx
	WORD $0x3948; BYTE $0xc1                   // cmpq         %rax, %rcx
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	LONG $0xc14c0f48                           // cmovlq       %rcx, %rax
	LONG $0x18468949                           // movq         %rax, $24(%r14)
	LONG $0x00000ae9; BYTE $0x00               // jmp          LBB38_3, $10(%rip)

LBB38_1:
	LONG $0x084f8b49         // movq         $8(%r15), %rcx
	WORD $0x8948; BYTE $0x0b // movq         %rcx, (%rbx)
	WORD $0x8949; BYTE $0x06 // movq         %rax, (%r14)

LBB38_3:
	LONG $0x10c48348         // addq         $16, %rsp
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq
	QUAD $0x9090909090909090 // .p2align 4, 0x90

_advance_dword:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x8b4c; BYTE $0x0e                   // movq         (%rsi), %r9
	LONG $0x08578b4c                           // movq         $8(%rdi), %r10
	LONG $0x121c8d4e                           // leaq         (%rdx,%r10), %r11
	LONG $0xfcc38349                           // addq         $-4, %r11
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	WORD $0x394d; BYTE $0xd9                   // cmpq         %r11, %r9
	LONG $0x001a870f; WORD $0x0000             // ja           LBB39_6, $26(%rip)
	WORD $0x8b48; BYTE $0x3f                   // movq         (%rdi), %rdi
	WORD $0x2949; BYTE $0xd1                   // subq         %rdx, %r9
	LONG $0x0f043946                           // cmpl         %r8d, (%rdi,%r9)
	LONG $0x000f850f; WORD $0x0000             // jne          LBB39_2, $15(%rip)
	LONG $0x04c18349                           // addq         $4, %r9
	WORD $0x894d; BYTE $0xca                   // movq         %r9, %r10
	WORD $0x8948; BYTE $0xc8                   // movq         %rcx, %rax

LBB39_6:
	WORD $0x894c; BYTE $0x16 // movq         %r10, (%rsi)

LBB39_7:
	BYTE $0x5d // popq         %rbp
	BYTE $0xc3 // retq

LBB39_2:
	WORD $0x894c; BYTE $0x0e                                             // movq         %r9, (%rsi)
	LONG $0x0cbe0f42; BYTE $0x0f                                         // movsbl       (%rdi,%r9), %ecx
	LONG $0xd0b60f41                                                     // movzbl       %r8b, %edx
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff                           // movq         $-2, %rax
	WORD $0xca39                                                         // cmpl         %ecx, %edx
	LONG $0xffe3850f; WORD $0xffff                                       // jne          LBB39_7, $-29(%rip)
	LONG $0x01c18349                                                     // addq         $1, %r9
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB39_4:
	LONG $0x08e8c141                                                     // shrl         $8, %r8d
	WORD $0x894c; BYTE $0x0e                                             // movq         %r9, (%rsi)
	LONG $0x0cbe0f42; BYTE $0x0f                                         // movsbl       (%rdi,%r9), %ecx
	LONG $0xd0b60f41                                                     // movzbl       %r8b, %edx
	LONG $0x01c18349                                                     // addq         $1, %r9
	WORD $0xca39                                                         // cmpl         %ecx, %edx
	LONG $0xffe4840f; WORD $0xffff                                       // je           LBB39_4, $-28(%rip)
	LONG $0xffffafe9; BYTE $0xff                                         // jmp          LBB39_7, $-81(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

_advance_string:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0xc1f6; BYTE $0x20       // testb        $32, %cl
	LONG $0x0007850f; WORD $0x0000 // jne          LBB40_1, $7(%rip)
	LONG $0x002b8ee8; BYTE $0x00   // callq        _advance_string_default, $11150(%rip)
	BYTE $0x5d                     // popq         %rbp
	BYTE $0xc3                     // retq

LBB40_1:
	LONG $0x002327e8; BYTE $0x00 // callq        _advance_string_validate, $8999(%rip)
	BYTE $0x5d                   // popq         %rbp
	BYTE $0xc3                   // retq
	LONG $0x00000000; BYTE $0x00 // .p2align 4, 0x00

LCPI41_0:
	LONG $0x43300000 // .long 1127219200
	LONG $0x45300000 // .long 1160773632
	LONG $0x00000000 // .long 0
	LONG $0x00000000 // .long 0

LCPI41_1:
	QUAD $0x4330000000000000 // .quad 0x4330000000000000
	QUAD $0x4530000000000000 // .quad 0x4530000000000000

	// .p2align 4, 0x90
_vnumber:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	LONG $0x38ec8348                           // subq         $56, %rsp
	WORD $0x8949; BYTE $0xd7                   // movq         %rdx, %r15
	QUAD $0x00000000c845c748                   // movq         $0, $-56(%rbp)
	WORD $0x8b48; BYTE $0x06                   // movq         (%rsi), %rax
	WORD $0x8b4c; BYTE $0x0f                   // movq         (%rdi), %r9
	LONG $0x08778b4c                           // movq         $8(%rdi), %r14
	LONG $0x20528b4c                           // movq         $32(%rdx), %r10
	LONG $0x285a8b4c                           // movq         $40(%rdx), %r11
	LONG $0x0902c748; WORD $0x0000; BYTE $0x00 // movq         $9, (%rdx)
	LONG $0xc057f9c5                           // vxorpd       %xmm0, %xmm0, %xmm0
	LONG $0x4211f9c5; BYTE $0x08               // vmovupd      %xmm0, $8(%rdx)
	WORD $0x8b48; BYTE $0x0e                   // movq         (%rsi), %rcx
	LONG $0x184a8948                           // movq         %rcx, $24(%rdx)
	WORD $0x394c; BYTE $0xf0                   // cmpq         %r14, %rax
	LONG $0x01ab830f; WORD $0x0000             // jae          LBB41_30, $427(%rip)
	LONG $0x000001bf; BYTE $0x00               // movl         $1, %edi
	LONG $0x013c8041; BYTE $0x2d               // cmpb         $45, (%r9,%rax)
	LONG $0x0012850f; WORD $0x0000             // jne          LBB41_3, $18(%rip)
	LONG $0x01c08348                           // addq         $1, %rax
	LONG $0xffffffbf; BYTE $0xff               // movl         $-1, %edi
	WORD $0x394c; BYTE $0xf0                   // cmpq         %r14, %rax
	LONG $0x0189830f; WORD $0x0000             // jae          LBB41_30, $393(%rip)

LBB41_3:
	LONG $0x010c8a41               // movb         (%r9,%rax), %cl
	WORD $0x518d; BYTE $0xd0       // leal         $-48(%rcx), %edx
	WORD $0xfa80; BYTE $0x0a       // cmpb         $10, %dl
	LONG $0x000f820f; WORD $0x0000 // jb           LBB41_5, $15(%rip)

LBB41_4:
	WORD $0x8948; BYTE $0x06                   // movq         %rax, (%rsi)
	LONG $0xfe07c749; WORD $0xffff; BYTE $0xff // movq         $-2, (%r15)
	LONG $0x000174e9; BYTE $0x00               // jmp          LBB41_31, $372(%rip)

LBB41_5:
	WORD $0xf980; BYTE $0x30               // cmpb         $48, %cl
	LONG $0x0031850f; WORD $0x0000         // jne          LBB41_9, $49(%rip)
	WORD $0x394c; BYTE $0xf0               // cmpq         %r14, %rax
	LONG $0x0171830f; WORD $0x0000         // jae          LBB41_32, $369(%rip)
	LONG $0x084c8a42; BYTE $0x01           // movb         $1(%rax,%r9), %cl
	WORD $0xc180; BYTE $0xd2               // addb         $-46, %cl
	WORD $0xf980; BYTE $0x37               // cmpb         $55, %cl
	LONG $0x0160870f; WORD $0x0000         // ja           LBB41_32, $352(%rip)
	WORD $0xb60f; BYTE $0xc9               // movzbl       %cl, %ecx
	QUAD $0x000000800001ba48; WORD $0x0080 // movabsq      $36028797027352577, %rdx
	LONG $0xcaa30f48                       // btq          %rcx, %rdx
	LONG $0x0149830f; WORD $0x0000         // jae          LBB41_32, $329(%rip)

LBB41_9:
	WORD $0x394c; BYTE $0xf0       // cmpq         %r14, %rax
	WORD $0x920f; BYTE $0xc2       // setb         %dl
	WORD $0x7d89; BYTE $0xd4       // movl         %edi, $-44(%rbp)
	LONG $0x0089830f; WORD $0x0000 // jae          LBB41_18, $137(%rip)
	LONG $0x013c8a41               // movb         (%r9,%rax), %dil
	WORD $0x4f8d; BYTE $0xd0       // leal         $-48(%rdi), %ecx
	WORD $0xf980; BYTE $0x09       // cmpb         $9, %cl
	LONG $0x0079870f; WORD $0x0000 // ja           LBB41_18, $121(%rip)
	LONG $0xffd0b841; WORD $0xffff // movl         $4294967248, %r8d
	LONG $0x01c08348               // addq         $1, %rax
	WORD $0x3145; BYTE $0xe4       // xorl         %r12d, %r12d
	WORD $0xc931                   // xorl         %ecx, %ecx
	WORD $0x3145; BYTE $0xed       // xorl         %r13d, %r13d
	LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB41_12:
	WORD $0xf983; BYTE $0x12             // cmpl         $18, %ecx
	LONG $0x00278f0f; WORD $0x0000       // jg           LBB41_14, $39(%rip)
	QUAD $0x00000000ad148d4a             // leaq         (,%r13,4), %rdx
	WORD $0x014c; BYTE $0xea             // addq         %r13, %rdx
	LONG $0xffbe0f40                     // movsbl       %dil, %edi
	WORD $0x0144; BYTE $0xc7             // addl         %r8d, %edi
	LONG $0x572c8d4c                     // leaq         (%rdi,%rdx,2), %r13
	WORD $0xc183; BYTE $0x01             // addl         $1, %ecx
	LONG $0x00000de9; BYTE $0x00         // jmp          LBB41_15, $13(%rip)
	QUAD $0x9090909090909090; BYTE $0x90 // .p2align 4, 0x90

LBB41_14:
	LONG $0x01c48341 // addl         $1, %r12d

LBB41_15:
	WORD $0x394c; BYTE $0xf0       // cmpq         %r14, %rax
	WORD $0x920f; BYTE $0xc2       // setb         %dl
	WORD $0x3949; BYTE $0xc6       // cmpq         %rax, %r14
	LONG $0x02a7840f; WORD $0x0000 // je           LBB41_56, $679(%rip)
	LONG $0x3cb60f41; BYTE $0x01   // movzbl       (%r9,%rax), %edi
	WORD $0x5f8d; BYTE $0xd0       // leal         $-48(%rdi), %ebx
	LONG $0x01c08348               // addq         $1, %rax
	WORD $0xfb80; BYTE $0x09       // cmpb         $9, %bl
	LONG $0xffa8860f; WORD $0xffff // jbe          LBB41_12, $-88(%rip)
	LONG $0xffc08348               // addq         $-1, %rax
	LONG $0x000008e9; BYTE $0x00   // jmp          LBB41_19, $8(%rip)

LBB41_18:
	WORD $0x3145; BYTE $0xe4 // xorl         %r12d, %r12d
	WORD $0xc931             // xorl         %ecx, %ecx
	WORD $0x3145; BYTE $0xed // xorl         %r13d, %r13d

LBB41_19:
	WORD $0x8545; BYTE $0xe4                   // testl        %r12d, %r12d
	LONG $0xc09f0f41                           // setg         %r8b
	WORD $0xd284                               // testb        %dl, %dl
	LONG $0x002f840f; WORD $0x0000             // je           LBB41_23, $47(%rip)
	LONG $0x013c8041; BYTE $0x2e               // cmpb         $46, (%r9,%rax)
	LONG $0x0024850f; WORD $0x0000             // jne          LBB41_23, $36(%rip)
	LONG $0x01c08348                           // addq         $1, %rax
	LONG $0x0807c749; WORD $0x0000; BYTE $0x00 // movq         $8, (%r15)
	WORD $0x394c; BYTE $0xf0                   // cmpq         %r14, %rax
	LONG $0x0062830f; WORD $0x0000             // jae          LBB41_30, $98(%rip)
	LONG $0x01148a41                           // movb         (%r9,%rax), %dl
	WORD $0xc280; BYTE $0xd0                   // addb         $-48, %dl
	WORD $0xfa80; BYTE $0x0a                   // cmpb         $10, %dl
	LONG $0xfed9830f; WORD $0xffff             // jae          LBB41_4, $-295(%rip)

LBB41_23:
	WORD $0x854d; BYTE $0xed       // testq        %r13, %r13
	LONG $0x0076850f; WORD $0x0000 // jne          LBB41_35, $118(%rip)
	WORD $0x8545; BYTE $0xe4       // testl        %r12d, %r12d
	LONG $0x006d850f; WORD $0x0000 // jne          LBB41_35, $109(%rip)
	WORD $0x394c; BYTE $0xf0       // cmpq         %r14, %rax
	LONG $0x005c830f; WORD $0x0000 // jae          LBB41_33, $92(%rip)
	WORD $0xc289                   // movl         %eax, %edx
	WORD $0x2944; BYTE $0xf2       // subl         %r14d, %edx
	WORD $0xc931                   // xorl         %ecx, %ecx
	WORD $0x3145; BYTE $0xe4       // xorl         %r12d, %r12d
	LONG $0x90909090               // .p2align 4, 0x90

LBB41_27:
	LONG $0x013c8041; BYTE $0x30   // cmpb         $48, (%r9,%rax)
	LONG $0x0048850f; WORD $0x0000 // jne          LBB41_34, $72(%rip)
	LONG $0x01c08348               // addq         $1, %rax
	LONG $0xffc48341               // addl         $-1, %r12d
	WORD $0x3949; BYTE $0xc6       // cmpq         %rax, %r14
	LONG $0xffe4850f; WORD $0xffff // jne          LBB41_27, $-28(%rip)
	WORD $0xc931                   // xorl         %ecx, %ecx
	WORD $0x894c; BYTE $0xf0       // movq         %r14, %rax
	WORD $0x8941; BYTE $0xd4       // movl         %edx, %r12d
	LONG $0x00002ae9; BYTE $0x00   // jmp          LBB41_34, $42(%rip)

LBB41_30:
	WORD $0x894c; BYTE $0x36                   // movq         %r14, (%rsi)
	LONG $0xff07c749; WORD $0xffff; BYTE $0xff // movq         $-1, (%r15)

LBB41_31:
	LONG $0x38c48348 // addq         $56, %rsp
	BYTE $0x5b       // popq         %rbx
	WORD $0x5c41     // popq         %r12
	WORD $0x5d41     // popq         %r13
	WORD $0x5e41     // popq         %r14
	WORD $0x5f41     // popq         %r15
	BYTE $0x5d       // popq         %rbp
	BYTE $0xc3       // retq

LBB41_32:
	LONG $0x01c08348             // addq         $1, %rax
	WORD $0x8948; BYTE $0x06     // movq         %rax, (%rsi)
	LONG $0xffffe5e9; BYTE $0xff // jmp          LBB41_31, $-27(%rip)

LBB41_33:
	WORD $0x3145; BYTE $0xe4 // xorl         %r12d, %r12d
	WORD $0xc931             // xorl         %ecx, %ecx

LBB41_34:
	WORD $0x3145; BYTE $0xed // xorl         %r13d, %r13d

LBB41_35:
	WORD $0x394c; BYTE $0xf0       // cmpq         %r14, %rax
	LONG $0x0052830f; WORD $0x0000 // jae          LBB41_41, $82(%rip)
	WORD $0xf983; BYTE $0x12       // cmpl         $18, %ecx
	LONG $0x00498f0f; WORD $0x0000 // jg           LBB41_41, $73(%rip)
	LONG $0xffffd0ba; BYTE $0xff   // movl         $4294967248, %edx
	WORD $0x9090; BYTE $0x90       // .p2align 4, 0x90

LBB41_38:
	LONG $0x3cbe0f49; BYTE $0x01   // movsbq       (%r9,%rax), %rdi
	WORD $0x5f8d; BYTE $0xd0       // leal         $-48(%rdi), %ebx
	WORD $0xfb80; BYTE $0x09       // cmpb         $9, %bl
	LONG $0x0030870f; WORD $0x0000 // ja           LBB41_41, $48(%rip)
	QUAD $0x00000000ad1c8d4a       // leaq         (,%r13,4), %rbx
	WORD $0x014c; BYTE $0xeb       // addq         %r13, %rbx
	WORD $0xd701                   // addl         %edx, %edi
	LONG $0x5f2c8d4c               // leaq         (%rdi,%rbx,2), %r13
	LONG $0xffc48341               // addl         $-1, %r12d
	LONG $0x01c08348               // addq         $1, %rax
	WORD $0x394c; BYTE $0xf0       // cmpq         %r14, %rax
	LONG $0x000e830f; WORD $0x0000 // jae          LBB41_41, $14(%rip)
	WORD $0x798d; BYTE $0x01       // leal         $1(%rcx), %edi
	WORD $0xf983; BYTE $0x12       // cmpl         $18, %ecx
	WORD $0xf989                   // movl         %edi, %ecx
	LONG $0xffbf8c0f; WORD $0xffff // jl           LBB41_38, $-65(%rip)

LBB41_41:
	WORD $0xc931                                           // xorl         %ecx, %ecx
	WORD $0x8844; BYTE $0xc1                               // movb         %r8b, %cl
	WORD $0x394c; BYTE $0xf0                               // cmpq         %r14, %rax
	LONG $0xc0758948                                       // movq         %rsi, $-64(%rbp)
	LONG $0xa055894c                                       // movq         %r10, $-96(%rbp)
	LONG $0xa85d894c                                       // movq         %r11, $-88(%rbp)
	LONG $0xb04d894c                                       // movq         %r9, $-80(%rbp)
	LONG $0x00c4830f; WORD $0x0000                         // jae          LBB41_58, $196(%rip)
	LONG $0x011c8a41                                       // movb         (%r9,%rax), %bl
	WORD $0x538d; BYTE $0xd0                               // leal         $-48(%rbx), %edx
	WORD $0xfa80; BYTE $0x09                               // cmpb         $9, %dl
	LONG $0x0036870f; WORD $0x0000                         // ja           LBB41_47, $54(%rip)
	LONG $0xff568d49                                       // leaq         $-1(%r14), %rdx
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

LBB41_44:
	WORD $0x3948; BYTE $0xc2       // cmpq         %rax, %rdx
	LONG $0x0129840f; WORD $0x0000 // je           LBB41_57, $297(%rip)
	LONG $0x5cb60f41; WORD $0x0101 // movzbl       $1(%r9,%rax), %ebx
	WORD $0x7b8d; BYTE $0xd0       // leal         $-48(%rbx), %edi
	LONG $0x01c08348               // addq         $1, %rax
	LONG $0x09ff8040               // cmpb         $9, %dil
	LONG $0xffe0860f; WORD $0xffff // jbe          LBB41_44, $-32(%rip)
	LONG $0x000001b9; BYTE $0x00   // movl         $1, %ecx

LBB41_47:
	WORD $0xcb80; BYTE $0x20                   // orb          $32, %bl
	WORD $0xfb80; BYTE $0x65                   // cmpb         $101, %bl
	LONG $0x0072850f; WORD $0x0000             // jne          LBB41_58, $114(%rip)
	LONG $0x01588d48                           // leaq         $1(%rax), %rbx
	LONG $0x0807c749; WORD $0x0000; BYTE $0x00 // movq         $8, (%r15)
	WORD $0x394c; BYTE $0xf3                   // cmpq         %r14, %rbx
	LONG $0x0101830f; WORD $0x0000             // jae          LBB41_63, $257(%rip)
	LONG $0x19148a41                           // movb         (%r9,%rbx), %dl
	WORD $0xfa80; BYTE $0x2d                   // cmpb         $45, %dl
	LONG $0x000f840f; WORD $0x0000             // je           LBB41_51, $15(%rip)
	LONG $0x0001b841; WORD $0x0000             // movl         $1, %r8d
	WORD $0xfa80; BYTE $0x2b                   // cmpb         $43, %dl
	LONG $0x0023850f; WORD $0x0000             // jne          LBB41_53, $35(%rip)

LBB41_51:
	LONG $0x02c08348               // addq         $2, %rax
	WORD $0xff31                   // xorl         %edi, %edi
	WORD $0xfa80; BYTE $0x2b       // cmpb         $43, %dl
	WORD $0x940f; BYTE $0xc2       // sete         %dl
	WORD $0x394c; BYTE $0xf0       // cmpq         %r14, %rax
	LONG $0x00e1830f; WORD $0x0000 // jae          LBB41_64, $225(%rip)
	WORD $0x8840; BYTE $0xd7       // movb         %dl, %dil
	LONG $0x3f048d44               // leal         (%rdi,%rdi), %r8d
	LONG $0xffc08341               // addl         $-1, %r8d
	WORD $0x8948; BYTE $0xc3       // movq         %rax, %rbx

LBB41_53:
	LONG $0x19048a41                           // movb         (%r9,%rbx), %al
	WORD $0xd004                               // addb         $-48, %al
	WORD $0x093c                               // cmpb         $9, %al
	LONG $0x00d9860f; WORD $0x0000             // jbe          LBB41_65, $217(%rip)
	WORD $0x8948; BYTE $0x1e                   // movq         %rbx, (%rsi)
	LONG $0xfe07c749; WORD $0xffff; BYTE $0xff // movq         $-2, (%r15)
	WORD $0xd231                               // xorl         %edx, %edx
	LONG $0x000112e9; BYTE $0x00               // jmp          LBB41_71, $274(%rip)

LBB41_58:
	WORD $0x8949; BYTE $0xc6       // movq         %rax, %r14
	LONG $0x093f8349               // cmpq         $9, (%r15)
	LONG $0x0110850f; WORD $0x0000 // jne          LBB41_72, $272(%rip)

LBB41_60:
	WORD $0x4d89; BYTE $0xbc                   // movl         %ecx, $-68(%rbp)
	WORD $0x894c; BYTE $0xef                   // movq         %r13, %rdi
	WORD $0x5d8b; BYTE $0xd4                   // movl         $-44(%rbp), %ebx
	WORD $0xde89                               // movl         %ebx, %esi
	WORD $0x8944; BYTE $0xe2                   // movl         %r12d, %edx
	LONG $0x00018de8; BYTE $0x00               // callq        _is_overflow, $397(%rip)
	WORD $0xc084                               // testb        %al, %al
	LONG $0x000f840f; WORD $0x0000             // je           LBB41_62, $15(%rip)
	LONG $0x0807c749; WORD $0x0000; BYTE $0x00 // movq         $8, (%r15)
	WORD $0x4d8b; BYTE $0xbc                   // movl         $-68(%rbp), %ecx
	LONG $0x0000e6e9; BYTE $0x00               // jmp          LBB41_72, $230(%rip)

LBB41_62:
	WORD $0x6348; BYTE $0xc3               // movslq       %ebx, %rax
	LONG $0x6ef9c1c4; BYTE $0xc5           // vmovq        %r13, %xmm0
	LONG $0xe8af0f4c                       // imulq        %rax, %r13
	QUAD $0xfffffc320562f9c5               // vpunpckldq   $-974(%rip), %xmm0, %xmm0  /* LCPI41_0(%rip) */
	LONG $0x106f894d                       // movq         %r13, $16(%r15)
	QUAD $0xfffffc36055cf9c5               // vsubpd       $-970(%rip), %xmm0, %xmm0  /* LCPI41_1(%rip) */
	LONG $0x0579e3c4; WORD $0x01c8         // vpermilpd    $1, %xmm0, %xmm1
	LONG $0xc058f3c5                       // vaddsd       %xmm0, %xmm1, %xmm0
	QUAD $0xffffffffffffb948; WORD $0x7fff // movabsq      $9223372036854775807, %rcx
	LONG $0x01c18348                       // addq         $1, %rcx
	WORD $0x2148; BYTE $0xc1               // andq         %rax, %rcx
	LONG $0x7ef9e1c4; BYTE $0xc0           // vmovq        %xmm0, %rax
	WORD $0x0948; BYTE $0xc8               // orq          %rcx, %rax
	LONG $0x08478949                       // movq         %rax, $8(%r15)
	LONG $0xc0458b48                       // movq         $-64(%rbp), %rax
	LONG $0x000119e9; BYTE $0x00           // jmp          LBB41_77, $281(%rip)

LBB41_56:
	WORD $0x894c; BYTE $0xf0     // movq         %r14, %rax
	LONG $0xfffd77e9; BYTE $0xff // jmp          LBB41_19, $-649(%rip)

LBB41_57:
	LONG $0x000001b9; BYTE $0x00   // movl         $1, %ecx
	LONG $0x093f8349               // cmpq         $9, (%r15)
	LONG $0x007f850f; WORD $0x0000 // jne          LBB41_72, $127(%rip)
	LONG $0xffff6ae9; BYTE $0xff   // jmp          LBB41_60, $-150(%rip)

LBB41_63:
	WORD $0x894c; BYTE $0x36                   // movq         %r14, (%rsi)
	LONG $0xff07c749; WORD $0xffff; BYTE $0xff // movq         $-1, (%r15)
	WORD $0xd231                               // xorl         %edx, %edx
	LONG $0x00005ee9; BYTE $0x00               // jmp          LBB41_71, $94(%rip)

LBB41_64:
	WORD $0x894c; BYTE $0x36                   // movq         %r14, (%rsi)
	LONG $0xff07c749; WORD $0xffff; BYTE $0xff // movq         $-1, (%r15)
	WORD $0xd231                               // xorl         %edx, %edx
	WORD $0x8948; BYTE $0xc3                   // movq         %rax, %rbx
	LONG $0x00004ae9; BYTE $0x00               // jmp          LBB41_71, $74(%rip)

LBB41_65:
	WORD $0xc031                   // xorl         %eax, %eax
	WORD $0x394c; BYTE $0xf3       // cmpq         %r14, %rbx
	LONG $0x0033830f; WORD $0x0000 // jae          LBB41_70, $51(%rip)
	WORD $0xc031                   // xorl         %eax, %eax

LBB41_67:
	LONG $0x14be0f41; BYTE $0x19   // movsbl       (%r9,%rbx), %edx
	WORD $0x7a8d; BYTE $0xd0       // leal         $-48(%rdx), %edi
	LONG $0x09ff8040               // cmpb         $9, %dil
	LONG $0x001f870f; WORD $0x0000 // ja           LBB41_70, $31(%rip)
	LONG $0x0027103d; BYTE $0x00   // cmpl         $10000, %eax
	WORD $0x3c8d; BYTE $0x80       // leal         (%rax,%rax,4), %edi
	LONG $0xd07a548d               // leal         $-48(%rdx,%rdi,2), %edx
	WORD $0x4c0f; BYTE $0xc2       // cmovll       %edx, %eax
	LONG $0x01c38348               // addq         $1, %rbx
	WORD $0x3949; BYTE $0xde       // cmpq         %rbx, %r14
	LONG $0xffd2850f; WORD $0xffff // jne          LBB41_67, $-46(%rip)
	WORD $0x894c; BYTE $0xf3       // movq         %r14, %rbx

LBB41_70:
	LONG $0xc0af0f41         // imull        %r8d, %eax
	WORD $0x0144; BYTE $0xe0 // addl         %r12d, %eax
	WORD $0x01b2             // movb         $1, %dl
	WORD $0x8941; BYTE $0xc4 // movl         %eax, %r12d

LBB41_71:
	WORD $0x8949; BYTE $0xde       // movq         %rbx, %r14
	WORD $0xd284                   // testb        %dl, %dl
	LONG $0xfd83840f; WORD $0xffff // je           LBB41_31, $-637(%rip)

LBB41_72:
	LONG $0xc8458d4c               // leaq         $-56(%rbp), %r8
	WORD $0x894c; BYTE $0xef       // movq         %r13, %rdi
	WORD $0x8944; BYTE $0xe6       // movl         %r12d, %esi
	WORD $0x558b; BYTE $0xd4       // movl         $-44(%rbp), %edx
	LONG $0x0000bee8; BYTE $0x00   // callq        _atof_fast, $190(%rip)
	LONG $0xc957f1c5               // vxorpd       %xmm1, %xmm1, %xmm1
	LONG $0xc12ef9c5               // vucomisd     %xmm1, %xmm0
	LONG $0x002c850f; WORD $0x0000 // jne          LBB41_74, $44(%rip)
	LONG $0x00268a0f; WORD $0x0000 // jp           LBB41_74, $38(%rip)
	LONG $0xc0458b48               // movq         $-64(%rbp), %rax
	WORD $0x8b48; BYTE $0x00       // movq         (%rax), %rax
	LONG $0xb07d8b48               // movq         $-80(%rbp), %rdi
	WORD $0x0148; BYTE $0xc7       // addq         %rax, %rdi
	WORD $0x894c; BYTE $0xf6       // movq         %r14, %rsi
	WORD $0x2948; BYTE $0xc6       // subq         %rax, %rsi
	LONG $0xa0558b48               // movq         $-96(%rbp), %rdx
	LONG $0xa84d8b48               // movq         $-88(%rbp), %rcx
	LONG $0xfff2f9e8; BYTE $0xff   // callq        _atof_native, $-3335(%rip)
	LONG $0x4511fbc5; BYTE $0xc8   // vmovsd       %xmm0, $-56(%rbp)

LBB41_74:
	QUAD $0xffffffffffffb848; WORD $0x7fff     // movabsq      $9223372036854775807, %rax
	LONG $0xc8452348                           // andq         $-56(%rbp), %rax
	QUAD $0x000000000000b948; WORD $0x7ff0     // movabsq      $9218868437227405312, %rcx
	WORD $0x3948; BYTE $0xc8                   // cmpq         %rcx, %rax
	LONG $0xc0458b48                           // movq         $-64(%rbp), %rax
	LONG $0x0007850f; WORD $0x0000             // jne          LBB41_76, $7(%rip)
	LONG $0xf807c749; WORD $0xffff; BYTE $0xff // movq         $-8, (%r15)

LBB41_76:
	LONG $0x4510fbc5; BYTE $0xc8   // vmovsd       $-56(%rbp), %xmm0
	LONG $0x117bc1c4; WORD $0x0847 // vmovsd       %xmm0, $8(%r15)

LBB41_77:
	WORD $0x894c; BYTE $0x30     // movq         %r14, (%rax)
	LONG $0xfffcf8e9; BYTE $0xff // jmp          LBB41_31, $-776(%rip)
	LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

_is_overflow:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0x01b0                   // movb         $1, %al
	WORD $0xd285                   // testl        %edx, %edx
	LONG $0x0002840f; WORD $0x0000 // je           LBB42_1, $2(%rip)
	BYTE $0x5d                     // popq         %rbp
	BYTE $0xc3                     // retq

LBB42_1:
	WORD $0x8548; BYTE $0xff               // testq        %rdi, %rdi
	WORD $0x980f; BYTE $0xc1               // sets         %cl
	WORD $0x6348; BYTE $0xc6               // movslq       %esi, %rax
	WORD $0x2148; BYTE $0xf8               // andq         %rdi, %rax
	QUAD $0x000000000000ba48; WORD $0x8000 // movabsq      $-9223372036854775808, %rdx
	WORD $0x3948; BYTE $0xd0               // cmpq         %rdx, %rax
	WORD $0x950f; BYTE $0xc0               // setne        %al
	WORD $0xc820                           // andb         %cl, %al
	BYTE $0x5d                             // popq         %rbp
	BYTE $0xc3                             // retq

	// .p2align 3, 0x00
LCPI43_0:
	QUAD $0x3ff0000000000000 // .quad 0x3ff0000000000000
	QUAD $0x9090909090909090 // .p2align 4, 0x90

_atof_fast:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0x5741                   // pushq        %r15
	WORD $0x5641                   // pushq        %r14
	WORD $0x5541                   // pushq        %r13
	WORD $0x5441                   // pushq        %r12
	BYTE $0x53                     // pushq        %rbx
	BYTE $0x50                     // pushq        %rax
	WORD $0x894d; BYTE $0xc6       // movq         %r8, %r14
	WORD $0x8941; BYTE $0xcd       // movl         %ecx, %r13d
	WORD $0x8941; BYTE $0xd7       // movl         %edx, %r15d
	WORD $0x8941; BYTE $0xf4       // movl         %esi, %r12d
	WORD $0x8948; BYTE $0xfb       // movq         %rdi, %rbx
	QUAD $0x00000000d045c748       // movq         $0, $-48(%rbp)
	WORD $0x894c; BYTE $0xc1       // movq         %r8, %rcx
	LONG $0x002b73e8; BYTE $0x00   // callq        _is_atof_exact, $11123(%rip)
	QUAD $0xffffffbb0510fbc5       // vmovsd       $-69(%rip), %xmm0  /* LCPI43_0(%rip) */
	WORD $0xc084                   // testb        %al, %al
	LONG $0x006a850f; WORD $0x0000 // jne          LBB43_6, $106(%rip)
	WORD $0x8948; BYTE $0xdf       // movq         %rbx, %rdi
	WORD $0x8944; BYTE $0xe6       // movl         %r12d, %esi
	WORD $0x8944; BYTE $0xfa       // movl         %r15d, %edx
	WORD $0x894c; BYTE $0xf1       // movq         %r14, %rcx
	LONG $0xffecc2e8; BYTE $0xff   // callq        _atof_eisel_lemire64, $-4926(%rip)
	QUAD $0xffffff9a0510fbc5       // vmovsd       $-102(%rip), %xmm0  /* LCPI43_0(%rip) */
	WORD $0xc084                   // testb        %al, %al
	LONG $0x0045840f; WORD $0x0000 // je           LBB43_5, $69(%rip)
	WORD $0x8545; BYTE $0xed       // testl        %r13d, %r13d
	LONG $0x0040840f; WORD $0x0000 // je           LBB43_6, $64(%rip)
	LONG $0x01c38348               // addq         $1, %rbx
	LONG $0xd04d8d48               // leaq         $-48(%rbp), %rcx
	WORD $0x8948; BYTE $0xdf       // movq         %rbx, %rdi
	WORD $0x8944; BYTE $0xe6       // movl         %r12d, %esi
	WORD $0x8944; BYTE $0xfa       // movl         %r15d, %edx
	LONG $0xffec93e8; BYTE $0xff   // callq        _atof_eisel_lemire64, $-4973(%rip)
	QUAD $0xffffff6b0510fbc5       // vmovsd       $-149(%rip), %xmm0  /* LCPI43_0(%rip) */
	WORD $0xc084                   // testb        %al, %al
	LONG $0x0016840f; WORD $0x0000 // je           LBB43_5, $22(%rip)
	LONG $0x4d10fbc5; BYTE $0xd0   // vmovsd       $-48(%rbp), %xmm1
	LONG $0x2e79c1c4; BYTE $0x0e   // vucomisd     (%r14), %xmm1
	LONG $0x0006850f; WORD $0x0000 // jne          LBB43_5, $6(%rip)
	LONG $0x00048b0f; WORD $0x0000 // jnp          LBB43_6, $4(%rip)

LBB43_5:
	LONG $0xc057f8c5 // vxorps       %xmm0, %xmm0, %xmm0

LBB43_6:
	LONG $0x08c48348                       // addq         $8, %rsp
	BYTE $0x5b                             // popq         %rbx
	WORD $0x5c41                           // popq         %r12
	WORD $0x5d41                           // popq         %r13
	WORD $0x5e41                           // popq         %r14
	WORD $0x5f41                           // popq         %r15
	BYTE $0x5d                             // popq         %rbp
	BYTE $0xc3                             // retq
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

_vsigned:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5641                               // pushq        %r14
	BYTE $0x53                                 // pushq        %rbx
	WORD $0x8b48; BYTE $0x06                   // movq         (%rsi), %rax
	WORD $0x8b4c; BYTE $0x07                   // movq         (%rdi), %r8
	LONG $0x08578b4c                           // movq         $8(%rdi), %r10
	LONG $0x0902c748; WORD $0x0000; BYTE $0x00 // movq         $9, (%rdx)
	LONG $0xc057f8c5                           // vxorps       %xmm0, %xmm0, %xmm0
	LONG $0x4211f8c5; BYTE $0x08               // vmovups      %xmm0, $8(%rdx)
	WORD $0x8b48; BYTE $0x0e                   // movq         (%rsi), %rcx
	LONG $0x184a8948                           // movq         %rcx, $24(%rdx)
	WORD $0x394c; BYTE $0xd0                   // cmpq         %r10, %rax
	LONG $0x0045830f; WORD $0x0000             // jae          LBB44_1, $69(%rip)
	LONG $0x0001b941; WORD $0x0000             // movl         $1, %r9d
	LONG $0x003c8041; BYTE $0x2d               // cmpb         $45, (%r8,%rax)
	LONG $0x0014850f; WORD $0x0000             // jne          LBB44_4, $20(%rip)
	LONG $0x01c08348                           // addq         $1, %rax
	LONG $0xffc1c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r9
	WORD $0x394c; BYTE $0xd0                   // cmpq         %r10, %rax
	LONG $0x0020830f; WORD $0x0000             // jae          LBB44_1, $32(%rip)

LBB44_4:
	LONG $0x000c8a41                           // movb         (%r8,%rax), %cl
	WORD $0x798d; BYTE $0xd0                   // leal         $-48(%rcx), %edi
	LONG $0x0aff8040                           // cmpb         $10, %dil
	LONG $0x001e820f; WORD $0x0000             // jb           LBB44_6, $30(%rip)
	WORD $0x8948; BYTE $0x06                   // movq         %rax, (%rsi)
	LONG $0xfe02c748; WORD $0xffff; BYTE $0xff // movq         $-2, (%rdx)
	LONG $0x00000ae9; BYTE $0x00               // jmp          LBB44_26, $10(%rip)

LBB44_1:
	WORD $0x894c; BYTE $0x16                   // movq         %r10, (%rsi)
	LONG $0xff02c748; WORD $0xffff; BYTE $0xff // movq         $-1, (%rdx)

LBB44_26:
	BYTE $0x5b   // popq         %rbx
	WORD $0x5e41 // popq         %r14
	BYTE $0x5d   // popq         %rbp
	BYTE $0xc3   // retq

LBB44_6:
	WORD $0xf980; BYTE $0x30               // cmpb         $48, %cl
	LONG $0x0031850f; WORD $0x0000         // jne          LBB44_11, $49(%rip)
	WORD $0x394c; BYTE $0xd0               // cmpq         %r10, %rax
	LONG $0x00b8830f; WORD $0x0000         // jae          LBB44_10, $184(%rip)
	LONG $0x004c8a42; BYTE $0x01           // movb         $1(%rax,%r8), %cl
	WORD $0xc180; BYTE $0xd2               // addb         $-46, %cl
	WORD $0xf980; BYTE $0x37               // cmpb         $55, %cl
	LONG $0x00a7870f; WORD $0x0000         // ja           LBB44_10, $167(%rip)
	WORD $0xb60f; BYTE $0xc9               // movzbl       %cl, %ecx
	QUAD $0x000000800001bf48; WORD $0x0080 // movabsq      $36028797027352577, %rdi
	LONG $0xcfa30f48                       // btq          %rcx, %rdi
	LONG $0x0090830f; WORD $0x0000         // jae          LBB44_10, $144(%rip)

LBB44_11:
	WORD $0x394c; BYTE $0xd0     // cmpq         %r10, %rax
	WORD $0x894d; BYTE $0xd3     // movq         %r10, %r11
	LONG $0xd8470f4c             // cmovaq       %rax, %r11
	WORD $0xc931                 // xorl         %ecx, %ecx
	LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

LBB44_12:
	WORD $0xb641; BYTE $0x01       // movb         $1, %r14b
	WORD $0x3949; BYTE $0xc3       // cmpq         %rax, %r11
	LONG $0x008b840f; WORD $0x0000 // je           LBB44_13, $139(%rip)
	LONG $0x1cbe0f49; BYTE $0x00   // movsbq       (%r8,%rax), %rbx
	WORD $0x7b8d; BYTE $0xd0       // leal         $-48(%rbx), %edi
	LONG $0x09ff8040               // cmpb         $9, %dil
	LONG $0x0021870f; WORD $0x0000 // ja           LBB44_18, $33(%rip)
	LONG $0x0ac96b48               // imulq        $10, %rcx, %rcx
	LONG $0x0014800f; WORD $0x0000 // jo           LBB44_17, $20(%rip)
	LONG $0x01c08348               // addq         $1, %rax
	WORD $0xc383; BYTE $0xd0       // addl         $-48, %ebx
	LONG $0xd9af0f49               // imulq        %r9, %rbx
	WORD $0x0148; BYTE $0xd9       // addq         %rbx, %rcx
	LONG $0xffc4810f; WORD $0xffff // jno          LBB44_12, $-60(%rip)

LBB44_17:
	WORD $0x3145; BYTE $0xf6 // xorl         %r14d, %r14d

LBB44_18:
	WORD $0x8445; BYTE $0xf6       // testb        %r14b, %r14b
	LONG $0x005b840f; WORD $0x0000 // je           LBB44_19, $91(%rip)

LBB44_20:
	WORD $0x394c; BYTE $0xd0       // cmpq         %r10, %rax
	LONG $0x003a830f; WORD $0x0000 // jae          LBB44_25, $58(%rip)
	LONG $0x001c8a41               // movb         (%r8,%rax), %bl
	WORD $0xfb80; BYTE $0x65       // cmpb         $101, %bl
	LONG $0x0012840f; WORD $0x0000 // je           LBB44_24, $18(%rip)
	WORD $0xfb80; BYTE $0x45       // cmpb         $69, %bl
	LONG $0x0009840f; WORD $0x0000 // je           LBB44_24, $9(%rip)
	WORD $0xfb80; BYTE $0x2e       // cmpb         $46, %bl
	LONG $0x001b850f; WORD $0x0000 // jne          LBB44_25, $27(%rip)

LBB44_24:
	WORD $0x8948; BYTE $0x06                   // movq         %rax, (%rsi)
	LONG $0xfa02c748; WORD $0xffff; BYTE $0xff // movq         $-6, (%rdx)
	LONG $0xffff31e9; BYTE $0xff               // jmp          LBB44_26, $-207(%rip)

LBB44_10:
	LONG $0x01c08348             // addq         $1, %rax
	WORD $0x8948; BYTE $0x06     // movq         %rax, (%rsi)
	LONG $0xffff25e9; BYTE $0xff // jmp          LBB44_26, $-219(%rip)

LBB44_25:
	WORD $0x8948; BYTE $0x06     // movq         %rax, (%rsi)
	LONG $0x104a8948             // movq         %rcx, $16(%rdx)
	LONG $0xffff19e9; BYTE $0xff // jmp          LBB44_26, $-231(%rip)

LBB44_13:
	WORD $0x894c; BYTE $0xd8       // movq         %r11, %rax
	WORD $0x8445; BYTE $0xf6       // testb        %r14b, %r14b
	LONG $0xffa5850f; WORD $0xffff // jne          LBB44_20, $-91(%rip)

LBB44_19:
	LONG $0xffc08348                           // addq         $-1, %rax
	WORD $0x8948; BYTE $0x06                   // movq         %rax, (%rsi)
	LONG $0xfb02c748; WORD $0xffff; BYTE $0xff // movq         $-5, (%rdx)
	LONG $0xfffefae9; BYTE $0xff               // jmp          LBB44_26, $-262(%rip)
	QUAD $0x9090909090909090; WORD $0x9090     // .p2align 4, 0x90

_vunsigned:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5641                               // pushq        %r14
	BYTE $0x53                                 // pushq        %rbx
	WORD $0x8949; BYTE $0xd0                   // movq         %rdx, %r8
	WORD $0x8b48; BYTE $0x0e                   // movq         (%rsi), %rcx
	WORD $0x8b4c; BYTE $0x0f                   // movq         (%rdi), %r9
	LONG $0x08778b4c                           // movq         $8(%rdi), %r14
	LONG $0x0902c748; WORD $0x0000; BYTE $0x00 // movq         $9, (%rdx)
	LONG $0xc057f8c5                           // vxorps       %xmm0, %xmm0, %xmm0
	LONG $0x4211f8c5; BYTE $0x08               // vmovups      %xmm0, $8(%rdx)
	WORD $0x8b48; BYTE $0x06                   // movq         (%rsi), %rax
	LONG $0x18428948                           // movq         %rax, $24(%rdx)
	WORD $0x394c; BYTE $0xf1                   // cmpq         %r14, %rcx
	LONG $0x001b830f; WORD $0x0000             // jae          LBB45_1, $27(%rip)
	LONG $0x09048a41                           // movb         (%r9,%rcx), %al
	WORD $0x2d3c                               // cmpb         $45, %al
	LONG $0x001e850f; WORD $0x0000             // jne          LBB45_4, $30(%rip)

LBB45_3:
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0xfa00c749; WORD $0xffff; BYTE $0xff // movq         $-6, (%r8)
	LONG $0x000129e9; BYTE $0x00               // jmp          LBB45_25, $297(%rip)

LBB45_1:
	WORD $0x894c; BYTE $0x36                   // movq         %r14, (%rsi)
	LONG $0xff00c749; WORD $0xffff; BYTE $0xff // movq         $-1, (%r8)
	LONG $0x00011ae9; BYTE $0x00               // jmp          LBB45_25, $282(%rip)

LBB45_4:
	WORD $0x508d; BYTE $0xd0                   // leal         $-48(%rax), %edx
	WORD $0xfa80; BYTE $0x0a                   // cmpb         $10, %dl
	LONG $0x000f820f; WORD $0x0000             // jb           LBB45_6, $15(%rip)
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0xfe00c749; WORD $0xffff; BYTE $0xff // movq         $-2, (%r8)
	LONG $0x0000ffe9; BYTE $0x00               // jmp          LBB45_25, $255(%rip)

LBB45_6:
	WORD $0x303c                           // cmpb         $48, %al
	LONG $0x0026850f; WORD $0x0000         // jne          LBB45_10, $38(%rip)
	LONG $0x09448a41; BYTE $0x01           // movb         $1(%r9,%rcx), %al
	WORD $0xd204                           // addb         $-46, %al
	WORD $0x373c                           // cmpb         $55, %al
	LONG $0x00e1870f; WORD $0x0000         // ja           LBB45_9, $225(%rip)
	WORD $0xb60f; BYTE $0xc0               // movzbl       %al, %eax
	QUAD $0x000000800001ba48; WORD $0x0080 // movabsq      $36028797027352577, %rdx
	LONG $0xc2a30f48                       // btq          %rax, %rdx
	LONG $0x00ca830f; WORD $0x0000         // jae          LBB45_9, $202(%rip)

LBB45_10:
	WORD $0x3949; BYTE $0xce                   // cmpq         %rcx, %r14
	WORD $0x8949; BYTE $0xca                   // movq         %rcx, %r10
	LONG $0xd6470f4d                           // cmovaq       %r14, %r10
	WORD $0xc031                               // xorl         %eax, %eax
	LONG $0x000abb41; WORD $0x0000             // movl         $10, %r11d
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB45_11:
	WORD $0x01b2                   // movb         $1, %dl
	WORD $0x3949; BYTE $0xca       // cmpq         %rcx, %r10
	LONG $0x004a840f; WORD $0x0000 // je           LBB45_12, $74(%rip)
	LONG $0x1cbe0f41; BYTE $0x09   // movsbl       (%r9,%rcx), %ebx
	WORD $0x7b8d; BYTE $0xd0       // leal         $-48(%rbx), %edi
	LONG $0x09ff8040               // cmpb         $9, %dil
	LONG $0x003b870f; WORD $0x0000 // ja           LBB45_18, $59(%rip)
	WORD $0xf749; BYTE $0xe3       // mulq         %r11
	LONG $0x006e800f; WORD $0x0000 // jo           LBB45_15, $110(%rip)
	LONG $0x01c18348               // addq         $1, %rcx
	WORD $0xc383; BYTE $0xd0       // addl         $-48, %ebx
	WORD $0xff31                   // xorl         %edi, %edi
	WORD $0x0148; BYTE $0xd8       // addq         %rbx, %rax
	LONG $0xc7920f40               // setb         %dil
	WORD $0x8948; BYTE $0xfb       // movq         %rdi, %rbx
	WORD $0xf748; BYTE $0xdb       // negq         %rbx
	WORD $0xd231                   // xorl         %edx, %edx
	WORD $0x3148; BYTE $0xdf       // xorq         %rbx, %rdi
	LONG $0x0011850f; WORD $0x0000 // jne          LBB45_18, $17(%rip)
	WORD $0x8548; BYTE $0xdb       // testq        %rbx, %rbx
	LONG $0xffb0890f; WORD $0xffff // jns          LBB45_11, $-80(%rip)
	LONG $0x000003e9; BYTE $0x00   // jmp          LBB45_18, $3(%rip)

LBB45_12:
	WORD $0x894c; BYTE $0xd1 // movq         %r10, %rcx

LBB45_18:
	WORD $0xd284                   // testb        %dl, %dl
	LONG $0x003e840f; WORD $0x0000 // je           LBB45_19, $62(%rip)

LBB45_20:
	WORD $0x394c; BYTE $0xf1       // cmpq         %r14, %rcx
	LONG $0x001f830f; WORD $0x0000 // jae          LBB45_24, $31(%rip)
	LONG $0x09148a41               // movb         (%r9,%rcx), %dl
	WORD $0xfa80; BYTE $0x65       // cmpb         $101, %dl
	LONG $0xff0a840f; WORD $0xffff // je           LBB45_3, $-246(%rip)
	WORD $0xfa80; BYTE $0x45       // cmpb         $69, %dl
	LONG $0xff01840f; WORD $0xffff // je           LBB45_3, $-255(%rip)
	WORD $0xfa80; BYTE $0x2e       // cmpb         $46, %dl
	LONG $0xfef8840f; WORD $0xffff // je           LBB45_3, $-264(%rip)

LBB45_24:
	WORD $0x8948; BYTE $0x0e     // movq         %rcx, (%rsi)
	LONG $0x10408949             // movq         %rax, $16(%r8)
	LONG $0x000024e9; BYTE $0x00 // jmp          LBB45_25, $36(%rip)

LBB45_15:
	WORD $0xd231                   // xorl         %edx, %edx
	WORD $0xd284                   // testb        %dl, %dl
	LONG $0xffc2850f; WORD $0xffff // jne          LBB45_20, $-62(%rip)

LBB45_19:
	LONG $0xffc18348                           // addq         $-1, %rcx
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0xfb00c749; WORD $0xffff; BYTE $0xff // movq         $-5, (%r8)
	LONG $0x000007e9; BYTE $0x00               // jmp          LBB45_25, $7(%rip)

LBB45_9:
	LONG $0x01c18348         // addq         $1, %rcx
	WORD $0x8948; BYTE $0x0e // movq         %rcx, (%rsi)

LBB45_25:
	BYTE $0x5b               // popq         %rbx
	WORD $0x5e41             // popq         %r14
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq
	WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

_skip_one:
	BYTE $0x55                   // pushq        %rbp
	WORD $0x8948; BYTE $0xe5     // movq         %rsp, %rbp
	WORD $0x5741                 // pushq        %r15
	WORD $0x5641                 // pushq        %r14
	WORD $0x5441                 // pushq        %r12
	BYTE $0x53                   // pushq        %rbx
	WORD $0x8949; BYTE $0xce     // movq         %rcx, %r14
	WORD $0x8948; BYTE $0xd3     // movq         %rdx, %rbx
	WORD $0x8949; BYTE $0xf7     // movq         %rsi, %r15
	WORD $0x8949; BYTE $0xfc     // movq         %rdi, %r12
	WORD $0x8948; BYTE $0xd7     // movq         %rdx, %rdi
	WORD $0xf631                 // xorl         %esi, %esi
	LONG $0x00001fe8; BYTE $0x00 // callq        _fsm_init, $31(%rip)
	WORD $0x8948; BYTE $0xdf     // movq         %rbx, %rdi
	WORD $0x894c; BYTE $0xe6     // movq         %r12, %rsi
	WORD $0x894c; BYTE $0xfa     // movq         %r15, %rdx
	WORD $0x894c; BYTE $0xf1     // movq         %r14, %rcx
	LONG $0x00001ee8; BYTE $0x00 // callq        _fsm_exec, $30(%rip)
	BYTE $0x5b                   // popq         %rbx
	WORD $0x5c41                 // popq         %r12
	WORD $0x5e41                 // popq         %r14
	WORD $0x5f41                 // popq         %r15
	BYTE $0x5d                   // popq         %rbp
	BYTE $0xc3                   // retq
	LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

_fsm_init:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	LONG $0x000107c7; WORD $0x0000 // movl         $1, (%rdi)
	WORD $0x7789; BYTE $0x04       // movl         %esi, $4(%rdi)
	BYTE $0x5d                     // popq         %rbp
	BYTE $0xc3                     // retq
	BYTE $0x90                     // .p2align 4, 0x90

_fsm_exec:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	LONG $0x18ec8348                           // subq         $24, %rsp
	LONG $0xc84d8948                           // movq         %rcx, $-56(%rbp)
	LONG $0xd0758948                           // movq         %rsi, $-48(%rbp)
	WORD $0x3f83; BYTE $0x00                   // cmpl         $0, (%rdi)
	LONG $0x0224840f; WORD $0x0000             // je           LBB48_37, $548(%rip)
	WORD $0x8949; BYTE $0xd4                   // movq         %rdx, %r12
	WORD $0x8949; BYTE $0xff                   // movq         %rdi, %r15
	LONG $0xffc5c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r13
	LONG $0x000027e9; BYTE $0x00               // jmp          LBB48_6, $39(%rip)

LBB48_2:
	WORD $0x894c; BYTE $0xff // movq         %r15, %rdi
	WORD $0xf631             // xorl         %esi, %esi

LBB48_3:
	LONG $0x002832e8; BYTE $0x00 // callq        _fsm_push, $10290(%rip)

LBB48_4:
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0xf0480f4c               // cmovsq       %rax, %r14
	WORD $0x894c; BYTE $0xf0       // movq         %r14, %rax
	LONG $0x01ff880f; WORD $0x0000 // js           LBB48_39, $511(%rip)

LBB48_5:
	LONG $0x003f8341               // cmpl         $0, (%r15)
	WORD $0x894c; BYTE $0xe8       // movq         %r13, %rax
	LONG $0x01f2840f; WORD $0x0000 // je           LBB48_39, $498(%rip)

LBB48_6:
	LONG $0xd07d8b48               // movq         $-48(%rbp), %rdi
	WORD $0x894c; BYTE $0xe6       // movq         %r12, %rsi
	LONG $0xfff389e8; BYTE $0xff   // callq        _advance_ns, $-3191(%rip)
	WORD $0xc084                   // testb        %al, %al
	LONG $0x01d7840f; WORD $0x0000 // je           LBB48_37, $471(%rip)
	WORD $0x6349; BYTE $0x17       // movslq       (%r15), %rdx
	LONG $0xff4a8d48               // leaq         $-1(%rdx), %rcx
	LONG $0xfffd8349               // cmpq         $-1, %r13
	LONG $0x0008850f; WORD $0x0000 // jne          LBB48_9, $8(%rip)
	LONG $0x242c8b4d               // movq         (%r12), %r13
	LONG $0xffc58349               // addq         $-1, %r13

LBB48_9:
	WORD $0xbe0f; BYTE $0xf0                   // movsbl       %al, %esi
	LONG $0x973c8b41                           // movl         (%r15,%rdx,4), %edi
	WORD $0xc783; BYTE $0xff                   // addl         $-1, %edi
	WORD $0xff83; BYTE $0x05                   // cmpl         $5, %edi
	LONG $0x0027870f; WORD $0x0000             // ja           LBB48_13, $39(%rip)
	LONG $0xce1d8d48; WORD $0x0001; BYTE $0x00 // leaq         $462(%rip), %rbx  /* LJTI48_0(%rip) */
	LONG $0xbb3c6348                           // movslq       (%rbx,%rdi,4), %rdi
	WORD $0x0148; BYTE $0xdf                   // addq         %rbx, %rdi
	JMP  DI

LBB48_11:
	WORD $0xfe83; BYTE $0x2c       // cmpl         $44, %esi
	LONG $0xff80840f; WORD $0xffff // je           LBB48_2, $-128(%rip)
	WORD $0xfe83; BYTE $0x5d       // cmpl         $93, %esi
	LONG $0x00bb840f; WORD $0x0000 // je           LBB48_27, $187(%rip)
	LONG $0x00019ae9; BYTE $0x00   // jmp          LBB48_38, $410(%rip)

LBB48_13:
	WORD $0x8941; BYTE $0x0f       // movl         %ecx, (%r15)
	WORD $0xfe83; BYTE $0x7b       // cmpl         $123, %esi
	LONG $0x006e860f; WORD $0x0000 // jbe          LBB48_23, $110(%rip)
	LONG $0x000189e9; BYTE $0x00   // jmp          LBB48_38, $393(%rip)

LBB48_14:
	WORD $0xfe83; BYTE $0x2c       // cmpl         $44, %esi
	LONG $0x0093850f; WORD $0x0000 // jne          LBB48_26, $147(%rip)
	WORD $0x894c; BYTE $0xff       // movq         %r15, %rdi
	LONG $0x000003be; BYTE $0x00   // movl         $3, %esi
	LONG $0xffff50e9; BYTE $0xff   // jmp          LBB48_3, $-176(%rip)

LBB48_16:
	WORD $0x223c                   // cmpb         $34, %al
	LONG $0x016b850f; WORD $0x0000 // jne          LBB48_38, $363(%rip)
	QUAD $0x000000049704c741       // movl         $4, (%r15,%rdx,4)

LBB48_18:
	LONG $0xd07d8b48             // movq         $-48(%rbp), %rdi
	WORD $0x894c; BYTE $0xe6     // movq         %r12, %rsi
	LONG $0xc8558b48             // movq         $-56(%rbp), %rdx
	LONG $0x0003f7e8; BYTE $0x00 // callq        _skip_string, $1015(%rip)
	LONG $0xffff30e9; BYTE $0xff // jmp          LBB48_4, $-208(%rip)

LBB48_19:
	WORD $0x3a3c                   // cmpb         $58, %al
	LONG $0x0146850f; WORD $0x0000 // jne          LBB48_38, $326(%rip)
	QUAD $0x000000009704c741       // movl         $0, (%r15,%rdx,4)
	LONG $0xffff2be9; BYTE $0xff   // jmp          LBB48_5, $-213(%rip)

LBB48_21:
	WORD $0x5d3c                   // cmpb         $93, %al
	LONG $0x004d840f; WORD $0x0000 // je           LBB48_27, $77(%rip)
	QUAD $0x000000019704c741       // movl         $1, (%r15,%rdx,4)
	WORD $0xfe83; BYTE $0x7b       // cmpl         $123, %esi
	LONG $0x0120870f; WORD $0x0000 // ja           LBB48_38, $288(%rip)

LBB48_23:
	WORD $0xf089                               // movl         %esi, %eax
	LONG $0x43158d48; WORD $0x0001; BYTE $0x00 // leaq         $323(%rip), %rdx  /* LJTI48_1(%rip) */
	LONG $0x820c6348                           // movslq       (%rdx,%rax,4), %rcx
	WORD $0x0148; BYTE $0xd1                   // addq         %rdx, %rcx
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	JMP  CX

LBB48_24:
	LONG $0xd07d8b48             // movq         $-48(%rbp), %rdi
	WORD $0x894c; BYTE $0xe6     // movq         %r12, %rsi
	LONG $0x0008ffe8; BYTE $0x00 // callq        _skip_positive, $2303(%rip)
	LONG $0xfffed8e9; BYTE $0xff // jmp          LBB48_4, $-296(%rip)

LBB48_25:
	WORD $0xfe83; BYTE $0x22       // cmpl         $34, %esi
	LONG $0x0011840f; WORD $0x0000 // je           LBB48_28, $17(%rip)

LBB48_26:
	WORD $0xfe83; BYTE $0x7d       // cmpl         $125, %esi
	LONG $0x00e4850f; WORD $0x0000 // jne          LBB48_38, $228(%rip)

LBB48_27:
	WORD $0x8941; BYTE $0x0f     // movl         %ecx, (%r15)
	LONG $0xfffecee9; BYTE $0xff // jmp          LBB48_5, $-306(%rip)

LBB48_28:
	QUAD $0x000000029704c741       // movl         $2, (%r15,%rdx,4)
	LONG $0xd07d8b48               // movq         $-48(%rbp), %rdi
	WORD $0x894c; BYTE $0xe6       // movq         %r12, %rsi
	LONG $0xc8558b48               // movq         $-56(%rbp), %rdx
	LONG $0x000368e8; BYTE $0x00   // callq        _skip_string, $872(%rip)
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0xf0480f4c               // cmovsq       %rax, %r14
	LONG $0x00c3880f; WORD $0x0000 // js           LBB48_40, $195(%rip)
	WORD $0x894c; BYTE $0xff       // movq         %r15, %rdi
	LONG $0x000004be; BYTE $0x00   // movl         $4, %esi
	LONG $0xfffe87e9; BYTE $0xff   // jmp          LBB48_3, $-377(%rip)

LBB48_30:
	LONG $0xd07d8b48             // movq         $-48(%rbp), %rdi
	WORD $0x894c; BYTE $0xe6     // movq         %r12, %rsi
	LONG $0x000392e8; BYTE $0x00 // callq        _skip_negative, $914(%rip)
	LONG $0xfffe7be9; BYTE $0xff // jmp          LBB48_4, $-389(%rip)

LBB48_31:
	WORD $0x894c; BYTE $0xff     // movq         %r15, %rdi
	LONG $0x000005be; BYTE $0x00 // movl         $5, %esi
	LONG $0xfffe69e9; BYTE $0xff // jmp          LBB48_3, $-407(%rip)

LBB48_32:
	LONG $0x240c8b49               // movq         (%r12), %rcx
	LONG $0xffc18348               // addq         $-1, %rcx
	LONG $0xd07d8b48               // movq         $-48(%rbp), %rdi
	WORD $0x894c; BYTE $0xe6       // movq         %r12, %rsi
	WORD $0xd231                   // xorl         %edx, %edx
	LONG $0x6c61b841; WORD $0x6573 // movl         $1702063201, %r8d
	LONG $0xfff3c4e8; BYTE $0xff   // callq        _advance_dword, $-3132(%rip)
	LONG $0xfffe4de9; BYTE $0xff   // jmp          LBB48_4, $-435(%rip)

LBB48_33:
	LONG $0x240c8b49               // movq         (%r12), %rcx
	LONG $0xffc18348               // addq         $-1, %rcx
	LONG $0x000001ba; BYTE $0x00   // movl         $1, %edx
	LONG $0xd07d8b48               // movq         $-48(%rbp), %rdi
	WORD $0x894c; BYTE $0xe6       // movq         %r12, %rsi
	LONG $0x756eb841; WORD $0x6c6c // movl         $1819047278, %r8d
	LONG $0xfff3a0e8; BYTE $0xff   // callq        _advance_dword, $-3168(%rip)
	LONG $0xfffe29e9; BYTE $0xff   // jmp          LBB48_4, $-471(%rip)

LBB48_34:
	LONG $0x240c8b49               // movq         (%r12), %rcx
	LONG $0xffc18348               // addq         $-1, %rcx
	LONG $0x000001ba; BYTE $0x00   // movl         $1, %edx
	LONG $0xd07d8b48               // movq         $-48(%rbp), %rdi
	WORD $0x894c; BYTE $0xe6       // movq         %r12, %rsi
	LONG $0x7274b841; WORD $0x6575 // movl         $1702195828, %r8d
	LONG $0xfff37ce8; BYTE $0xff   // callq        _advance_dword, $-3204(%rip)
	LONG $0xfffe05e9; BYTE $0xff   // jmp          LBB48_4, $-507(%rip)

LBB48_35:
	WORD $0x894c; BYTE $0xff     // movq         %r15, %rdi
	LONG $0x000006be; BYTE $0x00 // movl         $6, %esi
	LONG $0xfffdf3e9; BYTE $0xff // jmp          LBB48_3, $-525(%rip)

LBB48_37:
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax

LBB48_39:
	LONG $0x18c48348 // addq         $24, %rsp
	BYTE $0x5b       // popq         %rbx
	WORD $0x5c41     // popq         %r12
	WORD $0x5d41     // popq         %r13
	WORD $0x5e41     // popq         %r14
	WORD $0x5f41     // popq         %r15
	BYTE $0x5d       // popq         %rbp
	BYTE $0xc3       // retq

LBB48_38:
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0xffffe5e9; BYTE $0xff               // jmp          LBB48_39, $-27(%rip)

LBB48_40:
	WORD $0x894c; BYTE $0xf0     // movq         %r14, %rax
	LONG $0xffffdde9; BYTE $0xff // jmp          LBB48_39, $-35(%rip)

	// .p2align 2, 0x90
	// .set L48_0_set_11, LBB48_11-LJTI48_0
	// .set L48_0_set_14, LBB48_14-LJTI48_0
	// .set L48_0_set_16, LBB48_16-LJTI48_0
	// .set L48_0_set_19, LBB48_19-LJTI48_0
	// .set L48_0_set_21, LBB48_21-LJTI48_0
	// .set L48_0_set_25, LBB48_25-LJTI48_0
LJTI48_0:
	LONG $0xfffffe3b // .long L48_0_set_11
	LONG $0xfffffe63 // .long L48_0_set_14
	LONG $0xfffffe79 // .long L48_0_set_16
	LONG $0xfffffe9e // .long L48_0_set_19
	LONG $0xfffffeb3 // .long L48_0_set_21
	LONG $0xfffffef6 // .long L48_0_set_25

	// .set L48_1_set_39, LBB48_39-LJTI48_1
	// .set L48_1_set_38, LBB48_38-LJTI48_1
	// .set L48_1_set_18, LBB48_18-LJTI48_1
	// .set L48_1_set_30, LBB48_30-LJTI48_1
	// .set L48_1_set_24, LBB48_24-LJTI48_1
	// .set L48_1_set_31, LBB48_31-LJTI48_1
	// .set L48_1_set_32, LBB48_32-LJTI48_1
	// .set L48_1_set_33, LBB48_33-LJTI48_1
	// .set L48_1_set_34, LBB48_34-LJTI48_1
	// .set L48_1_set_35, LBB48_35-LJTI48_1
LJTI48_1:
	LONG $0xffffffc5         // .long L48_1_set_39
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xfffffe71         // .long L48_1_set_18
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffff2a         // .long L48_1_set_30
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xfffffecd         // .long L48_1_set_24
	LONG $0xfffffecd         // .long L48_1_set_24
	LONG $0xfffffecd         // .long L48_1_set_24
	LONG $0xfffffecd         // .long L48_1_set_24
	LONG $0xfffffecd         // .long L48_1_set_24
	LONG $0xfffffecd         // .long L48_1_set_24
	LONG $0xfffffecd         // .long L48_1_set_24
	LONG $0xfffffecd         // .long L48_1_set_24
	LONG $0xfffffecd         // .long L48_1_set_24
	LONG $0xfffffecd         // .long L48_1_set_24
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffff3b         // .long L48_1_set_31
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffff48         // .long L48_1_set_32
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffff69         // .long L48_1_set_33
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffff8d         // .long L48_1_set_34
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffd4         // .long L48_1_set_38
	LONG $0xffffffb1         // .long L48_1_set_35
	QUAD $0x9090909090909090 // .p2align 4, 0x90

_skip_array:
	BYTE $0x55                   // pushq        %rbp
	WORD $0x8948; BYTE $0xe5     // movq         %rsp, %rbp
	WORD $0x5741                 // pushq        %r15
	WORD $0x5641                 // pushq        %r14
	WORD $0x5441                 // pushq        %r12
	BYTE $0x53                   // pushq        %rbx
	WORD $0x8949; BYTE $0xce     // movq         %rcx, %r14
	WORD $0x8948; BYTE $0xd3     // movq         %rdx, %rbx
	WORD $0x8949; BYTE $0xf7     // movq         %rsi, %r15
	WORD $0x8949; BYTE $0xfc     // movq         %rdi, %r12
	WORD $0x8948; BYTE $0xd7     // movq         %rdx, %rdi
	LONG $0x000005be; BYTE $0x00 // movl         $5, %esi
	LONG $0xfffb4ce8; BYTE $0xff // callq        _fsm_init, $-1204(%rip)
	WORD $0x8948; BYTE $0xdf     // movq         %rbx, %rdi
	WORD $0x894c; BYTE $0xe6     // movq         %r12, %rsi
	WORD $0x894c; BYTE $0xfa     // movq         %r15, %rdx
	WORD $0x894c; BYTE $0xf1     // movq         %r14, %rcx
	LONG $0xfffb4be8; BYTE $0xff // callq        _fsm_exec, $-1205(%rip)
	BYTE $0x5b                   // popq         %rbx
	WORD $0x5c41                 // popq         %r12
	WORD $0x5e41                 // popq         %r14
	WORD $0x5f41                 // popq         %r15
	BYTE $0x5d                   // popq         %rbp
	BYTE $0xc3                   // retq
	WORD $0x9090                 // .p2align 4, 0x90

_skip_object:
	BYTE $0x55                   // pushq        %rbp
	WORD $0x8948; BYTE $0xe5     // movq         %rsp, %rbp
	WORD $0x5741                 // pushq        %r15
	WORD $0x5641                 // pushq        %r14
	WORD $0x5441                 // pushq        %r12
	BYTE $0x53                   // pushq        %rbx
	WORD $0x8949; BYTE $0xce     // movq         %rcx, %r14
	WORD $0x8948; BYTE $0xd3     // movq         %rdx, %rbx
	WORD $0x8949; BYTE $0xf7     // movq         %rsi, %r15
	WORD $0x8949; BYTE $0xfc     // movq         %rdi, %r12
	WORD $0x8948; BYTE $0xd7     // movq         %rdx, %rdi
	LONG $0x000006be; BYTE $0x00 // movl         $6, %esi
	LONG $0xfffb0ce8; BYTE $0xff // callq        _fsm_init, $-1268(%rip)
	WORD $0x8948; BYTE $0xdf     // movq         %rbx, %rdi
	WORD $0x894c; BYTE $0xe6     // movq         %r12, %rsi
	WORD $0x894c; BYTE $0xfa     // movq         %r15, %rdx
	WORD $0x894c; BYTE $0xf1     // movq         %r14, %rcx
	LONG $0xfffb0be8; BYTE $0xff // callq        _fsm_exec, $-1269(%rip)
	BYTE $0x5b                   // popq         %rbx
	WORD $0x5c41                 // popq         %r12
	WORD $0x5e41                 // popq         %r14
	WORD $0x5f41                 // popq         %r15
	BYTE $0x5d                   // popq         %rbp
	BYTE $0xc3                   // retq
	WORD $0x9090                 // .p2align 4, 0x90

_skip_string:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0x5641                   // pushq        %r14
	BYTE $0x53                     // pushq        %rbx
	LONG $0x10ec8348               // subq         $16, %rsp
	WORD $0x8948; BYTE $0xd1       // movq         %rdx, %rcx
	WORD $0x8949; BYTE $0xf6       // movq         %rsi, %r14
	WORD $0x8b48; BYTE $0x1e       // movq         (%rsi), %rbx
	LONG $0xe8558d48               // leaq         $-24(%rbp), %rdx
	WORD $0x8948; BYTE $0xde       // movq         %rbx, %rsi
	LONG $0xfff130e8; BYTE $0xff   // callq        _advance_string, $-3792(%rip)
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x0009890f; WORD $0x0000 // jns          LBB51_1, $9(%rip)
	LONG $0xe84d8b48               // movq         $-24(%rbp), %rcx
	LONG $0x00000ae9; BYTE $0x00   // jmp          LBB51_3, $10(%rip)

LBB51_1:
	LONG $0xffc38348         // addq         $-1, %rbx
	WORD $0x8948; BYTE $0xc1 // movq         %rax, %rcx
	WORD $0x8948; BYTE $0xd8 // movq         %rbx, %rax

LBB51_3:
	WORD $0x8949; BYTE $0x0e // movq         %rcx, (%r14)
	LONG $0x10c48348         // addq         $16, %rsp
	BYTE $0x5b               // popq         %rbx
	WORD $0x5e41             // popq         %r14
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq
	QUAD $0x9090909090909090 // .p2align 4, 0x90

_skip_negative:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0x5641                   // pushq        %r14
	BYTE $0x53                     // pushq        %rbx
	WORD $0x8949; BYTE $0xf6       // movq         %rsi, %r14
	WORD $0x8b48; BYTE $0x1e       // movq         (%rsi), %rbx
	WORD $0x8b48; BYTE $0x07       // movq         (%rdi), %rax
	WORD $0x0148; BYTE $0xd8       // addq         %rbx, %rax
	LONG $0x08778b48               // movq         $8(%rdi), %rsi
	WORD $0x2948; BYTE $0xde       // subq         %rbx, %rsi
	WORD $0x8948; BYTE $0xc7       // movq         %rax, %rdi
	LONG $0x0000aee8; BYTE $0x00   // callq        _do_skip_number, $174(%rip)
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x000f880f; WORD $0x0000 // js           LBB52_1, $15(%rip)
	WORD $0x0148; BYTE $0xd8       // addq         %rbx, %rax
	WORD $0x8949; BYTE $0x06       // movq         %rax, (%r14)
	LONG $0xffc38348               // addq         $-1, %rbx
	LONG $0x000010e9; BYTE $0x00   // jmp          LBB52_3, $16(%rip)

LBB52_1:
	WORD $0xf748; BYTE $0xd0                   // notq         %rax
	WORD $0x0148; BYTE $0xc3                   // addq         %rax, %rbx
	WORD $0x8949; BYTE $0x1e                   // movq         %rbx, (%r14)
	LONG $0xfec3c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rbx

LBB52_3:
	WORD $0x8948; BYTE $0xd8                                 // movq         %rbx, %rax
	BYTE $0x5b                                               // popq         %rbx
	WORD $0x5e41                                             // popq         %r14
	BYTE $0x5d                                               // popq         %rbp
	BYTE $0xc3                                               // retq
	QUAD $0x0000000000000000; LONG $0x00000000; WORD $0x0000 // .p2align 4, 0x00

LCPI53_0:
	QUAD $0x2f2f2f2f2f2f2f2f; QUAD $0x2f2f2f2f2f2f2f2f // .space 16, '////////////////'

LCPI53_1:
	QUAD $0x3a3a3a3a3a3a3a3a; QUAD $0x3a3a3a3a3a3a3a3a // .space 16, '::::::::::::::::'

LCPI53_2:
	QUAD $0x2b2b2b2b2b2b2b2b; QUAD $0x2b2b2b2b2b2b2b2b // .space 16, '++++++++++++++++'

LCPI53_3:
	QUAD $0x2d2d2d2d2d2d2d2d; QUAD $0x2d2d2d2d2d2d2d2d // .space 16, '----------------'

LCPI53_4:
	QUAD $0xdfdfdfdfdfdfdfdf; QUAD $0xdfdfdfdfdfdfdfdf // .space 16, '\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf'

LCPI53_5:
	QUAD $0x2e2e2e2e2e2e2e2e; QUAD $0x2e2e2e2e2e2e2e2e // .space 16, '................'

LCPI53_6:
	QUAD $0x4545454545454545; QUAD $0x4545454545454545 // .space 16, 'EEEEEEEEEEEEEEEE'

	// .p2align 4, 0x90
_do_skip_number:
	BYTE $0x55                             // pushq        %rbp
	WORD $0x8948; BYTE $0xe5               // movq         %rsp, %rbp
	WORD $0x5741                           // pushq        %r15
	WORD $0x5641                           // pushq        %r14
	BYTE $0x53                             // pushq        %rbx
	WORD $0x8548; BYTE $0xf6               // testq        %rsi, %rsi
	LONG $0x0217840f; WORD $0x0000         // je           LBB53_29, $535(%rip)
	WORD $0x3f80; BYTE $0x30               // cmpb         $48, (%rdi)
	LONG $0x0035850f; WORD $0x0000         // jne          LBB53_5, $53(%rip)
	LONG $0x000001b8; BYTE $0x00           // movl         $1, %eax
	LONG $0x01fe8348                       // cmpq         $1, %rsi
	LONG $0x032d840f; WORD $0x0000         // je           LBB53_57, $813(%rip)
	WORD $0x4f8a; BYTE $0x01               // movb         $1(%rdi), %cl
	WORD $0xc180; BYTE $0xd2               // addb         $-46, %cl
	WORD $0xf980; BYTE $0x37               // cmpb         $55, %cl
	LONG $0x031e870f; WORD $0x0000         // ja           LBB53_57, $798(%rip)
	WORD $0xb60f; BYTE $0xc9               // movzbl       %cl, %ecx
	QUAD $0x000000800001ba48; WORD $0x0080 // movabsq      $36028797027352577, %rdx
	LONG $0xcaa30f48                       // btq          %rcx, %rdx
	LONG $0x0307830f; WORD $0x0000         // jae          LBB53_57, $775(%rip)

LBB53_5:
	LONG $0xffc1c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r9
	LONG $0x10fe8348                           // cmpq         $16, %rsi
	LONG $0x0352820f; WORD $0x0000             // jb           LBB53_64, $850(%rip)
	QUAD $0xffffff27056f79c5                   // vmovdqa      $-217(%rip), %xmm8  /* LCPI53_0(%rip) */
	QUAD $0xffffff2f0d6f79c5                   // vmovdqa      $-209(%rip), %xmm9  /* LCPI53_1(%rip) */
	QUAD $0xffffff37156f79c5                   // vmovdqa      $-201(%rip), %xmm10  /* LCPI53_2(%rip) */
	QUAD $0xffffff3f1d6f79c5                   // vmovdqa      $-193(%rip), %xmm11  /* LCPI53_3(%rip) */
	QUAD $0xffffff47256ff9c5                   // vmovdqa      $-185(%rip), %xmm4  /* LCPI53_4(%rip) */
	QUAD $0xffffff4f2d6ff9c5                   // vmovdqa      $-177(%rip), %xmm5  /* LCPI53_5(%rip) */
	QUAD $0xffffff57356ff9c5                   // vmovdqa      $-169(%rip), %xmm6  /* LCPI53_6(%rip) */
	LONG $0xffc0c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r8
	LONG $0xffc2c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r10
	WORD $0x8949; BYTE $0xfe                   // movq         %rdi, %r14
	LONG $0x90909090; WORD $0x9090             // .p2align 4, 0x90

LBB53_7:
	LONG $0x6f7ac1c4; BYTE $0x3e   // vmovdqu      (%r14), %xmm7
	LONG $0x6441c1c4; BYTE $0xc0   // vpcmpgtb     %xmm8, %xmm7, %xmm0
	LONG $0xcf64b1c5               // vpcmpgtb     %xmm7, %xmm9, %xmm1
	LONG $0xc1dbf9c5               // vpand        %xmm1, %xmm0, %xmm0
	LONG $0xcf74a9c5               // vpcmpeqb     %xmm7, %xmm10, %xmm1
	LONG $0xd774a1c5               // vpcmpeqb     %xmm7, %xmm11, %xmm2
	LONG $0xc9ebe9c5               // vpor         %xmm1, %xmm2, %xmm1
	LONG $0xd4dbc1c5               // vpand        %xmm4, %xmm7, %xmm2
	LONG $0xd674e9c5               // vpcmpeqb     %xmm6, %xmm2, %xmm2
	LONG $0xfd74c1c5               // vpcmpeqb     %xmm5, %xmm7, %xmm7
	LONG $0xdfebe9c5               // vpor         %xmm7, %xmm2, %xmm3
	LONG $0xc0ebf1c5               // vpor         %xmm0, %xmm1, %xmm0
	LONG $0xc0ebe1c5               // vpor         %xmm0, %xmm3, %xmm0
	LONG $0xd7d7f9c5               // vpmovmskb    %xmm7, %edx
	LONG $0xfad779c5               // vpmovmskb    %xmm2, %r15d
	LONG $0xd9d779c5               // vpmovmskb    %xmm1, %r11d
	LONG $0xc8d7f9c5               // vpmovmskb    %xmm0, %ecx
	WORD $0xd1f7                   // notl         %ecx
	WORD $0xbc0f; BYTE $0xc9       // bsfl         %ecx, %ecx
	WORD $0xf983; BYTE $0x10       // cmpl         $16, %ecx
	LONG $0x0014840f; WORD $0x0000 // je           LBB53_9, $20(%rip)
	LONG $0xffffffbb; BYTE $0xff   // movl         $-1, %ebx
	WORD $0xe3d3                   // shll         %cl, %ebx
	WORD $0xd3f7                   // notl         %ebx
	WORD $0xda21                   // andl         %ebx, %edx
	WORD $0x2141; BYTE $0xdf       // andl         %ebx, %r15d
	WORD $0x2144; BYTE $0xdb       // andl         %r11d, %ebx
	WORD $0x8941; BYTE $0xdb       // movl         %ebx, %r11d

LBB53_9:
	WORD $0x5a8d; BYTE $0xff       // leal         $-1(%rdx), %ebx
	WORD $0xd321                   // andl         %edx, %ebx
	LONG $0x00d1850f; WORD $0x0000 // jne          LBB53_27, $209(%rip)
	LONG $0xff5f8d41               // leal         $-1(%r15), %ebx
	WORD $0x2144; BYTE $0xfb       // andl         %r15d, %ebx
	LONG $0x00c4850f; WORD $0x0000 // jne          LBB53_27, $196(%rip)
	LONG $0xff5b8d41               // leal         $-1(%r11), %ebx
	WORD $0x2144; BYTE $0xdb       // andl         %r11d, %ebx
	LONG $0x00b7850f; WORD $0x0000 // jne          LBB53_27, $183(%rip)
	WORD $0xd285                   // testl        %edx, %edx
	LONG $0x0019840f; WORD $0x0000 // je           LBB53_15, $25(%rip)
	WORD $0x894c; BYTE $0xf3       // movq         %r14, %rbx
	WORD $0x2948; BYTE $0xfb       // subq         %rdi, %rbx
	WORD $0xbc0f; BYTE $0xd2       // bsfl         %edx, %edx
	WORD $0x0148; BYTE $0xda       // addq         %rbx, %rdx
	LONG $0xfffa8349               // cmpq         $-1, %r10
	LONG $0x00b3850f; WORD $0x0000 // jne          LBB53_28, $179(%rip)
	WORD $0x8949; BYTE $0xd2       // movq         %rdx, %r10

LBB53_15:
	WORD $0x8545; BYTE $0xff       // testl        %r15d, %r15d
	LONG $0x001a840f; WORD $0x0000 // je           LBB53_18, $26(%rip)
	WORD $0x894c; BYTE $0xf3       // movq         %r14, %rbx
	WORD $0x2948; BYTE $0xfb       // subq         %rdi, %rbx
	LONG $0xd7bc0f41               // bsfl         %r15d, %edx
	WORD $0x0148; BYTE $0xda       // addq         %rbx, %rdx
	LONG $0xfff88349               // cmpq         $-1, %r8
	LONG $0x0090850f; WORD $0x0000 // jne          LBB53_28, $144(%rip)
	WORD $0x8949; BYTE $0xd0       // movq         %rdx, %r8

LBB53_18:
	WORD $0x8545; BYTE $0xdb       // testl        %r11d, %r11d
	LONG $0x001a840f; WORD $0x0000 // je           LBB53_21, $26(%rip)
	WORD $0x894c; BYTE $0xf3       // movq         %r14, %rbx
	WORD $0x2948; BYTE $0xfb       // subq         %rdi, %rbx
	LONG $0xd3bc0f41               // bsfl         %r11d, %edx
	WORD $0x0148; BYTE $0xda       // addq         %rbx, %rdx
	LONG $0xfff98349               // cmpq         $-1, %r9
	LONG $0x006d850f; WORD $0x0000 // jne          LBB53_28, $109(%rip)
	WORD $0x8949; BYTE $0xd1       // movq         %rdx, %r9

LBB53_21:
	WORD $0xf983; BYTE $0x10             // cmpl         $16, %ecx
	LONG $0x0023850f; WORD $0x0000       // jne          LBB53_23, $35(%rip)
	LONG $0x10c68349                     // addq         $16, %r14
	LONG $0xf0c68348                     // addq         $-16, %rsi
	WORD $0x3145; BYTE $0xdb             // xorl         %r11d, %r11d
	WORD $0x01b1                         // movb         $1, %cl
	WORD $0xc984                         // testb        %cl, %cl
	LONG $0x0023850f; WORD $0x0000       // jne          LBB53_26, $35(%rip)
	LONG $0x000071e9; BYTE $0x00         // jmp          LBB53_31, $113(%rip)
	QUAD $0x9090909090909090; BYTE $0x90 // .p2align 4, 0x90

LBB53_23:
	WORD $0xc989                   // movl         %ecx, %ecx
	WORD $0x0149; BYTE $0xce       // addq         %rcx, %r14
	LONG $0x0004bb41; WORD $0x0000 // movl         $4, %r11d

LBB53_24:
	WORD $0xc931                   // xorl         %ecx, %ecx
	WORD $0xc984                   // testb        %cl, %cl
	LONG $0x0053840f; WORD $0x0000 // je           LBB53_31, $83(%rip)

LBB53_26:
	LONG $0x0ffe8348               // cmpq         $15, %rsi
	LONG $0xfec1870f; WORD $0xffff // ja           LBB53_7, $-319(%rip)
	LONG $0x000041e9; BYTE $0x00   // jmp          LBB53_30, $65(%rip)

LBB53_27:
	WORD $0x894c; BYTE $0xf1       // movq         %r14, %rcx
	WORD $0x2948; BYTE $0xf9       // subq         %rdi, %rcx
	WORD $0xbc0f; BYTE $0xc3       // bsfl         %ebx, %eax
	WORD $0x0148; BYTE $0xc8       // addq         %rcx, %rax
	WORD $0xf748; BYTE $0xd0       // notq         %rax
	LONG $0x0001bb41; WORD $0x0000 // movl         $1, %r11d
	LONG $0xffffcde9; BYTE $0xff   // jmp          LBB53_24, $-51(%rip)

LBB53_28:
	WORD $0xf748; BYTE $0xd2       // notq         %rdx
	LONG $0x0001bb41; WORD $0x0000 // movl         $1, %r11d
	WORD $0xc931                   // xorl         %ecx, %ecx
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	WORD $0xc984                   // testb        %cl, %cl
	LONG $0xffc1850f; WORD $0xffff // jne          LBB53_26, $-63(%rip)
	LONG $0x00000fe9; BYTE $0x00   // jmp          LBB53_31, $15(%rip)

LBB53_29:
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	LONG $0x000122e9; BYTE $0x00               // jmp          LBB53_57, $290(%rip)

LBB53_30:
	WORD $0x3145; BYTE $0xdb // xorl         %r11d, %r11d

LBB53_31:
	LONG $0x04fb8341               // cmpl         $4, %r11d
	LONG $0x00aa840f; WORD $0x0000 // je           LBB53_47, $170(%rip)
	WORD $0x8545; BYTE $0xdb       // testl        %r11d, %r11d
	LONG $0x010c850f; WORD $0x0000 // jne          LBB53_57, $268(%rip)
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x0098840f; WORD $0x0000 // je           LBB53_47, $152(%rip)

LBB53_34:
	LONG $0x361c8d4d                           // leaq         (%r14,%rsi), %r11
	WORD $0x894c; BYTE $0xf2                   // movq         %r14, %rdx
	WORD $0x2948; BYTE $0xfa                   // subq         %rdi, %rdx
	WORD $0xc031                               // xorl         %eax, %eax
	LONG $0x6d3d8d4c; WORD $0x0001; BYTE $0x00 // leaq         $365(%rip), %r15  /* LJTI53_0(%rip) */
	LONG $0x000031e9; BYTE $0x00               // jmp          LBB53_39, $49(%rip)

LBB53_35:
	WORD $0xf983; BYTE $0x65       // cmpl         $101, %ecx
	LONG $0x0074850f; WORD $0x0000 // jne          LBB53_46, $116(%rip)

LBB53_36:
	LONG $0xfff88349                                       // cmpq         $-1, %r8
	LONG $0x0126850f; WORD $0x0000                         // jne          LBB53_63, $294(%rip)
	LONG $0x02048d4c                                       // leaq         (%rdx,%rax), %r8
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

LBB53_38:
	LONG $0x01c08348               // addq         $1, %rax
	WORD $0x3948; BYTE $0xc6       // cmpq         %rax, %rsi
	LONG $0x00e4840f; WORD $0x0000 // je           LBB53_61, $228(%rip)

LBB53_39:
	LONG $0x0cbe0f41; BYTE $0x06   // movsbl       (%r14,%rax), %ecx
	WORD $0x598d; BYTE $0xd0       // leal         $-48(%rcx), %ebx
	WORD $0xfb83; BYTE $0x0a       // cmpl         $10, %ebx
	LONG $0xffe2820f; WORD $0xffff // jb           LBB53_38, $-30(%rip)
	WORD $0x598d; BYTE $0xd5       // leal         $-43(%rcx), %ebx
	WORD $0xfb83; BYTE $0x1a       // cmpl         $26, %ebx
	LONG $0xffb2870f; WORD $0xffff // ja           LBB53_35, $-78(%rip)
	LONG $0x9f0c6349               // movslq       (%r15,%rbx,4), %rcx
	WORD $0x014c; BYTE $0xf9       // addq         %r15, %rcx
	JMP  CX

LBB53_42:
	LONG $0xfff98349               // cmpq         $-1, %r9
	LONG $0x00d8850f; WORD $0x0000 // jne          LBB53_63, $216(%rip)
	LONG $0x020c8d4c               // leaq         (%rdx,%rax), %r9
	LONG $0xffffbae9; BYTE $0xff   // jmp          LBB53_38, $-70(%rip)

LBB53_44:
	LONG $0xfffa8349               // cmpq         $-1, %r10
	LONG $0x00c5850f; WORD $0x0000 // jne          LBB53_63, $197(%rip)
	LONG $0x02148d4c               // leaq         (%rdx,%rax), %r10
	LONG $0xffffa7e9; BYTE $0xff   // jmp          LBB53_38, $-89(%rip)

LBB53_46:
	WORD $0x0149; BYTE $0xc6 // addq         %rax, %r14

LBB53_47:
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	WORD $0x854d; BYTE $0xd2                   // testq        %r10, %r10
	LONG $0x005b840f; WORD $0x0000             // je           LBB53_57, $91(%rip)
	WORD $0x854d; BYTE $0xc9                   // testq        %r9, %r9
	LONG $0x0052840f; WORD $0x0000             // je           LBB53_57, $82(%rip)
	WORD $0x854d; BYTE $0xc0                   // testq        %r8, %r8
	LONG $0x0049840f; WORD $0x0000             // je           LBB53_57, $73(%rip)
	WORD $0x2949; BYTE $0xfe                   // subq         %rdi, %r14
	LONG $0xff468d49                           // leaq         $-1(%r14), %rax
	WORD $0x3949; BYTE $0xc2                   // cmpq         %rax, %r10
	LONG $0x0033840f; WORD $0x0000             // je           LBB53_56, $51(%rip)
	WORD $0x3949; BYTE $0xc1                   // cmpq         %rax, %r9
	LONG $0x002a840f; WORD $0x0000             // je           LBB53_56, $42(%rip)
	WORD $0x3949; BYTE $0xc0                   // cmpq         %rax, %r8
	LONG $0x0021840f; WORD $0x0000             // je           LBB53_56, $33(%rip)
	WORD $0x854d; BYTE $0xc9                   // testq        %r9, %r9
	LONG $0x00258e0f; WORD $0x0000             // jle          LBB53_58, $37(%rip)
	LONG $0xff418d49                           // leaq         $-1(%r9), %rax
	WORD $0x3949; BYTE $0xc0                   // cmpq         %rax, %r8
	LONG $0x0018840f; WORD $0x0000             // je           LBB53_58, $24(%rip)
	WORD $0xf749; BYTE $0xd1                   // notq         %r9
	WORD $0x894c; BYTE $0xc8                   // movq         %r9, %rax
	LONG $0x000006e9; BYTE $0x00               // jmp          LBB53_57, $6(%rip)

LBB53_56:
	WORD $0xf749; BYTE $0xde // negq         %r14
	WORD $0x894c; BYTE $0xf0 // movq         %r14, %rax

LBB53_57:
	BYTE $0x5b   // popq         %rbx
	WORD $0x5e41 // popq         %r14
	WORD $0x5f41 // popq         %r15
	BYTE $0x5d   // popq         %rbp
	BYTE $0xc3   // retq

LBB53_58:
	WORD $0x894c; BYTE $0xd0       // movq         %r10, %rax
	WORD $0x094c; BYTE $0xc0       // orq          %r8, %rax
	WORD $0x990f; BYTE $0xc0       // setns        %al
	LONG $0x001c880f; WORD $0x0000 // js           LBB53_62, $28(%rip)
	WORD $0x394d; BYTE $0xc2       // cmpq         %r8, %r10
	LONG $0x00138c0f; WORD $0x0000 // jl           LBB53_62, $19(%rip)
	WORD $0xf749; BYTE $0xd2       // notq         %r10
	WORD $0x894c; BYTE $0xd0       // movq         %r10, %rax
	LONG $0xffffd6e9; BYTE $0xff   // jmp          LBB53_57, $-42(%rip)

LBB53_61:
	WORD $0x894d; BYTE $0xde     // movq         %r11, %r14
	LONG $0xffff63e9; BYTE $0xff // jmp          LBB53_47, $-157(%rip)

LBB53_62:
	LONG $0xff488d49             // leaq         $-1(%r8), %rcx
	WORD $0x3949; BYTE $0xca     // cmpq         %rcx, %r10
	WORD $0xf749; BYTE $0xd0     // notq         %r8
	LONG $0xc6450f4d             // cmovneq      %r14, %r8
	WORD $0xc084                 // testb        %al, %al
	LONG $0xc6440f4d             // cmoveq       %r14, %r8
	WORD $0x894c; BYTE $0xc0     // movq         %r8, %rax
	LONG $0xffffb2e9; BYTE $0xff // jmp          LBB53_57, $-78(%rip)

LBB53_63:
	WORD $0x294c; BYTE $0xf7     // subq         %r14, %rdi
	WORD $0xf748; BYTE $0xd0     // notq         %rax
	WORD $0x0148; BYTE $0xf8     // addq         %rdi, %rax
	LONG $0xffffa4e9; BYTE $0xff // jmp          LBB53_57, $-92(%rip)

LBB53_64:
	LONG $0xffc0c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r8
	LONG $0xffc2c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r10
	WORD $0x8949; BYTE $0xfe                   // movq         %rdi, %r14
	WORD $0x8548; BYTE $0xf6                   // testq        %rsi, %rsi
	LONG $0xfe87850f; WORD $0xffff             // jne          LBB53_34, $-377(%rip)
	LONG $0xffff1ae9; BYTE $0xff               // jmp          LBB53_47, $-230(%rip)
	WORD $0x9090                               // .p2align 2, 0x90

	// .set L53_0_set_42, LBB53_42-LJTI53_0
	// .set L53_0_set_46, LBB53_46-LJTI53_0
	// .set L53_0_set_44, LBB53_44-LJTI53_0
	// .set L53_0_set_36, LBB53_36-LJTI53_0
LJTI53_0:
	LONG $0xfffffeef // .long L53_0_set_42
	LONG $0xffffff15 // .long L53_0_set_46
	LONG $0xfffffeef // .long L53_0_set_42
	LONG $0xffffff02 // .long L53_0_set_44
	LONG $0xffffff15 // .long L53_0_set_46
	LONG $0xffffff15 // .long L53_0_set_46
	LONG $0xffffff15 // .long L53_0_set_46
	LONG $0xffffff15 // .long L53_0_set_46
	LONG $0xffffff15 // .long L53_0_set_46
	LONG $0xffffff15 // .long L53_0_set_46
	LONG $0xffffff15 // .long L53_0_set_46
	LONG $0xffffff15 // .long L53_0_set_46
	LONG $0xffffff15 // .long L53_0_set_46
	LONG $0xffffff15 // .long L53_0_set_46
	LONG $0xffffff15 // .long L53_0_set_46
	LONG $0xffffff15 // .long L53_0_set_46
	LONG $0xffffff15 // .long L53_0_set_46
	LONG $0xffffff15 // .long L53_0_set_46
	LONG $0xffffff15 // .long L53_0_set_46
	LONG $0xffffff15 // .long L53_0_set_46
	LONG $0xffffff15 // .long L53_0_set_46
	LONG $0xffffff15 // .long L53_0_set_46
	LONG $0xffffff15 // .long L53_0_set_46
	LONG $0xffffff15 // .long L53_0_set_46
	LONG $0xffffff15 // .long L53_0_set_46
	LONG $0xffffff15 // .long L53_0_set_46
	LONG $0xfffffea1 // .long L53_0_set_36

	// .p2align 4, 0x90
_skip_positive:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	BYTE $0x53                                 // pushq        %rbx
	BYTE $0x50                                 // pushq        %rax
	WORD $0x8949; BYTE $0xf6                   // movq         %rsi, %r14
	WORD $0x8b4c; BYTE $0x3e                   // movq         (%rsi), %r15
	LONG $0xff5f8d49                           // leaq         $-1(%r15), %rbx
	WORD $0x8b48; BYTE $0x07                   // movq         (%rdi), %rax
	WORD $0x0148; BYTE $0xd8                   // addq         %rbx, %rax
	LONG $0x08778b48                           // movq         $8(%rdi), %rsi
	WORD $0x2948; BYTE $0xde                   // subq         %rbx, %rsi
	WORD $0x8948; BYTE $0xc7                   // movq         %rax, %rdi
	LONG $0xfffb97e8; BYTE $0xff               // callq        _do_skip_number, $-1129(%rip)
	LONG $0xff508d48                           // leaq         $-1(%rax), %rdx
	LONG $0xfec1c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rcx
	LONG $0xfec6c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rsi
	WORD $0x2948; BYTE $0xc6                   // subq         %rax, %rsi
	WORD $0x8548; BYTE $0xc0                   // testq        %rax, %rax
	LONG $0xf2490f48                           // cmovnsq      %rdx, %rsi
	LONG $0xcb490f48                           // cmovnsq      %rbx, %rcx
	WORD $0x014c; BYTE $0xfe                   // addq         %r15, %rsi
	WORD $0x8949; BYTE $0x36                   // movq         %rsi, (%r14)
	WORD $0x8948; BYTE $0xc8                   // movq         %rcx, %rax
	LONG $0x08c48348                           // addq         $8, %rsp
	BYTE $0x5b                                 // popq         %rbx
	WORD $0x5e41                               // popq         %r14
	WORD $0x5f41                               // popq         %r15
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq
	WORD $0x9090; BYTE $0x90                   // .p2align 4, 0x90

_skip_number:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0x5741                   // pushq        %r15
	WORD $0x5641                   // pushq        %r14
	WORD $0x5441                   // pushq        %r12
	BYTE $0x53                     // pushq        %rbx
	WORD $0x8949; BYTE $0xf6       // movq         %rsi, %r14
	WORD $0x8b4c; BYTE $0x27       // movq         (%rdi), %r12
	LONG $0x08778b48               // movq         $8(%rdi), %rsi
	WORD $0x8b4d; BYTE $0x3e       // movq         (%r14), %r15
	WORD $0xc031                   // xorl         %eax, %eax
	LONG $0x3c3c8043; BYTE $0x2d   // cmpb         $45, (%r12,%r15)
	LONG $0x3c1c8d4b               // leaq         (%r12,%r15), %rbx
	WORD $0x940f; BYTE $0xc0       // sete         %al
	WORD $0x0148; BYTE $0xc3       // addq         %rax, %rbx
	WORD $0x2948; BYTE $0xc6       // subq         %rax, %rsi
	LONG $0x003b840f; WORD $0x0000 // je           LBB55_6, $59(%rip)
	WORD $0x3949; BYTE $0xf7       // cmpq         %rsi, %r15
	LONG $0x000c830f; WORD $0x0000 // jae          LBB55_3, $12(%rip)
	WORD $0x038a                   // movb         (%rbx), %al
	WORD $0xd004                   // addb         $-48, %al
	WORD $0x093c                   // cmpb         $9, %al
	LONG $0x0038870f; WORD $0x0000 // ja           LBB55_8, $56(%rip)

LBB55_3:
	WORD $0x8948; BYTE $0xdf       // movq         %rbx, %rdi
	LONG $0xfffb11e8; BYTE $0xff   // callq        _do_skip_number, $-1263(%rip)
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x0021880f; WORD $0x0000 // js           LBB55_7, $33(%rip)
	WORD $0x0148; BYTE $0xc3       // addq         %rax, %rbx

LBB55_5:
	WORD $0x294c; BYTE $0xe3 // subq         %r12, %rbx
	WORD $0x8949; BYTE $0x1e // movq         %rbx, (%r14)
	WORD $0x894c; BYTE $0xf8 // movq         %r15, %rax
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

LBB55_6:
	LONG $0xffc7c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r15
	LONG $0xffffe2e9; BYTE $0xff               // jmp          LBB55_5, $-30(%rip)

LBB55_7:
	WORD $0xf748; BYTE $0xd0 // notq         %rax
	WORD $0x0148; BYTE $0xc3 // addq         %rax, %rbx

LBB55_8:
	LONG $0xfec7c749; WORD $0xffff; BYTE $0xff // movq         $-2, %r15
	LONG $0xffffd0e9; BYTE $0xff               // jmp          LBB55_5, $-48(%rip)
	LONG $0x90909090; BYTE $0x90               // .p2align 4, 0x90

_validate_one:
	BYTE $0x55                   // pushq        %rbp
	WORD $0x8948; BYTE $0xe5     // movq         %rsp, %rbp
	WORD $0x5741                 // pushq        %r15
	WORD $0x5641                 // pushq        %r14
	BYTE $0x53                   // pushq        %rbx
	BYTE $0x50                   // pushq        %rax
	WORD $0x8948; BYTE $0xd3     // movq         %rdx, %rbx
	WORD $0x8949; BYTE $0xf6     // movq         %rsi, %r14
	WORD $0x8949; BYTE $0xff     // movq         %rdi, %r15
	WORD $0x8948; BYTE $0xd7     // movq         %rdx, %rdi
	WORD $0xf631                 // xorl         %esi, %esi
	LONG $0xfff483e8; BYTE $0xff // callq        _fsm_init, $-2941(%rip)
	LONG $0x000020b9; BYTE $0x00 // movl         $32, %ecx
	WORD $0x8948; BYTE $0xdf     // movq         %rbx, %rdi
	WORD $0x894c; BYTE $0xfe     // movq         %r15, %rsi
	WORD $0x894c; BYTE $0xf2     // movq         %r14, %rdx
	LONG $0xfff480e8; BYTE $0xff // callq        _fsm_exec, $-2944(%rip)
	LONG $0x08c48348             // addq         $8, %rsp
	BYTE $0x5b                   // popq         %rbx
	WORD $0x5e41                 // popq         %r14
	WORD $0x5f41                 // popq         %r15
	BYTE $0x5d                   // popq         %rbp
	BYTE $0xc3                   // retq
	LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

_pow10_ceil_sig:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	LONG $0x0124c781; WORD $0x0000             // addl         $292, %edi
	LONG $0x04e7c148                           // shlq         $4, %rdi
	LONG $0xbb0d8d48; WORD $0x0048; BYTE $0x00 // leaq         $18619(%rip), %rcx  /* _pow10_ceil_sig.g(%rip) */
	LONG $0x0f048b48                           // movq         (%rdi,%rcx), %rax
	LONG $0x0f548b48; BYTE $0x08               // movq         $8(%rdi,%rcx), %rdx
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq

	// .p2align 4, 0x90
_round_odd:
	BYTE $0x55               // pushq        %rbp
	WORD $0x8948; BYTE $0xe5 // movq         %rsp, %rbp
	WORD $0x8948; BYTE $0xd1 // movq         %rdx, %rcx
	WORD $0x8948; BYTE $0xd0 // movq         %rdx, %rax
	WORD $0xf748; BYTE $0xe6 // mulq         %rsi
	WORD $0x8948; BYTE $0xd6 // movq         %rdx, %rsi
	WORD $0x8948; BYTE $0xc8 // movq         %rcx, %rax
	WORD $0xf748; BYTE $0xe7 // mulq         %rdi
	WORD $0x0148; BYTE $0xf0 // addq         %rsi, %rax
	LONG $0x00d28348         // adcq         $0, %rdx
	WORD $0xc931             // xorl         %ecx, %ecx
	LONG $0x02f88348         // cmpq         $2, %rax
	WORD $0x930f; BYTE $0xc1 // setae        %cl
	WORD $0x0948; BYTE $0xd1 // orq          %rdx, %rcx
	WORD $0x8948; BYTE $0xc8 // movq         %rcx, %rax
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq
	WORD $0x9090             // .p2align 4, 0x90

_ctz10:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x8948; BYTE $0xf8                   // movq         %rdi, %rax
	LONG $0x0ae8c148                           // shrq         $10, %rax
	LONG $0x02f93d48; WORD $0x0095             // cmpq         $9765625, %rax
	LONG $0x0095820f; WORD $0x0000             // jb           LBB59_7, $149(%rip)
	WORD $0x8948; BYTE $0xf9                   // movq         %rdi, %rcx
	LONG $0x0be9c148                           // shrq         $11, %rcx
	LONG $0x00000bb8; BYTE $0x00               // movl         $11, %eax
	LONG $0xddf98148; WORD $0xe90e; BYTE $0x02 // cmpq         $48828125, %rcx
	LONG $0x0106820f; WORD $0x0000             // jb           LBB59_17, $262(%rip)
	WORD $0x8948; BYTE $0xf9                   // movq         %rdi, %rcx
	LONG $0x0ce9c148                           // shrq         $12, %rcx
	LONG $0x00000cb8; BYTE $0x00               // movl         $12, %eax
	LONG $0x51f98148; WORD $0x8d4a; BYTE $0x0e // cmpq         $244140625, %rcx
	LONG $0x00ed820f; WORD $0x0000             // jb           LBB59_17, $237(%rip)
	WORD $0x8948; BYTE $0xf9                   // movq         %rdi, %rcx
	LONG $0x0de9c148                           // shrq         $13, %rcx
	LONG $0x00000db8; BYTE $0x00               // movl         $13, %eax
	LONG $0x95f98148; WORD $0xc273; BYTE $0x48 // cmpq         $1220703125, %rcx
	LONG $0x00d4820f; WORD $0x0000             // jb           LBB59_17, $212(%rip)
	LONG $0x00000eb8; BYTE $0x00               // movl         $14, %eax
	QUAD $0x5af3107a4000b948; WORD $0x0000     // movabsq      $100000000000000, %rcx
	WORD $0x3948; BYTE $0xcf                   // cmpq         %rcx, %rdi
	LONG $0x00bc820f; WORD $0x0000             // jb           LBB59_17, $188(%rip)
	LONG $0x00000fb8; BYTE $0x00               // movl         $15, %eax
	QUAD $0x8d7ea4c68000b948; WORD $0x0003     // movabsq      $1000000000000000, %rcx
	WORD $0x3948; BYTE $0xcf                   // cmpq         %rcx, %rdi
	LONG $0x00a4820f; WORD $0x0000             // jb           LBB59_17, $164(%rip)
	QUAD $0x86f26fc10000b848; WORD $0x0023     // movabsq      $10000000000000000, %rax
	WORD $0x3948; BYTE $0xc7                   // cmpq         %rax, %rdi
	LONG $0x000011b8; BYTE $0x00               // movl         $17, %eax

LBB59_16:
	WORD $0xd883; BYTE $0x00     // sbbl         $0, %eax
	LONG $0x00008ae9; BYTE $0x00 // jmp          LBB59_17, $138(%rip)

LBB59_7:
	LONG $0x000001b8; BYTE $0x00               // movl         $1, %eax
	LONG $0x0aff8348                           // cmpq         $10, %rdi
	LONG $0x007b820f; WORD $0x0000             // jb           LBB59_17, $123(%rip)
	LONG $0x000002b8; BYTE $0x00               // movl         $2, %eax
	LONG $0x64ff8348                           // cmpq         $100, %rdi
	LONG $0x006c820f; WORD $0x0000             // jb           LBB59_17, $108(%rip)
	LONG $0x000003b8; BYTE $0x00               // movl         $3, %eax
	LONG $0xe8ff8148; WORD $0x0003; BYTE $0x00 // cmpq         $1000, %rdi
	LONG $0x005a820f; WORD $0x0000             // jb           LBB59_17, $90(%rip)
	LONG $0x000004b8; BYTE $0x00               // movl         $4, %eax
	LONG $0x10ff8148; WORD $0x0027; BYTE $0x00 // cmpq         $10000, %rdi
	LONG $0x0048820f; WORD $0x0000             // jb           LBB59_17, $72(%rip)
	LONG $0x000005b8; BYTE $0x00               // movl         $5, %eax
	LONG $0xa0ff8148; WORD $0x0186; BYTE $0x00 // cmpq         $100000, %rdi
	LONG $0x0036820f; WORD $0x0000             // jb           LBB59_17, $54(%rip)
	LONG $0x000006b8; BYTE $0x00               // movl         $6, %eax
	LONG $0x40ff8148; WORD $0x0f42; BYTE $0x00 // cmpq         $1000000, %rdi
	LONG $0x0024820f; WORD $0x0000             // jb           LBB59_17, $36(%rip)
	LONG $0x000007b8; BYTE $0x00               // movl         $7, %eax
	LONG $0x80ff8148; WORD $0x9896; BYTE $0x00 // cmpq         $10000000, %rdi
	LONG $0x0012820f; WORD $0x0000             // jb           LBB59_17, $18(%rip)
	LONG $0x000008b8; BYTE $0x00               // movl         $8, %eax
	LONG $0x00ff8148; WORD $0xf5e1; BYTE $0x05 // cmpq         $100000000, %rdi
	LONG $0x0002830f; WORD $0x0000             // jae          LBB59_15, $2(%rip)

LBB59_17:
	BYTE $0x5d // popq         %rbp
	BYTE $0xc3 // retq

LBB59_15:
	LONG $0x00ff8148; WORD $0x9aca; BYTE $0x3b // cmpq         $1000000000, %rdi
	LONG $0x00000ab8; BYTE $0x00               // movl         $10, %eax
	LONG $0xffff5be9; BYTE $0xff               // jmp          LBB59_16, $-165(%rip)
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

_print_exponent:
	BYTE $0x55                   // pushq        %rbp
	WORD $0x8948; BYTE $0xe5     // movq         %rsp, %rbp
	WORD $0x5741                 // pushq        %r15
	WORD $0x5641                 // pushq        %r14
	WORD $0x5541                 // pushq        %r13
	WORD $0x5441                 // pushq        %r12
	BYTE $0x53                   // pushq        %rbx
	BYTE $0x50                   // pushq        %rax
	WORD $0x8941; BYTE $0xcf     // movl         %ecx, %r15d
	WORD $0x8949; BYTE $0xd5     // movq         %rdx, %r13
	WORD $0x8949; BYTE $0xf6     // movq         %rsi, %r14
	LONG $0x01628d4c             // leaq         $1(%rdx), %r12
	WORD $0x894c; BYTE $0xe6     // movq         %r12, %rsi
	WORD $0xca89                 // movl         %ecx, %edx
	LONG $0x00021be8; BYTE $0x00 // callq        _print_mantissa, $539(%rip)
	WORD $0x8948; BYTE $0xc3     // movq         %rax, %rbx
	WORD $0x294c; BYTE $0xe8     // subq         %r13, %rax
	LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

LBB60_1:
	LONG $0xffc08348               // addq         $-1, %rax
	LONG $0x30ff7b80               // cmpb         $48, $-1(%rbx)
	LONG $0xff5b8d48               // leaq         $-1(%rbx), %rbx
	LONG $0xffee840f; WORD $0xffff // je           LBB60_1, $-18(%rip)
	LONG $0x014d8a41               // movb         $1(%r13), %cl
	LONG $0x004d8841               // movb         %cl, (%r13)
	LONG $0x02f88348               // cmpq         $2, %rax
	LONG $0x00098c0f; WORD $0x0000 // jl           LBB60_4, $9(%rip)
	LONG $0x01c38348               // addq         $1, %rbx
	LONG $0x2404c641; BYTE $0x2e   // movb         $46, (%r12)

LBB60_4:
	WORD $0x03c6; BYTE $0x65       // movb         $101, (%rbx)
	WORD $0x0145; BYTE $0xfe       // addl         %r15d, %r14d
	WORD $0x8945; BYTE $0xf7       // movl         %r14d, %r15d
	LONG $0xffc78341               // addl         $-1, %r15d
	LONG $0x0050880f; WORD $0x0000 // js           LBB60_6, $80(%rip)
	LONG $0x01c38348               // addq         $1, %rbx
	LONG $0x64ff8341               // cmpl         $100, %r15d
	LONG $0x005d8c0f; WORD $0x0000 // jl           LBB60_9, $93(%rip)

LBB60_8:
	WORD $0x6349; BYTE $0xc7                   // movslq       %r15d, %rax
	LONG $0x67c06948; WORD $0x6666; BYTE $0x66 // imulq        $1717986919, %rax, %rax
	WORD $0x8948; BYTE $0xc1                   // movq         %rax, %rcx
	LONG $0x3fe9c148                           // shrq         $63, %rcx
	LONG $0x22f8c148                           // sarq         $34, %rax
	WORD $0xc801                               // addl         %ecx, %eax
	WORD $0xc001                               // addl         %eax, %eax
	WORD $0x0c8d; BYTE $0x80                   // leal         (%rax,%rax,4), %ecx
	WORD $0x2941; BYTE $0xcf                   // subl         %ecx, %r15d
	LONG $0x1c358d48; WORD $0x006d; BYTE $0x00 // leaq         $27932(%rip), %rsi  /* _Digits(%rip) */
	WORD $0x0148; BYTE $0xc6                   // addq         %rax, %rsi
	WORD $0x8948; BYTE $0xdf                   // movq         %rbx, %rdi
	LONG $0x0003c1e8; BYTE $0x00               // callq        _copy_two_digs, $961(%rip)
	LONG $0x30c78041                           // addb         $48, %r15b
	LONG $0x027b8844                           // movb         %r15b, $2(%rbx)
	LONG $0x03c38348                           // addq         $3, %rbx
	LONG $0x00004ee9; BYTE $0x00               // jmp          LBB60_12, $78(%rip)

LBB60_6:
	LONG $0x2d0143c6               // movb         $45, $1(%rbx)
	LONG $0x02c38348               // addq         $2, %rbx
	LONG $0x0001bf41; WORD $0x0000 // movl         $1, %r15d
	WORD $0x2945; BYTE $0xf7       // subl         %r14d, %r15d
	LONG $0x64ff8341               // cmpl         $100, %r15d
	LONG $0xffa38d0f; WORD $0xffff // jge          LBB60_8, $-93(%rip)

LBB60_9:
	LONG $0x0aff8341                           // cmpl         $10, %r15d
	LONG $0x001e8c0f; WORD $0x0000             // jl           LBB60_11, $30(%rip)
	WORD $0x0145; BYTE $0xff                   // addl         %r15d, %r15d
	LONG $0xd1358d48; WORD $0x006c; BYTE $0x00 // leaq         $27857(%rip), %rsi  /* _Digits(%rip) */
	WORD $0x014c; BYTE $0xfe                   // addq         %r15, %rsi
	WORD $0x8948; BYTE $0xdf                   // movq         %rbx, %rdi
	LONG $0x000376e8; BYTE $0x00               // callq        _copy_two_digs, $886(%rip)
	LONG $0x02c38348                           // addq         $2, %rbx
	LONG $0x00000be9; BYTE $0x00               // jmp          LBB60_12, $11(%rip)

LBB60_11:
	LONG $0x30c78041         // addb         $48, %r15b
	WORD $0x8844; BYTE $0x3b // movb         %r15b, (%rbx)
	LONG $0x01c38348         // addq         $1, %rbx

LBB60_12:
	WORD $0x8948; BYTE $0xd8 // movq         %rbx, %rax
	LONG $0x08c48348         // addq         $8, %rsp
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

	// .p2align 4, 0x90
_print_decimal:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0x5741                   // pushq        %r15
	WORD $0x5641                   // pushq        %r14
	BYTE $0x53                     // pushq        %rbx
	BYTE $0x50                     // pushq        %rax
	WORD $0x8949; BYTE $0xd7       // movq         %rdx, %r15
	WORD $0x8949; BYTE $0xf6       // movq         %rsi, %r14
	WORD $0x0141; BYTE $0xce       // addl         %ecx, %r14d
	WORD $0x8545; BYTE $0xf6       // testl        %r14d, %r14d
	LONG $0x00358f0f; WORD $0x0000 // jg           LBB61_4, $53(%rip)
	LONG $0x07c74166; WORD $0x2e30 // movw         $11824, (%r15)
	LONG $0x02c78349               // addq         $2, %r15
	WORD $0x8545; BYTE $0xf6       // testl        %r14d, %r14d
	LONG $0x0022890f; WORD $0x0000 // jns          LBB61_4, $34(%rip)
	WORD $0x8944; BYTE $0xf2       // movl         %r14d, %edx
	WORD $0xdaf7                   // negl         %edx
	WORD $0xfa83; BYTE $0x02       // cmpl         $2, %edx
	LONG $0x000001b8; BYTE $0x00   // movl         $1, %eax
	WORD $0x4d0f; BYTE $0xc2       // cmovgel      %edx, %eax
	BYTE $0x90                     // .p2align 4, 0x90

LBB61_3:
	LONG $0x3007c641               // movb         $48, (%r15)
	LONG $0x01c78349               // addq         $1, %r15
	WORD $0xc083; BYTE $0xff       // addl         $-1, %eax
	LONG $0xffef850f; WORD $0xffff // jne          LBB61_3, $-17(%rip)

LBB61_4:
	WORD $0x894c; BYTE $0xfe     // movq         %r15, %rsi
	WORD $0xca89                 // movl         %ecx, %edx
	LONG $0x0000c5e8; BYTE $0x00 // callq        _print_mantissa, $197(%rip)
	WORD $0xd231                 // xorl         %edx, %edx
	WORD $0x9090; BYTE $0x90     // .p2align 4, 0x90

LBB61_5:
	LONG $0xff107c80; BYTE $0x30   // cmpb         $48, $-1(%rax,%rdx)
	LONG $0xff528d48               // leaq         $-1(%rdx), %rdx
	LONG $0xfff1840f; WORD $0xffff // je           LBB61_5, $-15(%rip)
	LONG $0x100c8d48               // leaq         (%rax,%rdx), %rcx
	LONG $0x01c18348               // addq         $1, %rcx
	WORD $0x8545; BYTE $0xf6       // testl        %r14d, %r14d
	LONG $0x00928e0f; WORD $0x0000 // jle          LBB61_15, $146(%rip)
	WORD $0xc689                   // movl         %eax, %esi
	WORD $0x2944; BYTE $0xfe       // subl         %r15d, %esi
	WORD $0xd601                   // addl         %edx, %esi
	WORD $0xc683; BYTE $0x01       // addl         $1, %esi
	WORD $0x3941; BYTE $0xf6       // cmpl         %esi, %r14d
	LONG $0x00498d0f; WORD $0x0000 // jge          LBB61_8, $73(%rip)
	WORD $0xc689                   // movl         %eax, %esi
	WORD $0x2944; BYTE $0xf6       // subl         %r14d, %esi
	WORD $0x2944; BYTE $0xfe       // subl         %r15d, %esi
	WORD $0xc683; BYTE $0x01       // addl         $1, %esi
	WORD $0x0148; BYTE $0xd6       // addq         %rdx, %rsi
	WORD $0xf685                   // testl        %esi, %esi
	LONG $0x001e8e0f; WORD $0x0000 // jle          LBB61_14, $30(%rip)
	WORD $0x6348; BYTE $0xf6       // movslq       %esi, %rsi
	WORD $0xff31                   // xorl         %edi, %edi
	WORD $0x9090                   // .p2align 4, 0x90

LBB61_13:
	LONG $0xff59b60f               // movzbl       $-1(%rcx), %ebx
	WORD $0x1988                   // movb         %bl, (%rcx)
	LONG $0xffc18348               // addq         $-1, %rcx
	LONG $0x01c78348               // addq         $1, %rdi
	WORD $0x3948; BYTE $0xf7       // cmpq         %rsi, %rdi
	LONG $0xffe98c0f; WORD $0xffff // jl           LBB61_13, $-23(%rip)

LBB61_14:
	WORD $0x6349; BYTE $0xce     // movslq       %r14d, %rcx
	LONG $0x0f04c641; BYTE $0x2e // movb         $46, (%r15,%rcx)
	LONG $0x100c8d48             // leaq         (%rax,%rdx), %rcx
	LONG $0x02c18348             // addq         $2, %rcx
	LONG $0x000036e9; BYTE $0x00 // jmp          LBB61_15, $54(%rip)

LBB61_8:
	WORD $0x0145; BYTE $0xfe                                             // addl         %r15d, %r14d
	WORD $0xd0f7                                                         // notl         %eax
	WORD $0x0144; BYTE $0xf0                                             // addl         %r14d, %eax
	WORD $0x2948; BYTE $0xd0                                             // subq         %rdx, %rax
	WORD $0xc085                                                         // testl        %eax, %eax
	LONG $0x00238e0f; WORD $0x0000                                       // jle          LBB61_15, $35(%rip)
	WORD $0xd231                                                         // xorl         %edx, %edx
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB61_10:
	WORD $0x01c6; BYTE $0x30       // movb         $48, (%rcx)
	LONG $0x01c18348               // addq         $1, %rcx
	WORD $0xc283; BYTE $0x01       // addl         $1, %edx
	WORD $0xc239                   // cmpl         %eax, %edx
	LONG $0xffee8c0f; WORD $0xffff // jl           LBB61_10, $-18(%rip)

LBB61_15:
	WORD $0x8948; BYTE $0xc8 // movq         %rcx, %rax
	LONG $0x08c48348         // addq         $8, %rsp
	BYTE $0x5b               // popq         %rbx
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

	// .p2align 4, 0x90
_print_mantissa:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	LONG $0x18ec8348                           // subq         $24, %rsp
	WORD $0x8941; BYTE $0xd5                   // movl         %edx, %r13d
	LONG $0xc8758948                           // movq         %rsi, $-56(%rbp)
	WORD $0x0149; BYTE $0xf5                   // addq         %rsi, %r13
	WORD $0x8948; BYTE $0xf8                   // movq         %rdi, %rax
	LONG $0x20e8c148                           // shrq         $32, %rax
	LONG $0xc06d894c                           // movq         %r13, $-64(%rbp)
	LONG $0x0021850f; WORD $0x0000             // jne          LBB62_2, $33(%rip)
	WORD $0xc031                               // xorl         %eax, %eax
	LONG $0xd0458948                           // movq         %rax, $-48(%rbp)
	WORD $0x894c; BYTE $0xeb                   // movq         %r13, %rbx
	WORD $0x8949; BYTE $0xfe                   // movq         %rdi, %r14
	LONG $0x10fe8141; WORD $0x0027; BYTE $0x00 // cmpl         $10000, %r14d
	LONG $0x00e8830f; WORD $0x0000             // jae          LBB62_8, $232(%rip)

LBB62_7:
	WORD $0x8945; BYTE $0xf4     // movl         %r14d, %r12d
	LONG $0x00014fe9; BYTE $0x00 // jmp          LBB62_10, $335(%rip)

LBB62_2:
	QUAD $0x77118461cefdb948; WORD $0xabcc     // movabsq      $-6067343680855748867, %rcx
	WORD $0x8948; BYTE $0xf8                   // movq         %rdi, %rax
	WORD $0xf748; BYTE $0xe1                   // mulq         %rcx
	WORD $0x8949; BYTE $0xd6                   // movq         %rdx, %r14
	LONG $0x1aeec149                           // shrq         $26, %r14
	LONG $0x00f66941; WORD $0x0a1f; BYTE $0xfa // imull        $-100000000, %r14d, %esi
	WORD $0xfe01                               // addl         %edi, %esi
	LONG $0x00a0840f; WORD $0x0000             // je           LBB62_3, $160(%rip)
	WORD $0xf389                               // movl         %esi, %ebx
	LONG $0xb71759b8; BYTE $0xd1               // movl         $3518437209, %eax
	LONG $0xd8af0f48                           // imulq        %rax, %rbx
	LONG $0x2debc148                           // shrq         $45, %rbx
	LONG $0x2710cb69; WORD $0x0000             // imull        $10000, %ebx, %ecx
	WORD $0xce29                               // subl         %ecx, %esi
	WORD $0x8948; BYTE $0xd9                   // movq         %rbx, %rcx
	LONG $0xc8af0f48                           // imulq        %rax, %rcx
	LONG $0x2de9c148                           // shrq         $45, %rcx
	LONG $0x2710c169; WORD $0x0000             // imull        $10000, %ecx, %eax
	WORD $0xc329                               // subl         %eax, %ebx
	LONG $0x1fe6694c; WORD $0xeb85; BYTE $0x51 // imulq        $1374389535, %rsi, %r12
	LONG $0x25ecc149                           // shrq         $37, %r12
	LONG $0x64c46b41                           // imull        $100, %r12d, %eax
	WORD $0xc629                               // subl         %eax, %esi
	WORD $0xf601                               // addl         %esi, %esi
	LONG $0x1ffb694c; WORD $0xeb85; BYTE $0x51 // imulq        $1374389535, %rbx, %r15
	LONG $0x25efc149                           // shrq         $37, %r15
	LONG $0x64c76b41                           // imull        $100, %r15d, %eax
	WORD $0xc329                               // subl         %eax, %ebx
	WORD $0xdb01                               // addl         %ebx, %ebx
	LONG $0xfe7d8d49                           // leaq         $-2(%r13), %rdi
	LONG $0xb2058d48; WORD $0x006a; BYTE $0x00 // leaq         $27314(%rip), %rax  /* _Digits(%rip) */
	WORD $0x0148; BYTE $0xc6                   // addq         %rax, %rsi
	LONG $0x00015ae8; BYTE $0x00               // callq        _copy_two_digs, $346(%rip)
	LONG $0xfc7d8d49                           // leaq         $-4(%r13), %rdi
	WORD $0x8944; BYTE $0xe0                   // movl         %r12d, %eax
	LONG $0x9c258d4c; WORD $0x006a; BYTE $0x00 // leaq         $27292(%rip), %r12  /* _Digits(%rip) */
	LONG $0x44348d49                           // leaq         (%r12,%rax,2), %rsi
	LONG $0x000143e8; BYTE $0x00               // callq        _copy_two_digs, $323(%rip)
	LONG $0xfa7d8d49                           // leaq         $-6(%r13), %rdi
	WORD $0x014c; BYTE $0xe3                   // addq         %r12, %rbx
	WORD $0x8948; BYTE $0xde                   // movq         %rbx, %rsi
	LONG $0x000134e8; BYTE $0x00               // callq        _copy_two_digs, $308(%rip)
	LONG $0xf87d8d49                           // leaq         $-8(%r13), %rdi
	WORD $0x8944; BYTE $0xf8                   // movl         %r15d, %eax
	LONG $0x44348d49                           // leaq         (%r12,%rax,2), %rsi
	LONG $0x000124e8; BYTE $0x00               // callq        _copy_two_digs, $292(%rip)
	WORD $0xc031                               // xorl         %eax, %eax
	LONG $0x000005e9; BYTE $0x00               // jmp          LBB62_5, $5(%rip)

LBB62_3:
	LONG $0x000008b8; BYTE $0x00 // movl         $8, %eax

LBB62_5:
	LONG $0xd0458948                           // movq         %rax, $-48(%rbp)
	LONG $0xf85d8d49                           // leaq         $-8(%r13), %rbx
	LONG $0x10fe8141; WORD $0x0027; BYTE $0x00 // cmpl         $10000, %r14d
	LONG $0xff18820f; WORD $0xffff             // jb           LBB62_7, $-232(%rip)

LBB62_8:
	LONG $0x4c3d8d4c; WORD $0x006a; BYTE $0x00 // leaq         $27212(%rip), %r15  /* _Digits(%rip) */
	QUAD $0x9090909090909090; LONG $0x90909090 // .p2align 4, 0x90

LBB62_9:
	WORD $0x8945; BYTE $0xf4                   // movl         %r14d, %r12d
	LONG $0xb71759b8; BYTE $0xd1               // movl         $3518437209, %eax
	LONG $0xe0af0f4c                           // imulq        %rax, %r12
	LONG $0x2decc149                           // shrq         $45, %r12
	LONG $0xf0f46941; WORD $0xffd8; BYTE $0xff // imull        $-10000, %r12d, %esi
	WORD $0x0144; BYTE $0xf6                   // addl         %r14d, %esi
	LONG $0x1fee694c; WORD $0xeb85; BYTE $0x51 // imulq        $1374389535, %rsi, %r13
	LONG $0x25edc149                           // shrq         $37, %r13
	LONG $0x64c56b41                           // imull        $100, %r13d, %eax
	WORD $0xc629                               // subl         %eax, %esi
	WORD $0xf601                               // addl         %esi, %esi
	LONG $0xfe7b8d48                           // leaq         $-2(%rbx), %rdi
	WORD $0x014c; BYTE $0xfe                   // addq         %r15, %rsi
	LONG $0x0000b7e8; BYTE $0x00               // callq        _copy_two_digs, $183(%rip)
	LONG $0xfcc38348                           // addq         $-4, %rbx
	WORD $0x8944; BYTE $0xe8                   // movl         %r13d, %eax
	LONG $0x47348d49                           // leaq         (%r15,%rax,2), %rsi
	WORD $0x8948; BYTE $0xdf                   // movq         %rbx, %rdi
	LONG $0x0000a4e8; BYTE $0x00               // callq        _copy_two_digs, $164(%rip)
	LONG $0xfffe8141; WORD $0xf5e0; BYTE $0x05 // cmpl         $99999999, %r14d
	WORD $0x8945; BYTE $0xe6                   // movl         %r12d, %r14d
	LONG $0xffa4870f; WORD $0xffff             // ja           LBB62_9, $-92(%rip)

LBB62_10:
	LONG $0x64fc8341               // cmpl         $100, %r12d
	LONG $0x0028830f; WORD $0x0000 // jae          LBB62_11, $40(%rip)
	LONG $0x0afc8341               // cmpl         $10, %r12d
	LONG $0x0059820f; WORD $0x0000 // jb           LBB62_14, $89(%rip)

LBB62_13:
	WORD $0x0145; BYTE $0xe4                   // addl         %r12d, %r12d
	LONG $0xfec38348                           // addq         $-2, %rbx
	LONG $0xc2358d48; WORD $0x0069; BYTE $0x00 // leaq         $27074(%rip), %rsi  /* _Digits(%rip) */
	WORD $0x014c; BYTE $0xe6                   // addq         %r12, %rsi
	WORD $0x8948; BYTE $0xdf                   // movq         %rbx, %rdi
	LONG $0x000067e8; BYTE $0x00               // callq        _copy_two_digs, $103(%rip)
	LONG $0x000046e9; BYTE $0x00               // jmp          LBB62_15, $70(%rip)

LBB62_11:
	WORD $0x8944; BYTE $0xe0                   // movl         %r12d, %eax
	LONG $0x1ff0694c; WORD $0xeb85; BYTE $0x51 // imulq        $1374389535, %rax, %r14
	LONG $0x25eec149                           // shrq         $37, %r14
	LONG $0x64c66b41                           // imull        $100, %r14d, %eax
	WORD $0x2941; BYTE $0xc4                   // subl         %eax, %r12d
	WORD $0x0145; BYTE $0xe4                   // addl         %r12d, %r12d
	LONG $0xfec38348                           // addq         $-2, %rbx
	LONG $0x8f358d48; WORD $0x0069; BYTE $0x00 // leaq         $27023(%rip), %rsi  /* _Digits(%rip) */
	WORD $0x014c; BYTE $0xe6                   // addq         %r12, %rsi
	WORD $0x8948; BYTE $0xdf                   // movq         %rbx, %rdi
	LONG $0x000034e8; BYTE $0x00               // callq        _copy_two_digs, $52(%rip)
	WORD $0x8945; BYTE $0xf4                   // movl         %r14d, %r12d
	LONG $0x0afc8341                           // cmpl         $10, %r12d
	LONG $0xffa7830f; WORD $0xffff             // jae          LBB62_13, $-89(%rip)

LBB62_14:
	LONG $0x30c48041         // addb         $48, %r12b
	LONG $0xc8458b48         // movq         $-56(%rbp), %rax
	WORD $0x8844; BYTE $0x20 // movb         %r12b, (%rax)

LBB62_15:
	LONG $0xc0458b48             // movq         $-64(%rbp), %rax
	LONG $0xd0452b48             // subq         $-48(%rbp), %rax
	LONG $0x18c48348             // addq         $24, %rsp
	BYTE $0x5b                   // popq         %rbx
	WORD $0x5c41                 // popq         %r12
	WORD $0x5d41                 // popq         %r13
	WORD $0x5e41                 // popq         %r14
	WORD $0x5f41                 // popq         %r15
	BYTE $0x5d                   // popq         %rbp
	BYTE $0xc3                   // retq
	LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

_copy_two_digs:
	BYTE $0x55               // pushq        %rbp
	WORD $0x8948; BYTE $0xe5 // movq         %rsp, %rbp
	WORD $0x068a             // movb         (%rsi), %al
	WORD $0x0788             // movb         %al, (%rdi)
	WORD $0x468a; BYTE $0x01 // movb         $1(%rsi), %al
	WORD $0x4788; BYTE $0x01 // movb         %al, $1(%rdi)
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

	// .p2align 4, 0x00
LCPI64_0:
	QUAD $0x00000000d1b71759 // .quad 3518437209
	QUAD $0x00000000d1b71759 // .quad 3518437209

LCPI64_1:
	QUAD $0x0000000000002710 // .quad 10000
	QUAD $0x0000000000002710 // .quad 10000

LCPI64_2:
	WORD $0x20c5 // .word 8389
	WORD $0x147b // .word 5243
	WORD $0x3334 // .word 13108
	WORD $0x8000 // .word 32768
	WORD $0x20c5 // .word 8389
	WORD $0x147b // .word 5243
	WORD $0x3334 // .word 13108
	WORD $0x8000 // .word 32768

LCPI64_3:
	WORD $0x0080 // .word 128
	WORD $0x0800 // .word 2048
	WORD $0x2000 // .word 8192
	WORD $0x8000 // .word 32768
	WORD $0x0080 // .word 128
	WORD $0x0800 // .word 2048
	WORD $0x2000 // .word 8192
	WORD $0x8000 // .word 32768

LCPI64_4:
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10

	// .p2align 4, 0x90
_itoa8_sse2:
	BYTE $0x55                           // pushq        %rbp
	WORD $0x8948; BYTE $0xe5             // movq         %rsp, %rbp
	LONG $0xc76ef9c5                     // vmovd        %edi, %xmm0
	QUAD $0xffffffa00df4f9c5             // vpmuludq     $-96(%rip), %xmm0, %xmm1  /* LCPI64_0(%rip) */
	LONG $0xd173f1c5; BYTE $0x2d         // vpsrlq       $45, %xmm1, %xmm1
	QUAD $0xffffffa315f4f1c5             // vpmuludq     $-93(%rip), %xmm1, %xmm2  /* LCPI64_1(%rip) */
	LONG $0xc2faf9c5                     // vpsubd       %xmm2, %xmm0, %xmm0
	LONG $0xc061f1c5                     // vpunpcklwd   %xmm0, %xmm1, %xmm0
	LONG $0xf073f9c5; BYTE $0x02         // vpsllq       $2, %xmm0, %xmm0
	LONG $0xc070fbc5; BYTE $0x50         // vpshuflw     $80, %xmm0, %xmm0
	LONG $0xc070f9c5; BYTE $0x50         // vpshufd      $80, %xmm0, %xmm0
	QUAD $0xffffff9405e4f9c5             // vpmulhuw     $-108(%rip), %xmm0, %xmm0  /* LCPI64_2(%rip) */
	QUAD $0xffffff9c05e4f9c5             // vpmulhuw     $-100(%rip), %xmm0, %xmm0  /* LCPI64_3(%rip) */
	QUAD $0xffffffa40dd5f9c5             // vpmullw      $-92(%rip), %xmm0, %xmm1  /* LCPI64_4(%rip) */
	LONG $0xf173f1c5; BYTE $0x10         // vpsllq       $16, %xmm1, %xmm1
	LONG $0xc1f9f9c5                     // vpsubw       %xmm1, %xmm0, %xmm0
	BYTE $0x5d                           // popq         %rbp
	BYTE $0xc3                           // retq
	QUAD $0x9090909090909090; BYTE $0x90 // .p2align 4, 0x90

_itoa1:
	BYTE $0x55               // pushq        %rbp
	WORD $0x8948; BYTE $0xe5 // movq         %rsp, %rbp
	LONG $0x30c68040         // addb         $48, %sil
	WORD $0x8840; BYTE $0x37 // movb         %sil, (%rdi)
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq
	WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

_itoa2:
	BYTE $0x55                                         // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                           // movq         %rsp, %rbp
	WORD $0xd089                                       // movl         %edx, %eax
	LONG $0x730d8d48; WORD $0x0068; BYTE $0x00         // leaq         $26739(%rip), %rcx  /* _Digits(%rip) */
	WORD $0x048a; BYTE $0x08                           // movb         (%rax,%rcx), %al
	WORD $0x6348; BYTE $0xf6                           // movslq       %esi, %rsi
	WORD $0x0488; BYTE $0x37                           // movb         %al, (%rdi,%rsi)
	WORD $0xc283; BYTE $0x01                           // addl         $1, %edx
	WORD $0x0c8a; BYTE $0x0a                           // movb         (%rdx,%rcx), %cl
	WORD $0x468d; BYTE $0x02                           // leal         $2(%rsi), %eax
	LONG $0x01374c88                                   // movb         %cl, $1(%rdi,%rsi)
	BYTE $0x5d                                         // popq         %rbp
	BYTE $0xc3                                         // retq
	QUAD $0x0000000000000000; WORD $0x0000; BYTE $0x00 // .p2align 4, 0x00

LCPI67_0:
	QUAD $0x1f1f1f1f1f1f1f1f; QUAD $0x1f1f1f1f1f1f1f1f // .space 16, '\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f\x1f'

LCPI67_1:
	QUAD $0x2222222222222222; QUAD $0x2222222222222222 // .space 16, '""""""""""""""""'

LCPI67_2:
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'

	// .p2align 4, 0x90
__mm_find_quote:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	LONG $0xc9eff1c5               // vpxor        %xmm1, %xmm1, %xmm1
	LONG $0xc864f1c5               // vpcmpgtb     %xmm0, %xmm1, %xmm1
	QUAD $0xffffffbc1564f9c5       // vpcmpgtb     $-68(%rip), %xmm0, %xmm2  /* LCPI67_0(%rip) */
	LONG $0xc9ebe9c5               // vpor         %xmm1, %xmm2, %xmm1
	QUAD $0xffffffc01574f9c5       // vpcmpeqb     $-64(%rip), %xmm0, %xmm2  /* LCPI67_1(%rip) */
	QUAD $0xffffffc80574f9c5       // vpcmpeqb     $-56(%rip), %xmm0, %xmm0  /* LCPI67_2(%rip) */
	LONG $0xc2ebf9c5               // vpor         %xmm2, %xmm0, %xmm0
	LONG $0xd276e9c5               // vpcmpeqd     %xmm2, %xmm2, %xmm2
	LONG $0xcaeff1c5               // vpxor        %xmm2, %xmm1, %xmm1
	LONG $0xc1ebf9c5               // vpor         %xmm1, %xmm0, %xmm0
	BYTE $0x5d                     // popq         %rbp
	BYTE $0xc3                     // retq
	LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

_escape_mask4:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0xb60f; BYTE $0x07                   // movzbl       (%rdi), %eax
	LONG $0x320d8d48; WORD $0x0089; BYTE $0x00 // leaq         $35122(%rip), %rcx  /* __EscTab(%rip) */
	LONG $0x0157b60f                           // movzbl       $1(%rdi), %edx
	WORD $0x148a; BYTE $0x0a                   // movb         (%rdx,%rcx), %dl
	WORD $0xd200                               // addb         %dl, %dl
	WORD $0x140a; BYTE $0x08                   // orb          (%rax,%rcx), %dl
	LONG $0x0247b60f                           // movzbl       $2(%rdi), %eax
	WORD $0x048a; BYTE $0x08                   // movb         (%rax,%rcx), %al
	WORD $0xe0c0; BYTE $0x02                   // shlb         $2, %al
	WORD $0xd008                               // orb          %dl, %al
	LONG $0x0357b60f                           // movzbl       $3(%rdi), %edx
	WORD $0x0c8a; BYTE $0x0a                   // movb         (%rdx,%rcx), %cl
	WORD $0xe1c0; BYTE $0x03                   // shlb         $3, %cl
	WORD $0xc108                               // orb          %al, %cl
	WORD $0xb60f; BYTE $0xc1                   // movzbl       %cl, %eax
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq
	QUAD $0x9090909090909090; BYTE $0x90       // .p2align 4, 0x90

_memcpy_p16:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	LONG $0x08fa8348               // cmpq         $8, %rdx
	LONG $0x0023830f; WORD $0x0000 // jae          LBB69_1, $35(%rip)
	LONG $0x04fa8348               // cmpq         $4, %rdx
	LONG $0x0035830f; WORD $0x0000 // jae          LBB69_3, $53(%rip)

LBB69_4:
	LONG $0x02fa8348               // cmpq         $2, %rdx
	LONG $0x0045830f; WORD $0x0000 // jae          LBB69_5, $69(%rip)

LBB69_6:
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0x0004840f; WORD $0x0000 // je           LBB69_8, $4(%rip)

LBB69_7:
	WORD $0x068a // movb         (%rsi), %al
	WORD $0x0788 // movb         %al, (%rdi)

LBB69_8:
	BYTE $0x5d // popq         %rbp
	BYTE $0xc3 // retq

LBB69_1:
	WORD $0x8b48; BYTE $0x06       // movq         (%rsi), %rax
	WORD $0x8948; BYTE $0x07       // movq         %rax, (%rdi)
	LONG $0x08c68348               // addq         $8, %rsi
	LONG $0x08c78348               // addq         $8, %rdi
	LONG $0xf8c28348               // addq         $-8, %rdx
	LONG $0x04fa8348               // cmpq         $4, %rdx
	LONG $0xffcb820f; WORD $0xffff // jb           LBB69_4, $-53(%rip)

LBB69_3:
	WORD $0x068b                   // movl         (%rsi), %eax
	WORD $0x0789                   // movl         %eax, (%rdi)
	LONG $0x04c68348               // addq         $4, %rsi
	LONG $0x04c78348               // addq         $4, %rdi
	LONG $0xfcc28348               // addq         $-4, %rdx
	LONG $0x02fa8348               // cmpq         $2, %rdx
	LONG $0xffbb820f; WORD $0xffff // jb           LBB69_6, $-69(%rip)

LBB69_5:
	WORD $0xb70f; BYTE $0x06             // movzwl       (%rsi), %eax
	WORD $0x8966; BYTE $0x07             // movw         %ax, (%rdi)
	LONG $0x02c68348                     // addq         $2, %rsi
	LONG $0x02c78348                     // addq         $2, %rdi
	LONG $0xfec28348                     // addq         $-2, %rdx
	WORD $0x8548; BYTE $0xd2             // testq        %rdx, %rdx
	LONG $0xffa9850f; WORD $0xffff       // jne          LBB69_7, $-87(%rip)
	LONG $0xffffa8e9; BYTE $0xff         // jmp          LBB69_8, $-88(%rip)
	QUAD $0x9090909090909090; BYTE $0x90 // .p2align 4, 0x90

_hasless:
	BYTE $0x55                   // pushq        %rbp
	WORD $0x8948; BYTE $0xe5     // movq         %rsp, %rbp
	WORD $0xf889                 // movl         %edi, %eax
	WORD $0xf989                 // movl         %edi, %ecx
	WORD $0xd1f7                 // notl         %ecx
	LONG $0xcfcfd005; BYTE $0xcf // addl         $-808464432, %eax
	WORD $0xc821                 // andl         %ecx, %eax
	LONG $0x80808025; BYTE $0x80 // andl         $-2139062144, %eax
	BYTE $0x5d                   // popq         %rbp
	BYTE $0xc3                   // retq
	QUAD $0x9090909090909090     // .p2align 4, 0x90

_hasmore:
	BYTE $0x55                                             // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                               // movq         %rsp, %rbp
	LONG $0x1919878d; WORD $0x1919                         // leal         $421075225(%rdi), %eax
	WORD $0xf809                                           // orl          %edi, %eax
	LONG $0x80808025; BYTE $0x80                           // andl         $-2139062144, %eax
	BYTE $0x5d                                             // popq         %rbp
	BYTE $0xc3                                             // retq
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

_hasbetween:
	BYTE $0x55                             // pushq        %rbp
	WORD $0x8948; BYTE $0xe5               // movq         %rsp, %rbp
	WORD $0xf889                           // movl         %edi, %eax
	WORD $0xd0f7                           // notl         %eax
	LONG $0x0101ca69; WORD $0x0101         // imull        $16843009, %edx, %ecx
	LONG $0x7f7fe781; WORD $0x7f7f         // andl         $2139062143, %edi
	WORD $0xf929                           // subl         %edi, %ecx
	LONG $0x7f7fc181; WORD $0x7f7f         // addl         $2139062143, %ecx
	WORD $0xc121                           // andl         %eax, %ecx
	LONG $0x00007fb8; BYTE $0x00           // movl         $127, %eax
	WORD $0xf029                           // subl         %esi, %eax
	LONG $0x0101c069; WORD $0x0101         // imull        $16843009, %eax, %eax
	WORD $0xf801                           // addl         %edi, %eax
	WORD $0xc821                           // andl         %ecx, %eax
	LONG $0x80808025; BYTE $0x80           // andl         $-2139062144, %eax
	BYTE $0x5d                             // popq         %rbp
	BYTE $0xc3                             // retq
	QUAD $0x0000000000000000; WORD $0x0000 // .p2align 4, 0x00

LCPI73_0:
	QUAD $0x2626262626262626; QUAD $0x2626262626262626 // .space 16, '&&&&&&&&&&&&&&&&'

LCPI73_1:
	QUAD $0xe2e2e2e2e2e2e2e2; QUAD $0xe2e2e2e2e2e2e2e2 // .space 16, '\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2'

LCPI73_2:
	QUAD $0xfdfdfdfdfdfdfdfd; QUAD $0xfdfdfdfdfdfdfdfd // .space 16, '\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd'

LCPI73_3:
	QUAD $0x3c3c3c3c3c3c3c3c; QUAD $0x3c3c3c3c3c3c3c3c // .space 16, '<<<<<<<<<<<<<<<<'

	// .p2align 4, 0x90
__mm_find_html:
	BYTE $0x55               // pushq        %rbp
	WORD $0x8948; BYTE $0xe5 // movq         %rsp, %rbp
	QUAD $0xffffffb40d74f9c5 // vpcmpeqb     $-76(%rip), %xmm0, %xmm1  /* LCPI73_0(%rip) */
	QUAD $0xffffffbc1574f9c5 // vpcmpeqb     $-68(%rip), %xmm0, %xmm2  /* LCPI73_1(%rip) */
	QUAD $0xffffffc405dbf9c5 // vpand        $-60(%rip), %xmm0, %xmm0  /* LCPI73_2(%rip) */
	LONG $0xc9ebe9c5         // vpor         %xmm1, %xmm2, %xmm1
	QUAD $0xffffffc80574f9c5 // vpcmpeqb     $-56(%rip), %xmm0, %xmm0  /* LCPI73_3(%rip) */
	LONG $0xc0ebf1c5         // vpor         %xmm0, %xmm1, %xmm0
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq
	WORD $0x9090             // .p2align 4, 0x90

_left_shift:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	BYTE $0x50                                 // pushq        %rax
	WORD $0x8949; BYTE $0xfe                   // movq         %rdi, %r14
	WORD $0x8941; BYTE $0xf7                   // movl         %esi, %r15d
	LONG $0x68c76b49                           // imulq        $104, %r15, %rax
	LONG $0x610d8d48; WORD $0x0099; BYTE $0x00 // leaq         $39265(%rip), %rcx  /* _LSHIFT_TAB(%rip) */
	LONG $0x082c8b44                           // movl         (%rax,%rcx), %r13d
	WORD $0x8b48; BYTE $0x3f                   // movq         (%rdi), %rdi
	LONG $0x08348d48                           // leaq         (%rax,%rcx), %rsi
	LONG $0x04c68348                           // addq         $4, %rsi
	LONG $0x1066634d                           // movslq       $16(%r14), %r12
	WORD $0x894c; BYTE $0xe2                   // movq         %r12, %rdx
	LONG $0x0002d6e8; BYTE $0x00               // callq        _prefix_is_less, $726(%rip)
	WORD $0xb60f; BYTE $0xc0                   // movzbl       %al, %eax
	WORD $0x8945; BYTE $0xe8                   // movl         %r13d, %r8d
	WORD $0x2941; BYTE $0xc0                   // subl         %eax, %r8d
	QUAD $0xcccccccccccdb949; WORD $0xcccc     // movabsq      $-3689348814741910323, %r9
	WORD $0x854d; BYTE $0xe4                   // testq        %r12, %r12
	LONG $0x00938e0f; WORD $0x0000             // jle          LBB74_1, $147(%rip)
	WORD $0xd8f7                               // negl         %eax
	WORD $0x0145; BYTE $0xe5                   // addl         %r12d, %r13d
	WORD $0x0141; BYTE $0xc5                   // addl         %eax, %r13d
	WORD $0x6349; BYTE $0xfd                   // movslq       %r13d, %rdi
	LONG $0xffc78348                           // addq         $-1, %rdi
	LONG $0x01c48349                           // addq         $1, %r12
	WORD $0xd231                               // xorl         %edx, %edx
	WORD $0x894c; BYTE $0xe3                   // movq         %r12, %rbx
	WORD $0x8945; BYTE $0xec                   // movl         %r13d, %r12d
	LONG $0x000028e9; BYTE $0x00               // jmp          LBB74_7, $40(%rip)
	QUAD $0x9090909090909090; WORD $0x9090     // .p2align 4, 0x90

LBB74_8:
	LONG $0x30c68040 // addb         $48, %sil
	LONG $0x3a348841 // movb         %sil, (%r10,%rdi)

LBB74_11:
	LONG $0xffc48341               // addl         $-1, %r12d
	LONG $0xffc78348               // addq         $-1, %rdi
	LONG $0xffc38348               // addq         $-1, %rbx
	LONG $0x01fb8348               // cmpq         $1, %rbx
	LONG $0x00508e0f; WORD $0x0000 // jle          LBB74_2, $80(%rip)

LBB74_7:
	WORD $0x8b4d; BYTE $0x16       // movq         (%r14), %r10
	LONG $0x74be0f49; WORD $0xfe1a // movsbq       $-2(%r10,%rbx), %rsi
	LONG $0xd0c68348               // addq         $-48, %rsi
	WORD $0x8944; BYTE $0xf9       // movl         %r15d, %ecx
	WORD $0xd348; BYTE $0xe6       // shlq         %cl, %rsi
	WORD $0x0148; BYTE $0xd6       // addq         %rdx, %rsi
	WORD $0x8948; BYTE $0xf0       // movq         %rsi, %rax
	WORD $0xf749; BYTE $0xe1       // mulq         %r9
	LONG $0x03eac148               // shrq         $3, %rdx
	LONG $0x12048d48               // leaq         (%rdx,%rdx), %rax
	LONG $0x80048d48               // leaq         (%rax,%rax,4), %rax
	WORD $0x2948; BYTE $0xc6       // subq         %rax, %rsi
	LONG $0x087e3949               // cmpq         %rdi, $8(%r14)
	LONG $0xffad870f; WORD $0xffff // ja           LBB74_8, $-83(%rip)
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0xffac840f; WORD $0xffff // je           LBB74_11, $-84(%rip)
	QUAD $0x000000011c46c741       // movl         $1, $28(%r14)
	LONG $0xffff9fe9; BYTE $0xff   // jmp          LBB74_11, $-97(%rip)

LBB74_1:
	WORD $0x0145; BYTE $0xc4 // addl         %r8d, %r12d
	WORD $0xd231             // xorl         %edx, %edx

LBB74_2:
	WORD $0x8548; BYTE $0xd2                               // testq        %rdx, %rdx
	LONG $0x006a840f; WORD $0x0000                         // je           LBB74_15, $106(%rip)
	WORD $0x6349; BYTE $0xf4                               // movslq       %r12d, %rsi
	LONG $0xffc68348                                       // addq         $-1, %rsi
	LONG $0x000023e9; BYTE $0x00                           // jmp          LBB74_4, $35(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

LBB74_5:
	WORD $0x3004             // addb         $48, %al
	WORD $0x8b49; BYTE $0x3e // movq         (%r14), %rdi
	WORD $0x0488; BYTE $0x37 // movb         %al, (%rdi,%rsi)

LBB74_14:
	LONG $0xffc68348               // addq         $-1, %rsi
	LONG $0x09f98348               // cmpq         $9, %rcx
	LONG $0x003b860f; WORD $0x0000 // jbe          LBB74_15, $59(%rip)

LBB74_4:
	WORD $0x8948; BYTE $0xd1       // movq         %rdx, %rcx
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	WORD $0xf749; BYTE $0xe1       // mulq         %r9
	LONG $0x03eac148               // shrq         $3, %rdx
	LONG $0x12048d48               // leaq         (%rdx,%rdx), %rax
	LONG $0x803c8d48               // leaq         (%rax,%rax,4), %rdi
	WORD $0x8948; BYTE $0xc8       // movq         %rcx, %rax
	WORD $0x2948; BYTE $0xf8       // subq         %rdi, %rax
	LONG $0x08763949               // cmpq         %rsi, $8(%r14)
	LONG $0xffc5870f; WORD $0xffff // ja           LBB74_5, $-59(%rip)
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0xffc4840f; WORD $0xffff // je           LBB74_14, $-60(%rip)
	QUAD $0x000000011c46c741       // movl         $1, $28(%r14)
	LONG $0xffffb7e9; BYTE $0xff   // jmp          LBB74_14, $-73(%rip)

LBB74_15:
	LONG $0x10466349               // movslq       $16(%r14), %rax
	WORD $0x6349; BYTE $0xc8       // movslq       %r8d, %rcx
	WORD $0x0148; BYTE $0xc1       // addq         %rax, %rcx
	LONG $0x104e8941               // movl         %ecx, $16(%r14)
	LONG $0x08468b49               // movq         $8(%r14), %rax
	WORD $0x3948; BYTE $0xc8       // cmpq         %rcx, %rax
	LONG $0x0004870f; WORD $0x0000 // ja           LBB74_17, $4(%rip)
	LONG $0x10468941               // movl         %eax, $16(%r14)

LBB74_17:
	LONG $0x14460145             // addl         %r8d, $20(%r14)
	WORD $0x894c; BYTE $0xf7     // movq         %r14, %rdi
	LONG $0x0001d4e8; BYTE $0x00 // callq        _trim, $468(%rip)
	LONG $0x08c48348             // addq         $8, %rsp
	BYTE $0x5b                   // popq         %rbx
	WORD $0x5c41                 // popq         %r12
	WORD $0x5d41                 // popq         %r13
	WORD $0x5e41                 // popq         %r14
	WORD $0x5f41                 // popq         %r15
	BYTE $0x5d                   // popq         %rbp
	BYTE $0xc3                   // retq
	LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

_right_shift:
	BYTE $0x55                                         // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                           // movq         %rsp, %rbp
	WORD $0xf189                                       // movl         %esi, %ecx
	LONG $0x10578b44                                   // movl         $16(%rdi), %r10d
	WORD $0xd231                                       // xorl         %edx, %edx
	WORD $0x8545; BYTE $0xd2                           // testl        %r10d, %r10d
	LONG $0xd24e0f44                                   // cmovlel      %edx, %r10d
	WORD $0xc031                                       // xorl         %eax, %eax
	QUAD $0x9090909090909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB75_1:
	WORD $0x3949; BYTE $0xd2       // cmpq         %rdx, %r10
	LONG $0x00ff840f; WORD $0x0000 // je           LBB75_2, $255(%rip)
	LONG $0x80048d48               // leaq         (%rax,%rax,4), %rax
	WORD $0x8b48; BYTE $0x37       // movq         (%rdi), %rsi
	LONG $0x34be0f48; BYTE $0x16   // movsbq       (%rsi,%rdx), %rsi
	LONG $0x46048d48               // leaq         (%rsi,%rax,2), %rax
	LONG $0xd0c08348               // addq         $-48, %rax
	LONG $0x01c28348               // addq         $1, %rdx
	WORD $0x8948; BYTE $0xc6       // movq         %rax, %rsi
	WORD $0xd348; BYTE $0xee       // shrq         %cl, %rsi
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0xffd0840f; WORD $0xffff // je           LBB75_1, $-48(%rip)
	WORD $0x8941; BYTE $0xd2       // movl         %edx, %r10d

LBB75_7:
	WORD $0x578b; BYTE $0x14                   // movl         $20(%rdi), %edx
	WORD $0x2944; BYTE $0xd2                   // subl         %r10d, %edx
	WORD $0xc283; BYTE $0x01                   // addl         $1, %edx
	WORD $0x5789; BYTE $0x14                   // movl         %edx, $20(%rdi)
	LONG $0xffc0c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r8
	WORD $0xd349; BYTE $0xe0                   // shlq         %cl, %r8
	WORD $0xf749; BYTE $0xd0                   // notq         %r8
	WORD $0x3145; BYTE $0xc9                   // xorl         %r9d, %r9d
	LONG $0x10573b44                           // cmpl         $16(%rdi), %r10d
	LONG $0x00708d0f; WORD $0x0000             // jge          LBB75_10, $112(%rip)
	WORD $0x634d; BYTE $0xd2                   // movslq       %r10d, %r10
	WORD $0x3145; BYTE $0xc9                   // xorl         %r9d, %r9d
	BYTE $0x90                                 // .p2align 4, 0x90

LBB75_9:
	WORD $0x8948; BYTE $0xc2       // movq         %rax, %rdx
	WORD $0xd348; BYTE $0xea       // shrq         %cl, %rdx
	WORD $0x214c; BYTE $0xc0       // andq         %r8, %rax
	WORD $0xc280; BYTE $0x30       // addb         $48, %dl
	WORD $0x8b48; BYTE $0x37       // movq         (%rdi), %rsi
	LONG $0x0e148842               // movb         %dl, (%rsi,%r9)
	WORD $0x8b48; BYTE $0x17       // movq         (%rdi), %rdx
	WORD $0x014c; BYTE $0xd2       // addq         %r10, %rdx
	LONG $0x14be0f49; BYTE $0x11   // movsbq       (%r9,%rdx), %rdx
	LONG $0x0a348d4b               // leaq         (%r10,%r9), %rsi
	LONG $0x01c68348               // addq         $1, %rsi
	LONG $0x01c18349               // addq         $1, %r9
	LONG $0x80048d48               // leaq         (%rax,%rax,4), %rax
	LONG $0x42048d48               // leaq         (%rdx,%rax,2), %rax
	LONG $0xd0c08348               // addq         $-48, %rax
	LONG $0x10576348               // movslq       $16(%rdi), %rdx
	WORD $0x3948; BYTE $0xd6       // cmpq         %rdx, %rsi
	LONG $0xffbd8c0f; WORD $0xffff // jl           LBB75_9, $-67(%rip)
	LONG $0x000021e9; BYTE $0x00   // jmp          LBB75_10, $33(%rip)
	QUAD $0x9090909090909090       // .p2align 4, 0x90

LBB75_12:
	LONG $0x30c68040         // addb         $48, %sil
	WORD $0x8b48; BYTE $0x17 // movq         (%rdi), %rdx
	LONG $0x12348842         // movb         %sil, (%rdx,%r10)
	LONG $0x01c28341         // addl         $1, %r10d
	WORD $0x8945; BYTE $0xd1 // movl         %r10d, %r9d

LBB75_15:
	WORD $0x0148; BYTE $0xc0 // addq         %rax, %rax
	LONG $0x80048d48         // leaq         (%rax,%rax,4), %rax

LBB75_10:
	WORD $0x8548; BYTE $0xc0                   // testq        %rax, %rax
	LONG $0x002b840f; WORD $0x0000             // je           LBB75_16, $43(%rip)
	WORD $0x8948; BYTE $0xc6                   // movq         %rax, %rsi
	WORD $0xd348; BYTE $0xee                   // shrq         %cl, %rsi
	WORD $0x214c; BYTE $0xc0                   // andq         %r8, %rax
	WORD $0x634d; BYTE $0xd1                   // movslq       %r9d, %r10
	LONG $0x0857394c                           // cmpq         %r10, $8(%rdi)
	LONG $0xffc8870f; WORD $0xffff             // ja           LBB75_12, $-56(%rip)
	WORD $0x8548; BYTE $0xf6                   // testq        %rsi, %rsi
	LONG $0xffd1840f; WORD $0xffff             // je           LBB75_15, $-47(%rip)
	LONG $0x011c47c7; WORD $0x0000; BYTE $0x00 // movl         $1, $28(%rdi)
	LONG $0xffffc5e9; BYTE $0xff               // jmp          LBB75_15, $-59(%rip)

LBB75_16:
	LONG $0x104f8944             // movl         %r9d, $16(%rdi)
	LONG $0x00009ae8; BYTE $0x00 // callq        _trim, $154(%rip)
	BYTE $0x5d                   // popq         %rbp
	BYTE $0xc3                   // retq

LBB75_2:
	WORD $0x8548; BYTE $0xc0                                             // testq        %rax, %rax
	LONG $0x002e840f; WORD $0x0000                                       // je           LBB75_18, $46(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB75_3:
	WORD $0x8948; BYTE $0xc2       // movq         %rax, %rdx
	WORD $0xd348; BYTE $0xea       // shrq         %cl, %rdx
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0xff04850f; WORD $0xffff // jne          LBB75_7, $-252(%rip)
	WORD $0x0148; BYTE $0xc0       // addq         %rax, %rax
	LONG $0x80048d48               // leaq         (%rax,%rax,4), %rax
	LONG $0x01c28341               // addl         $1, %r10d
	LONG $0xffffe1e9; BYTE $0xff   // jmp          LBB75_3, $-31(%rip)

LBB75_18:
	LONG $0x001047c7; WORD $0x0000; BYTE $0x00 // movl         $0, $16(%rdi)
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq
	QUAD $0x9090909090909090                   // .p2align 4, 0x90

_prefix_is_less:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0xc031                   // xorl         %eax, %eax
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0x0025840f; WORD $0x0000 // je           LBB76_5, $37(%rip)
	BYTE $0x90                     // .p2align 4, 0x90

LBB76_1:
	LONG $0x060cb60f               // movzbl       (%rsi,%rax), %ecx
	WORD $0xc984                   // testb        %cl, %cl
	LONG $0x0021840f; WORD $0x0000 // je           LBB76_6, $33(%rip)
	WORD $0x0c38; BYTE $0x07       // cmpb         %cl, (%rdi,%rax)
	LONG $0x001c850f; WORD $0x0000 // jne          LBB76_8, $28(%rip)
	LONG $0x01c08348               // addq         $1, %rax
	WORD $0x3948; BYTE $0xc2       // cmpq         %rax, %rdx
	LONG $0xffde850f; WORD $0xffff // jne          LBB76_1, $-34(%rip)
	WORD $0xd089                   // movl         %edx, %eax

LBB76_5:
	LONG $0x00063c80         // cmpb         $0, (%rsi,%rax)
	WORD $0x950f; BYTE $0xc0 // setne        %al
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

LBB76_6:
	WORD $0xc031 // xorl         %eax, %eax
	BYTE $0x5d   // popq         %rbp
	BYTE $0xc3   // retq

LBB76_8:
	WORD $0x9c0f; BYTE $0xc0               // setl         %al
	BYTE $0x5d                             // popq         %rbp
	BYTE $0xc3                             // retq
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

_trim:
	BYTE $0x55                             // pushq        %rbp
	WORD $0x8948; BYTE $0xe5               // movq         %rsp, %rbp
	WORD $0x478b; BYTE $0x10               // movl         $16(%rdi), %eax
	WORD $0xc085                           // testl        %eax, %eax
	LONG $0x003d8e0f; WORD $0x0000         // jle          LBB77_1, $61(%rip)
	WORD $0x8b48; BYTE $0x0f               // movq         (%rdi), %rcx
	LONG $0x01508d48                       // leaq         $1(%rax), %rdx
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

LBB77_3:
	WORD $0xc689                   // movl         %eax, %esi
	WORD $0x468d; BYTE $0xff       // leal         $-1(%rsi), %eax
	LONG $0x30013c80               // cmpb         $48, (%rcx,%rax)
	LONG $0x0013850f; WORD $0x0000 // jne          LBB77_6, $19(%rip)
	WORD $0x4789; BYTE $0x10       // movl         %eax, $16(%rdi)
	LONG $0xffc28348               // addq         $-1, %rdx
	LONG $0x01fa8348               // cmpq         $1, %rdx
	LONG $0xffe08f0f; WORD $0xffff // jg           LBB77_3, $-32(%rip)
	WORD $0xf631                   // xorl         %esi, %esi

LBB77_6:
	WORD $0xf685                   // testl        %esi, %esi
	LONG $0x000c840f; WORD $0x0000 // je           LBB77_7, $12(%rip)

LBB77_8:
	BYTE $0x5d // popq         %rbp
	BYTE $0xc3 // retq

LBB77_1:
	WORD $0xc689                   // movl         %eax, %esi
	WORD $0xf685                   // testl        %esi, %esi
	LONG $0xfff4850f; WORD $0xffff // jne          LBB77_8, $-12(%rip)

LBB77_7:
	LONG $0x001447c7; WORD $0x0000; BYTE $0x00 // movl         $0, $20(%rdi)
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq
	BYTE $0x90                                 // .p2align 4, 0x90

_should_roundup:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0xf685                   // testl        %esi, %esi
	LONG $0x004b880f; WORD $0x0000 // js           LBB78_7, $75(%rip)
	WORD $0x478b; BYTE $0x10       // movl         $16(%rdi), %eax
	WORD $0xf039                   // cmpl         %esi, %eax
	LONG $0x00408e0f; WORD $0x0000 // jle          LBB78_7, $64(%rip)
	WORD $0x8b4c; BYTE $0x07       // movq         (%rdi), %r8
	WORD $0x6348; BYTE $0xd6       // movslq       %esi, %rdx
	LONG $0x10148a41               // movb         (%r8,%rdx), %dl
	WORD $0xfa80; BYTE $0x35       // cmpb         $53, %dl
	LONG $0x0034850f; WORD $0x0000 // jne          LBB78_9, $52(%rip)
	WORD $0x4e8d; BYTE $0x01       // leal         $1(%rsi), %ecx
	WORD $0xc139                   // cmpl         %eax, %ecx
	LONG $0x0029850f; WORD $0x0000 // jne          LBB78_9, $41(%rip)
	WORD $0x01b0                   // movb         $1, %al
	LONG $0x001c7f83               // cmpl         $0, $28(%rdi)
	LONG $0x0018850f; WORD $0x0000 // jne          LBB78_10, $24(%rip)
	WORD $0xf685                   // testl        %esi, %esi
	LONG $0x000e8e0f; WORD $0x0000 // jle          LBB78_7, $14(%rip)
	WORD $0xc683; BYTE $0xff       // addl         $-1, %esi
	LONG $0x30048a41               // movb         (%r8,%rsi), %al
	WORD $0x0124                   // andb         $1, %al
	LONG $0x000002e9; BYTE $0x00   // jmp          LBB78_10, $2(%rip)

LBB78_7:
	WORD $0xc031 // xorl         %eax, %eax

LBB78_10:
	WORD $0xb60f; BYTE $0xc0 // movzbl       %al, %eax
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

LBB78_9:
	WORD $0xfa80; BYTE $0x35                   // cmpb         $53, %dl
	WORD $0x9d0f; BYTE $0xc0                   // setge        %al
	LONG $0xfffff0e9; BYTE $0xff               // jmp          LBB78_10, $-16(%rip)
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

_decimal_init:
	BYTE $0x55                             // pushq        %rbp
	WORD $0x8948; BYTE $0xe5               // movq         %rsp, %rbp
	WORD $0x8948; BYTE $0x37               // movq         %rsi, (%rdi)
	LONG $0x08578948                       // movq         %rdx, $8(%rdi)
	WORD $0x8548; BYTE $0xd2               // testq        %rdx, %rdx
	LONG $0x0021840f; WORD $0x0000         // je           LBB79_3, $33(%rip)
	WORD $0xc031                           // xorl         %eax, %eax
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

LBB79_2:
	WORD $0x8b48; BYTE $0x0f       // movq         (%rdi), %rcx
	LONG $0x000104c6               // movb         $0, (%rcx,%rax)
	LONG $0x01c08348               // addq         $1, %rax
	LONG $0x08473948               // cmpq         %rax, $8(%rdi)
	LONG $0xffeb870f; WORD $0xffff // ja           LBB79_2, $-21(%rip)

LBB79_3:
	LONG $0xc057f8c5             // vxorps       %xmm0, %xmm0, %xmm0
	LONG $0x4711f8c5; BYTE $0x10 // vmovups      %xmm0, $16(%rdi)
	BYTE $0x5d                   // popq         %rbp
	BYTE $0xc3                   // retq

	// .p2align 4, 0x90
_isspace:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0x01b0                   // movb         $1, %al
	LONG $0x0dff8040               // cmpb         $13, %dil
	LONG $0x0015840f; WORD $0x0000 // je           LBB80_3, $21(%rip)
	LONG $0x20ff8040               // cmpb         $32, %dil
	LONG $0x000b840f; WORD $0x0000 // je           LBB80_3, $11(%rip)
	LONG $0xf7c78040               // addb         $-9, %dil
	LONG $0x02ff8040               // cmpb         $2, %dil
	WORD $0x920f; BYTE $0xc0       // setb         %al

LBB80_3:
	WORD $0xb60f; BYTE $0xc0       // movzbl       %al, %eax
	BYTE $0x5d                     // popq         %rbp
	BYTE $0xc3                     // retq
	LONG $0x00000000; WORD $0x0000 // .p2align 4, 0x00

LCPI81_0:
	QUAD $0x2222222222222222; QUAD $0x2222222222222222 // .space 16, '""""""""""""""""'

LCPI81_1:
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'

	// .p2align 4, 0x90
_advance_string_validate:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	LONG $0xa8ec8148; WORD $0x0000; BYTE $0x00 // subq         $168, %rsp
	QUAD $0x00000000b045c748                   // movq         $0, $-80(%rbp)
	LONG $0x08678b4c                           // movq         $8(%rdi), %r12
	LONG $0xffc7c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r15
	WORD $0x2949; BYTE $0xf4                   // subq         %rsi, %r12
	LONG $0x07af840f; WORD $0x0000             // je           LBB81_79, $1967(%rip)
	WORD $0x8949; BYTE $0xd5                   // movq         %rdx, %r13
	WORD $0x8948; BYTE $0xf3                   // movq         %rsi, %rbx
	WORD $0x8b48; BYTE $0x07                   // movq         (%rdi), %rax
	WORD $0x0148; BYTE $0xc3                   // addq         %rax, %rbx
	LONG $0xff02c748; WORD $0xffff; BYTE $0xff // movq         $-1, (%rdx)
	LONG $0xd0458948                           // movq         %rax, $-48(%rbp)
	WORD $0xf748; BYTE $0xd8                   // negq         %rax
	LONG $0x38858948; WORD $0xffff; BYTE $0xff // movq         %rax, $-200(%rbp)
	LONG $0x98558948                           // movq         %rdx, $-104(%rbp)
	LONG $0x00000ee9; BYTE $0x00               // jmp          LBB81_3, $14(%rip)
	LONG $0x90909090; WORD $0x9090             // .p2align 4, 0x90

LBB81_2:
	QUAD $0x00000000b045c748 // movq         $0, $-80(%rbp)

LBB81_3:
	LONG $0x40fc8349                           // cmpq         $64, %r12
	LONG $0x03d8820f; WORD $0x0000             // jb           LBB81_30, $984(%rip)
	LONG $0x38858b48; WORD $0xffff; BYTE $0xff // movq         $-200(%rbp), %rax
	WORD $0x0148; BYTE $0xd8                   // addq         %rbx, %rax
	LONG $0x40858948; WORD $0xffff; BYTE $0xff // movq         %rax, $-192(%rbp)
	WORD $0xc031                               // xorl         %eax, %eax
	LONG $0xc85d8948                           // movq         %rbx, $-56(%rbp)
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB81_5:
	LONG $0xb865894c                           // movq         %r12, $-72(%rbp)
	LONG $0x0c10f8c5; BYTE $0x03               // vmovups      (%rbx,%rax), %xmm1
	QUAD $0xffffff608d29f8c5                   // vmovaps      %xmm1, $-160(%rbp)
	LONG $0x4410f8c5; WORD $0x1003             // vmovups      $16(%rbx,%rax), %xmm0
	LONG $0x4529f8c5; BYTE $0x80               // vmovaps      %xmm0, $-128(%rbp)
	LONG $0x4410f8c5; WORD $0x2003             // vmovups      $32(%rbx,%rax), %xmm0
	QUAD $0xffffff708529f8c5                   // vmovaps      %xmm0, $-144(%rbp)
	LONG $0xc0458948                           // movq         %rax, $-64(%rbp)
	LONG $0x4410f8c5; WORD $0x3003             // vmovups      $48(%rbx,%rax), %xmm0
	LONG $0x4529f8c5; BYTE $0xa0               // vmovaps      %xmm0, $-96(%rbp)
	LONG $0xc128f8c5                           // vmovaps      %xmm1, %xmm0
	QUAD $0xffffff0b0d28f8c5                   // vmovaps      $-245(%rip), %xmm1  /* LCPI81_0(%rip) */
	LONG $0x000b76e8; BYTE $0x00               // callq        __mm_get_mask, $2934(%rip)
	LONG $0xff488589; WORD $0xffff             // movl         %eax, $-184(%rbp)
	LONG $0x4528f8c5; BYTE $0x80               // vmovaps      $-128(%rbp), %xmm0
	QUAD $0xfffffef30d28f8c5                   // vmovaps      $-269(%rip), %xmm1  /* LCPI81_0(%rip) */
	LONG $0x000b5ee8; BYTE $0x00               // callq        __mm_get_mask, $2910(%rip)
	LONG $0xff508589; WORD $0xffff             // movl         %eax, $-176(%rbp)
	QUAD $0xffffff708528f8c5                   // vmovaps      $-144(%rbp), %xmm0
	QUAD $0xfffffed80d28f8c5                   // vmovaps      $-296(%rip), %xmm1  /* LCPI81_0(%rip) */
	LONG $0x000b43e8; BYTE $0x00               // callq        __mm_get_mask, $2883(%rip)
	WORD $0x8941; BYTE $0xc4                   // movl         %eax, %r12d
	LONG $0x4528f8c5; BYTE $0xa0               // vmovaps      $-96(%rbp), %xmm0
	QUAD $0xfffffec30d28f8c5                   // vmovaps      $-317(%rip), %xmm1  /* LCPI81_0(%rip) */
	LONG $0x000b2ee8; BYTE $0x00               // callq        __mm_get_mask, $2862(%rip)
	LONG $0x30858948; WORD $0xffff; BYTE $0xff // movq         %rax, $-208(%rbp)
	QUAD $0xffffff608528f8c5                   // vmovaps      $-160(%rbp), %xmm0
	QUAD $0xfffffeb70d28f8c5                   // vmovaps      $-329(%rip), %xmm1  /* LCPI81_1(%rip) */
	LONG $0x000b12e8; BYTE $0x00               // callq        __mm_get_mask, $2834(%rip)
	LONG $0xff548589; WORD $0xffff             // movl         %eax, $-172(%rbp)
	LONG $0x4528f8c5; BYTE $0x80               // vmovaps      $-128(%rbp), %xmm0
	QUAD $0xfffffe9f0d28f8c5                   // vmovaps      $-353(%rip), %xmm1  /* LCPI81_1(%rip) */
	LONG $0x000afae8; BYTE $0x00               // callq        __mm_get_mask, $2810(%rip)
	LONG $0xff5c8589; WORD $0xffff             // movl         %eax, $-164(%rbp)
	QUAD $0xffffff708528f8c5                   // vmovaps      $-144(%rbp), %xmm0
	QUAD $0xfffffe840d28f8c5                   // vmovaps      $-380(%rip), %xmm1  /* LCPI81_1(%rip) */
	LONG $0x000adfe8; BYTE $0x00               // callq        __mm_get_mask, $2783(%rip)
	WORD $0x8941; BYTE $0xc7                   // movl         %eax, %r15d
	LONG $0x4528f8c5; BYTE $0xa0               // vmovaps      $-96(%rbp), %xmm0
	QUAD $0xfffffe6f0d28f8c5                   // vmovaps      $-401(%rip), %xmm1  /* LCPI81_1(%rip) */
	LONG $0x000acae8; BYTE $0x00               // callq        __mm_get_mask, $2762(%rip)
	WORD $0x8941; BYTE $0xc5                   // movl         %eax, %r13d
	QUAD $0xffffff608528f8c5                   // vmovaps      $-160(%rbp), %xmm0
	LONG $0x000adae8; BYTE $0x00               // callq        __mm_cchars_mask, $2778(%rip)
	LONG $0xff4c8589; WORD $0xffff             // movl         %eax, $-180(%rbp)
	LONG $0x4528f8c5; BYTE $0x80               // vmovaps      $-128(%rbp), %xmm0
	LONG $0x000acae8; BYTE $0x00               // callq        __mm_cchars_mask, $2762(%rip)
	LONG $0xff588589; WORD $0xffff             // movl         %eax, $-168(%rbp)
	QUAD $0xffffff708528f8c5                   // vmovaps      $-144(%rbp), %xmm0
	LONG $0x000ab7e8; BYTE $0x00               // callq        __mm_cchars_mask, $2743(%rip)
	WORD $0xc389                               // movl         %eax, %ebx
	LONG $0x4528f8c5; BYTE $0xa0               // vmovaps      $-96(%rbp), %xmm0
	LONG $0x000aabe8; BYTE $0x00               // callq        __mm_cchars_mask, $2731(%rip)
	LONG $0x90458948                           // movq         %rax, $-112(%rbp)
	QUAD $0xffffff608528f8c5                   // vmovaps      $-160(%rbp), %xmm0
	LONG $0x000acae8; BYTE $0x00               // callq        __mm_nonascii_mask, $2762(%rip)
	LONG $0xff608589; WORD $0xffff             // movl         %eax, $-160(%rbp)
	LONG $0x4528f8c5; BYTE $0x80               // vmovaps      $-128(%rbp), %xmm0
	LONG $0x000abae8; BYTE $0x00               // callq        __mm_nonascii_mask, $2746(%rip)
	WORD $0x4589; BYTE $0x80                   // movl         %eax, $-128(%rbp)
	QUAD $0xffffff708528f8c5                   // vmovaps      $-144(%rbp), %xmm0
	LONG $0x000aaae8; BYTE $0x00               // callq        __mm_nonascii_mask, $2730(%rip)
	WORD $0x8941; BYTE $0xc6                   // movl         %eax, %r14d
	LONG $0x4528f8c5; BYTE $0xa0               // vmovaps      $-96(%rbp), %xmm0
	LONG $0x000a9de8; BYTE $0x00               // callq        __mm_nonascii_mask, $2717(%rip)
	WORD $0x8948; BYTE $0xde                   // movq         %rbx, %rsi
	WORD $0x8941; BYTE $0xc2                   // movl         %eax, %r10d
	WORD $0x894c; BYTE $0xe0                   // movq         %r12, %rax
	LONG $0x20e0c148                           // shlq         $32, %rax
	LONG $0x50a58b44; WORD $0xffff; BYTE $0xff // movl         $-176(%rbp), %r12d
	LONG $0x10e4c149                           // shlq         $16, %r12
	LONG $0xff488d8b; WORD $0xffff             // movl         $-184(%rbp), %ecx
	WORD $0x0948; BYTE $0xc1                   // orq          %rax, %rcx
	LONG $0x30e5c149                           // shlq         $48, %r13
	LONG $0x20e7c149                           // shlq         $32, %r15
	LONG $0xff5c958b; WORD $0xffff             // movl         $-164(%rbp), %edx
	LONG $0x10e2c148                           // shlq         $16, %rdx
	LONG $0xff54858b; WORD $0xffff             // movl         $-172(%rbp), %eax
	WORD $0x094c; BYTE $0xf8                   // orq          %r15, %rax
	WORD $0x0948; BYTE $0xd0                   // orq          %rdx, %rax
	LONG $0x20e6c148                           // shlq         $32, %rsi
	LONG $0x20e6c149                           // shlq         $32, %r14
	WORD $0x094c; BYTE $0xe8                   // orq          %r13, %rax
	LONG $0x986d8b4c                           // movq         $-104(%rbp), %r13
	LONG $0x00a6850f; WORD $0x0000             // jne          LBB81_12, $166(%rip)

LBB81_6:
	LONG $0xff589d8b; WORD $0xffff             // movl         $-168(%rbp), %ebx
	LONG $0x10e3c148                           // shlq         $16, %rbx
	LONG $0xff4c958b; WORD $0xffff             // movl         $-180(%rbp), %edx
	WORD $0x0948; BYTE $0xf2                   // orq          %rsi, %rdx
	LONG $0x807d8b44                           // movl         $-128(%rbp), %r15d
	LONG $0x10e7c149                           // shlq         $16, %r15
	LONG $0xff60b58b; WORD $0xffff             // movl         $-160(%rbp), %esi
	WORD $0x094c; BYTE $0xf6                   // orq          %r14, %rsi
	LONG $0x30bd8b48; WORD $0xffff; BYTE $0xff // movq         $-208(%rbp), %rdi
	LONG $0x30e7c148                           // shlq         $48, %rdi
	WORD $0x0949; BYTE $0xcc                   // orq          %rcx, %r12
	LONG $0xb0458b4c                           // movq         $-80(%rbp), %r8
	WORD $0x854d; BYTE $0xc0                   // testq        %r8, %r8
	WORD $0x950f; BYTE $0xc1                   // setne        %cl
	WORD $0x8548; BYTE $0xc0                   // testq        %rax, %rax
	LONG $0x0084850f; WORD $0x0000             // jne          LBB81_14, $132(%rip)

LBB81_7:
	LONG $0x904d8b4c               // movq         $-112(%rbp), %r9
	LONG $0x30e1c149               // shlq         $48, %r9
	WORD $0x0948; BYTE $0xd3       // orq          %rdx, %rbx
	LONG $0x30e2c149               // shlq         $48, %r10
	WORD $0x0949; BYTE $0xf7       // orq          %rsi, %r15
	WORD $0x0949; BYTE $0xfc       // orq          %rdi, %r12
	WORD $0xc984                   // testb        %cl, %cl
	LONG $0x006e850f; WORD $0x0000 // jne          LBB81_15, $110(%rip)

LBB81_8:
	WORD $0x094c; BYTE $0xcb       // orq          %r9, %rbx
	WORD $0x094d; BYTE $0xd7       // orq          %r10, %r15
	WORD $0x854d; BYTE $0xe4       // testq        %r12, %r12
	LONG $0x00c8850f; WORD $0x0000 // jne          LBB81_16, $200(%rip)
	WORD $0x8548; BYTE $0xdb       // testq        %rbx, %rbx
	LONG $0x03ac850f; WORD $0x0000 // jne          LBB81_50, $940(%rip)
	WORD $0x854d; BYTE $0xff       // testq        %r15, %r15
	LONG $0x014a850f; WORD $0x0000 // jne          LBB81_28, $330(%rip)
	LONG $0xb8658b4c               // movq         $-72(%rbp), %r12
	LONG $0xc0c48349               // addq         $-64, %r12
	LONG $0xc0458b48               // movq         $-64(%rbp), %rax
	LONG $0x40c08348               // addq         $64, %rax
	LONG $0x3ffc8349               // cmpq         $63, %r12
	LONG $0xc85d8b48               // movq         $-56(%rbp), %rbx
	LONG $0xfd98870f; WORD $0xffff // ja           LBB81_5, $-616(%rip)
	LONG $0x000143e9; BYTE $0x00   // jmp          LBB81_29, $323(%rip)

LBB81_12:
	LONG $0x007d8349; BYTE $0xff               // cmpq         $-1, (%r13)
	LONG $0xff4f850f; WORD $0xffff             // jne          LBB81_6, $-177(%rip)
	LONG $0xd0bc0f48                           // bsfq         %rax, %rdx
	LONG $0x40950348; WORD $0xffff; BYTE $0xff // addq         $-192(%rbp), %rdx
	LONG $0xc0550348                           // addq         $-64(%rbp), %rdx
	LONG $0x00558949                           // movq         %rdx, (%r13)
	LONG $0xffff37e9; BYTE $0xff               // jmp          LBB81_6, $-201(%rip)

LBB81_14:
	WORD $0x01b1                 // movb         $1, %cl
	LONG $0xffff75e9; BYTE $0xff // jmp          LBB81_7, $-139(%rip)

LBB81_15:
	WORD $0x894c; BYTE $0xc6                   // movq         %r8, %rsi
	WORD $0xf748; BYTE $0xd6                   // notq         %rsi
	WORD $0x2148; BYTE $0xc6                   // andq         %rax, %rsi
	LONG $0x36348d4c                           // leaq         (%rsi,%rsi), %r14
	WORD $0x094d; BYTE $0xc6                   // orq          %r8, %r14
	WORD $0x894c; BYTE $0xf7                   // movq         %r14, %rdi
	WORD $0xf748; BYTE $0xd7                   // notq         %rdi
	WORD $0x2148; BYTE $0xc7                   // andq         %rax, %rdi
	QUAD $0xaaaaaaaaaaaab848; WORD $0xaaaa     // movabsq      $-6148914691236517206, %rax
	WORD $0x2148; BYTE $0xc7                   // andq         %rax, %rdi
	LONG $0xb0558d48                           // leaq         $-80(%rbp), %rdx
	LONG $0x904d894c                           // movq         %r9, $-112(%rbp)
	LONG $0xa055894c                           // movq         %r10, $-96(%rbp)
	LONG $0x000952e8; BYTE $0x00               // callq        _add64, $2386(%rip)
	LONG $0xa0558b4c                           // movq         $-96(%rbp), %r10
	LONG $0x904d8b4c                           // movq         $-112(%rbp), %r9
	WORD $0x0148; BYTE $0xc0                   // addq         %rax, %rax
	QUAD $0x555555555555b948; WORD $0x5555     // movabsq      $6148914691236517205, %rcx
	WORD $0x3148; BYTE $0xc8                   // xorq         %rcx, %rax
	WORD $0x214c; BYTE $0xf0                   // andq         %r14, %rax
	WORD $0xf748; BYTE $0xd0                   // notq         %rax
	WORD $0x2149; BYTE $0xc4                   // andq         %rax, %r12
	LONG $0xffff35e9; BYTE $0xff               // jmp          LBB81_8, $-203(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090 // .p2align 4, 0x90

LBB81_16:
	LONG $0x000040b8; BYTE $0x00   // movl         $64, %eax
	LONG $0x000040b9; BYTE $0x00   // movl         $64, %ecx
	WORD $0x8548; BYTE $0xdb       // testq        %rbx, %rbx
	LONG $0x0004840f; WORD $0x0000 // je           LBB81_18, $4(%rip)
	LONG $0xcbbc0f48               // bsfq         %rbx, %rcx

LBB81_18:
	LONG $0xd4bc0f49               // bsfq         %r12, %rdx
	WORD $0x854d; BYTE $0xff       // testq        %r15, %r15
	LONG $0x0004840f; WORD $0x0000 // je           LBB81_20, $4(%rip)
	LONG $0xc7bc0f49               // bsfq         %r15, %rax

LBB81_20:
	WORD $0x3948; BYTE $0xd1                   // cmpq         %rdx, %rcx
	LONG $0xc85d8b48                           // movq         $-56(%rbp), %rbx
	LONG $0xb8658b4c                           // movq         $-72(%rbp), %r12
	LONG $0x02e2820f; WORD $0x0000             // jb           LBB81_52, $738(%rip)
	WORD $0x3948; BYTE $0xd0                   // cmpq         %rdx, %rax
	LONG $0xc04d8b48                           // movq         $-64(%rbp), %rcx
	LONG $0x0293830f; WORD $0x0000             // jae          LBB81_49, $659(%rip)
	WORD $0x0148; BYTE $0xcb                   // addq         %rcx, %rbx
	LONG $0xffc7c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r15

LBB81_23:
	WORD $0x0148; BYTE $0xc3               // addq         %rax, %rbx
	WORD $0x2949; BYTE $0xc4               // subq         %rax, %r12
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

LBB81_24:
	LONG $0x04fc8349               // cmpq         $4, %r12
	LONG $0x033a820f; WORD $0x0000 // jb           LBB81_64, $826(%rip)
	WORD $0x3b8b                   // movl         (%rbx), %edi
	LONG $0x00091fe8; BYTE $0x00   // callq        _valid_utf8_4byte, $2335(%rip)
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x03b6840f; WORD $0x0000 // je           LBB81_76, $950(%rip)
	WORD $0x0148; BYTE $0xc3       // addq         %rax, %rbx
	WORD $0x2949; BYTE $0xc4       // subq         %rax, %r12
	LONG $0xfc4a840f; WORD $0xffff // je           LBB81_2, $-950(%rip)
	WORD $0x3b80; BYTE $0x00       // cmpb         $0, (%rbx)
	LONG $0xffd1880f; WORD $0xffff // js           LBB81_24, $-47(%rip)
	LONG $0xfffc3ce9; BYTE $0xff   // jmp          LBB81_2, $-964(%rip)

LBB81_28:
	LONG $0xc7bc0f49                           // bsfq         %r15, %rax
	LONG $0xc85d8b48                           // movq         $-56(%rbp), %rbx
	LONG $0xc05d0348                           // addq         $-64(%rbp), %rbx
	LONG $0xffc7c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r15
	LONG $0xb8658b4c                           // movq         $-72(%rbp), %r12
	LONG $0xffffa0e9; BYTE $0xff               // jmp          LBB81_23, $-96(%rip)

LBB81_29:
	WORD $0x0148; BYTE $0xc3                   // addq         %rax, %rbx
	LONG $0xffc7c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r15

LBB81_30:
	LONG $0x20fc8349               // cmpq         $32, %r12
	LONG $0x0280820f; WORD $0x0000 // jb           LBB81_55, $640(%rip)
	LONG $0xb865894c               // movq         %r12, $-72(%rbp)
	LONG $0x0b10f8c5               // vmovups      (%rbx), %xmm1
	QUAD $0xffffff708d29f8c5       // vmovaps      %xmm1, $-144(%rbp)
	LONG $0xc85d8948               // movq         %rbx, $-56(%rbp)
	LONG $0x4310f8c5; BYTE $0x10   // vmovups      $16(%rbx), %xmm0
	LONG $0x4529f8c5; BYTE $0xa0   // vmovaps      %xmm0, $-96(%rbp)
	LONG $0xc128f8c5               // vmovaps      %xmm1, %xmm0
	QUAD $0xfffffb620d28f8c5       // vmovaps      $-1182(%rip), %xmm1  /* LCPI81_0(%rip) */
	LONG $0x0007cde8; BYTE $0x00   // callq        __mm_get_mask, $1997(%rip)
	WORD $0x8941; BYTE $0xc4       // movl         %eax, %r12d
	LONG $0x4528f8c5; BYTE $0xa0   // vmovaps      $-96(%rbp), %xmm0
	QUAD $0xfffffb4d0d28f8c5       // vmovaps      $-1203(%rip), %xmm1  /* LCPI81_0(%rip) */
	LONG $0x0007b8e8; BYTE $0x00   // callq        __mm_get_mask, $1976(%rip)
	WORD $0xc389                   // movl         %eax, %ebx
	QUAD $0xffffff708528f8c5       // vmovaps      $-144(%rbp), %xmm0
	QUAD $0xfffffb460d28f8c5       // vmovaps      $-1210(%rip), %xmm1  /* LCPI81_1(%rip) */
	LONG $0x0007a1e8; BYTE $0x00   // callq        __mm_get_mask, $1953(%rip)
	WORD $0x8941; BYTE $0xc6       // movl         %eax, %r14d
	LONG $0x4528f8c5; BYTE $0xa0   // vmovaps      $-96(%rbp), %xmm0
	QUAD $0xfffffb310d28f8c5       // vmovaps      $-1231(%rip), %xmm1  /* LCPI81_1(%rip) */
	LONG $0x00078ce8; BYTE $0x00   // callq        __mm_get_mask, $1932(%rip)
	WORD $0x8941; BYTE $0xc7       // movl         %eax, %r15d
	QUAD $0xffffff708528f8c5       // vmovaps      $-144(%rbp), %xmm0
	LONG $0x00079ce8; BYTE $0x00   // callq        __mm_cchars_mask, $1948(%rip)
	WORD $0x4589; BYTE $0x80       // movl         %eax, $-128(%rbp)
	LONG $0x4528f8c5; BYTE $0xa0   // vmovaps      $-96(%rbp), %xmm0
	LONG $0x00078fe8; BYTE $0x00   // callq        __mm_cchars_mask, $1935(%rip)
	LONG $0xff608589; WORD $0xffff // movl         %eax, $-160(%rbp)
	QUAD $0xffffff708528f8c5       // vmovaps      $-144(%rbp), %xmm0
	LONG $0x0007ace8; BYTE $0x00   // callq        __mm_nonascii_mask, $1964(%rip)
	WORD $0x8941; BYTE $0xc5       // movl         %eax, %r13d
	LONG $0x4528f8c5; BYTE $0xa0   // vmovaps      $-96(%rbp), %xmm0
	LONG $0x00079fe8; BYTE $0x00   // callq        __mm_nonascii_mask, $1951(%rip)
	WORD $0x8944; BYTE $0xfa       // movl         %r15d, %edx
	LONG $0x10e2c148               // shlq         $16, %rdx
	WORD $0x8944; BYTE $0xf1       // movl         %r14d, %ecx
	WORD $0x0948; BYTE $0xd1       // orq          %rdx, %rcx
	LONG $0x00d1850f; WORD $0x0000 // jne          LBB81_45, $209(%rip)

LBB81_32:
	WORD $0xdb89                   // movl         %ebx, %ebx
	LONG $0x10e3c148               // shlq         $16, %rbx
	LONG $0xb07d8b48               // movq         $-80(%rbp), %rdi
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	WORD $0x950f; BYTE $0xc2       // setne        %dl
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0x00e1850f; WORD $0x0000 // jne          LBB81_47, $225(%rip)

LBB81_33:
	LONG $0xffc7c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r15
	WORD $0x8941; BYTE $0xc6                   // movl         %eax, %r14d
	LONG $0x10e6c149                           // shlq         $16, %r14
	WORD $0x8944; BYTE $0xe0                   // movl         %r12d, %eax
	WORD $0x0948; BYTE $0xc3                   // orq          %rax, %rbx
	WORD $0xd284                               // testb        %dl, %dl
	LONG $0x00cc850f; WORD $0x0000             // jne          LBB81_48, $204(%rip)

LBB81_34:
	LONG $0xb8658b4c               // movq         $-72(%rbp), %r12
	LONG $0xff608d8b; WORD $0xffff // movl         $-160(%rbp), %ecx
	LONG $0x10e1c148               // shlq         $16, %rcx
	WORD $0x8944; BYTE $0xe8       // movl         %r13d, %eax
	WORD $0x0949; BYTE $0xc6       // orq          %rax, %r14
	LONG $0x000040b8; BYTE $0x00   // movl         $64, %eax
	LONG $0x000040ba; BYTE $0x00   // movl         $64, %edx
	WORD $0x8548; BYTE $0xdb       // testq        %rbx, %rbx
	LONG $0x0004840f; WORD $0x0000 // je           LBB81_36, $4(%rip)
	LONG $0xd3bc0f48               // bsfq         %rbx, %rdx

LBB81_36:
	WORD $0x758b; BYTE $0x80       // movl         $-128(%rbp), %esi
	WORD $0x0948; BYTE $0xf1       // orq          %rsi, %rcx
	WORD $0x854d; BYTE $0xf6       // testq        %r14, %r14
	LONG $0x986d8b4c               // movq         $-104(%rbp), %r13
	LONG $0x0004840f; WORD $0x0000 // je           LBB81_38, $4(%rip)
	LONG $0xc6bc0f49               // bsfq         %r14, %rax

LBB81_38:
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0x0028840f; WORD $0x0000 // je           LBB81_42, $40(%rip)
	LONG $0xf1bc0f48               // bsfq         %rcx, %rsi
	WORD $0x8548; BYTE $0xdb       // testq        %rbx, %rbx
	LONG $0x0029840f; WORD $0x0000 // je           LBB81_43, $41(%rip)

LBB81_40:
	WORD $0x3948; BYTE $0xd6       // cmpq         %rdx, %rsi
	LONG $0xc85d8b48               // movq         $-56(%rbp), %rbx
	LONG $0x0166820f; WORD $0x0000 // jb           LBB81_60, $358(%rip)
	WORD $0x3948; BYTE $0xd0       // cmpq         %rdx, %rax
	LONG $0xfe29820f; WORD $0xffff // jb           LBB81_23, $-471(%rip)
	LONG $0x0000ffe9; BYTE $0x00   // jmp          LBB81_53, $255(%rip)

LBB81_42:
	LONG $0x000040be; BYTE $0x00   // movl         $64, %esi
	WORD $0x8548; BYTE $0xdb       // testq        %rbx, %rbx
	LONG $0xffd7850f; WORD $0xffff // jne          LBB81_40, $-41(%rip)

LBB81_43:
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0xc85d8b48               // movq         $-56(%rbp), %rbx
	LONG $0x013d850f; WORD $0x0000 // jne          LBB81_60, $317(%rip)
	WORD $0x854d; BYTE $0xf6       // testq        %r14, %r14
	LONG $0xfe00850f; WORD $0xffff // jne          LBB81_23, $-512(%rip)
	LONG $0x0000e7e9; BYTE $0x00   // jmp          LBB81_54, $231(%rip)

LBB81_45:
	LONG $0x98558b48               // movq         $-104(%rbp), %rdx
	LONG $0xff3a8348               // cmpq         $-1, (%rdx)
	LONG $0xff21850f; WORD $0xffff // jne          LBB81_32, $-223(%rip)
	LONG $0xc8558b48               // movq         $-56(%rbp), %rdx
	LONG $0xd0552b48               // subq         $-48(%rbp), %rdx
	LONG $0xf1bc0f48               // bsfq         %rcx, %rsi
	WORD $0x0148; BYTE $0xd6       // addq         %rdx, %rsi
	LONG $0x98558b48               // movq         $-104(%rbp), %rdx
	WORD $0x8948; BYTE $0x32       // movq         %rsi, (%rdx)
	LONG $0xffff06e9; BYTE $0xff   // jmp          LBB81_32, $-250(%rip)

LBB81_47:
	WORD $0x01b2                 // movb         $1, %dl
	LONG $0xffff18e9; BYTE $0xff // jmp          LBB81_33, $-232(%rip)

LBB81_48:
	WORD $0x8948; BYTE $0xfe                   // movq         %rdi, %rsi
	WORD $0xf748; BYTE $0xd6                   // notq         %rsi
	WORD $0x2148; BYTE $0xce                   // andq         %rcx, %rsi
	LONG $0x363c8d4c                           // leaq         (%rsi,%rsi), %r15
	WORD $0x0949; BYTE $0xff                   // orq          %rdi, %r15
	WORD $0x894c; BYTE $0xff                   // movq         %r15, %rdi
	WORD $0xf748; BYTE $0xd7                   // notq         %rdi
	WORD $0x2148; BYTE $0xcf                   // andq         %rcx, %rdi
	QUAD $0xaaaaaaaaaaaab848; WORD $0x0000     // movabsq      $187649984473770, %rax
	WORD $0x2148; BYTE $0xc7                   // andq         %rax, %rdi
	LONG $0xb0558d48                           // leaq         $-80(%rbp), %rdx
	LONG $0x00068ce8; BYTE $0x00               // callq        _add32, $1676(%rip)
	WORD $0x0148; BYTE $0xc0                   // addq         %rax, %rax
	QUAD $0x555555555555b948; WORD $0x5555     // movabsq      $6148914691236517205, %rcx
	WORD $0x3148; BYTE $0xc8                   // xorq         %rcx, %rax
	WORD $0x214c; BYTE $0xf8                   // andq         %r15, %rax
	LONG $0xffc7c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r15
	WORD $0xf748; BYTE $0xd0                   // notq         %rax
	WORD $0x2148; BYTE $0xc3                   // andq         %rax, %rbx
	LONG $0xfffee0e9; BYTE $0xff               // jmp          LBB81_34, $-288(%rip)

LBB81_49:
	LONG $0xd05d2b48             // subq         $-48(%rbp), %rbx
	WORD $0x0148; BYTE $0xd3     // addq         %rdx, %rbx
	LONG $0x193c8d4c             // leaq         (%rcx,%rbx), %r15
	LONG $0x01c78349             // addq         $1, %r15
	LONG $0x000162e9; BYTE $0x00 // jmp          LBB81_79, $354(%rip)

LBB81_50:
	LONG $0xfec7c749; WORD $0xffff; BYTE $0xff // movq         $-2, %r15
	LONG $0x007d8349; BYTE $0xff               // cmpq         $-1, (%r13)
	LONG $0x0150850f; WORD $0x0000             // jne          LBB81_79, $336(%rip)
	LONG $0xc3bc0f48                           // bsfq         %rbx, %rax
	LONG $0xc84d8b48                           // movq         $-56(%rbp), %rcx
	LONG $0xd04d2b48                           // subq         $-48(%rbp), %rcx
	WORD $0x0148; BYTE $0xc1                   // addq         %rax, %rcx
	LONG $0xc04d0348                           // addq         $-64(%rbp), %rcx
	LONG $0x004d8949                           // movq         %rcx, (%r13)
	LONG $0x000134e9; BYTE $0x00               // jmp          LBB81_79, $308(%rip)

LBB81_52:
	LONG $0xd05d2b48             // subq         $-48(%rbp), %rbx
	WORD $0x0148; BYTE $0xcb     // addq         %rcx, %rbx
	LONG $0xc05d0348             // addq         $-64(%rbp), %rbx
	LONG $0x000109e9; BYTE $0x00 // jmp          LBB81_77, $265(%rip)

LBB81_53:
	LONG $0xd05d2b48             // subq         $-48(%rbp), %rbx
	LONG $0x133c8d4c             // leaq         (%rbx,%rdx), %r15
	LONG $0x01c78349             // addq         $1, %r15
	LONG $0x000113e9; BYTE $0x00 // jmp          LBB81_79, $275(%rip)

LBB81_54:
	LONG $0x20c38348 // addq         $32, %rbx
	LONG $0xe0c48349 // addq         $-32, %r12

LBB81_55:
	LONG $0xb07d8348; BYTE $0x00   // cmpq         $0, $-80(%rbp)
	LONG $0x0055840f; WORD $0x0000 // je           LBB81_64, $85(%rip)
	WORD $0x854d; BYTE $0xe4       // testq        %r12, %r12
	LONG $0x013f840f; WORD $0x0000 // je           LBB81_61, $319(%rip)
	WORD $0x894c; BYTE $0xe1       // movq         %r12, %rcx
	LONG $0x007d8349; BYTE $0xff   // cmpq         $-1, (%r13)
	LONG $0x000e850f; WORD $0x0000 // jne          LBB81_59, $14(%rip)
	LONG $0xd0458b48               // movq         $-48(%rbp), %rax
	WORD $0xf748; BYTE $0xd0       // notq         %rax
	WORD $0x0148; BYTE $0xd8       // addq         %rbx, %rax
	LONG $0x00458949               // movq         %rax, (%r13)

LBB81_59:
	LONG $0x01c38348             // addq         $1, %rbx
	WORD $0x8949; BYTE $0xcc     // movq         %rcx, %r12
	LONG $0xffc48349             // addq         $-1, %r12
	LONG $0x00000ce9; BYTE $0x00 // jmp          LBB81_62, $12(%rip)

LBB81_60:
	LONG $0xd05d2b48             // subq         $-48(%rbp), %rbx
	WORD $0x0148; BYTE $0xf3     // addq         %rsi, %rbx
	LONG $0x0000a4e9; BYTE $0x00 // jmp          LBB81_77, $164(%rip)

LBB81_62:
	LONG $0xffc7c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r15
	LONG $0x000008e9; BYTE $0x00               // jmp          LBB81_64, $8(%rip)

LBB81_63:
	LONG $0x01c38348 // addq         $1, %rbx
	LONG $0xffc48349 // addq         $-1, %r12

LBB81_64:
	WORD $0x854d; BYTE $0xe4       // testq        %r12, %r12
	LONG $0x00a2840f; WORD $0x0000 // je           LBB81_79, $162(%rip)
	WORD $0xb60f; BYTE $0x03       // movzbl       (%rbx), %eax
	WORD $0x223c                   // cmpb         $34, %al
	LONG $0x008c840f; WORD $0x0000 // je           LBB81_78, $140(%rip)
	WORD $0x5c3c                   // cmpb         $92, %al
	LONG $0x00a4840f; WORD $0x0000 // je           LBB81_80, $164(%rip)
	WORD $0x1f3c                   // cmpb         $31, %al
	LONG $0x0068860f; WORD $0x0000 // jbe          LBB81_76, $104(%rip)
	WORD $0xc084                   // testb        %al, %al
	LONG $0xffcc890f; WORD $0xffff // jns          LBB81_63, $-52(%rip)
	LONG $0x04fc8349               // cmpq         $4, %r12
	LONG $0x0007820f; WORD $0x0000 // jb           LBB81_71, $7(%rip)
	WORD $0x3b8b                   // movl         (%rbx), %edi
	LONG $0x00000de9; BYTE $0x00   // jmp          LBB81_72, $13(%rip)

LBB81_71:
	WORD $0x8948; BYTE $0xdf     // movq         %rbx, %rdi
	WORD $0x894c; BYTE $0xe6     // movq         %r12, %rsi
	LONG $0x000574e8; BYTE $0x00 // callq        _less4byte_to_uint32, $1396(%rip)
	WORD $0xc789                 // movl         %eax, %edi

LBB81_72:
	LONG $0x00059de8; BYTE $0x00   // callq        _valid_utf8_4byte, $1437(%rip)
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x0014840f; WORD $0x0000 // je           LBB81_74, $20(%rip)
	WORD $0x0148; BYTE $0xc3       // addq         %rax, %rbx
	WORD $0x2949; BYTE $0xc4       // subq         %rax, %r12
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0xff99850f; WORD $0xffff // jne          LBB81_64, $-103(%rip)
	LONG $0x000014e9; BYTE $0x00   // jmp          LBB81_75, $20(%rip)

LBB81_74:
	WORD $0x8948; BYTE $0xd9       // movq         %rbx, %rcx
	LONG $0xd04d2b48               // subq         $-48(%rbp), %rcx
	LONG $0x004d8949               // movq         %rcx, (%r13)
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0xff80850f; WORD $0xffff // jne          LBB81_64, $-128(%rip)

LBB81_75:
	LONG $0xfec7c749; WORD $0xffff; BYTE $0xff // movq         $-2, %r15
	LONG $0x00001fe9; BYTE $0x00               // jmp          LBB81_79, $31(%rip)

LBB81_76:
	LONG $0xd05d2b48 // subq         $-48(%rbp), %rbx

LBB81_77:
	LONG $0x005d8949                           // movq         %rbx, (%r13)
	LONG $0xfec7c749; WORD $0xffff; BYTE $0xff // movq         $-2, %r15
	LONG $0x00000be9; BYTE $0x00               // jmp          LBB81_79, $11(%rip)

LBB81_78:
	LONG $0xd05d2b48         // subq         $-48(%rbp), %rbx
	LONG $0x01c38348         // addq         $1, %rbx
	WORD $0x8949; BYTE $0xdf // movq         %rbx, %r15

LBB81_79:
	WORD $0x894c; BYTE $0xf8                   // movq         %r15, %rax
	LONG $0xa8c48148; WORD $0x0000; BYTE $0x00 // addq         $168, %rsp
	BYTE $0x5b                                 // popq         %rbx
	WORD $0x5c41                               // popq         %r12
	WORD $0x5d41                               // popq         %r13
	WORD $0x5e41                               // popq         %r14
	WORD $0x5f41                               // popq         %r15
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq

LBB81_80:
	LONG $0x01fc8349               // cmpq         $1, %r12
	LONG $0x0029840f; WORD $0x0000 // je           LBB81_61, $41(%rip)
	WORD $0x894c; BYTE $0xe1       // movq         %r12, %rcx
	LONG $0x007d8349; BYTE $0xff   // cmpq         $-1, (%r13)
	LONG $0x000b850f; WORD $0x0000 // jne          LBB81_83, $11(%rip)
	WORD $0x8948; BYTE $0xd8       // movq         %rbx, %rax
	LONG $0xd0452b48               // subq         $-48(%rbp), %rax
	LONG $0x00458949               // movq         %rax, (%r13)

LBB81_83:
	LONG $0x02c38348             // addq         $2, %rbx
	WORD $0x8949; BYTE $0xcc     // movq         %rcx, %r12
	LONG $0xfec48349             // addq         $-2, %r12
	LONG $0xfffef9e9; BYTE $0xff // jmp          LBB81_62, $-263(%rip)

LBB81_61:
	LONG $0xffc7c749; WORD $0xffff; BYTE $0xff             // movq         $-1, %r15
	LONG $0xfffface9; BYTE $0xff                           // jmp          LBB81_79, $-84(%rip)
	QUAD $0x0000000000000000; LONG $0x00000000; BYTE $0x00 // .p2align 4, 0x00

LCPI82_0:
	QUAD $0x2222222222222222; QUAD $0x2222222222222222 // .space 16, '""""""""""""""""'

LCPI82_1:
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'

	// .p2align 4, 0x90
_advance_string_default:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	LONG $0x18ec8348                           // subq         $24, %rsp
	QUAD $0x00000000d045c748                   // movq         $0, $-48(%rbp)
	LONG $0x08678b4c                           // movq         $8(%rdi), %r12
	LONG $0xffc0c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r8
	WORD $0x2949; BYTE $0xf4                   // subq         %rsi, %r12
	LONG $0x01ac840f; WORD $0x0000             // je           LBB82_13, $428(%rip)
	WORD $0x8949; BYTE $0xd2                   // movq         %rdx, %r10
	WORD $0x8949; BYTE $0xf5                   // movq         %rsi, %r13
	WORD $0x8b4c; BYTE $0x0f                   // movq         (%rdi), %r9
	LONG $0xff02c748; WORD $0xffff; BYTE $0xff // movq         $-1, (%rdx)
	LONG $0x40fc8349                           // cmpq         $64, %r12
	LONG $0x01a4820f; WORD $0x0000             // jb           LBB82_14, $420(%rip)
	WORD $0x894d; BYTE $0xee                   // movq         %r13, %r14
	WORD $0xf749; BYTE $0xd6                   // notq         %r14
	QUAD $0xffffff8b2d6ff9c5                   // vmovdqa      $-117(%rip), %xmm5  /* LCPI82_0(%rip) */
	QUAD $0xffffff93356ff9c5                   // vmovdqa      $-109(%rip), %xmm6  /* LCPI82_1(%rip) */
	QUAD $0xaaaaaaaaaaaabb49; WORD $0xaaaa     // movabsq      $-6148914691236517206, %r11
	QUAD $0x9090909090909090; BYTE $0x90       // .p2align 4, 0x90

LBB82_3:
	LONG $0x6f7a81c4; WORD $0x2904             // vmovdqu      (%r9,%r13), %xmm0
	LONG $0x6f7a81c4; WORD $0x294c; BYTE $0x10 // vmovdqu      $16(%r9,%r13), %xmm1
	LONG $0x6f7a81c4; WORD $0x2954; BYTE $0x20 // vmovdqu      $32(%r9,%r13), %xmm2
	LONG $0x6f7a81c4; WORD $0x295c; BYTE $0x30 // vmovdqu      $48(%r9,%r13), %xmm3
	LONG $0xe574f1c5                           // vpcmpeqb     %xmm5, %xmm1, %xmm4
	LONG $0xccd7f9c5                           // vpmovmskb    %xmm4, %ecx
	LONG $0xe574e9c5                           // vpcmpeqb     %xmm5, %xmm2, %xmm4
	LONG $0xfcd779c5                           // vpmovmskb    %xmm4, %r15d
	LONG $0xe574e1c5                           // vpcmpeqb     %xmm5, %xmm3, %xmm4
	LONG $0xd4d7f9c5                           // vpmovmskb    %xmm4, %edx
	LONG $0xe674f9c5                           // vpcmpeqb     %xmm6, %xmm0, %xmm4
	LONG $0xc4d7f9c5                           // vpmovmskb    %xmm4, %eax
	LONG $0xce74f1c5                           // vpcmpeqb     %xmm6, %xmm1, %xmm1
	LONG $0xf1d7f9c5                           // vpmovmskb    %xmm1, %esi
	LONG $0xce74e9c5                           // vpcmpeqb     %xmm6, %xmm2, %xmm1
	LONG $0xf9d7f9c5                           // vpmovmskb    %xmm1, %edi
	LONG $0xce74e1c5                           // vpcmpeqb     %xmm6, %xmm3, %xmm1
	LONG $0xd9d7f9c5                           // vpmovmskb    %xmm1, %ebx
	LONG $0x30e2c148                           // shlq         $48, %rdx
	LONG $0x20e7c149                           // shlq         $32, %r15
	WORD $0x0949; BYTE $0xd7                   // orq          %rdx, %r15
	LONG $0x10e1c148                           // shlq         $16, %rcx
	LONG $0x30e3c148                           // shlq         $48, %rbx
	LONG $0x20e7c148                           // shlq         $32, %rdi
	WORD $0x0948; BYTE $0xdf                   // orq          %rbx, %rdi
	LONG $0x10e6c148                           // shlq         $16, %rsi
	WORD $0x0948; BYTE $0xfe                   // orq          %rdi, %rsi
	WORD $0x0948; BYTE $0xf0                   // orq          %rsi, %rax
	LONG $0x004d850f; WORD $0x0000             // jne          LBB82_8, $77(%rip)

LBB82_4:
	WORD $0x0949; BYTE $0xcf       // orq          %rcx, %r15
	LONG $0xd04d8b48               // movq         $-48(%rbp), %rcx
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	WORD $0x950f; BYTE $0xc2       // setne        %dl
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x0050850f; WORD $0x0000 // jne          LBB82_10, $80(%rip)

LBB82_5:
	LONG $0xc574f9c5               // vpcmpeqb     %xmm5, %xmm0, %xmm0
	LONG $0xf0d7f9c5               // vpmovmskb    %xmm0, %esi
	WORD $0x0949; BYTE $0xf7       // orq          %rsi, %r15
	WORD $0xd284                   // testb        %dl, %dl
	LONG $0x0044850f; WORD $0x0000 // jne          LBB82_11, $68(%rip)
	WORD $0x854d; BYTE $0xff       // testq        %r15, %r15
	LONG $0x00b3850f; WORD $0x0000 // jne          LBB82_12, $179(%rip)

LBB82_7:
	LONG $0xc0c48349               // addq         $-64, %r12
	LONG $0xc0c68349               // addq         $-64, %r14
	LONG $0x40c58349               // addq         $64, %r13
	LONG $0x3ffc8349               // cmpq         $63, %r12
	LONG $0xff3b870f; WORD $0xffff // ja           LBB82_3, $-197(%rip)
	LONG $0x0000b1e9; BYTE $0x00   // jmp          LBB82_14, $177(%rip)

LBB82_8:
	LONG $0xff3a8349               // cmpq         $-1, (%r10)
	LONG $0xffa9850f; WORD $0xffff // jne          LBB82_4, $-87(%rip)
	LONG $0xd0bc0f48               // bsfq         %rax, %rdx
	WORD $0x014c; BYTE $0xea       // addq         %r13, %rdx
	WORD $0x8949; BYTE $0x12       // movq         %rdx, (%r10)
	LONG $0xffff9ae9; BYTE $0xff   // jmp          LBB82_4, $-102(%rip)

LBB82_10:
	WORD $0x01b2                 // movb         $1, %dl
	LONG $0xffffa9e9; BYTE $0xff // jmp          LBB82_5, $-87(%rip)

LBB82_11:
	WORD $0x8948; BYTE $0xce                   // movq         %rcx, %rsi
	WORD $0xf748; BYTE $0xd6                   // notq         %rsi
	WORD $0x2148; BYTE $0xc6                   // andq         %rax, %rsi
	LONG $0x361c8d48                           // leaq         (%rsi,%rsi), %rbx
	WORD $0x0948; BYTE $0xcb                   // orq          %rcx, %rbx
	WORD $0x8948; BYTE $0xdf                   // movq         %rbx, %rdi
	WORD $0xf748; BYTE $0xd7                   // notq         %rdi
	WORD $0x2148; BYTE $0xc7                   // andq         %rax, %rdi
	WORD $0x214c; BYTE $0xdf                   // andq         %r11, %rdi
	LONG $0xd0558d48                           // leaq         $-48(%rbp), %rdx
	LONG $0xc04d894c                           // movq         %r9, $-64(%rbp)
	LONG $0xc855894c                           // movq         %r10, $-56(%rbp)
	LONG $0x0002c9e8; BYTE $0x00               // callq        _add64, $713(%rip)
	QUAD $0xaaaaaaaaaaaabb49; WORD $0xaaaa     // movabsq      $-6148914691236517206, %r11
	QUAD $0xfffffe57356ff9c5                   // vmovdqa      $-425(%rip), %xmm6  /* LCPI82_1(%rip) */
	QUAD $0xfffffe3f2d6ff9c5                   // vmovdqa      $-449(%rip), %xmm5  /* LCPI82_0(%rip) */
	LONG $0xc8558b4c                           // movq         $-56(%rbp), %r10
	LONG $0xc04d8b4c                           // movq         $-64(%rbp), %r9
	LONG $0xffc0c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r8
	WORD $0x0148; BYTE $0xc0                   // addq         %rax, %rax
	QUAD $0x555555555555b948; WORD $0x5555     // movabsq      $6148914691236517205, %rcx
	WORD $0x3148; BYTE $0xc8                   // xorq         %rcx, %rax
	WORD $0x2148; BYTE $0xd8                   // andq         %rbx, %rax
	WORD $0xf748; BYTE $0xd0                   // notq         %rax
	WORD $0x2149; BYTE $0xc7                   // andq         %rax, %r15
	WORD $0x854d; BYTE $0xff                   // testq        %r15, %r15
	LONG $0xff4d840f; WORD $0xffff             // je           LBB82_7, $-179(%rip)

LBB82_12:
	LONG $0xc7bc0f4d         // bsfq         %r15, %r8
	WORD $0x294d; BYTE $0xf0 // subq         %r14, %r8

LBB82_13:
	WORD $0x894c; BYTE $0xc0 // movq         %r8, %rax
	LONG $0x18c48348         // addq         $24, %rsp
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

LBB82_14:
	WORD $0x014d; BYTE $0xcd       // addq         %r9, %r13
	LONG $0x20fc8349               // cmpq         $32, %r12
	LONG $0x0107820f; WORD $0x0000 // jb           LBB82_25, $263(%rip)
	LONG $0x6f7ac1c4; WORD $0x0045 // vmovdqu      (%r13), %xmm0
	LONG $0x6f7ac1c4; WORD $0x104d // vmovdqu      $16(%r13), %xmm1
	QUAD $0xfffffdd4156ff9c5       // vmovdqa      $-556(%rip), %xmm2  /* LCPI82_0(%rip) */
	QUAD $0xfffffddc1d6ff9c5       // vmovdqa      $-548(%rip), %xmm3  /* LCPI82_1(%rip) */
	LONG $0xe274f9c5               // vpcmpeqb     %xmm2, %xmm0, %xmm4
	LONG $0xc4d7f9c5               // vpmovmskb    %xmm4, %eax
	LONG $0xd274f1c5               // vpcmpeqb     %xmm2, %xmm1, %xmm2
	LONG $0xdad7f9c5               // vpmovmskb    %xmm2, %ebx
	LONG $0xc374f9c5               // vpcmpeqb     %xmm3, %xmm0, %xmm0
	LONG $0xf8d7f9c5               // vpmovmskb    %xmm0, %edi
	LONG $0xc374f1c5               // vpcmpeqb     %xmm3, %xmm1, %xmm0
	LONG $0xc8d7f9c5               // vpmovmskb    %xmm0, %ecx
	LONG $0x10e1c148               // shlq         $16, %rcx
	WORD $0x0948; BYTE $0xcf       // orq          %rcx, %rdi
	LONG $0x003f850f; WORD $0x0000 // jne          LBB82_20, $63(%rip)

LBB82_16:
	LONG $0x10e3c148               // shlq         $16, %rbx
	LONG $0xd07d8b4c               // movq         $-48(%rbp), %r15
	WORD $0x854d; BYTE $0xff       // testq        %r15, %r15
	WORD $0x950f; BYTE $0xc1       // setne        %cl
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0x0047850f; WORD $0x0000 // jne          LBB82_22, $71(%rip)

LBB82_17:
	WORD $0x0948; BYTE $0xc3       // orq          %rax, %rbx
	WORD $0xc984                   // testb        %cl, %cl
	LONG $0x0043850f; WORD $0x0000 // jne          LBB82_23, $67(%rip)
	WORD $0x8548; BYTE $0xdb       // testq        %rbx, %rbx
	LONG $0x008b840f; WORD $0x0000 // je           LBB82_24, $139(%rip)

LBB82_19:
	LONG $0xc3bc0f48             // bsfq         %rbx, %rax
	WORD $0x294d; BYTE $0xcd     // subq         %r9, %r13
	LONG $0x28048d4e             // leaq         (%rax,%r13), %r8
	LONG $0x01c08349             // addq         $1, %r8
	LONG $0xffff59e9; BYTE $0xff // jmp          LBB82_13, $-167(%rip)

LBB82_20:
	LONG $0xff3a8349               // cmpq         $-1, (%r10)
	LONG $0xffb7850f; WORD $0xffff // jne          LBB82_16, $-73(%rip)
	WORD $0x894c; BYTE $0xe9       // movq         %r13, %rcx
	WORD $0x294c; BYTE $0xc9       // subq         %r9, %rcx
	LONG $0xd7bc0f48               // bsfq         %rdi, %rdx
	WORD $0x0148; BYTE $0xca       // addq         %rcx, %rdx
	WORD $0x8949; BYTE $0x12       // movq         %rdx, (%r10)
	LONG $0xffffa2e9; BYTE $0xff   // jmp          LBB82_16, $-94(%rip)

LBB82_22:
	WORD $0x01b1                 // movb         $1, %cl
	LONG $0xffffb2e9; BYTE $0xff // jmp          LBB82_17, $-78(%rip)

LBB82_23:
	WORD $0x894c; BYTE $0xfe                   // movq         %r15, %rsi
	WORD $0xf748; BYTE $0xd6                   // notq         %rsi
	WORD $0x2148; BYTE $0xfe                   // andq         %rdi, %rsi
	WORD $0x048d; BYTE $0x36                   // leal         (%rsi,%rsi), %eax
	WORD $0x0941; BYTE $0xc7                   // orl          %eax, %r15d
	WORD $0x8944; BYTE $0xf8                   // movl         %r15d, %eax
	WORD $0xd0f7                               // notl         %eax
	WORD $0xc721                               // andl         %eax, %edi
	LONG $0xaaaae781; WORD $0xaaaa             // andl         $-1431655766, %edi
	LONG $0xd0558d48                           // leaq         $-48(%rbp), %rdx
	WORD $0x894d; BYTE $0xce                   // movq         %r9, %r14
	LONG $0xc855894c                           // movq         %r10, $-56(%rbp)
	LONG $0x00019ee8; BYTE $0x00               // callq        _add32, $414(%rip)
	LONG $0xc8558b4c                           // movq         $-56(%rbp), %r10
	WORD $0x894d; BYTE $0xf1                   // movq         %r14, %r9
	LONG $0xffc0c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r8
	WORD $0xc001                               // addl         %eax, %eax
	LONG $0x55555535; BYTE $0x55               // xorl         $1431655765, %eax
	WORD $0x2144; BYTE $0xf8                   // andl         %r15d, %eax
	WORD $0xd0f7                               // notl         %eax
	WORD $0xc321                               // andl         %eax, %ebx
	WORD $0x8548; BYTE $0xdb                   // testq        %rbx, %rbx
	LONG $0xff75850f; WORD $0xffff             // jne          LBB82_19, $-139(%rip)

LBB82_24:
	LONG $0x20c58349 // addq         $32, %r13
	LONG $0xe0c48349 // addq         $-32, %r12

LBB82_25:
	LONG $0xd07d8348; BYTE $0x00   // cmpq         $0, $-48(%rbp)
	LONG $0x0088850f; WORD $0x0000 // jne          LBB82_36, $136(%rip)
	WORD $0x854d; BYTE $0xe4       // testq        %r12, %r12
	LONG $0x00b6840f; WORD $0x0000 // je           LBB82_40, $182(%rip)

LBB82_27:
	WORD $0x894c; BYTE $0xc8 // movq         %r9, %rax
	WORD $0xf748; BYTE $0xd0 // notq         %rax

LBB82_28:
	LONG $0x01558d49               // leaq         $1(%r13), %rdx
	LONG $0x4db60f41; BYTE $0x00   // movzbl       (%r13), %ecx
	WORD $0xf980; BYTE $0x22       // cmpb         $34, %cl
	LONG $0x0059840f; WORD $0x0000 // je           LBB82_35, $89(%rip)
	LONG $0x24748d49; BYTE $0xff   // leaq         $-1(%r12), %rsi
	WORD $0xf980; BYTE $0x5c       // cmpb         $92, %cl
	LONG $0x0014840f; WORD $0x0000 // je           LBB82_31, $20(%rip)
	WORD $0x8949; BYTE $0xf4       // movq         %rsi, %r12
	WORD $0x8949; BYTE $0xd5       // movq         %rdx, %r13
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0xffd1850f; WORD $0xffff // jne          LBB82_28, $-47(%rip)
	LONG $0x000037e9; BYTE $0x00   // jmp          LBB82_35, $55(%rip)

LBB82_31:
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x0086840f; WORD $0x0000 // je           LBB82_44, $134(%rip)
	LONG $0xff3a8349               // cmpq         $-1, (%r10)
	LONG $0x0006850f; WORD $0x0000 // jne          LBB82_34, $6(%rip)
	WORD $0x0148; BYTE $0xc2       // addq         %rax, %rdx
	WORD $0x8949; BYTE $0x12       // movq         %rdx, (%r10)

LBB82_34:
	LONG $0x02c58349                           // addq         $2, %r13
	LONG $0xfec48349                           // addq         $-2, %r12
	WORD $0x894c; BYTE $0xea                   // movq         %r13, %rdx
	WORD $0x894c; BYTE $0xe6                   // movq         %r12, %rsi
	LONG $0xffc0c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r8
	WORD $0x8548; BYTE $0xf6                   // testq        %rsi, %rsi
	LONG $0xff95850f; WORD $0xffff             // jne          LBB82_28, $-107(%rip)

LBB82_35:
	WORD $0xf980; BYTE $0x22     // cmpb         $34, %cl
	WORD $0x940f; BYTE $0xc0     // sete         %al
	WORD $0x8949; BYTE $0xd5     // movq         %rdx, %r13
	LONG $0x000037e9; BYTE $0x00 // jmp          LBB82_41, $55(%rip)

LBB82_36:
	WORD $0x854d; BYTE $0xe4       // testq        %r12, %r12
	LONG $0x0041840f; WORD $0x0000 // je           LBB82_44, $65(%rip)
	LONG $0xff3a8349               // cmpq         $-1, (%r10)
	LONG $0x000c850f; WORD $0x0000 // jne          LBB82_39, $12(%rip)
	WORD $0x894c; BYTE $0xc8       // movq         %r9, %rax
	WORD $0xf748; BYTE $0xd0       // notq         %rax
	WORD $0x014c; BYTE $0xe8       // addq         %r13, %rax
	WORD $0x8949; BYTE $0x02       // movq         %rax, (%r10)

LBB82_39:
	LONG $0x01c58349                           // addq         $1, %r13
	LONG $0xffc48349                           // addq         $-1, %r12
	LONG $0xffc0c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r8
	WORD $0x854d; BYTE $0xe4                   // testq        %r12, %r12
	LONG $0xff4a850f; WORD $0xffff             // jne          LBB82_27, $-182(%rip)

LBB82_40:
LBB82_41:
	WORD $0x01a8                   // testb        $1, %al
	LONG $0xfe08840f; WORD $0xffff // je           LBB82_13, $-504(%rip)
	WORD $0x294d; BYTE $0xcd       // subq         %r9, %r13
	WORD $0x894d; BYTE $0xe8       // movq         %r13, %r8
	LONG $0xfffdfde9; BYTE $0xff   // jmp          LBB82_13, $-515(%rip)

LBB82_44:
	LONG $0xffc0c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r8
	LONG $0xfffdf1e9; BYTE $0xff               // jmp          LBB82_13, $-527(%rip)
	QUAD $0x9090909090909090                   // .p2align 4, 0x90

__mm_get_mask:
	BYTE $0x55               // pushq        %rbp
	WORD $0x8948; BYTE $0xe5 // movq         %rsp, %rbp
	LONG $0xc174f9c5         // vpcmpeqb     %xmm1, %xmm0, %xmm0
	LONG $0xc0d7f9c5         // vpmovmskb    %xmm0, %eax
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq
	WORD $0x0000             // .p2align 4, 0x00

LCPI84_0:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

	// .p2align 4, 0x90
__mm_cchars_mask:
	BYTE $0x55                                               // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                                 // movq         %rsp, %rbp
	QUAD $0xffffffe40d6ff9c5                                 // vmovdqa      $-28(%rip), %xmm1  /* LCPI84_0(%rip) */
	LONG $0xc864f1c5                                         // vpcmpgtb     %xmm0, %xmm1, %xmm1
	LONG $0xd276e9c5                                         // vpcmpeqd     %xmm2, %xmm2, %xmm2
	LONG $0xc264f9c5                                         // vpcmpgtb     %xmm2, %xmm0, %xmm0
	LONG $0xc0dbf1c5                                         // vpand        %xmm0, %xmm1, %xmm0
	LONG $0xc0d7f9c5                                         // vpmovmskb    %xmm0, %eax
	BYTE $0x5d                                               // popq         %rbp
	BYTE $0xc3                                               // retq
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

__mm_nonascii_mask:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	LONG $0xc0d7f9c5               // vpmovmskb    %xmm0, %eax
	BYTE $0x5d                     // popq         %rbp
	BYTE $0xc3                     // retq
	LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

_add64:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x8948; BYTE $0xf8                   // movq         %rdi, %rax
	WORD $0xc931                               // xorl         %ecx, %ecx
	WORD $0x0148; BYTE $0xf0                   // addq         %rsi, %rax
	WORD $0x920f; BYTE $0xc1                   // setb         %cl
	WORD $0x8948; BYTE $0x0a                   // movq         %rcx, (%rdx)
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq
	QUAD $0x9090909090909090; LONG $0x90909090 // .p2align 4, 0x90

_add32:
	BYTE $0x55                                             // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                               // movq         %rsp, %rbp
	WORD $0x8948; BYTE $0xf0                               // movq         %rsi, %rax
	WORD $0xc931                                           // xorl         %ecx, %ecx
	WORD $0xf801                                           // addl         %edi, %eax
	WORD $0x920f; BYTE $0xc1                               // setb         %cl
	WORD $0x8948; BYTE $0x0a                               // movq         %rcx, (%rdx)
	BYTE $0x5d                                             // popq         %rbp
	BYTE $0xc3                                             // retq
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

_less4byte_to_uint32:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	LONG $0x02fe8348               // cmpq         $2, %rsi
	LONG $0x000f840f; WORD $0x0000 // je           LBB88_3, $15(%rip)
	LONG $0x01fe8348               // cmpq         $1, %rsi
	LONG $0x000a850f; WORD $0x0000 // jne          LBB88_4, $10(%rip)
	WORD $0xb60f; BYTE $0x07       // movzbl       (%rdi), %eax
	BYTE $0x5d                     // popq         %rbp
	BYTE $0xc3                     // retq

LBB88_3:
	WORD $0xb70f; BYTE $0x07 // movzwl       (%rdi), %eax
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

LBB88_4:
	LONG $0x0247b60f         // movzbl       $2(%rdi), %eax
	WORD $0xb70f; BYTE $0x0f // movzwl       (%rdi), %ecx
	WORD $0xe0c1; BYTE $0x10 // shll         $16, %eax
	WORD $0xc809             // orl          %ecx, %eax
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

	// .p2align 4, 0x90
_valid_utf8_4byte:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0xf889                   // movl         %edi, %eax
	LONG $0xc0c0f025; BYTE $0x00   // andl         $12632304, %eax
	LONG $0x8080e03d; BYTE $0x00   // cmpl         $8421600, %eax
	LONG $0x0021850f; WORD $0x0000 // jne          LBB89_3, $33(%rip)
	WORD $0xf989                   // movl         %edi, %ecx
	LONG $0x200fe181; WORD $0x0000 // andl         $8207, %ecx
	LONG $0x200df981; WORD $0x0000 // cmpl         $8205, %ecx
	LONG $0x000d840f; WORD $0x0000 // je           LBB89_3, $13(%rip)
	LONG $0x000003b8; BYTE $0x00   // movl         $3, %eax
	WORD $0xc985                   // testl        %ecx, %ecx
	LONG $0x0022850f; WORD $0x0000 // jne          LBB89_10, $34(%rip)

LBB89_3:
	WORD $0xf889                   // movl         %edi, %eax
	LONG $0x00c0e025; BYTE $0x00   // andl         $49376, %eax
	LONG $0x0080c03d; BYTE $0x00   // cmpl         $32960, %eax
	LONG $0x0012850f; WORD $0x0000 // jne          LBB89_5, $18(%rip)
	WORD $0xf989                   // movl         %edi, %ecx
	LONG $0x000002b8; BYTE $0x00   // movl         $2, %eax
	WORD $0xe183; BYTE $0x1e       // andl         $30, %ecx
	LONG $0x0002840f; WORD $0x0000 // je           LBB89_5, $2(%rip)

LBB89_10:
	BYTE $0x5d // popq         %rbp
	BYTE $0xc3 // retq

LBB89_5:
	WORD $0xf889                   // movl         %edi, %eax
	LONG $0xc0c0f825; BYTE $0xc0   // andl         $-1061109512, %eax
	LONG $0x8080f03d; BYTE $0x80   // cmpl         $-2139062032, %eax
	LONG $0x0028850f; WORD $0x0000 // jne          LBB89_9, $40(%rip)
	WORD $0xf889                   // movl         %edi, %eax
	LONG $0x00300725; BYTE $0x00   // andl         $12295, %eax
	LONG $0x001b840f; WORD $0x0000 // je           LBB89_9, $27(%rip)
	LONG $0x000004b8; BYTE $0x00   // movl         $4, %eax
	LONG $0x04c7f640               // testb        $4, %dil
	LONG $0xffd0840f; WORD $0xffff // je           LBB89_10, $-48(%rip)
	LONG $0x3003e781; WORD $0x0000 // andl         $12291, %edi
	LONG $0xffc4840f; WORD $0xffff // je           LBB89_10, $-60(%rip)

LBB89_9:
	WORD $0xc031                               // xorl         %eax, %eax
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq
	LONG $0x00000000; WORD $0x0000; BYTE $0x00 // .p2align 4, 0x00

LCPI90_0:
	LONG $0x43300000 // .long 1127219200
	LONG $0x45300000 // .long 1160773632
	LONG $0x00000000 // .long 0
	LONG $0x00000000 // .long 0

LCPI90_1:
	QUAD $0x4330000000000000 // .quad 0x4330000000000000
	QUAD $0x4530000000000000 // .quad 0x4530000000000000

	// .p2align 3, 0x00
LCPI90_2:
	QUAD $0x430c6bf526340000 // .quad 0x430c6bf526340000

LCPI90_3:
	QUAD $0xc30c6bf526340000 // .quad 0xc30c6bf526340000

	// .p2align 4, 0x90
_is_atof_exact:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	LONG $0x6ef9e1c4; BYTE $0xc7               // vmovq        %rdi, %xmm0
	QUAD $0xffffffbf0562f9c5                   // vpunpckldq   $-65(%rip), %xmm0, %xmm0  /* LCPI90_0(%rip) */
	QUAD $0xffffffc7055cf9c5                   // vsubpd       $-57(%rip), %xmm0, %xmm0  /* LCPI90_1(%rip) */
	LONG $0x0579e3c4; WORD $0x01c8             // vpermilpd    $1, %xmm0, %xmm1
	LONG $0xc058f3c5                           // vaddsd       %xmm0, %xmm1, %xmm0
	LONG $0x0111fbc5                           // vmovsd       %xmm0, (%rcx)
	WORD $0x8948; BYTE $0xf8                   // movq         %rdi, %rax
	LONG $0x34e8c148                           // shrq         $52, %rax
	LONG $0x00ab850f; WORD $0x0000             // jne          LBB90_9, $171(%rip)
	WORD $0xeac1; BYTE $0x1f                   // shrl         $31, %edx
	LONG $0x3fe2c148                           // shlq         $63, %rdx
	WORD $0x0948; BYTE $0x11                   // orq          %rdx, (%rcx)
	WORD $0x01b0                               // movb         $1, %al
	WORD $0xf685                               // testl        %esi, %esi
	LONG $0x0095840f; WORD $0x0000             // je           LBB90_13, $149(%rip)
	WORD $0x8548; BYTE $0xff                   // testq        %rdi, %rdi
	LONG $0x008c840f; WORD $0x0000             // je           LBB90_13, $140(%rip)
	WORD $0x468d; BYTE $0xff                   // leal         $-1(%rsi), %eax
	WORD $0xf883; BYTE $0x24                   // cmpl         $36, %eax
	LONG $0x005f870f; WORD $0x0000             // ja           LBB90_10, $95(%rip)
	WORD $0xfe83; BYTE $0x17                   // cmpl         $23, %esi
	LONG $0x001c8c0f; WORD $0x0000             // jl           LBB90_6, $28(%rip)
	WORD $0xc683; BYTE $0xea                   // addl         $-22, %esi
	LONG $0x30058d48; WORD $0x009f; BYTE $0x00 // leaq         $40752(%rip), %rax  /* _P10_TAB(%rip) */
	LONG $0x0410fbc5; BYTE $0xf0               // vmovsd       (%rax,%rsi,8), %xmm0
	LONG $0x0159fbc5                           // vmulsd       (%rcx), %xmm0, %xmm0
	LONG $0x0111fbc5                           // vmovsd       %xmm0, (%rcx)
	LONG $0x000016be; BYTE $0x00               // movl         $22, %esi

LBB90_6:
	LONG $0x0110fbc5                           // vmovsd       (%rcx), %xmm0
	WORD $0xc031                               // xorl         %eax, %eax
	QUAD $0xffffff60052ef9c5                   // vucomisd     $-160(%rip), %xmm0  /* LCPI90_2(%rip) */
	LONG $0x0047870f; WORD $0x0000             // ja           LBB90_13, $71(%rip)
	QUAD $0xffffff5a0d10fbc5                   // vmovsd       $-166(%rip), %xmm1  /* LCPI90_3(%rip) */
	LONG $0xc82ef9c5                           // vucomisd     %xmm0, %xmm1
	LONG $0x0035870f; WORD $0x0000             // ja           LBB90_13, $53(%rip)
	WORD $0x6348; BYTE $0xc6                   // movslq       %esi, %rax
	LONG $0xee158d48; WORD $0x009e; BYTE $0x00 // leaq         $40686(%rip), %rdx  /* _P10_TAB(%rip) */
	LONG $0x0459fbc5; BYTE $0xc2               // vmulsd       (%rdx,%rax,8), %xmm0, %xmm0
	LONG $0x00001be9; BYTE $0x00               // jmp          LBB90_12, $27(%rip)

LBB90_10:
	WORD $0xfe83; BYTE $0xea                   // cmpl         $-22, %esi
	LONG $0x001a820f; WORD $0x0000             // jb           LBB90_9, $26(%rip)
	WORD $0xdef7                               // negl         %esi
	LONG $0xd2058d48; WORD $0x009e; BYTE $0x00 // leaq         $40658(%rip), %rax  /* _P10_TAB(%rip) */
	LONG $0x0110fbc5                           // vmovsd       (%rcx), %xmm0
	LONG $0x045efbc5; BYTE $0xf0               // vdivsd       (%rax,%rsi,8), %xmm0, %xmm0

LBB90_12:
	LONG $0x0111fbc5 // vmovsd       %xmm0, (%rcx)
	WORD $0x01b0     // movb         $1, %al

LBB90_13:
	BYTE $0x5d // popq         %rbp
	BYTE $0xc3 // retq

LBB90_9:
	WORD $0xc031                                           // xorl         %eax, %eax
	BYTE $0x5d                                             // popq         %rbp
	BYTE $0xc3                                             // retq
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

_fsm_push:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x6348; BYTE $0x0f                   // movslq       (%rdi), %rcx
	LONG $0xf9c0c748; WORD $0xffff; BYTE $0xff // movq         $-7, %rax
	LONG $0xfff98148; WORD $0x00ff; BYTE $0x00 // cmpq         $65535, %rcx
	LONG $0x000b8f0f; WORD $0x0000             // jg           LBB91_2, $11(%rip)
	WORD $0x418d; BYTE $0x01                   // leal         $1(%rcx), %eax
	WORD $0x0789                               // movl         %eax, (%rdi)
	LONG $0x048f7489                           // movl         %esi, $4(%rdi,%rcx,4)
	WORD $0xc031                               // xorl         %eax, %eax

LBB91_2:
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq
	QUAD $0x0000000000000000 // .p2align 4, 0x00

_POW10_M128_TAB:
	QUAD $0x1732c869cd60e453                           // .quad 1671618768450675795
	QUAD $0xfa8fd5a0081c0288                           // .quad -391859759250406776
	QUAD $0x0e7fbd42205c8eb4                           // .quad 1044761730281672372
	QUAD $0x9c99e58405118195                           // .quad -7162441377172586091
	QUAD $0x521fac92a873b261                           // .quad 5917638181279478369
	QUAD $0xc3c05ee50655e1fa                           // .quad -4341365703038344710
	QUAD $0xe6a797b752909ef9                           // .quad -1826324310255427847
	QUAD $0xf4b0769e47eb5a78                           // .quad -815021110370542984
	QUAD $0x9028bed2939a635c                           // .quad -8058981721550724260
	QUAD $0x98ee4a22ecf3188b                           // .quad -7426917221622671221
	QUAD $0x7432ee873880fc33                           // .quad 8373016921771146291
	QUAD $0xbf29dcaba82fdeae                           // .quad -4671960508600951122
	QUAD $0x113faa2906a13b3f                           // .quad 1242899115359157055
	QUAD $0xeef453d6923bd65a                           // .quad -1228264617323800998
	QUAD $0x4ac7ca59a424c507                           // .quad 5388497965526861063
	QUAD $0x9558b4661b6565f8                           // .quad -7685194413468457480
	QUAD $0x5d79bcf00d2df649                           // .quad 6735622456908576329
	QUAD $0xbaaee17fa23ebf76                           // .quad -4994806998408183946
	QUAD $0xf4d82c2c107973dc                           // .quad -803843965719055396
	QUAD $0xe95a99df8ace6f53                           // .quad -1631822729582842029
	QUAD $0x79071b9b8a4be869                           // .quad 8720969558280366185
	QUAD $0x91d8a02bb6c10594                           // .quad -7937418233630358124
	QUAD $0x9748e2826cdee284                           // .quad -7545532125859093884
	QUAD $0xb64ec836a47146f9                           // .quad -5310086773610559751
	QUAD $0xfd1b1b2308169b25                           // .quad -208543120469091547
	QUAD $0xe3e27a444d8d98b7                           // .quad -2025922448585811785
	QUAD $0xfe30f0f5e50e20f7                           // .quad -130339450293182217
	QUAD $0x8e6d8c6ab0787f72                           // .quad -8183730558007214222
	QUAD $0xbdbd2d335e51a935                           // .quad -4774610331293865675
	QUAD $0xb208ef855c969f4f                           // .quad -5617977179081629873
	QUAD $0xad2c788035e61382                           // .quad -5968262914117332094
	QUAD $0xde8b2b66b3bc4723                           // .quad -2410785455424649437
	QUAD $0x4c3bcb5021afcc31                           // .quad 5493207715531443249
	QUAD $0x8b16fb203055ac76                           // .quad -8424269937281487754
	QUAD $0xdf4abe242a1bbf3d                           // .quad -2356862392440471747
	QUAD $0xaddcb9e83c6b1793                           // .quad -5918651403174471789
	QUAD $0xd71d6dad34a2af0d                           // .quad -2946077990550589683
	QUAD $0xd953e8624b85dd78                           // .quad -2786628235540701832
	QUAD $0x8672648c40e5ad68                           // .quad -8758827771735200408
	QUAD $0x87d4713d6f33aa6b                           // .quad -8659171674854020501
	QUAD $0x680efdaf511f18c2                           // .quad 7498209359040551106
	QUAD $0xa9c98d8ccb009506                           // .quad -6212278575140137722
	QUAD $0x0212bd1b2566def2                           // .quad 149389661945913074
	QUAD $0xd43bf0effdc0ba48                           // .quad -3153662200497784248
	QUAD $0x014bb630f7604b57                           // .quad 93368538716195671
	QUAD $0x84a57695fe98746d                           // .quad -8888567902952197011
	QUAD $0x419ea3bd35385e2d                           // .quad 4728396691822632493
	QUAD $0xa5ced43b7e3e9188                           // .quad -6499023860262858360
	QUAD $0x52064cac828675b9                           // .quad 5910495864778290617
	QUAD $0xcf42894a5dce35ea                           // .quad -3512093806901185046
	QUAD $0x7343efebd1940993                           // .quad 8305745933913819539
	QUAD $0x818995ce7aa0e1b2                           // .quad -9112587656954322510
	QUAD $0x1014ebe6c5f90bf8                           // .quad 1158810380537498616
	QUAD $0xa1ebfb4219491a1f                           // .quad -6779048552765515233
	QUAD $0xd41a26e077774ef6                           // .quad -3163173042755514634
	QUAD $0xca66fa129f9b60a6                           // .quad -3862124672529506138
	QUAD $0x8920b098955522b4                           // .quad -8565652321871781196
	QUAD $0xfd00b897478238d0                           // .quad -215969822234494768
	QUAD $0x55b46e5f5d5535b0                           // .quad 6175682344898606512
	QUAD $0x9e20735e8cb16382                           // .quad -7052510166537641086
	QUAD $0xeb2189f734aa831d                           // .quad -1503769105731517667
	QUAD $0xc5a890362fddbc62                           // .quad -4203951689744663454
	QUAD $0xa5e9ec7501d523e4                           // .quad -6491397400591784988
	QUAD $0xf712b443bbd52b7b                           // .quad -643253593753441413
	QUAD $0x47b233c92125366e                           // .quad 5166248661484910190
	QUAD $0x9a6bb0aa55653b2d                           // .quad -7319562523736982739
	QUAD $0x999ec0bb696e840a                           // .quad -7377247228426025974
	QUAD $0xc1069cd4eabe89f8                           // .quad -4537767136243840520
	QUAD $0xc00670ea43ca250d                           // .quad -4609873017105144563
	QUAD $0xf148440a256e2c76                           // .quad -1060522901877412746
	QUAD $0x380406926a5e5728                           // .quad 4036358391950366504
	QUAD $0x96cd2a865764dbca                           // .quad -7580355841314464822
	QUAD $0xc605083704f5ecf2                           // .quad -4177924046916817678
	QUAD $0xbc807527ed3e12bc                           // .quad -4863758783215693124
	QUAD $0xf7864a44c633682e                           // .quad -610719040218634194
	QUAD $0xeba09271e88d976b                           // .quad -1468012460592228501
	QUAD $0x7ab3ee6afbe0211d                           // .quad 8841672636718129437
	QUAD $0x93445b8731587ea3                           // .quad -7835036815511224669
	QUAD $0x5960ea05bad82964                           // .quad 6440404777470273892
	QUAD $0xb8157268fdae9e4c                           // .quad -5182110000961642932
	QUAD $0x6fb92487298e33bd                           // .quad 8050505971837842365
	QUAD $0xe61acf033d1a45df                           // .quad -1865951482774665761
	QUAD $0xa5d3b6d479f8e056                           // .quad -6497648813669818282
	QUAD $0x8fd0c16206306bab                           // .quad -8083748704375247957
	QUAD $0x8f48a4899877186c                           // .quad -8122061017087272852
	QUAD $0xb3c4f1ba87bc8696                           // .quad -5492999862041672042
	QUAD $0x331acdabfe94de87                           // .quad 3682481783923072647
	QUAD $0xe0b62e2929aba83c                           // .quad -2254563809124702148
	QUAD $0x9ff0c08b7f1d0b14                           // .quad -6921820921902855404
	QUAD $0x8c71dcd9ba0b4925                           // .quad -8326631408344020699
	QUAD $0x07ecf0ae5ee44dd9                           // .quad 571095884476206553
	QUAD $0xaf8e5410288e1b6f                           // .quad -5796603242002637969
	QUAD $0xc9e82cd9f69d6150                           // .quad -3897816162832129712
	QUAD $0xdb71e91432b1a24a                           // .quad -2634068034075909558
	QUAD $0xbe311c083a225cd2                           // .quad -4741978110983775022
	QUAD $0x892731ac9faf056e                           // .quad -8563821548938525330
	QUAD $0x6dbd630a48aaf406                           // .quad 7907585416552444934
	QUAD $0xab70fe17c79ac6ca                           // .quad -6093090917745768758
	QUAD $0x092cbbccdad5b108                           // .quad 661109733835780360
	QUAD $0xd64d3d9db981787d                           // .quad -3004677628754823043
	QUAD $0x25bbf56008c58ea5                           // .quad 2719036592861056677
	QUAD $0x85f0468293f0eb4e                           // .quad -8795452545612846258
	QUAD $0xaf2af2b80af6f24e                           // .quad -5824576295778454962
	QUAD $0xa76c582338ed2621                           // .quad -6382629663588669919
	QUAD $0x1af5af660db4aee1                           // .quad 1942651667131707105
	QUAD $0xd1476e2c07286faa                           // .quad -3366601061058449494
	QUAD $0x50d98d9fc890ed4d                           // .quad 5825843310384704845
	QUAD $0x82cca4db847945ca                           // .quad -9021654690802612790
	QUAD $0xe50ff107bab528a0                           // .quad -1941067898873894752
	QUAD $0xa37fce126597973c                           // .quad -6665382345075878084
	QUAD $0x1e53ed49a96272c8                           // .quad 2185351144835019464
	QUAD $0xcc5fc196fefd7d0c                           // .quad -3720041912917459700
	QUAD $0x25e8e89c13bb0f7a                           // .quad 2731688931043774330
	QUAD $0xff77b1fcbebcdc4f                           // .quad -38366372719436721
	QUAD $0x77b191618c54e9ac                           // .quad 8624834609543440812
	QUAD $0x9faacf3df73609b1                           // .quad -6941508010590729807
	QUAD $0xd59df5b9ef6a2417                           // .quad -3054014793352862697
	QUAD $0xc795830d75038c1d                           // .quad -4065198994811024355
	QUAD $0x4b0573286b44ad1d                           // .quad 5405853545163697437
	QUAD $0xf97ae3d0d2446f25                           // .quad -469812725086392539
	QUAD $0x4ee367f9430aec32                           // .quad 5684501474941004850
	QUAD $0x9becce62836ac577                           // .quad -7211161980820077193
	QUAD $0x229c41f793cda73f                           // .quad 2493940825248868159
	QUAD $0xc2e801fb244576d5                           // .quad -4402266457597708587
	QUAD $0x6b43527578c1110f                           // .quad 7729112049988473103
	QUAD $0xf3a20279ed56d48a                           // .quad -891147053569747830
	QUAD $0x830a13896b78aaa9                           // .quad -9004363024039368023
	QUAD $0x9845418c345644d6                           // .quad -7474495936122174250
	QUAD $0x23cc986bc656d553                           // .quad 2579604275232953683
	QUAD $0xbe5691ef416bd60c                           // .quad -4731433901725329908
	QUAD $0x2cbfbe86b7ec8aa8                           // .quad 3224505344041192104
	QUAD $0xedec366b11c6cb8f                           // .quad -1302606358729274481
	QUAD $0x7bf7d71432f3d6a9                           // .quad 8932844867666826921
	QUAD $0x94b3a202eb1c3f39                           // .quad -7731658001846878407
	QUAD $0xdaf5ccd93fb0cc53                           // .quad -2669001970698630061
	QUAD $0xb9e08a83a5e34f07                           // .quad -5052886483881210105
	QUAD $0xd1b3400f8f9cff68                           // .quad -3336252463373287576
	QUAD $0xe858ad248f5c22c9                           // .quad -1704422086424124727
	QUAD $0x23100809b9c21fa1                           // .quad 2526528228819083169
	QUAD $0x91376c36d99995be                           // .quad -7982792831656159810
	QUAD $0xabd40a0c2832a78a                           // .quad -6065211750830921846
	QUAD $0xb58547448ffffb2d                           // .quad -5366805021142811859
	QUAD $0x16c90c8f323f516c                           // .quad 1641857348316123500
	QUAD $0xe2e69915b3fff9f9                           // .quad -2096820258001126919
	QUAD $0xae3da7d97f6792e3                           // .quad -5891368184943504669
	QUAD $0x8dd01fad907ffc3b                           // .quad -8228041688891786181
	QUAD $0x99cd11cfdf41779c                           // .quad -7364210231179380836
	QUAD $0xb1442798f49ffb4a                           // .quad -5673366092687344822
	QUAD $0x40405643d711d583                           // .quad 4629795266307937667
	QUAD $0xdd95317f31c7fa1d                           // .quad -2480021597431793123
	QUAD $0x482835ea666b2572                           // .quad 5199465050656154994
	QUAD $0x8a7d3eef7f1cfc52                           // .quad -8467542526035952558
	QUAD $0xda3243650005eecf                           // .quad -2724040723534582065
	QUAD $0xad1c8eab5ee43b66                           // .quad -5972742139117552794
	QUAD $0x90bed43e40076a82                           // .quad -8016736922845615486
	QUAD $0xd863b256369d4a40                           // .quad -2854241655469553088
	QUAD $0x5a7744a6e804a291                           // .quad 6518754469289960081
	QUAD $0x873e4f75e2224e68                           // .quad -8701430062309552536
	QUAD $0x711515d0a205cb36                           // .quad 8148443086612450102
	QUAD $0xa90de3535aaae202                           // .quad -6265101559459552766
	QUAD $0x0d5a5b44ca873e03                           // .quad 962181821410786819
	QUAD $0xd3515c2831559a83                           // .quad -3219690930897053053
	QUAD $0xe858790afe9486c2                           // .quad -1704479370831952190
	QUAD $0x8412d9991ed58091                           // .quad -8929835859451740015
	QUAD $0x626e974dbe39a872                           // .quad 7092772823314835570
	QUAD $0xa5178fff668ae0b6                           // .quad -6550608805887287114
	QUAD $0xfb0a3d212dc8128f                           // .quad -357406007711231345
	QUAD $0xce5d73ff402d98e3                           // .quad -3576574988931720989
	QUAD $0x7ce66634bc9d0b99                           // .quad 8999993282035256217
	QUAD $0x80fa687f881c7f8e                           // .quad -9152888395723407474
	QUAD $0x1c1fffc1ebc44e80                           // .quad 2026619565689294464
	QUAD $0xa139029f6a239f72                           // .quad -6829424476226871438
	QUAD $0xa327ffb266b56220                           // .quad -6690097579743157728
	QUAD $0xc987434744ac874e                           // .quad -3925094576856201394
	QUAD $0x4bf1ff9f0062baa8                           // .quad 5472436080603216552
	QUAD $0xfbe9141915d7a922                           // .quad -294682202642863838
	QUAD $0x6f773fc3603db4a9                           // .quad 8031958568804398249
	QUAD $0x9d71ac8fada6c9b5                           // .quad -7101705404292871755
	QUAD $0xcb550fb4384d21d3                           // .quad -3795109844276665901
	QUAD $0xc4ce17b399107c22                           // .quad -4265445736938701790
	QUAD $0x7e2a53a146606a48                           // .quad 9091170749936331336
	QUAD $0xf6019da07f549b2b                           // .quad -720121152745989333
	QUAD $0x2eda7444cbfc426d                           // .quad 3376138709496513133
	QUAD $0x99c102844f94e0fb                           // .quad -7367604748107325189
	QUAD $0xfa911155fefb5308                           // .quad -391512631556746488
	QUAD $0xc0314325637a1939                           // .quad -4597819916706768583
	QUAD $0x793555ab7eba27ca                           // .quad 8733981247408842698
	QUAD $0xf03d93eebc589f88                           // .quad -1135588877456072824
	QUAD $0x4bc1558b2f3458de                           // .quad 5458738279630526686
	QUAD $0x96267c7535b763b5                           // .quad -7627272076051127371
	QUAD $0x9eb1aaedfb016f16                           // .quad -7011635205744005354
	QUAD $0xbbb01b9283253ca2                           // .quad -4922404076636521310
	QUAD $0x465e15a979c1cadc                           // .quad 5070514048102157020
	QUAD $0xea9c227723ee8bcb                           // .quad -1541319077368263733
	QUAD $0x0bfacd89ec191ec9                           // .quad 863228270850154185
	QUAD $0x92a1958a7675175f                           // .quad -7880853450996246689
	QUAD $0xcef980ec671f667b                           // .quad -3532650679864695173
	QUAD $0xb749faed14125d36                           // .quad -5239380795317920458
	QUAD $0x82b7e12780e7401a                           // .quad -9027499368258256870
	QUAD $0xe51c79a85916f484                           // .quad -1937539975720012668
	QUAD $0xd1b2ecb8b0908810                           // .quad -3336344095947716592
	QUAD $0x8f31cc0937ae58d2                           // .quad -8128491512466089774
	QUAD $0x861fa7e6dcb4aa15                           // .quad -8782116138362033643
	QUAD $0xb2fe3f0b8599ef07                           // .quad -5548928372155224313
	QUAD $0x67a791e093e1d49a                           // .quad 7469098900757009562
	QUAD $0xdfbdcece67006ac9                           // .quad -2324474446766642487
	QUAD $0xe0c8bb2c5c6d24e0                           // .quad -2249342214667950880
	QUAD $0x8bd6a141006042bd                           // .quad -8370325556870233411
	QUAD $0x58fae9f773886e18                           // .quad 6411694268519837208
	QUAD $0xaecc49914078536d                           // .quad -5851220927660403859
	QUAD $0xaf39a475506a899e                           // .quad -5820440219632367202
	QUAD $0xda7f5bf590966848                           // .quad -2702340141148116920
	QUAD $0x6d8406c952429603                           // .quad 7891439908798240259
	QUAD $0x888f99797a5e012d                           // .quad -8606491615858654931
	QUAD $0xc8e5087ba6d33b83                           // .quad -3970758169284363389
	QUAD $0xaab37fd7d8f58178                           // .quad -6146428501395930760
	QUAD $0xfb1e4a9a90880a64                           // .quad -351761693178066332
	QUAD $0xd5605fcdcf32e1d6                           // .quad -3071349608317525546
	QUAD $0x5cf2eea09a55067f                           // .quad 6697677969404790399
	QUAD $0x855c3be0a17fcd26                           // .quad -8837122532839535322
	QUAD $0xf42faa48c0ea481e                           // .quad -851274575098787810
	QUAD $0xa6b34ad8c9dfc06f                           // .quad -6434717147622031249
	QUAD $0xf13b94daf124da26                           // .quad -1064093218873484762
	QUAD $0xd0601d8efc57b08b                           // .quad -3431710416100151157
	QUAD $0x76c53d08d6b70858                           // .quad 8558313775058847832
	QUAD $0x823c12795db6ce57                           // .quad -9062348037703676329
	QUAD $0x54768c4b0c64ca6e                           // .quad 6086206200396171886
	QUAD $0xa2cb1717b52481ed                           // .quad -6716249028702207507
	QUAD $0xa9942f5dcf7dfd09                           // .quad -6227300304786948855
	QUAD $0xcb7ddcdda26da268                           // .quad -3783625267450371480
	QUAD $0xd3f93b35435d7c4c                           // .quad -3172439362556298164
	QUAD $0xfe5d54150b090b02                           // .quad -117845565885576446
	QUAD $0xc47bc5014a1a6daf                           // .quad -4288617610811380305
	QUAD $0x9efa548d26e5a6e1                           // .quad -6991182506319567135
	QUAD $0x359ab6419ca1091b                           // .quad 3862600023340550427
	QUAD $0xc6b8e9b0709f109a                           // .quad -4127292114472071014
	QUAD $0xc30163d203c94b62                           // .quad -4395122007679087774
	QUAD $0xf867241c8cc6d4c0                           // .quad -547429124662700864
	QUAD $0x79e0de63425dcf1d                           // .quad 8782263791269039901
	QUAD $0x9b407691d7fc44f8                           // .quad -7259672230555269896
	QUAD $0x985915fc12f542e4                           // .quad -7468914334623251740
	QUAD $0xc21094364dfb5636                           // .quad -4462904269766699466
	QUAD $0x3e6f5b7b17b2939d                           // .quad 4498915137003099037
	QUAD $0xf294b943e17a2bc4                           // .quad -966944318780986428
	QUAD $0xa705992ceecf9c42                           // .quad -6411550076227838910
	QUAD $0x979cf3ca6cec5b5a                           // .quad -7521869226879198374
	QUAD $0x50c6ff782a838353                           // .quad 5820620459997365075
	QUAD $0xbd8430bd08277231                           // .quad -4790650515171610063
	QUAD $0xa4f8bf5635246428                           // .quad -6559282480285457368
	QUAD $0xece53cec4a314ebd                           // .quad -1376627125537124675
	QUAD $0x871b7795e136be99                           // .quad -8711237568605798759
	QUAD $0x940f4613ae5ed136                           // .quad -7777920981101784778
	QUAD $0x28e2557b59846e3f                           // .quad 2946011094524915263
	QUAD $0xb913179899f68584                           // .quad -5110715207949843068
	QUAD $0x331aeada2fe589cf                           // .quad 3682513868156144079
	QUAD $0xe757dd7ec07426e5                           // .quad -1776707991509915931
	QUAD $0x3ff0d2c85def7621                           // .quad 4607414176811284001
	QUAD $0x9096ea6f3848984f                           // .quad -8027971522334779313
	QUAD $0x0fed077a756b53a9                           // .quad 1147581702586717097
	QUAD $0xb4bca50b065abe63                           // .quad -5423278384491086237
	QUAD $0xd3e8495912c62894                           // .quad -3177208890193991532
	QUAD $0xe1ebce4dc7f16dfb                           // .quad -2167411962186469893
	QUAD $0x64712dd7abbbd95c                           // .quad 7237616480483531100
	QUAD $0x8d3360f09cf6e4bd                           // .quad -8272161504007625539
	QUAD $0xbd8d794d96aacfb3                           // .quad -4788037454677749837
	QUAD $0xb080392cc4349dec                           // .quad -5728515861582144020
	QUAD $0xecf0d7a0fc5583a0                           // .quad -1373360799919799392
	QUAD $0xdca04777f541c567                           // .quad -2548958808550292121
	QUAD $0xf41686c49db57244                           // .quad -858350499949874620
	QUAD $0x89e42caaf9491b60                           // .quad -8510628282985014432
	QUAD $0x311c2875c522ced5                           // .quad 3538747893490044629
	QUAD $0xac5d37d5b79b6239                           // .quad -6026599335303880135
	QUAD $0x7d633293366b828b                           // .quad 9035120885289943691
	QUAD $0xd77485cb25823ac7                           // .quad -2921563150702462265
	QUAD $0xae5dff9c02033197                           // .quad -5882264492762254953
	QUAD $0x86a8d39ef77164bc                           // .quad -8743505996830120772
	QUAD $0xd9f57f830283fdfc                           // .quad -2741144597525430788
	QUAD $0xa8530886b54dbdeb                           // .quad -6317696477610263061
	QUAD $0xd072df63c324fd7b                           // .quad -3426430746906788485
	QUAD $0xd267caa862a12d66                           // .quad -3285434578585440922
	QUAD $0x4247cb9e59f71e6d                           // .quad 4776009810824339053
	QUAD $0x8380dea93da4bc60                           // .quad -8970925639256982432
	QUAD $0x52d9be85f074e608                           // .quad 5970012263530423816
	QUAD $0xa46116538d0deb78                           // .quad -6601971030643840136
	QUAD $0x67902e276c921f8b                           // .quad 7462515329413029771
	QUAD $0xcd795be870516656                           // .quad -3640777769877412266
	QUAD $0x00ba1cd8a3db53b6                           // .quad 52386062455755702
	QUAD $0x806bd9714632dff6                           // .quad -9193015133814464522
	QUAD $0x80e8a40eccd228a4                           // .quad -9157889458785081180
	QUAD $0xa086cfcd97bf97f3                           // .quad -6879582898840692749
	QUAD $0x6122cd128006b2cd                           // .quad 6999382250228200141
	QUAD $0xc8a883c0fdaf7df0                           // .quad -3987792605123478032
	QUAD $0x796b805720085f81                           // .quad 8749227812785250177
	QUAD $0xfad2a4b13d1b5d6c                           // .quad -373054737976959636
	QUAD $0xcbe3303674053bb0                           // .quad -3755104653863994448
	QUAD $0x9cc3a6eec6311a63                           // .quad -7150688238876681629
	QUAD $0xbedbfc4411068a9c                           // .quad -4693880817329993060
	QUAD $0xc3f490aa77bd60fc                           // .quad -4326674280168464132
	QUAD $0xee92fb5515482d44                           // .quad -1255665003235103420
	QUAD $0xf4f1b4d515acb93b                           // .quad -796656831783192261
	QUAD $0x751bdd152d4d1c4a                           // .quad 8438581409832836170
	QUAD $0x991711052d8bf3c5                           // .quad -7415439547505577019
	QUAD $0xd262d45a78a0635d                           // .quad -3286831292991118499
	QUAD $0xbf5cd54678eef0b6                           // .quad -4657613415954583370
	QUAD $0x86fb897116c87c34                           // .quad -8720225134666286028
	QUAD $0xef340a98172aace4                           // .quad -1210330751515841308
	QUAD $0xd45d35e6ae3d4da0                           // .quad -3144297699952734816
	QUAD $0x9580869f0e7aac0e                           // .quad -7673985747338482674
	QUAD $0x8974836059cca109                           // .quad -8542058143368306423
	QUAD $0xbae0a846d2195712                           // .quad -4980796165745715438
	QUAD $0x2bd1a438703fc94b                           // .quad 3157485376071780683
	QUAD $0xe998d258869facd7                           // .quad -1614309188754756393
	QUAD $0x7b6306a34627ddcf                           // .quad 8890957387685944783
	QUAD $0x91ff83775423cc06                           // .quad -7926472270612804602
	QUAD $0x1a3bc84c17b1d542                           // .quad 1890324697752655170
	QUAD $0xb67f6455292cbf08                           // .quad -5296404319838617848
	QUAD $0x20caba5f1d9e4a93                           // .quad 2362905872190818963
	QUAD $0xe41f3d6a7377eeca                           // .quad -2008819381370884406
	QUAD $0x547eb47b7282ee9c                           // .quad 6088502188546649756
	QUAD $0x8e938662882af53e                           // .quad -8173041140997884610
	QUAD $0xe99e619a4f23aa43                           // .quad -1612744301171463613
	QUAD $0xb23867fb2a35b28d                           // .quad -5604615407819967859
	QUAD $0x6405fa00e2ec94d4                           // .quad 7207441660390446292
	QUAD $0xdec681f9f4c31f31                           // .quad -2394083241347571919
	QUAD $0xde83bc408dd3dd04                           // .quad -2412877989897052924
	QUAD $0x8b3c113c38f9f37e                           // .quad -8413831053483314306
	QUAD $0x9624ab50b148d445                           // .quad -7627783505798704059
	QUAD $0xae0b158b4738705e                           // .quad -5905602798426754978
	QUAD $0x3badd624dd9b0957                           // .quad 4300328673033783639
	QUAD $0xd98ddaee19068c76                           // .quad -2770317479606055818
	QUAD $0xe54ca5d70a80e5d6                           // .quad -1923980597781273130
	QUAD $0x87f8a8d4cfa417c9                           // .quad -8648977452394866743
	QUAD $0x5e9fcf4ccd211f4c                           // .quad 6818396289628184396
	QUAD $0xa9f6d30a038d1dbc                           // .quad -6199535797066195524
	QUAD $0x7647c3200069671f                           // .quad 8522995362035230495
	QUAD $0xd47487cc8470652b                           // .quad -3137733727905356501
	QUAD $0x29ecd9f40041e073                           // .quad 3021029092058325107
	QUAD $0x84c8d4dfd2c63f3b                           // .quad -8878612607581929669
	QUAD $0xf468107100525890                           // .quad -835399653354481520
	QUAD $0xa5fb0a17c777cf09                           // .quad -6486579741050024183
	QUAD $0x7182148d4066eeb4                           // .quad 8179122470161673908
	QUAD $0xcf79cc9db955c2cc                           // .quad -3496538657885142324
	QUAD $0xc6f14cd848405530                           // .quad -4111420493003729616
	QUAD $0x81ac1fe293d599bf                           // .quad -9102865688819295809
	QUAD $0xb8ada00e5a506a7c                           // .quad -5139275616254662020
	QUAD $0xa21727db38cb002f                           // .quad -6766896092596731857
	QUAD $0xa6d90811f0e4851c                           // .quad -6424094520318327524
	QUAD $0xca9cf1d206fdc03b                           // .quad -3846934097318526917
	QUAD $0x908f4a166d1da663                           // .quad -8030118150397909405
	QUAD $0xfd442e4688bd304a                           // .quad -196981603220770742
	QUAD $0x9a598e4e043287fe                           // .quad -7324666853212387330
	QUAD $0x9e4a9cec15763e2e                           // .quad -7040642529654063570
	QUAD $0x40eff1e1853f29fd                           // .quad 4679224488766679549
	QUAD $0xc5dd44271ad3cdba                           // .quad -4189117143640191558
	QUAD $0xd12bee59e68ef47c                           // .quad -3374341425896426372
	QUAD $0xf7549530e188c128                           // .quad -624710411122851544
	QUAD $0x82bb74f8301958ce                           // .quad -9026492418826348338
	QUAD $0x9a94dd3e8cf578b9                           // .quad -7307973034592864071
	QUAD $0xe36a52363c1faf01                           // .quad -2059743486678159615
	QUAD $0xc13a148e3032d6e7                           // .quad -4523280274813692185
	QUAD $0xdc44e6c3cb279ac1                           // .quad -2574679358347699519
	QUAD $0xf18899b1bc3f8ca1                           // .quad -1042414325089727327
	QUAD $0x29ab103a5ef8c0b9                           // .quad 3002511419460075705
	QUAD $0x96f5600f15a7b7e5                           // .quad -7569037980822161435
	QUAD $0x7415d448f6b6f0e7                           // .quad 8364825292752482535
	QUAD $0xbcb2b812db11a5de                           // .quad -4849611457600313890
	QUAD $0x111b495b3464ad21                           // .quad 1232659579085827361
	QUAD $0xebdf661791d60f56                           // .quad -1450328303573004458
	QUAD $0xcab10dd900beec34                           // .quad -3841273781498745804
	QUAD $0x936b9fcebb25c995                           // .quad -7823984217374209643
	QUAD $0x3d5d514f40eea742                           // .quad 4421779809981343554
	QUAD $0xb84687c269ef3bfb                           // .quad -5168294253290374149
	QUAD $0x0cb4a5a3112a5112                           // .quad 915538744049291538
	QUAD $0xe65829b3046b0afa                           // .quad -1848681798185579782
	QUAD $0x47f0e785eaba72ab                           // .quad 5183897733458195115
	QUAD $0x8ff71a0fe2c2e6dc                           // .quad -8072955151507069220
	QUAD $0x59ed216765690f56                           // .quad 6479872166822743894
	QUAD $0xb3f4e093db73a093                           // .quad -5479507920956448621
	QUAD $0x306869c13ec3532c                           // .quad 3488154190101041964
	QUAD $0xe0f218b8d25088b8                           // .quad -2237698882768172872
	QUAD $0x1e414218c73a13fb                           // .quad 2180096368813151227
	QUAD $0x8c974f7383725573                           // .quad -8316090829371189901
	QUAD $0xe5d1929ef90898fa                           // .quad -1886565557410948870
	QUAD $0xafbd2350644eeacf                           // .quad -5783427518286599473
	QUAD $0xdf45f746b74abf39                           // .quad -2358206946763686087
	QUAD $0xdbac6c247d62a583                           // .quad -2617598379430861437
	QUAD $0x6b8bba8c328eb783                           // .quad 7749492695127472003
	QUAD $0x894bc396ce5da772                           // .quad -8553528014785370254
	QUAD $0x066ea92f3f326564                           // .quad 463493832054564196
	QUAD $0xab9eb47c81f5114f                           // .quad -6080224000054324913
	QUAD $0xc80a537b0efefebd                           // .quad -4032318728359182659
	QUAD $0xd686619ba27255a2                           // .quad -2988593981640518238
	QUAD $0xbd06742ce95f5f36                           // .quad -4826042214438183114
	QUAD $0x8613fd0145877585                           // .quad -8785400266166405755
	QUAD $0x2c48113823b73704                           // .quad 3190819268807046916
	QUAD $0xa798fc4196e952e7                           // .quad -6370064314280619289
	QUAD $0xf75a15862ca504c5                           // .quad -623161932418579259
	QUAD $0xd17f3b51fca3a7a0                           // .quad -3350894374423386208
	QUAD $0x9a984d73dbe722fb                           // .quad -7307005235402693893
	QUAD $0x82ef85133de648c4                           // .quad -9011838011655698236
	QUAD $0xc13e60d0d2e0ebba                           // .quad -4522070525825979462
	QUAD $0xa3ab66580d5fdaf5                           // .quad -6653111496142234891
	QUAD $0x318df905079926a8                           // .quad 3570783879572301480
	QUAD $0xcc963fee10b7d1b3                           // .quad -3704703351750405709
	QUAD $0xfdf17746497f7052                           // .quad -148206168962011054
	QUAD $0xffbbcfe994e5c61f                           // .quad -19193171260619233
	QUAD $0xfeb6ea8bedefa633                           // .quad -92628855601256909
	QUAD $0x9fd561f1fd0f9bd3                           // .quad -6929524759678968877
	QUAD $0xfe64a52ee96b8fc0                           // .quad -115786069501571136
	QUAD $0xc7caba6e7c5382c8                           // .quad -4050219931171323192
	QUAD $0x3dfdce7aa3c673b0                           // .quad 4466953431550423984
	QUAD $0xf9bd690a1b68637b                           // .quad -451088895536766085
	QUAD $0x06bea10ca65c084e                           // .quad 486002885505321038
	QUAD $0x9c1661a651213e2d                           // .quad -7199459587351560659
	QUAD $0x486e494fcff30a62                           // .quad 5219189625309039202
	QUAD $0xc31bfa0fe5698db8                           // .quad -4387638465762062920
	QUAD $0x5a89dba3c3efccfa                           // .quad 6523987031636299002
	QUAD $0xf3e2f893dec3f126                           // .quad -872862063775190746
	QUAD $0xf89629465a75e01c                           // .quad -534194123654701028
	QUAD $0x986ddb5c6b3a76b7                           // .quad -7463067817500576073
	QUAD $0xf6bbb397f1135823                           // .quad -667742654568376285
	QUAD $0xbe89523386091465                           // .quad -4717148753448332187
	QUAD $0x746aa07ded582e2c                           // .quad 8388693718644305452
	QUAD $0xee2ba6c0678b597f                           // .quad -1284749923383027329
	QUAD $0xa8c2a44eb4571cdc                           // .quad -6286281471915778852
	QUAD $0x94db483840b717ef                           // .quad -7720497729755473937
	QUAD $0x92f34d62616ce413                           // .quad -7857851839894723565
	QUAD $0xba121a4650e4ddeb                           // .quad -5038936143766954517
	QUAD $0x77b020baf9c81d17                           // .quad 8624429273841147159
	QUAD $0xe896a0d7e51e1566                           // .quad -1686984161281305242
	QUAD $0x0ace1474dc1d122e                           // .quad 778582277723329070
	QUAD $0x915e2486ef32cd60                           // .quad -7971894128441897632
	QUAD $0x0d819992132456ba                           // .quad 973227847154161338
	QUAD $0xb5b5ada8aaff80b8                           // .quad -5353181642124984136
	QUAD $0x10e1fff697ed6c69                           // .quad 1216534808942701673
	QUAD $0xe3231912d5bf60e6                           // .quad -2079791034228842266
	QUAD $0xca8d3ffa1ef463c1                           // .quad -3851351762838199359
	QUAD $0x8df5efabc5979c8f                           // .quad -8217398424034108273
	QUAD $0xbd308ff8a6b17cb2                           // .quad -4814189703547749198
	QUAD $0xb1736b96b6fd83b3                           // .quad -5660062011615247437
	QUAD $0xac7cb3f6d05ddbde                           // .quad -6017737129434686498
	QUAD $0xddd0467c64bce4a0                           // .quad -2463391496091671392
	QUAD $0x6bcdf07a423aa96b                           // .quad 7768129340171790699
	QUAD $0x8aa22c0dbef60ee4                           // .quad -8457148712698376476
	QUAD $0x86c16c98d2c953c6                           // .quad -8736582398494813242
	QUAD $0xad4ab7112eb3929d                           // .quad -5959749872445582691
	QUAD $0xe871c7bf077ba8b7                           // .quad -1697355961263740745
	QUAD $0xd89d64d57a607744                           // .quad -2838001322129590460
	QUAD $0x11471cd764ad4972                           // .quad 1244995533423855986
	QUAD $0x87625f056c7c4a8b                           // .quad -8691279853972075893
	QUAD $0xd598e40d3dd89bcf                           // .quad -3055441601647567921
	QUAD $0xa93af6c6c79b5d2d                           // .quad -6252413799037706963
	QUAD $0x4aff1d108d4ec2c3                           // .quad 5404070034795315907
	QUAD $0xd389b47879823479                           // .quad -3203831230369745799
	QUAD $0xcedf722a585139ba                           // .quad -3539985255894009414
	QUAD $0x843610cb4bf160cb                           // .quad -8919923546622172981
	QUAD $0xc2974eb4ee658828                           // .quad -4424981569867511768
	QUAD $0xa54394fe1eedb8fe                           // .quad -6538218414850328322
	QUAD $0x733d226229feea32                           // .quad 8303831092947774002
	QUAD $0xce947a3da6a9273e                           // .quad -3561087000135522498
	QUAD $0x0806357d5a3f525f                           // .quad 578208414664970847
	QUAD $0x811ccc668829b887                           // .quad -9143208402725783417
	QUAD $0xca07c2dcb0cf26f7                           // .quad -3888925500096174345
	QUAD $0xa163ff802a3426a8                           // .quad -6817324484979841368
	QUAD $0xfc89b393dd02f0b5                           // .quad -249470856692830027
	QUAD $0xc9bcff6034c13052                           // .quad -3909969587797413806
	QUAD $0xbbac2078d443ace2                           // .quad -4923524589293425438
	QUAD $0xfc2c3f3841f17c67                           // .quad -275775966319379353
	QUAD $0xd54b944b84aa4c0d                           // .quad -3077202868308390899
	QUAD $0x9d9ba7832936edc0                           // .quad -7089889006590693952
	QUAD $0x0a9e795e65d4df11                           // .quad 765182433041899281
	QUAD $0xc5029163f384a931                           // .quad -4250675239810979535
	QUAD $0x4d4617b5ff4a16d5                           // .quad 5568164059729762005
	QUAD $0xf64335bcf065d37d                           // .quad -701658031336336515
	QUAD $0x504bced1bf8e4e45                           // .quad 5785945546544795205
	QUAD $0x99ea0196163fa42e                           // .quad -7356065297226292178
	QUAD $0xe45ec2862f71e1d6                           // .quad -1990940103673781802
	QUAD $0xc06481fb9bcf8d39                           // .quad -4583395603105477319
	QUAD $0x5d767327bb4e5a4c                           // .quad 6734696907262548556
	QUAD $0xf07da27a82c37088                           // .quad -1117558485454458744
	QUAD $0x3a6a07f8d510f86f                           // .quad 4209185567039092847
	QUAD $0x964e858c91ba2655                           // .quad -7616003081050118571
	QUAD $0x890489f70a55368b                           // .quad -8573576096483297653
	QUAD $0xbbe226efb628afea                           // .quad -4908317832885260310
	QUAD $0x2b45ac74ccea842e                           // .quad 3118087934678041646
	QUAD $0xeadab0aba3b2dbe5                           // .quad -1523711272679187483
	QUAD $0x3b0b8bc90012929d                           // .quad 4254647968387469981
	QUAD $0x92c8ae6b464fc96f                           // .quad -7869848573065574033
	QUAD $0x09ce6ebb40173744                           // .quad 706623942056949572
	QUAD $0xb77ada0617e3bbcb                           // .quad -5225624697904579637
	QUAD $0xcc420a6a101d0515                           // .quad -3728406090856200939
	QUAD $0xe55990879ddcaabd                           // .quad -1920344853953336643
	QUAD $0x9fa946824a12232d                           // .quad -6941939825212513491
	QUAD $0x8f57fa54c2a9eab6                           // .quad -8117744561361917258
	QUAD $0x47939822dc96abf9                           // .quad 5157633273766521849
	QUAD $0xb32df8e9f3546564                           // .quad -5535494683275008668
	QUAD $0x59787e2b93bc56f7                           // .quad 6447041592208152311
	QUAD $0xdff9772470297ebd                           // .quad -2307682335666372931
	QUAD $0x57eb4edb3c55b65a                           // .quad 6335244004343789146
	QUAD $0x8bfbea76c619ef36                           // .quad -8359830487432564938
	QUAD $0xede622920b6b23f1                           // .quad -1304317031425039375
	QUAD $0xaefae51477a06b03                           // .quad -5838102090863318269
	QUAD $0xe95fab368e45eced                           // .quad -1630396289281299219
	QUAD $0xdab99e59958885c4                           // .quad -2685941595151759932
	QUAD $0x11dbcb0218ebb414                           // .quad 1286845328412881940
	QUAD $0x88b402f7fd75539b                           // .quad -8596242524610931813
	QUAD $0xd652bdc29f26a119                           // .quad -3003129357911285479
	QUAD $0xaae103b5fcd2a881                           // .quad -6133617137336276863
	QUAD $0x4be76d3346f0495f                           // .quad 5469460339465668959
	QUAD $0xd59944a37c0752a2                           // .quad -3055335403242958174
	QUAD $0x6f70a4400c562ddb                           // .quad 8030098730593431003
	QUAD $0x857fcae62d8493a5                           // .quad -8827113654667930715
	QUAD $0xcb4ccd500f6bb952                           // .quad -3797434642040374958
	QUAD $0xa6dfbd9fb8e5b88e                           // .quad -6422206049907525490
	QUAD $0x7e2000a41346a7a7                           // .quad 9088264752731695015
	QUAD $0xd097ad07a71f26b2                           // .quad -3416071543957018958
	QUAD $0x8ed400668c0c28c8                           // .quad -8154892584824854328
	QUAD $0x825ecc24c873782f                           // .quad -9052573742614218705
	QUAD $0x728900802f0f32fa                           // .quad 8253128342678483706
	QUAD $0xa2f67f2dfa90563b                           // .quad -6704031159840385477
	QUAD $0x4f2b40a03ad2ffb9                           // .quad 5704724409920716729
	QUAD $0xcbb41ef979346bca                           // .quad -3768352931373093942
	QUAD $0xe2f610c84987bfa8                           // .quad -2092466524453879896
	QUAD $0xfea126b7d78186bc                           // .quad -98755145788979524
	QUAD $0x0dd9ca7d2df4d7c9                           // .quad 998051431430019017
	QUAD $0x9f24b832e6b0f436                           // .quad -6979250993759194058
	QUAD $0x91503d1c79720dbb                           // .quad -7975807747567252037
	QUAD $0xc6ede63fa05d3143                           // .quad -4112377723771604669
	QUAD $0x75a44c6397ce912a                           // .quad 8476984389250486570
	QUAD $0xf8a95fcf88747d94                           // .quad -528786136287117932
	QUAD $0xc986afbe3ee11aba                           // .quad -3925256793573221702
	QUAD $0x9b69dbe1b548ce7c                           // .quad -7248020362820530564
	QUAD $0xfbe85badce996168                           // .quad -294884973539139224
	QUAD $0xc24452da229b021b                           // .quad -4448339435098275301
	QUAD $0xfae27299423fb9c3                           // .quad -368606216923924029
	QUAD $0xf2d56790ab41c2a2                           // .quad -948738275445456222
	QUAD $0xdccd879fc967d41a                           // .quad -2536221894791146470
	QUAD $0x97c560ba6b0919a5                           // .quad -7510490449794491995
	QUAD $0x5400e987bbc1c920                           // .quad 6053094668365842720
	QUAD $0xbdb6b8e905cb600f                           // .quad -4776427043815727089
	QUAD $0x290123e9aab23b68                           // .quad 2954682317029915496
	QUAD $0xed246723473e3813                           // .quad -1358847786342270957
	QUAD $0xf9a0b6720aaf6521                           // .quad -459166561069996767
	QUAD $0x9436c0760c86e30b                           // .quad -7766808894105001205
	QUAD $0xf808e40e8d5b3e69                           // .quad -573958201337495959
	QUAD $0xb94470938fa89bce                           // .quad -5096825099203863602
	QUAD $0xb60b1d1230b20e04                           // .quad -5329133770099257852
	QUAD $0xe7958cb87392c2c2                           // .quad -1759345355577441598
	QUAD $0xb1c6f22b5e6f48c2                           // .quad -5636551615525730110
	QUAD $0x90bd77f3483bb9b9                           // .quad -8017119874876982855
	QUAD $0x1e38aeb6360b1af3                           // .quad 2177682517447613171
	QUAD $0xb4ecd5f01a4aa828                           // .quad -5409713825168840664
	QUAD $0x25c6da63c38de1b0                           // .quad 2722103146809516464
	QUAD $0xe2280b6c20dd5232                           // .quad -2150456263033662926
	QUAD $0x579c487e5a38ad0e                           // .quad 6313000485183335694
	QUAD $0x8d590723948a535f                           // .quad -8261564192037121185
	QUAD $0x2d835a9df0c6d851                           // .quad 3279564588051781713
	QUAD $0xb0af48ec79ace837                           // .quad -5715269221619013577
	QUAD $0xf8e431456cf88e65                           // .quad -512230283362660763
	QUAD $0xdcdb1b2798182244                           // .quad -2532400508596379068
	QUAD $0x1b8e9ecb641b58ff                           // .quad 1985699082112030975
	QUAD $0x8a08f0f8bf0f156b                           // .quad -8500279345513818773
	QUAD $0xe272467e3d222f3f                           // .quad -2129562165787349185
	QUAD $0xac8b2d36eed2dac5                           // .quad -6013663163464885563
	QUAD $0x5b0ed81dcc6abb0f                           // .quad 6561419329620589327
	QUAD $0xd7adf884aa879177                           // .quad -2905392935903719049
	QUAD $0x98e947129fc2b4e9                           // .quad -7428327965055601431
	QUAD $0x86ccbb52ea94baea                           // .quad -8733399612580906262
	QUAD $0x3f2398d747b36224                           // .quad 4549648098962661924
	QUAD $0xa87fea27a539e9a5                           // .quad -6305063497298744923
	QUAD $0x8eec7f0d19a03aad                           // .quad -8147997931578836307
	QUAD $0xd29fe4b18e88640e                           // .quad -3269643353196043250
	QUAD $0x1953cf68300424ac                           // .quad 1825030320404309164
	QUAD $0x83a3eeeef9153e89                           // .quad -8961056123388608887
	QUAD $0x5fa8c3423c052dd7                           // .quad 6892973918932774359
	QUAD $0xa48ceaaab75a8e2b                           // .quad -6589634135808373205
	QUAD $0x3792f412cb06794d                           // .quad 4004531380238580045
	QUAD $0xcdb02555653131b6                           // .quad -3625356651333078602
	QUAD $0xe2bbd88bbee40bd0                           // .quad -2108853905778275376
	QUAD $0x808e17555f3ebf11                           // .quad -9183376934724255983
	QUAD $0x5b6aceaeae9d0ec4                           // .quad 6587304654631931588
	QUAD $0xa0b19d2ab70e6ed6                           // .quad -6867535149977932074
	QUAD $0xf245825a5a445275                           // .quad -989241218564861323
	QUAD $0xc8de047564d20a8b                           // .quad -3972732919045027189
	QUAD $0xeed6e2f0f0d56712                           // .quad -1236551523206076654
	QUAD $0xfb158592be068d2e                           // .quad -354230130378896082
	QUAD $0x55464dd69685606b                           // .quad 6144684325637283947
	QUAD $0x9ced737bb6c4183d                           // .quad -7138922859127891907
	QUAD $0xaa97e14c3c26b886                           // .quad -6154202648235558778
	QUAD $0xc428d05aa4751e4c                           // .quad -4311967555482476980
	QUAD $0xd53dd99f4b3066a8                           // .quad -3081067291867060568
	QUAD $0xf53304714d9265df                           // .quad -778273425925708321
	QUAD $0xe546a8038efe4029                           // .quad -1925667057416912855
	QUAD $0x993fe2c6d07b7fab                           // .quad -7403949918844649557
	QUAD $0xde98520472bdd033                           // .quad -2407083821771141069
	QUAD $0xbf8fdb78849a5f96                           // .quad -4643251380128424042
	QUAD $0x963e66858f6d4440                           // .quad -7620540795641314240
	QUAD $0xef73d256a5c0f77c                           // .quad -1192378206733142148
	QUAD $0xdde7001379a44aa8                           // .quad -2456994988062127448
	QUAD $0x95a8637627989aad                           // .quad -7662765406849295699
	QUAD $0x5560c018580d5d52                           // .quad 6152128301777116498
	QUAD $0xbb127c53b17ec159                           // .quad -4966770740134231719
	QUAD $0xaab8f01e6e10b4a6                           // .quad -6144897678060768090
	QUAD $0xe9d71b689dde71af                           // .quad -1596777406740401745
	QUAD $0xcab3961304ca70e8                           // .quad -3840561048787980056
	QUAD $0x9226712162ab070d                           // .quad -7915514906853832947
	QUAD $0x3d607b97c5fd0d22                           // .quad 4422670725869800738
	QUAD $0xb6b00d69bb55c8d1                           // .quad -5282707615139903279
	QUAD $0x8cb89a7db77c506a                           // .quad -8306719647944912790
	QUAD $0xe45c10c42a2b3b05                           // .quad -1991698500497491195
	QUAD $0x77f3608e92adb242                           // .quad 8643358275316593218
	QUAD $0x8eb98a7a9a5b04e3                           // .quad -8162340590452013853
	QUAD $0x55f038b237591ed3                           // .quad 6192511825718353619
	QUAD $0xb267ed1940f1c61c                           // .quad -5591239719637629412
	QUAD $0x6b6c46dec52f6688                           // .quad 7740639782147942024
	QUAD $0xdf01e85f912e37a3                           // .quad -2377363631119648861
	QUAD $0x2323ac4b3b3da015                           // .quad 2532056854628769813
	QUAD $0x8b61313bbabce2c6                           // .quad -8403381297090862394
	QUAD $0xabec975e0a0d081a                           // .quad -6058300968568813542
	QUAD $0xae397d8aa96c1b77                           // .quad -5892540602936190089
	QUAD $0x96e7bd358c904a21                           // .quad -7572876210711016927
	QUAD $0xd9c7dced53c72255                           // .quad -2753989735242849707
	QUAD $0x7e50d64177da2e54                           // .quad 9102010423587778132
	QUAD $0x881cea14545c7575                           // .quad -8638772612167862923
	QUAD $0xdde50bd1d5d0b9e9                           // .quad -2457545025797441047
	QUAD $0xaa242499697392d2                           // .quad -6186779746782440750
	QUAD $0x955e4ec64b44e864                           // .quad -7683617300674189212
	QUAD $0xd4ad2dbfc3d07787                           // .quad -3121788665050663033
	QUAD $0xbd5af13bef0b113e                           // .quad -4802260812921368258
	QUAD $0x84ec3c97da624ab4                           // .quad -8868646943297746252
	QUAD $0xecb1ad8aeacdd58e                           // .quad -1391139997724322418
	QUAD $0xa6274bbdd0fadd61                           // .quad -6474122660694794911
	QUAD $0x67de18eda5814af2                           // .quad 7484447039699372786
	QUAD $0xcfb11ead453994ba                           // .quad -3480967307441105734
	QUAD $0x80eacf948770ced7                           // .quad -9157278655470055721
	QUAD $0x81ceb32c4b43fcf4                           // .quad -9093133594791772940
	QUAD $0xa1258379a94d028d                           // .quad -6834912300910181747
	QUAD $0xa2425ff75e14fc31                           // .quad -6754730975062328271
	QUAD $0x096ee45813a04330                           // .quad 679731660717048624
	QUAD $0xcad2f7f5359a3b3e                           // .quad -3831727700400522434
	QUAD $0x8bca9d6e188853fc                           // .quad -8373707460958465028
	QUAD $0xfd87b5f28300ca0d                           // .quad -177973607073265139
	QUAD $0x775ea264cf55347d                           // .quad 8601490892183123069
	QUAD $0x9e74d1b791e07e48                           // .quad -7028762532061872568
	QUAD $0x95364afe032a819d                           // .quad -7694880458480647779
	QUAD $0xc612062576589dda                           // .quad -4174267146649952806
	QUAD $0x3a83ddbd83f52204                           // .quad 4216457482181353988
	QUAD $0xf79687aed3eec551                           // .quad -606147914885053103
	QUAD $0xc4926a9672793542                           // .quad -4282243101277735614
	QUAD $0x9abe14cd44753b52                           // .quad -7296371474444240046
	QUAD $0x75b7053c0f178293                           // .quad 8482254178684994195
	QUAD $0xc16d9a0095928a27                           // .quad -4508778324627912153
	QUAD $0x5324c68b12dd6338                           // .quad 5991131704928854840
	QUAD $0xf1c90080baf72cb1                           // .quad -1024286887357502287
	QUAD $0xd3f6fc16ebca5e03                           // .quad -3173071712060547581
	QUAD $0x971da05074da7bee                           // .quad -7557708332239520786
	QUAD $0x88f4bb1ca6bcf584                           // .quad -8578025658503072380
	QUAD $0xbce5086492111aea                           // .quad -4835449396872013078
	QUAD $0x2b31e9e3d06c32e5                           // .quad 3112525982153323237
	QUAD $0xec1e4a7db69561a5                           // .quad -1432625727662628443
	QUAD $0x3aff322e62439fcf                           // .quad 4251171748059520975
	QUAD $0x9392ee8e921d5d07                           // .quad -7812920107430224633
	QUAD $0x09befeb9fad487c2                           // .quad 702278666647013314
	QUAD $0xb877aa3236a4b449                           // .quad -5154464115860392887
	QUAD $0x4c2ebe687989a9b3                           // .quad 5489534351736154547
	QUAD $0xe69594bec44de15b                           // .quad -1831394126398103205
	QUAD $0x0f9d37014bf60a10                           // .quad 1125115960621402640
	QUAD $0x901d7cf73ab0acd9                           // .quad -8062150356639896359
	QUAD $0x538484c19ef38c94                           // .quad 6018080969204141204
	QUAD $0xb424dc35095cd80f                           // .quad -5466001927372482545
	QUAD $0x2865a5f206b06fb9                           // .quad 2910915193077788601
	QUAD $0xe12e13424bb40e13                           // .quad -2220816390788215277
	QUAD $0xf93f87b7442e45d3                           // .quad -486521013540076077
	QUAD $0x8cbccc096f5088cb                           // .quad -8305539271883716405
	QUAD $0xf78f69a51539d748                           // .quad -608151266925095096
	QUAD $0xafebff0bcb24aafe                           // .quad -5770238071427257602
	QUAD $0xb573440e5a884d1b                           // .quad -5371875102083756773
	QUAD $0xdbe6fecebdedd5be                           // .quad -2601111570856684098
	QUAD $0x31680a88f8953030                           // .quad 3560107088838733872
	QUAD $0x89705f4136b4a597                           // .quad -8543223759426509417
	QUAD $0xfdc20d2b36ba7c3d                           // .quad -161552157378970563
	QUAD $0xabcc77118461cefc                           // .quad -6067343680855748868
	QUAD $0x3d32907604691b4c                           // .quad 4409745821703674700
	QUAD $0xd6bf94d5e57a42bc                           // .quad -2972493582642298180
	QUAD $0xa63f9a49c2c1b10f                           // .quad -6467280898289979121
	QUAD $0x8637bd05af6c69b5                           // .quad -8775337516792518219
	QUAD $0x0fcf80dc33721d53                           // .quad 1139270913992301907
	QUAD $0xa7c5ac471b478423                           // .quad -6357485877563259869
	QUAD $0xd3c36113404ea4a8                           // .quad -3187597375937010520
	QUAD $0xd1b71758e219652b                           // .quad -3335171328526686933
	QUAD $0x645a1cac083126e9                           // .quad 7231123676894144233
	QUAD $0x83126e978d4fdf3b                           // .quad -9002011107970261189
	QUAD $0x3d70a3d70a3d70a3                           // .quad 4427218577690292387
	QUAD $0xa3d70a3d70a3d70a                           // .quad -6640827866535438582
	QUAD $0xcccccccccccccccc; QUAD $0xcccccccccccccccc // .space 16, '\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc'
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0x8000000000000000                           // .quad -9223372036854775808
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xa000000000000000                           // .quad -6917529027641081856
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xc800000000000000                           // .quad -4035225266123964416
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xfa00000000000000                           // .quad -432345564227567616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0x9c40000000000000                           // .quad -7187745005283311616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xc350000000000000                           // .quad -4372995238176751616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xf424000000000000                           // .quad -854558029293551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0x9896800000000000                           // .quad -7451627795949551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xbebc200000000000                           // .quad -4702848726509551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xee6b280000000000                           // .quad -1266874889709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0x9502f90000000000                           // .quad -7709325833709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xba43b74000000000                           // .quad -5024971273709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xe8d4a51000000000                           // .quad -1669528073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0x9184e72a00000000                           // .quad -7960984073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xb5e620f480000000                           // .quad -5339544073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xe35fa931a0000000                           // .quad -2062744073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0x8e1bc9bf04000000                           // .quad -8206744073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xb1a2bc2ec5000000                           // .quad -5646744073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xde0b6b3a76400000                           // .quad -2446744073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0x8ac7230489e80000                           // .quad -8446744073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xad78ebc5ac620000                           // .quad -5946744073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xd8d726b7177a8000                           // .quad -2821744073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0x878678326eac9000                           // .quad -8681119073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xa968163f0a57b400                           // .quad -6239712823709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xd3c21bcecceda100                           // .quad -3187955011209551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0x84595161401484a0                           // .quad -8910000909647051616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xa56fa5b99019a5c8                           // .quad -6525815118631426616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xcecb8f27f4200f3a                           // .quad -3545582879861895366
	QUAD $0x4000000000000000                           // .quad 4611686018427387904
	QUAD $0x813f3978f8940984                           // .quad -9133518327554766460
	QUAD $0x5000000000000000                           // .quad 5764607523034234880
	QUAD $0xa18f07d736b90be5                           // .quad -6805211891016070171
	QUAD $0xa400000000000000                           // .quad -6629298651489370112
	QUAD $0xc9f2c9cd04674ede                           // .quad -3894828845342699810
	QUAD $0x4d00000000000000                           // .quad 5548434740920451072
	QUAD $0xfc6f7c4045812296                           // .quad -256850038250986858
	QUAD $0xf020000000000000                           // .quad -1143914305352105984
	QUAD $0x9dc5ada82b70b59d                           // .quad -7078060301547948643
	QUAD $0x6c28000000000000                           // .quad 7793479155164643328
	QUAD $0xc5371912364ce305                           // .quad -4235889358507547899
	QUAD $0xc732000000000000                           // .quad -4093209111326359552
	QUAD $0xf684df56c3e01bc6                           // .quad -683175679707046970
	QUAD $0x3c7f400000000000                           // .quad 4359273333062107136
	QUAD $0x9a130b963a6c115c                           // .quad -7344513827457986212
	QUAD $0x4b9f100000000000                           // .quad 5449091666327633920
	QUAD $0xc097ce7bc90715b3                           // .quad -4568956265895094861
	QUAD $0x1e86d40000000000                           // .quad 2199678564482154496
	QUAD $0xf0bdc21abb48db20                           // .quad -1099509313941480672
	QUAD $0x1314448000000000                           // .quad 1374799102801346560
	QUAD $0x96769950b50d88f4                           // .quad -7604722348854507276
	QUAD $0x17d955a000000000                           // .quad 1718498878501683200
	QUAD $0xbc143fa4e250eb31                           // .quad -4894216917640746191
	QUAD $0x5dcfab0800000000                           // .quad 6759809616554491904
	QUAD $0xeb194f8e1ae525fd                           // .quad -1506085128623544835
	QUAD $0x5aa1cae500000000                           // .quad 6530724019560251392
	QUAD $0x92efd1b8d0cf37be                           // .quad -7858832233030797378
	QUAD $0xf14a3d9e40000000                           // .quad -1059967012404461568
	QUAD $0xb7abc627050305ad                           // .quad -5211854272861108819
	QUAD $0x6d9ccd05d0000000                           // .quad 7898413271349198848
	QUAD $0xe596b7b0c643c719                           // .quad -1903131822648998119
	QUAD $0xe4820023a2000000                           // .quad -1981020733047832576
	QUAD $0x8f7e32ce7bea5c6f                           // .quad -8106986416796705681
	QUAD $0xdda2802c8a800000                           // .quad -2476275916309790720
	QUAD $0xb35dbf821ae4f38b                           // .quad -5522047002568494197
	QUAD $0xd50b2037ad200000                           // .quad -3095344895387238400
	QUAD $0xe0352f62a19e306e                           // .quad -2290872734783229842
	QUAD $0x4526f422cc340000                           // .quad 4982938468024057856
	QUAD $0x8c213d9da502de45                           // .quad -8349324486880600507
	QUAD $0x9670b12b7f410000                           // .quad -7606384970252091392
	QUAD $0xaf298d050e4395d6                           // .quad -5824969590173362730
	QUAD $0x3c0cdd765f114000                           // .quad 4327076842467049472
	QUAD $0xdaf3f04651d47b4c                           // .quad -2669525969289315508
	QUAD $0xa5880a69fb6ac800                           // .quad -6518949010312869888
	QUAD $0x88d8762bf324cd0f                           // .quad -8585982758446904049
	QUAD $0x8eea0d047a457a00                           // .quad -8148686262891087360
	QUAD $0xab0e93b6efee0053                           // .quad -6120792429631242157
	QUAD $0x72a4904598d6d880                           // .quad 8260886245095692416
	QUAD $0xd5d238a4abe98068                           // .quad -3039304518611664792
	QUAD $0x47a6da2b7f864750                           // .quad 5163053903184807760
	QUAD $0x85a36366eb71f041                           // .quad -8817094351773372351
	QUAD $0x999090b65f67d924                           // .quad -7381240676301154012
	QUAD $0xa70c3c40a64e6c51                           // .quad -6409681921289327535
	QUAD $0xfff4b4e3f741cf6d                           // .quad -3178808521666707
	QUAD $0xd0cf4b50cfe20765                           // .quad -3400416383184271515
	QUAD $0xbff8f10e7a8921a4                           // .quad -4613672773753429596
	QUAD $0x82818f1281ed449f                           // .quad -9042789267131251553
	QUAD $0xaff72d52192b6a0d                           // .quad -5767090967191786995
	QUAD $0xa321f2d7226895c7                           // .quad -6691800565486676537
	QUAD $0x9bf4f8a69f764490                           // .quad -7208863708989733744
	QUAD $0xcbea6f8ceb02bb39                           // .quad -3753064688430957767
	QUAD $0x02f236d04753d5b4                           // .quad 212292400617608628
	QUAD $0xfee50b7025c36a08                           // .quad -79644842111309304
	QUAD $0x01d762422c946590                           // .quad 132682750386005392
	QUAD $0x9f4f2726179a2245                           // .quad -6967307053960650171
	QUAD $0x424d3ad2b7b97ef5                           // .quad 4777539456409894645
	QUAD $0xc722f0ef9d80aad6                           // .quad -4097447799023424810
	QUAD $0xd2e0898765a7deb2                           // .quad -3251447716342407502
	QUAD $0xf8ebad2b84e0d58b                           // .quad -510123730351893109
	QUAD $0x63cc55f49f88eb2f                           // .quad 7191217214140771119
	QUAD $0x9b934c3b330c8577                           // .quad -7236356359111015049
	QUAD $0x3cbf6b71c76b25fb                           // .quad 4377335499248575995
	QUAD $0xc2781f49ffcfa6d5                           // .quad -4433759430461380907
	QUAD $0x8bef464e3945ef7a                           // .quad -8363388681221443718
	QUAD $0xf316271c7fc3908a                           // .quad -930513269649338230
	QUAD $0x97758bf0e3cbb5ac                           // .quad -7532960934977096276
	QUAD $0x97edd871cfda3a56                           // .quad -7499099821171918250
	QUAD $0x3d52eeed1cbea317                           // .quad 4418856886560793367
	QUAD $0xbde94e8e43d0c8ec                           // .quad -4762188758037509908
	QUAD $0x4ca7aaa863ee4bdd                           // .quad 5523571108200991709
	QUAD $0xed63a231d4c4fb27                           // .quad -1341049929119499481
	QUAD $0x8fe8caa93e74ef6a                           // .quad -8076983103442849942
	QUAD $0x945e455f24fb1cf8                           // .quad -7755685233340769032
	QUAD $0xb3e2fd538e122b44                           // .quad -5484542860876174524
	QUAD $0xb975d6b6ee39e436                           // .quad -5082920523248573386
	QUAD $0x60dbbca87196b616                           // .quad 6979379479186945558
	QUAD $0xe7d34c64a9c85d44                           // .quad -1741964635633328828
	QUAD $0xbc8955e946fe31cd                           // .quad -4861259862362934835
	QUAD $0x90e40fbeea1d3a4a                           // .quad -8006256924911912374
	QUAD $0x6babab6398bdbe41                           // .quad 7758483227328495169
	QUAD $0xb51d13aea4a488dd                           // .quad -5396135137712502563
	QUAD $0xc696963c7eed2dd1                           // .quad -4136954021121544751
	QUAD $0xe264589a4dcdab14                           // .quad -2133482903713240300
	QUAD $0xfc1e1de5cf543ca2                           // .quad -279753253987271518
	QUAD $0x8d7eb76070a08aec                           // .quad -8250955842461857044
	QUAD $0x3b25a55f43294bcb                           // .quad 4261994450943298507
	QUAD $0xb0de65388cc8ada8                           // .quad -5702008784649933400
	QUAD $0x49ef0eb713f39ebe                           // .quad 5327493063679123134
	QUAD $0xdd15fe86affad912                           // .quad -2515824962385028846
	QUAD $0x6e3569326c784337                           // .quad 7941369183226839863
	QUAD $0x8a2dbf142dfcc7ab                           // .quad -8489919629131724885
	QUAD $0x49c2c37f07965404                           // .quad 5315025460606161924
	QUAD $0xacb92ed9397bf996                           // .quad -6000713517987268202
	QUAD $0xdc33745ec97be906                           // .quad -2579590211097073402
	QUAD $0xd7e77a8f87daf7fb                           // .quad -2889205879056697349
	QUAD $0x69a028bb3ded71a3                           // .quad 7611128154919104931
	QUAD $0x86f0ac99b4e8dafd                           // .quad -8723282702051517699
	QUAD $0xc40832ea0d68ce0c                           // .quad -4321147861633282548
	QUAD $0xa8acd7c0222311bc                           // .quad -6292417359137009220
	QUAD $0xf50a3fa490c30190                           // .quad -789748808614215280
	QUAD $0xd2d80db02aabd62b                           // .quad -3253835680493873621
	QUAD $0x792667c6da79e0fa                           // .quad 8729779031470891258
	QUAD $0x83c7088e1aab65db                           // .quad -8951176327949752869
	QUAD $0x577001b891185938                           // .quad 6300537770911226168
	QUAD $0xa4b8cab1a1563f52                           // .quad -6577284391509803182
	QUAD $0xed4c0226b55e6f86                           // .quad -1347699823215743098
	QUAD $0xcde6fd5e09abcf26                           // .quad -3609919470959866074
	QUAD $0x544f8158315b05b4                           // .quad 6075216638131242420
	QUAD $0x80b05e5ac60b6178                           // .quad -9173728696990998152
	QUAD $0x696361ae3db1c721                           // .quad 7594020797664053025
	QUAD $0xa0dc75f1778e39d6                           // .quad -6855474852811359786
	QUAD $0x03bc3a19cd1e38e9                           // .quad 269153960225290473
	QUAD $0xc913936dd571c84c                           // .quad -3957657547586811828
	QUAD $0x04ab48a04065c723                           // .quad 336442450281613091
	QUAD $0xfb5878494ace3a5f                           // .quad -335385916056126881
	QUAD $0x62eb0d64283f9c76                           // .quad 7127805559067090038
	QUAD $0x9d174b2dcec0e47b                           // .quad -7127145225176161157
	QUAD $0x3ba5d0bd324f8394                           // .quad 4298070930406474644
	QUAD $0xc45d1df942711d9a                           // .quad -4297245513042813542
	QUAD $0xca8f44ec7ee36479                           // .quad -3850783373846682503
	QUAD $0xf5746577930d6500                           // .quad -759870872876129024
	QUAD $0x7e998b13cf4e1ecb                           // .quad 9122475437414293195
	QUAD $0x9968bf6abbe85f20                           // .quad -7392448323188662496
	QUAD $0x9e3fedd8c321a67e                           // .quad -7043649776941685122
	QUAD $0xbfc2ef456ae276e8                           // .quad -4628874385558440216
	QUAD $0xc5cfe94ef3ea101e                           // .quad -4192876202749718498
	QUAD $0xefb3ab16c59b14a2                           // .quad -1174406963520662366
	QUAD $0xbba1f1d158724a12                           // .quad -4926390635932268014
	QUAD $0x95d04aee3b80ece5                           // .quad -7651533379841495835
	QUAD $0x2a8a6e45ae8edc97                           // .quad 3065383741939440791
	QUAD $0xbb445da9ca61281f                           // .quad -4952730706374481889
	QUAD $0xf52d09d71a3293bd                           // .quad -779956341003086915
	QUAD $0xea1575143cf97226                           // .quad -1579227364540714458
	QUAD $0x593c2626705f9c56                           // .quad 6430056314514152534
	QUAD $0x924d692ca61be758                           // .quad -7904546130479028392
	QUAD $0x6f8b2fb00c77836c                           // .quad 8037570393142690668
	QUAD $0xb6e0c377cfa2e12e                           // .quad -5268996644671397586
	QUAD $0x0b6dfb9c0f956447                           // .quad 823590954573587527
	QUAD $0xe498f455c38b997a                           // .quad -1974559787411859078
	QUAD $0x4724bd4189bd5eac                           // .quad 5126430365035880108
	QUAD $0x8edf98b59a373fec                           // .quad -8151628894773493780
	QUAD $0x58edec91ec2cb657                           // .quad 6408037956294850135
	QUAD $0xb2977ee300c50fe7                           // .quad -5577850100039479321
	QUAD $0x2f2967b66737e3ed                           // .quad 3398361426941174765
	QUAD $0xdf3d5e9bc0f653e1                           // .quad -2360626606621961247
	QUAD $0xbd79e0d20082ee74                           // .quad -4793553135802847628
	QUAD $0x8b865b215899f46c                           // .quad -8392920656779807636
	QUAD $0xecd8590680a3aa11                           // .quad -1380255401326171631
	QUAD $0xae67f1e9aec07187                           // .quad -5879464802547371641
	QUAD $0xe80e6f4820cc9495                           // .quad -1725319251657714539
	QUAD $0xda01ee641a708de9                           // .quad -2737644984756826647
	QUAD $0x3109058d147fdcdd                           // .quad 3533361486141316317
	QUAD $0x884134fe908658b2                           // .quad -8628557143114098510
	QUAD $0xbd4b46f0599fd415                           // .quad -4806670179178130411
	QUAD $0xaa51823e34a7eede                           // .quad -6174010410465235234
	QUAD $0x6c9e18ac7007c91a                           // .quad 7826720331309500698
	QUAD $0xd4e5e2cdc1d1ea96                           // .quad -3105826994654156138
	QUAD $0x03e2cf6bc604ddb0                           // .quad 280014188641050032
	QUAD $0x850fadc09923329e                           // .quad -8858670899299929442
	QUAD $0x84db8346b786151c                           // .quad -8873354301053463268
	QUAD $0xa6539930bf6bff45                           // .quad -6461652605697523899
	QUAD $0xe612641865679a63                           // .quad -1868320839462053277
	QUAD $0xcfe87f7cef46ff16                           // .quad -3465379738694516970
	QUAD $0x4fcb7e8f3f60c07e                           // .quad 5749828502977298558
	QUAD $0x81f14fae158c5f6e                           // .quad -9083391364325154962
	QUAD $0xe3be5e330f38f09d                           // .quad -2036086408133152611
	QUAD $0xa26da3999aef7749                           // .quad -6742553186979055799
	QUAD $0x5cadf5bfd3072cc5                           // .quad 6678264026688335045
	QUAD $0xcb090c8001ab551c                           // .quad -3816505465296431844
	QUAD $0x73d9732fc7c8f7f6                           // .quad 8347830033360418806
	QUAD $0xfdcb4fa002162a63                           // .quad -158945813193151901
	QUAD $0x2867e7fddcdd9afa                           // .quad 2911550761636567802
	QUAD $0x9e9f11c4014dda7e                           // .quad -7016870160886801794
	QUAD $0xb281e1fd541501b8                           // .quad -5583933584809066056
	QUAD $0xc646d63501a1511d                           // .quad -4159401682681114339
	QUAD $0x1f225a7ca91a4226                           // .quad 2243455055843443238
	QUAD $0xf7d88bc24209a565                           // .quad -587566084924005019
	QUAD $0x3375788de9b06958                           // .quad 3708002419115845976
	QUAD $0x9ae757596946075f                           // .quad -7284757830718584993
	QUAD $0x0052d6b1641c83ae                           // .quad 23317005467419566
	QUAD $0xc1a12d2fc3978937                           // .quad -4494261269970843337
	QUAD $0xc0678c5dbd23a49a                           // .quad -4582539761593113446
	QUAD $0xf209787bb47d6b84                           // .quad -1006140569036166268
	QUAD $0xf840b7ba963646e0                           // .quad -558244341782001952
	QUAD $0x9745eb4d50ce6332                           // .quad -7546366883288685774
	QUAD $0xb650e5a93bc3d898                           // .quad -5309491445654890344
	QUAD $0xbd176620a501fbff                           // .quad -4821272585683469313
	QUAD $0xa3e51f138ab4cebe                           // .quad -6636864307068612930
	QUAD $0xec5d3fa8ce427aff                           // .quad -1414904713676948737
	QUAD $0xc66f336c36b10137                           // .quad -4148040191917883081
	QUAD $0x93ba47c980e98cdf                           // .quad -7801844473689174817
	QUAD $0xb80b0047445d4184                           // .quad -5185050239897353852
	QUAD $0xb8a8d9bbe123f017                           // .quad -5140619573684080617
	QUAD $0xa60dc059157491e5                           // .quad -6481312799871692315
	QUAD $0xe6d3102ad96cec1d                           // .quad -1814088448677712867
	QUAD $0x87c89837ad68db2f                           // .quad -8662506518347195601
	QUAD $0x9043ea1ac7e41392                           // .quad -8051334308064652398
	QUAD $0x29babe4598c311fb                           // .quad 3006924907348169211
	QUAD $0xb454e4a179dd1877                           // .quad -5452481866653427593
	QUAD $0xf4296dd6fef3d67a                           // .quad -853029884242176390
	QUAD $0xe16a1dc9d8545e94                           // .quad -2203916314889396588
	QUAD $0x1899e4a65f58660c                           // .quad 1772699331562333708
	QUAD $0x8ce2529e2734bb1d                           // .quad -8294976724446954723
	QUAD $0x5ec05dcff72e7f8f                           // .quad 6827560182880305039
	QUAD $0xb01ae745b101e9e4                           // .quad -5757034887131305500
	QUAD $0x76707543f4fa1f73                           // .quad 8534450228600381299
	QUAD $0xdc21a1171d42645d                           // .quad -2584607590486743971
	QUAD $0x6a06494a791c53a8                           // .quad 7639874402088932264
	QUAD $0x899504ae72497eba                           // .quad -8532908771695296838
	QUAD $0x0487db9d17636892                           // .quad 326470965756389522
	QUAD $0xabfa45da0edbde69                           // .quad -6054449946191733143
	QUAD $0x45a9d2845d3c42b6                           // .quad 5019774725622874806
	QUAD $0xd6f8d7509292d603                           // .quad -2956376414312278525
	QUAD $0x0b8a2392ba45a9b2                           // .quad 831516194300602802
	QUAD $0x865b86925b9bc5c2                           // .quad -8765264286586255934
	QUAD $0x8e6cac7768d7141e                           // .quad -8183976793979022306
	QUAD $0xa7f26836f282b732                           // .quad -6344894339805432014
	QUAD $0x3207d795430cd926                           // .quad 3605087062808385830
	QUAD $0xd1ef0244af2364ff                           // .quad -3319431906329402113
	QUAD $0x7f44e6bd49e807b8                           // .quad 9170708441896323000
	QUAD $0x8335616aed761f1f                           // .quad -8992173969096958177
	QUAD $0x5f16206c9c6209a6                           // .quad 6851699533943015846
	QUAD $0xa402b9c5a8d3a6e7                           // .quad -6628531442943809817
	QUAD $0x36dba887c37a8c0f                           // .quad 3952938399001381903
	QUAD $0xcd036837130890a1                           // .quad -3673978285252374367
	QUAD $0xc2494954da2c9789                           // .quad -4446942528265218167
	QUAD $0x802221226be55a64                           // .quad -9213765455923815836
	QUAD $0xf2db9baa10b7bd6c                           // .quad -946992141904134804
	QUAD $0xa02aa96b06deb0fd                           // .quad -6905520801477381891
	QUAD $0x6f92829494e5acc7                           // .quad 8039631859474607303
	QUAD $0xc83553c5c8965d3d                           // .quad -4020214983419339459
	QUAD $0xcb772339ba1f17f9                           // .quad -3785518230938904583
	QUAD $0xfa42a8b73abbf48c                           // .quad -413582710846786420
	QUAD $0xff2a760414536efb                           // .quad -60105885123121413
	QUAD $0x9c69a97284b578d7                           // .quad -7176018221920323369
	QUAD $0xfef5138519684aba                           // .quad -75132356403901766
	QUAD $0xc38413cf25e2d70d                           // .quad -4358336758973016307
	QUAD $0x7eb258665fc25d69                           // .quad 9129456591349898601
	QUAD $0xf46518c2ef5b8cd1                           // .quad -836234930288882479
	QUAD $0xef2f773ffbd97a61                           // .quad -1211618658047395231
	QUAD $0x98bf2f79d5993802                           // .quad -7440175859071633406
	QUAD $0xaafb550ffacfd8fa                           // .quad -6126209340986631942
	QUAD $0xbeeefb584aff8603                           // .quad -4688533805412153853
	QUAD $0x95ba2a53f983cf38                           // .quad -7657761676233289928
	QUAD $0xeeaaba2e5dbf6784                           // .quad -1248981238337804412
	QUAD $0xdd945a747bf26183                           // .quad -2480258038432112253
	QUAD $0x952ab45cfa97a0b2                           // .quad -7698142301602209614
	QUAD $0x94f971119aeef9e4                           // .quad -7712008566467528220
	QUAD $0xba756174393d88df                           // .quad -5010991858575374113
	QUAD $0x7a37cd5601aab85d                           // .quad 8806733365625141341
	QUAD $0xe912b9d1478ceb17                           // .quad -1652053804791829737
	QUAD $0xac62e055c10ab33a                           // .quad -6025006692552756422
	QUAD $0x91abb422ccb812ee                           // .quad -7950062655635975442
	QUAD $0x577b986b314d6009                           // .quad 6303799689591218185
	QUAD $0xb616a12b7fe617aa                           // .quad -5325892301117581398
	QUAD $0xed5a7e85fda0b80b                           // .quad -1343622424865753077
	QUAD $0xe39c49765fdf9d94                           // .quad -2045679357969588844
	QUAD $0x14588f13be847307                           // .quad 1466078993672598279
	QUAD $0x8e41ade9fbebc27d                           // .quad -8196078626372074883
	QUAD $0x596eb2d8ae258fc8                           // .quad 6444284760518135752
	QUAD $0xb1d219647ae6b31c                           // .quad -5633412264537705700
	QUAD $0x6fca5f8ed9aef3bb                           // .quad 8055355950647669691
	QUAD $0xde469fbd99a05fe3                           // .quad -2430079312244744221
	QUAD $0x25de7bb9480d5854                           // .quad 2728754459941099604
	QUAD $0x8aec23d680043bee                           // .quad -8436328597794046994
	QUAD $0xaf561aa79a10ae6a                           // .quad -5812428961928401302
	QUAD $0xada72ccc20054ae9                           // .quad -5933724728815170839
	QUAD $0x1b2ba1518094da04                           // .quad 1957835834444274180
	QUAD $0xd910f7ff28069da4                           // .quad -2805469892591575644
	QUAD $0x90fb44d2f05d0842                           // .quad -7999724640327104446
	QUAD $0x87aa9aff79042286                           // .quad -8670947710510816634
	QUAD $0x353a1607ac744a53                           // .quad 3835402254873283155
	QUAD $0xa99541bf57452b28                           // .quad -6226998619711132888
	QUAD $0x42889b8997915ce8                           // .quad 4794252818591603944
	QUAD $0xd3fa922f2d1675f2                           // .quad -3172062256211528206
	QUAD $0x69956135febada11                           // .quad 7608094030047140369
	QUAD $0x847c9b5d7c2e09b7                           // .quad -8900067937773286985
	QUAD $0x43fab9837e699095                           // .quad 4898431519131537557
	QUAD $0xa59bc234db398c25                           // .quad -6513398903789220827
	QUAD $0x94f967e45e03f4bb                           // .quad -7712018656367741765
	QUAD $0xcf02b2c21207ef2e                           // .quad -3530062611309138130
	QUAD $0x1d1be0eebac278f5                           // .quad 2097517367411243253
	QUAD $0x8161afb94b44f57d                           // .quad -9123818159709293187
	QUAD $0x6462d92a69731732                           // .quad 7233582727691441970
	QUAD $0xa1ba1ba79e1632dc                           // .quad -6793086681209228580
	QUAD $0x7d7b8f7503cfdcfe                           // .quad 9041978409614302462
	QUAD $0xca28a291859bbf93                           // .quad -3879672333084147821
	QUAD $0x5cda735244c3d43e                           // .quad 6690786993590490174
	QUAD $0xfcb2cb35e702af78                           // .quad -237904397927796872
	QUAD $0x3a0888136afa64a7                           // .quad 4181741870994056359
	QUAD $0x9defbf01b061adab                           // .quad -7066219276345954901
	QUAD $0x088aaa1845b8fdd0                           // .quad 615491320315182544
	QUAD $0xc56baec21c7a1916                           // .quad -4221088077005055722
	QUAD $0x8aad549e57273d45                           // .quad -8454007886460797627
	QUAD $0xf6c69a72a3989f5b                           // .quad -664674077828931749
	QUAD $0x36ac54e2f678864b                           // .quad 3939617107816777291
	QUAD $0x9a3c2087a63f6399                           // .quad -7332950326284164199
	QUAD $0x84576a1bb416a7dd                           // .quad -8910536670511192099
	QUAD $0xc0cb28a98fcf3c7f                           // .quad -4554501889427817345
	QUAD $0x656d44a2a11c51d5                           // .quad 7308573235570561493
	QUAD $0xf0fdf2d3f3c30b9f                           // .quad -1081441343357383777
	QUAD $0x9f644ae5a4b1b325                           // .quad -6961356773836868827
	QUAD $0x969eb7c47859e743                           // .quad -7593429867239446717
	QUAD $0x873d5d9f0dde1fee                           // .quad -8701695967296086034
	QUAD $0xbc4665b596706114                           // .quad -4880101315621920492
	QUAD $0xa90cb506d155a7ea                           // .quad -6265433940692719638
	QUAD $0xeb57ff22fc0c7959                           // .quad -1488440626100012711
	QUAD $0x09a7f12442d588f2                           // .quad 695789805494438130
	QUAD $0x9316ff75dd87cbd8                           // .quad -7847804418953589800
	QUAD $0x0c11ed6d538aeb2f                           // .quad 869737256868047663
	QUAD $0xb7dcbf5354e9bece                           // .quad -5198069505264599346
	QUAD $0x8f1668c8a86da5fa                           // .quad -8136200465769716230
	QUAD $0xe5d3ef282a242e81                           // .quad -1885900863153361279
	QUAD $0xf96e017d694487bc                           // .quad -473439272678684740
	QUAD $0x8fa475791a569d10                           // .quad -8096217067111932656
	QUAD $0x37c981dcc395a9ac                           // .quad 4019886927579031980
	QUAD $0xb38d92d760ec4455                           // .quad -5508585315462527915
	QUAD $0x85bbe253f47b1417                           // .quad -8810199395808373737
	QUAD $0xe070f78d3927556a                           // .quad -2274045625900771990
	QUAD $0x93956d7478ccec8e                           // .quad -7812217631593927538
	QUAD $0x8c469ab843b89562                           // .quad -8338807543829064350
	QUAD $0x387ac8d1970027b2                           // .quad 4069786015789754290
	QUAD $0xaf58416654a6babb                           // .quad -5811823411358942533
	QUAD $0x06997b05fcc0319e                           // .quad 475546501309804958
	QUAD $0xdb2e51bfe9d0696a                           // .quad -2653093245771290262
	QUAD $0x441fece3bdf81f03                           // .quad 4908902581746016003
	QUAD $0x88fcf317f22241e2                           // .quad -8575712306248138270
	QUAD $0xd527e81cad7626c3                           // .quad -3087243809672255805
	QUAD $0xab3c2fddeeaad25a                           // .quad -6107954364382784934
	QUAD $0x8a71e223d8d3b074                           // .quad -8470740780517707660
	QUAD $0xd60b3bd56a5586f1                           // .quad -3023256937051093263
	QUAD $0xf6872d5667844e49                           // .quad -682526969396179383
	QUAD $0x85c7056562757456                           // .quad -8807064613298015146
	QUAD $0xb428f8ac016561db                           // .quad -5464844730172612133
	QUAD $0xa738c6bebb12d16c                           // .quad -6397144748195131028
	QUAD $0xe13336d701beba52                           // .quad -2219369894288377262
	QUAD $0xd106f86e69d785c7                           // .quad -3384744916816525881
	QUAD $0xecc0024661173473                           // .quad -1387106183930235789
	QUAD $0x82a45b450226b39c                           // .quad -9032994600651410532
	QUAD $0x27f002d7f95d0190                           // .quad 2877803288514593168
	QUAD $0xa34d721642b06084                           // .quad -6679557232386875260
	QUAD $0x31ec038df7b441f4                           // .quad 3597254110643241460
	QUAD $0xcc20ce9bd35c78a5                           // .quad -3737760522056206171
	QUAD $0x7e67047175a15271                           // .quad 9108253656731439729
	QUAD $0xff290242c83396ce                           // .quad -60514634142869810
	QUAD $0x0f0062c6e984d386                           // .quad 1080972517029761926
	QUAD $0x9f79a169bd203e41                           // .quad -6955350673980375487
	QUAD $0x52c07b78a3e60868                           // .quad 5962901664714590312
	QUAD $0xc75809c42c684dd1                           // .quad -4082502324048081455
	QUAD $0xa7709a56ccdf8a82                           // .quad -6381430974388925822
	QUAD $0xf92e0c3537826145                           // .quad -491441886632713915
	QUAD $0x88a66076400bb691                           // .quad -8600080377420466543
	QUAD $0x9bbcc7a142b17ccb                           // .quad -7224680206786528053
	QUAD $0x6acff893d00ea435                           // .quad 7696643601933968437
	QUAD $0xc2abf989935ddbfe                           // .quad -4419164240055772162
	QUAD $0x0583f6b8c4124d43                           // .quad 397432465562684739
	QUAD $0xf356f7ebf83552fe                           // .quad -912269281642327298
	QUAD $0xc3727a337a8b704a                           // .quad -4363290727450709942
	QUAD $0x98165af37b2153de                           // .quad -7487697328667536418
	QUAD $0x744f18c0592e4c5c                           // .quad 8380944645968776284
	QUAD $0xbe1bf1b059e9a8d6                           // .quad -4747935642407032618
	QUAD $0x1162def06f79df73                           // .quad 1252808770606194547
	QUAD $0xeda2ee1c7064130c                           // .quad -1323233534581402868
	QUAD $0x8addcb5645ac2ba8                           // .quad -8440366555225904216
	QUAD $0x9485d4d1c63e8be7                           // .quad -7744549986754458649
	QUAD $0x6d953e2bd7173692                           // .quad 7896285879677171346
	QUAD $0xb9a74a0637ce2ee1                           // .quad -5069001465015685407
	QUAD $0xc8fa8db6ccdd0437                           // .quad -3964700705685699529
	QUAD $0xe8111c87c5c1ba99                           // .quad -1724565812842218855
	QUAD $0x1d9c9892400a22a2                           // .quad 2133748077373825698
	QUAD $0x910ab1d4db9914a0                           // .quad -7995382660667468640
	QUAD $0x2503beb6d00cab4b                           // .quad 2667185096717282123
	QUAD $0xb54d5e4a127f59c8                           // .quad -5382542307406947896
	QUAD $0x2e44ae64840fd61d                           // .quad 3333981370896602653
	QUAD $0xe2a0b5dc971f303a                           // .quad -2116491865831296966
	QUAD $0x5ceaecfed289e5d2                           // .quad 6695424375237764562
	QUAD $0x8da471a9de737e24                           // .quad -8240336443785642460
	QUAD $0x7425a83e872c5f47                           // .quad 8369280469047205703
	QUAD $0xb10d8e1456105dad                           // .quad -5688734536304665171
	QUAD $0xd12f124e28f77719                           // .quad -3373457468973156583
	QUAD $0xdd50f1996b947518                           // .quad -2499232151953443560
	QUAD $0x82bd6b70d99aaa6f                           // .quad -9025939945749304721
	QUAD $0x8a5296ffe33cc92f                           // .quad -8479549122611984081
	QUAD $0x636cc64d1001550b                           // .quad 7164319141522920715
	QUAD $0xace73cbfdc0bfb7b                           // .quad -5987750384837592197
	QUAD $0x3c47f7e05401aa4e                           // .quad 4343712908476262990
	QUAD $0xd8210befd30efa5a                           // .quad -2873001962619602342
	QUAD $0x65acfaec34810a71                           // .quad 7326506586225052273
	QUAD $0x8714a775e3e95c78                           // .quad -8713155254278333320
	QUAD $0x7f1839a741a14d0d                           // .quad 9158133232781315341
	QUAD $0xa8d9d1535ce3b396                           // .quad -6279758049420528746
	QUAD $0x1ede48111209a050                           // .quad 2224294504121868368
	QUAD $0xd31045a8341ca07c                           // .quad -3238011543348273028
	QUAD $0x934aed0aab460432                           // .quad -7833187971778608078
	QUAD $0x83ea2b892091e44d                           // .quad -8941286242233752499
	QUAD $0xf81da84d5617853f                           // .quad -568112927868484289
	QUAD $0xa4e4b66b68b65d60                           // .quad -6564921784364802720
	QUAD $0x36251260ab9d668e                           // .quad 3901544858591782542
	QUAD $0xce1de40642e3f4b9                           // .quad -3594466212028615495
	QUAD $0xc1d72b7c6b426019                           // .quad -4479063491021217767
	QUAD $0x80d2ae83e9ce78f3                           // .quad -9164070410158966541
	QUAD $0xb24cf65b8612f81f                           // .quad -5598829363776522209
	QUAD $0xa1075a24e4421730                           // .quad -6843401994271320272
	QUAD $0xdee033f26797b627                           // .quad -2386850686293264857
	QUAD $0xc94930ae1d529cfc                           // .quad -3942566474411762436
	QUAD $0x169840ef017da3b1                           // .quad 1628122660560806833
	QUAD $0xfb9b7cd9a4a7443c                           // .quad -316522074587315140
	QUAD $0x8e1f289560ee864e                           // .quad -8205795374004271538
	QUAD $0x9d412e0806e88aa5                           // .quad -7115355324258153819
	QUAD $0xf1a6f2bab92a27e2                           // .quad -1033872180650563614
	QUAD $0xc491798a08a2ad4e                           // .quad -4282508136895304370
	QUAD $0xae10af696774b1db                           // .quad -5904026244240592421
	QUAD $0xf5b5d7ec8acb58a2                           // .quad -741449152691742558
	QUAD $0xacca6da1e0a8ef29                           // .quad -5995859411864064215
	QUAD $0x9991a6f3d6bf1765                           // .quad -7380934748073420955
	QUAD $0x17fd090a58d32af3                           // .quad 1728547772024695539
	QUAD $0xbff610b0cc6edd3f                           // .quad -4614482416664388289
	QUAD $0xddfc4b4cef07f5b0                           // .quad -2451001303396518480
	QUAD $0xeff394dcff8a948e                           // .quad -1156417002403097458
	QUAD $0x4abdaf101564f98e                           // .quad 5385653213018257806
	QUAD $0x95f83d0a1fb69cd9                           // .quad -7640289654143017767
	QUAD $0x9d6d1ad41abe37f1                           // .quad -7102991539009341455
	QUAD $0xbb764c4ca7a4440f                           // .quad -4938676049251384305
	QUAD $0x84c86189216dc5ed                           // .quad -8878739423761676819
	QUAD $0xea53df5fd18d5513                           // .quad -1561659043136842477
	QUAD $0x32fd3cf5b4e49bb4                           // .quad 3674159897003727796
	QUAD $0x92746b9be2f8552c                           // .quad -7893565929601608404
	QUAD $0x3fbc8c33221dc2a1                           // .quad 4592699871254659745
	QUAD $0xb7118682dbb66a77                           // .quad -5255271393574622601
	QUAD $0x0fabaf3feaa5334a                           // .quad 1129188820640936778
	QUAD $0xe4d5e82392a40515                           // .quad -1957403223540890347
	QUAD $0x29cb4d87f2a7400e                           // .quad 3011586022114279438
	QUAD $0x8f05b1163ba6832d                           // .quad -8140906042354138323
	QUAD $0x743e20e9ef511012                           // .quad 8376168546070237202
	QUAD $0xb2c71d5bca9023f8                           // .quad -5564446534515285000
	QUAD $0x914da9246b255416                           // .quad -7976533391121755114
	QUAD $0xdf78e4b2bd342cf6                           // .quad -2343872149716718346
	QUAD $0x1ad089b6c2f7548e                           // .quad 1932195658189984910
	QUAD $0x8bab8eefb6409c1a                           // .quad -8382449121214030822
	QUAD $0xa184ac2473b529b1                           // .quad -6808127464117294671
	QUAD $0xae9672aba3d0c320                           // .quad -5866375383090150624
	QUAD $0xc9e5d72d90a2741e                           // .quad -3898473311719230434
	QUAD $0xda3c0f568cc4f3e8                           // .quad -2721283210435300376
	QUAD $0x7e2fa67c7a658892                           // .quad 9092669226243950738
	QUAD $0x8865899617fb1871                           // .quad -8618331034163144591
	QUAD $0xddbb901b98feeab7                           // .quad -2469221522477225289
	QUAD $0xaa7eebfb9df9de8d                           // .quad -6161227774276542835
	QUAD $0x552a74227f3ea565                           // .quad 6136845133758244197
	QUAD $0xd51ea6fa85785631                           // .quad -3089848699418290639
	QUAD $0xd53a88958f87275f                           // .quad -3082000819042179233
	QUAD $0x8533285c936b35de                           // .quad -8848684464777513506
	QUAD $0x8a892abaf368f137                           // .quad -8464187042230111945
	QUAD $0xa67ff273b8460356                           // .quad -6449169562544503978
	QUAD $0x2d2b7569b0432d85                           // .quad 3254824252494523781
	QUAD $0xd01fef10a657842c                           // .quad -3449775934753242068
	QUAD $0x9c3b29620e29fc73                           // .quad -7189106879045698445
	QUAD $0x8213f56a67f6b29b                           // .quad -9073638986861858149
	QUAD $0x8349f3ba91b47b8f                           // .quad -8986383598807123057
	QUAD $0xa298f2c501f45f42                           // .quad -6730362715149934782
	QUAD $0x241c70a936219a73                           // .quad 2602078556773259891
	QUAD $0xcb3f2f7642717713                           // .quad -3801267375510030573
	QUAD $0xed238cd383aa0110                           // .quad -1359087822460813040
	QUAD $0xfe0efb53d30dd4d7                           // .quad -139898200960150313
	QUAD $0xf4363804324a40aa                           // .quad -849429889038008150
	QUAD $0x9ec95d1463e8a506                           // .quad -7004965403241175802
	QUAD $0xb143c6053edcd0d5                           // .quad -5673473379724898091
	QUAD $0xc67bb4597ce2ce48                           // .quad -4144520735624081848
	QUAD $0xdd94b7868e94050a                           // .quad -2480155706228734710
	QUAD $0xf81aa16fdc1b81da                           // .quad -568964901102714406
	QUAD $0xca7cf2b4191c8326                           // .quad -3855940325606653146
	QUAD $0x9b10a4e5e9913128                           // .quad -7273132090830278360
	QUAD $0xfd1c2f611f63a3f0                           // .quad -208239388580928528
	QUAD $0xc1d4ce1f63f57d72                           // .quad -4479729095110460046
	QUAD $0xbc633b39673c8cec                           // .quad -4871985254153548564
	QUAD $0xf24a01a73cf2dccf                           // .quad -987975350460687153
	QUAD $0xd5be0503e085d813                           // .quad -3044990783845967853
	QUAD $0x976e41088617ca01                           // .quad -7535013621679011327
	QUAD $0x4b2d8644d8a74e18                           // .quad 5417133557047315992
	QUAD $0xbd49d14aa79dbc82                           // .quad -4807081008671376254
	QUAD $0xddf8e7d60ed1219e                           // .quad -2451955090545630818
	QUAD $0xec9c459d51852ba2                           // .quad -1397165242411832414
	QUAD $0xcabb90e5c942b503                           // .quad -3838314940804713213
	QUAD $0x93e1ab8252f33b45                           // .quad -7790757304148477115
	QUAD $0x3d6a751f3b936243                           // .quad 4425478360848884291
	QUAD $0xb8da1662e7b00a17                           // .quad -5126760611758208489
	QUAD $0x0cc512670a783ad4                           // .quad 920161932633717460
	QUAD $0xe7109bfba19c0c9d                           // .quad -1796764746270372707
	QUAD $0x27fb2b80668b24c5                           // .quad 2880944217109767365
	QUAD $0x906a617d450187e2                           // .quad -8040506994060064798
	QUAD $0xb1f9f660802dedf6                           // .quad -5622191765467566602
	QUAD $0xb484f9dc9641e9da                           // .quad -5438947724147693094
	QUAD $0x5e7873f8a0396973                           // .quad 6807318348447705459
	QUAD $0xe1a63853bbd26451                           // .quad -2186998636757228463
	QUAD $0xdb0b487b6423e1e8                           // .quad -2662955059861265944
	QUAD $0x8d07e33455637eb2                           // .quad -8284403175614349646
	QUAD $0x91ce1a9a3d2cda62                           // .quad -7940379843253970334
	QUAD $0xb049dc016abc5e5f                           // .quad -5743817951090549153
	QUAD $0x7641a140cc7810fb                           // .quad 8521269269642088699
	QUAD $0xdc5c5301c56b75f7                           // .quad -2568086420435798537
	QUAD $0xa9e904c87fcb0a9d                           // .quad -6203421752542164323
	QUAD $0x89b9b3e11b6329ba                           // .quad -8522583040413455942
	QUAD $0x546345fa9fbdcd44                           // .quad 6080780864604458308
	QUAD $0xac2820d9623bf429                           // .quad -6041542782089432023
	QUAD $0xa97c177947ad4095                           // .quad -6234081974526590827
	QUAD $0xd732290fbacaf133                           // .quad -2940242459184402125
	QUAD $0x49ed8eabcccc485d                           // .quad 5327070802775656541
	QUAD $0x867f59a9d4bed6c0                           // .quad -8755180564631333184
	QUAD $0x5c68f256bfff5a74                           // .quad 6658838503469570676
	QUAD $0xa81f301449ee8c70                           // .quad -6332289687361778576
	QUAD $0x73832eec6fff3111                           // .quad 8323548129336963345
	QUAD $0xd226fc195c6a2f8c                           // .quad -3303676090774835316
	QUAD $0xc831fd53c5ff7eab                           // .quad -4021154456019173717
	QUAD $0x83585d8fd9c25db7                           // .quad -8982326584375353929
	QUAD $0xba3e7ca8b77f5e55                           // .quad -5026443070023967147
	QUAD $0xa42e74f3d032f525                           // .quad -6616222212041804507
	QUAD $0x28ce1bd2e55f35eb                           // .quad 2940318199324816875
	QUAD $0xcd3a1230c43fb26f                           // .quad -3658591746624867729
	QUAD $0x7980d163cf5b81b3                           // .quad 8755227902219092403
	QUAD $0x80444b5e7aa7cf85                           // .quad -9204148869281624187
	QUAD $0xd7e105bcc332621f                           // .quad -2891023177508298209
	QUAD $0xa0555e361951c366                           // .quad -6893500068174642330
	QUAD $0x8dd9472bf3fefaa7                           // .quad -8225464990312760665
	QUAD $0xc86ab5c39fa63440                           // .quad -4005189066790915008
	QUAD $0xb14f98f6f0feb951                           // .quad -5670145219463562927
	QUAD $0xfa856334878fc150                           // .quad -394800315061255856
	QUAD $0x6ed1bf9a569f33d3                           // .quad 7985374283903742931
	QUAD $0x9c935e00d4b9d8d2                           // .quad -7164279224554366766
	QUAD $0x0a862f80ec4700c8                           // .quad 758345818024902856
	QUAD $0xc3b8358109e84f07                           // .quad -4343663012265570553
	QUAD $0xcd27bb612758c0fa                           // .quad -3663753745896259334
	QUAD $0xf4a642e14c6262c8                           // .quad -817892746904575288
	QUAD $0x8038d51cb897789c                           // .quad -9207375118826243940
	QUAD $0x98e7e9cccfbd7dbd                           // .quad -7428711994456441411
	QUAD $0xe0470a63e6bd56c3                           // .quad -2285846861678029117
	QUAD $0xbf21e44003acdd2c                           // .quad -4674203974643163860
	QUAD $0x1858ccfce06cac74                           // .quad 1754377441329851508
	QUAD $0xeeea5d5004981478                           // .quad -1231068949876566920
	QUAD $0x0f37801e0c43ebc8                           // .quad 1096485900831157192
	QUAD $0x95527a5202df0ccb                           // .quad -7686947121313936181
	QUAD $0xd30560258f54e6ba                           // .quad -3241078642388441414
	QUAD $0xbaa718e68396cffd                           // .quad -4996997883215032323
	QUAD $0x47c6b82ef32a2069                           // .quad 5172023733869224041
	QUAD $0xe950df20247c83fd                           // .quad -1634561335591402499
	QUAD $0x4cdc331d57fa5441                           // .quad 5538357842881958977
	QUAD $0x91d28b7416cdd27e                           // .quad -7939129862385708418
	QUAD $0xe0133fe4adf8e952                           // .quad -2300424733252327086
	QUAD $0xb6472e511c81471d                           // .quad -5312226309554747619
	QUAD $0x58180fddd97723a6                           // .quad 6347841120289366950
	QUAD $0xe3d8f9e563a198e5                           // .quad -2028596868516046619
	QUAD $0x570f09eaa7ea7648                           // .quad 6273243709394548296
	QUAD $0x8e679c2f5e44ff8f                           // .quad -8185402070463610993
	QUAD $0x2cd2cc6551e513da                           // .quad 3229868618315797466
	QUAD $0xb201833b35d63f73                           // .quad -5620066569652125837
	QUAD $0xf8077f7ea65e58d1                           // .quad -574350245532641071
	QUAD $0xde81e40a034bcf4f                           // .quad -2413397193637769393
	QUAD $0xfb04afaf27faf782                           // .quad -358968903457900670
	QUAD $0x8b112e86420f6191                           // .quad -8425902273664687727
	QUAD $0x79c5db9af1f9b563                           // .quad 8774660907532399971
	QUAD $0xadd57a27d29339f6                           // .quad -5920691823653471754
	QUAD $0x18375281ae7822bc                           // .quad 1744954097560724156
	QUAD $0xd94ad8b1c7380874                           // .quad -2789178761139451788
	QUAD $0x8f2293910d0b15b5                           // .quad -8132775725879323211
	QUAD $0x87cec76f1c830548                           // .quad -8660765753353239224
	QUAD $0xb2eb3875504ddb22                           // .quad -5554283638921766110
	QUAD $0xa9c2794ae3a3c69a                           // .quad -6214271173264161126
	QUAD $0x5fa60692a46151eb                           // .quad 6892203506629956075
	QUAD $0xd433179d9c8cb841                           // .quad -3156152948152813503
	QUAD $0xdbc7c41ba6bcd333                           // .quad -2609901835997359309
	QUAD $0x849feec281d7f328                           // .quad -8890124620236590296
	QUAD $0x12b9b522906c0800                           // .quad 1349308723430688768
	QUAD $0xa5c7ea73224deff3                           // .quad -6500969756868349965
	QUAD $0xd768226b34870a00                           // .quad -2925050114139026944
	QUAD $0xcf39e50feae16bef                           // .quad -3514526177658049553
	QUAD $0xe6a1158300d46640                           // .quad -1828156321336891840
	QUAD $0x81842f29f2cce375                           // .quad -9114107888677362827
	QUAD $0x60495ae3c1097fd0                           // .quad 6938176635183661008
	QUAD $0xa1e53af46f801c53                           // .quad -6780948842419315629
	QUAD $0x385bb19cb14bdfc4                           // .quad 4061034775552188356
	QUAD $0xca5e89b18b602368                           // .quad -3864500034596756632
	QUAD $0x46729e03dd9ed7b5                           // .quad 5076293469440235445
	QUAD $0xfcf62c1dee382c42                           // .quad -218939024818557886
	QUAD $0x6c07a2c26a8346d1                           // .quad 7784369436827535057
	QUAD $0x9e19db92b4e31ba9                           // .quad -7054365918152680535
	QUAD $0xc7098b7305241885                           // .quad -4104596259247744891
	QUAD $0xc5a05277621be293                           // .quad -4206271379263462765
	QUAD $0xb8cbee4fc66d1ea7                           // .quad -5130745324059681113
	QUAD $0xf70867153aa2db38                           // .quad -646153205651940552
	QUAD $0x737f74f1dc043328                           // .quad 8322499218531169064
	QUAD $0x9a65406d44a5c903                           // .quad -7321374781173544701
	QUAD $0x505f522e53053ff2                           // .quad 5791438004736573426
	QUAD $0xc0fe908895cf3b44                           // .quad -4540032458039542972
	QUAD $0x647726b9e7c68fef                           // .quad 7239297505920716783
	QUAD $0xf13e34aabb430a15                           // .quad -1063354554122040811
	QUAD $0x5eca783430dc19f5                           // .quad 6830403950414141941
	QUAD $0x96c6e0eab509e64d                           // .quad -7582125623967357363
	QUAD $0xb67d16413d132072                           // .quad -5297053117264486286
	QUAD $0xbc789925624c5fe0                           // .quad -4865971011531808800
	QUAD $0xe41c5bd18c57e88f                           // .quad -2009630378153219953
	QUAD $0xeb96bf6ebadf77d8                           // .quad -1470777745987373096
	QUAD $0x8e91b962f7b6f159                           // .quad -8173548013986844327
	QUAD $0x933e37a534cbaae7                           // .quad -7836765118883190041
	QUAD $0x723627bbb5a4adb0                           // .quad 8229809056225996208
	QUAD $0xb80dc58e81fe95a1                           // .quad -5184270380176599647
	QUAD $0xcec3b1aaa30dd91c                           // .quad -3547796734999668452
	QUAD $0xe61136f2227e3b09                           // .quad -1868651956793361655
	QUAD $0x213a4f0aa5e8a7b1                           // .quad 2394313059052595121
	QUAD $0x8fcac257558ee4e6                           // .quad -8085436500636932890
	QUAD $0xa988e2cd4f62d19d                           // .quad -6230480713039031907
	QUAD $0xb3bd72ed2af29e1f                           // .quad -5495109607368778209
	QUAD $0x93eb1b80a33b8605                           // .quad -7788100891298789883
	QUAD $0xe0accfa875af45a7                           // .quad -2257200990783584857
	QUAD $0xbc72f130660533c3                           // .quad -4867563057061743677
	QUAD $0x8c6c01c9498d8b88                           // .quad -8328279646880822392
	QUAD $0xeb8fad7c7f8680b4                           // .quad -1472767802899791692
	QUAD $0xaf87023b9bf0ee6a                           // .quad -5798663540173640086
	QUAD $0xa67398db9f6820e1                           // .quad -6452645772052127519
	QUAD $0xdb68c2ca82ed2a05                           // .quad -2636643406789662203
	QUAD $0x88083f8943a1148c                           // .quad -8644589625959967604
	QUAD $0x892179be91d43a43                           // .quad -8565431156884620733
	QUAD $0x6a0a4f6b948959b0                           // .quad 7641007041259592112
	QUAD $0xab69d82e364948d4                           // .quad -6095102927678388012
	QUAD $0x848ce34679abb01c                           // .quad -8895485272135061476
	QUAD $0xd6444e39c3db9b09                           // .quad -3007192641170597111
	QUAD $0xf2d80e0c0c0b4e11                           // .quad -947992276657025519
	QUAD $0x85eab0e41a6940e5                           // .quad -8797024428372705051
	QUAD $0x6f8e118f0f0e2195                           // .quad 8038381691033493909
	QUAD $0xa7655d1d2103911f                           // .quad -6384594517038493409
	QUAD $0x4b7195f2d2d1a9fb                           // .quad 5436291095364479483
	QUAD $0xd13eb46469447567                           // .quad -3369057127870728857
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

	// .p2align 4, 0x00
_POW_TAB:
	LONG $0x00000001 // .long 1
	LONG $0x00000003 // .long 3
	LONG $0x00000006 // .long 6
	LONG $0x00000009 // .long 9
	LONG $0x0000000d // .long 13
	LONG $0x00000010 // .long 16
	LONG $0x00000013 // .long 19
	LONG $0x00000017 // .long 23
	LONG $0x0000001a // .long 26

	// .p2align 2, 0x00
_MASK_USE_NUMBER:
	LONG $0x00000002         // .long 2
	QUAD $0x0000000000000000 // .p2align 4, 0x00

_LB_efb2a751: // _pow10_ceil_sig.g
	QUAD $0xff77b1fcbebcdc4f // .quad -38366372719436721
	QUAD $0x25e8e89c13bb0f7b // .quad 2731688931043774331
	QUAD $0x9faacf3df73609b1 // .quad -6941508010590729807
	QUAD $0x77b191618c54e9ad // .quad 8624834609543440813
	QUAD $0xc795830d75038c1d // .quad -4065198994811024355
	QUAD $0xd59df5b9ef6a2418 // .quad -3054014793352862696
	QUAD $0xf97ae3d0d2446f25 // .quad -469812725086392539
	QUAD $0x4b0573286b44ad1e // .quad 5405853545163697438
	QUAD $0x9becce62836ac577 // .quad -7211161980820077193
	QUAD $0x4ee367f9430aec33 // .quad 5684501474941004851
	QUAD $0xc2e801fb244576d5 // .quad -4402266457597708587
	QUAD $0x229c41f793cda740 // .quad 2493940825248868160
	QUAD $0xf3a20279ed56d48a // .quad -891147053569747830
	QUAD $0x6b43527578c11110 // .quad 7729112049988473104
	QUAD $0x9845418c345644d6 // .quad -7474495936122174250
	QUAD $0x830a13896b78aaaa // .quad -9004363024039368022
	QUAD $0xbe5691ef416bd60c // .quad -4731433901725329908
	QUAD $0x23cc986bc656d554 // .quad 2579604275232953684
	QUAD $0xedec366b11c6cb8f // .quad -1302606358729274481
	QUAD $0x2cbfbe86b7ec8aa9 // .quad 3224505344041192105
	QUAD $0x94b3a202eb1c3f39 // .quad -7731658001846878407
	QUAD $0x7bf7d71432f3d6aa // .quad 8932844867666826922
	QUAD $0xb9e08a83a5e34f07 // .quad -5052886483881210105
	QUAD $0xdaf5ccd93fb0cc54 // .quad -2669001970698630060
	QUAD $0xe858ad248f5c22c9 // .quad -1704422086424124727
	QUAD $0xd1b3400f8f9cff69 // .quad -3336252463373287575
	QUAD $0x91376c36d99995be // .quad -7982792831656159810
	QUAD $0x23100809b9c21fa2 // .quad 2526528228819083170
	QUAD $0xb58547448ffffb2d // .quad -5366805021142811859
	QUAD $0xabd40a0c2832a78b // .quad -6065211750830921845
	QUAD $0xe2e69915b3fff9f9 // .quad -2096820258001126919
	QUAD $0x16c90c8f323f516d // .quad 1641857348316123501
	QUAD $0x8dd01fad907ffc3b // .quad -8228041688891786181
	QUAD $0xae3da7d97f6792e4 // .quad -5891368184943504668
	QUAD $0xb1442798f49ffb4a // .quad -5673366092687344822
	QUAD $0x99cd11cfdf41779d // .quad -7364210231179380835
	QUAD $0xdd95317f31c7fa1d // .quad -2480021597431793123
	QUAD $0x40405643d711d584 // .quad 4629795266307937668
	QUAD $0x8a7d3eef7f1cfc52 // .quad -8467542526035952558
	QUAD $0x482835ea666b2573 // .quad 5199465050656154995
	QUAD $0xad1c8eab5ee43b66 // .quad -5972742139117552794
	QUAD $0xda3243650005eed0 // .quad -2724040723534582064
	QUAD $0xd863b256369d4a40 // .quad -2854241655469553088
	QUAD $0x90bed43e40076a83 // .quad -8016736922845615485
	QUAD $0x873e4f75e2224e68 // .quad -8701430062309552536
	QUAD $0x5a7744a6e804a292 // .quad 6518754469289960082
	QUAD $0xa90de3535aaae202 // .quad -6265101559459552766
	QUAD $0x711515d0a205cb37 // .quad 8148443086612450103
	QUAD $0xd3515c2831559a83 // .quad -3219690930897053053
	QUAD $0x0d5a5b44ca873e04 // .quad 962181821410786820
	QUAD $0x8412d9991ed58091 // .quad -8929835859451740015
	QUAD $0xe858790afe9486c3 // .quad -1704479370831952189
	QUAD $0xa5178fff668ae0b6 // .quad -6550608805887287114
	QUAD $0x626e974dbe39a873 // .quad 7092772823314835571
	QUAD $0xce5d73ff402d98e3 // .quad -3576574988931720989
	QUAD $0xfb0a3d212dc81290 // .quad -357406007711231344
	QUAD $0x80fa687f881c7f8e // .quad -9152888395723407474
	QUAD $0x7ce66634bc9d0b9a // .quad 8999993282035256218
	QUAD $0xa139029f6a239f72 // .quad -6829424476226871438
	QUAD $0x1c1fffc1ebc44e81 // .quad 2026619565689294465
	QUAD $0xc987434744ac874e // .quad -3925094576856201394
	QUAD $0xa327ffb266b56221 // .quad -6690097579743157727
	QUAD $0xfbe9141915d7a922 // .quad -294682202642863838
	QUAD $0x4bf1ff9f0062baa9 // .quad 5472436080603216553
	QUAD $0x9d71ac8fada6c9b5 // .quad -7101705404292871755
	QUAD $0x6f773fc3603db4aa // .quad 8031958568804398250
	QUAD $0xc4ce17b399107c22 // .quad -4265445736938701790
	QUAD $0xcb550fb4384d21d4 // .quad -3795109844276665900
	QUAD $0xf6019da07f549b2b // .quad -720121152745989333
	QUAD $0x7e2a53a146606a49 // .quad 9091170749936331337
	QUAD $0x99c102844f94e0fb // .quad -7367604748107325189
	QUAD $0x2eda7444cbfc426e // .quad 3376138709496513134
	QUAD $0xc0314325637a1939 // .quad -4597819916706768583
	QUAD $0xfa911155fefb5309 // .quad -391512631556746487
	QUAD $0xf03d93eebc589f88 // .quad -1135588877456072824
	QUAD $0x793555ab7eba27cb // .quad 8733981247408842699
	QUAD $0x96267c7535b763b5 // .quad -7627272076051127371
	QUAD $0x4bc1558b2f3458df // .quad 5458738279630526687
	QUAD $0xbbb01b9283253ca2 // .quad -4922404076636521310
	QUAD $0x9eb1aaedfb016f17 // .quad -7011635205744005353
	QUAD $0xea9c227723ee8bcb // .quad -1541319077368263733
	QUAD $0x465e15a979c1cadd // .quad 5070514048102157021
	QUAD $0x92a1958a7675175f // .quad -7880853450996246689
	QUAD $0x0bfacd89ec191eca // .quad 863228270850154186
	QUAD $0xb749faed14125d36 // .quad -5239380795317920458
	QUAD $0xcef980ec671f667c // .quad -3532650679864695172
	QUAD $0xe51c79a85916f484 // .quad -1937539975720012668
	QUAD $0x82b7e12780e7401b // .quad -9027499368258256869
	QUAD $0x8f31cc0937ae58d2 // .quad -8128491512466089774
	QUAD $0xd1b2ecb8b0908811 // .quad -3336344095947716591
	QUAD $0xb2fe3f0b8599ef07 // .quad -5548928372155224313
	QUAD $0x861fa7e6dcb4aa16 // .quad -8782116138362033642
	QUAD $0xdfbdcece67006ac9 // .quad -2324474446766642487
	QUAD $0x67a791e093e1d49b // .quad 7469098900757009563
	QUAD $0x8bd6a141006042bd // .quad -8370325556870233411
	QUAD $0xe0c8bb2c5c6d24e1 // .quad -2249342214667950879
	QUAD $0xaecc49914078536d // .quad -5851220927660403859
	QUAD $0x58fae9f773886e19 // .quad 6411694268519837209
	QUAD $0xda7f5bf590966848 // .quad -2702340141148116920
	QUAD $0xaf39a475506a899f // .quad -5820440219632367201
	QUAD $0x888f99797a5e012d // .quad -8606491615858654931
	QUAD $0x6d8406c952429604 // .quad 7891439908798240260
	QUAD $0xaab37fd7d8f58178 // .quad -6146428501395930760
	QUAD $0xc8e5087ba6d33b84 // .quad -3970758169284363388
	QUAD $0xd5605fcdcf32e1d6 // .quad -3071349608317525546
	QUAD $0xfb1e4a9a90880a65 // .quad -351761693178066331
	QUAD $0x855c3be0a17fcd26 // .quad -8837122532839535322
	QUAD $0x5cf2eea09a550680 // .quad 6697677969404790400
	QUAD $0xa6b34ad8c9dfc06f // .quad -6434717147622031249
	QUAD $0xf42faa48c0ea481f // .quad -851274575098787809
	QUAD $0xd0601d8efc57b08b // .quad -3431710416100151157
	QUAD $0xf13b94daf124da27 // .quad -1064093218873484761
	QUAD $0x823c12795db6ce57 // .quad -9062348037703676329
	QUAD $0x76c53d08d6b70859 // .quad 8558313775058847833
	QUAD $0xa2cb1717b52481ed // .quad -6716249028702207507
	QUAD $0x54768c4b0c64ca6f // .quad 6086206200396171887
	QUAD $0xcb7ddcdda26da268 // .quad -3783625267450371480
	QUAD $0xa9942f5dcf7dfd0a // .quad -6227300304786948854
	QUAD $0xfe5d54150b090b02 // .quad -117845565885576446
	QUAD $0xd3f93b35435d7c4d // .quad -3172439362556298163
	QUAD $0x9efa548d26e5a6e1 // .quad -6991182506319567135
	QUAD $0xc47bc5014a1a6db0 // .quad -4288617610811380304
	QUAD $0xc6b8e9b0709f109a // .quad -4127292114472071014
	QUAD $0x359ab6419ca1091c // .quad 3862600023340550428
	QUAD $0xf867241c8cc6d4c0 // .quad -547429124662700864
	QUAD $0xc30163d203c94b63 // .quad -4395122007679087773
	QUAD $0x9b407691d7fc44f8 // .quad -7259672230555269896
	QUAD $0x79e0de63425dcf1e // .quad 8782263791269039902
	QUAD $0xc21094364dfb5636 // .quad -4462904269766699466
	QUAD $0x985915fc12f542e5 // .quad -7468914334623251739
	QUAD $0xf294b943e17a2bc4 // .quad -966944318780986428
	QUAD $0x3e6f5b7b17b2939e // .quad 4498915137003099038
	QUAD $0x979cf3ca6cec5b5a // .quad -7521869226879198374
	QUAD $0xa705992ceecf9c43 // .quad -6411550076227838909
	QUAD $0xbd8430bd08277231 // .quad -4790650515171610063
	QUAD $0x50c6ff782a838354 // .quad 5820620459997365076
	QUAD $0xece53cec4a314ebd // .quad -1376627125537124675
	QUAD $0xa4f8bf5635246429 // .quad -6559282480285457367
	QUAD $0x940f4613ae5ed136 // .quad -7777920981101784778
	QUAD $0x871b7795e136be9a // .quad -8711237568605798758
	QUAD $0xb913179899f68584 // .quad -5110715207949843068
	QUAD $0x28e2557b59846e40 // .quad 2946011094524915264
	QUAD $0xe757dd7ec07426e5 // .quad -1776707991509915931
	QUAD $0x331aeada2fe589d0 // .quad 3682513868156144080
	QUAD $0x9096ea6f3848984f // .quad -8027971522334779313
	QUAD $0x3ff0d2c85def7622 // .quad 4607414176811284002
	QUAD $0xb4bca50b065abe63 // .quad -5423278384491086237
	QUAD $0x0fed077a756b53aa // .quad 1147581702586717098
	QUAD $0xe1ebce4dc7f16dfb // .quad -2167411962186469893
	QUAD $0xd3e8495912c62895 // .quad -3177208890193991531
	QUAD $0x8d3360f09cf6e4bd // .quad -8272161504007625539
	QUAD $0x64712dd7abbbd95d // .quad 7237616480483531101
	QUAD $0xb080392cc4349dec // .quad -5728515861582144020
	QUAD $0xbd8d794d96aacfb4 // .quad -4788037454677749836
	QUAD $0xdca04777f541c567 // .quad -2548958808550292121
	QUAD $0xecf0d7a0fc5583a1 // .quad -1373360799919799391
	QUAD $0x89e42caaf9491b60 // .quad -8510628282985014432
	QUAD $0xf41686c49db57245 // .quad -858350499949874619
	QUAD $0xac5d37d5b79b6239 // .quad -6026599335303880135
	QUAD $0x311c2875c522ced6 // .quad 3538747893490044630
	QUAD $0xd77485cb25823ac7 // .quad -2921563150702462265
	QUAD $0x7d633293366b828c // .quad 9035120885289943692
	QUAD $0x86a8d39ef77164bc // .quad -8743505996830120772
	QUAD $0xae5dff9c02033198 // .quad -5882264492762254952
	QUAD $0xa8530886b54dbdeb // .quad -6317696477610263061
	QUAD $0xd9f57f830283fdfd // .quad -2741144597525430787
	QUAD $0xd267caa862a12d66 // .quad -3285434578585440922
	QUAD $0xd072df63c324fd7c // .quad -3426430746906788484
	QUAD $0x8380dea93da4bc60 // .quad -8970925639256982432
	QUAD $0x4247cb9e59f71e6e // .quad 4776009810824339054
	QUAD $0xa46116538d0deb78 // .quad -6601971030643840136
	QUAD $0x52d9be85f074e609 // .quad 5970012263530423817
	QUAD $0xcd795be870516656 // .quad -3640777769877412266
	QUAD $0x67902e276c921f8c // .quad 7462515329413029772
	QUAD $0x806bd9714632dff6 // .quad -9193015133814464522
	QUAD $0x00ba1cd8a3db53b7 // .quad 52386062455755703
	QUAD $0xa086cfcd97bf97f3 // .quad -6879582898840692749
	QUAD $0x80e8a40eccd228a5 // .quad -9157889458785081179
	QUAD $0xc8a883c0fdaf7df0 // .quad -3987792605123478032
	QUAD $0x6122cd128006b2ce // .quad 6999382250228200142
	QUAD $0xfad2a4b13d1b5d6c // .quad -373054737976959636
	QUAD $0x796b805720085f82 // .quad 8749227812785250178
	QUAD $0x9cc3a6eec6311a63 // .quad -7150688238876681629
	QUAD $0xcbe3303674053bb1 // .quad -3755104653863994447
	QUAD $0xc3f490aa77bd60fc // .quad -4326674280168464132
	QUAD $0xbedbfc4411068a9d // .quad -4693880817329993059
	QUAD $0xf4f1b4d515acb93b // .quad -796656831783192261
	QUAD $0xee92fb5515482d45 // .quad -1255665003235103419
	QUAD $0x991711052d8bf3c5 // .quad -7415439547505577019
	QUAD $0x751bdd152d4d1c4b // .quad 8438581409832836171
	QUAD $0xbf5cd54678eef0b6 // .quad -4657613415954583370
	QUAD $0xd262d45a78a0635e // .quad -3286831292991118498
	QUAD $0xef340a98172aace4 // .quad -1210330751515841308
	QUAD $0x86fb897116c87c35 // .quad -8720225134666286027
	QUAD $0x9580869f0e7aac0e // .quad -7673985747338482674
	QUAD $0xd45d35e6ae3d4da1 // .quad -3144297699952734815
	QUAD $0xbae0a846d2195712 // .quad -4980796165745715438
	QUAD $0x8974836059cca10a // .quad -8542058143368306422
	QUAD $0xe998d258869facd7 // .quad -1614309188754756393
	QUAD $0x2bd1a438703fc94c // .quad 3157485376071780684
	QUAD $0x91ff83775423cc06 // .quad -7926472270612804602
	QUAD $0x7b6306a34627ddd0 // .quad 8890957387685944784
	QUAD $0xb67f6455292cbf08 // .quad -5296404319838617848
	QUAD $0x1a3bc84c17b1d543 // .quad 1890324697752655171
	QUAD $0xe41f3d6a7377eeca // .quad -2008819381370884406
	QUAD $0x20caba5f1d9e4a94 // .quad 2362905872190818964
	QUAD $0x8e938662882af53e // .quad -8173041140997884610
	QUAD $0x547eb47b7282ee9d // .quad 6088502188546649757
	QUAD $0xb23867fb2a35b28d // .quad -5604615407819967859
	QUAD $0xe99e619a4f23aa44 // .quad -1612744301171463612
	QUAD $0xdec681f9f4c31f31 // .quad -2394083241347571919
	QUAD $0x6405fa00e2ec94d5 // .quad 7207441660390446293
	QUAD $0x8b3c113c38f9f37e // .quad -8413831053483314306
	QUAD $0xde83bc408dd3dd05 // .quad -2412877989897052923
	QUAD $0xae0b158b4738705e // .quad -5905602798426754978
	QUAD $0x9624ab50b148d446 // .quad -7627783505798704058
	QUAD $0xd98ddaee19068c76 // .quad -2770317479606055818
	QUAD $0x3badd624dd9b0958 // .quad 4300328673033783640
	QUAD $0x87f8a8d4cfa417c9 // .quad -8648977452394866743
	QUAD $0xe54ca5d70a80e5d7 // .quad -1923980597781273129
	QUAD $0xa9f6d30a038d1dbc // .quad -6199535797066195524
	QUAD $0x5e9fcf4ccd211f4d // .quad 6818396289628184397
	QUAD $0xd47487cc8470652b // .quad -3137733727905356501
	QUAD $0x7647c32000696720 // .quad 8522995362035230496
	QUAD $0x84c8d4dfd2c63f3b // .quad -8878612607581929669
	QUAD $0x29ecd9f40041e074 // .quad 3021029092058325108
	QUAD $0xa5fb0a17c777cf09 // .quad -6486579741050024183
	QUAD $0xf468107100525891 // .quad -835399653354481519
	QUAD $0xcf79cc9db955c2cc // .quad -3496538657885142324
	QUAD $0x7182148d4066eeb5 // .quad 8179122470161673909
	QUAD $0x81ac1fe293d599bf // .quad -9102865688819295809
	QUAD $0xc6f14cd848405531 // .quad -4111420493003729615
	QUAD $0xa21727db38cb002f // .quad -6766896092596731857
	QUAD $0xb8ada00e5a506a7d // .quad -5139275616254662019
	QUAD $0xca9cf1d206fdc03b // .quad -3846934097318526917
	QUAD $0xa6d90811f0e4851d // .quad -6424094520318327523
	QUAD $0xfd442e4688bd304a // .quad -196981603220770742
	QUAD $0x908f4a166d1da664 // .quad -8030118150397909404
	QUAD $0x9e4a9cec15763e2e // .quad -7040642529654063570
	QUAD $0x9a598e4e043287ff // .quad -7324666853212387329
	QUAD $0xc5dd44271ad3cdba // .quad -4189117143640191558
	QUAD $0x40eff1e1853f29fe // .quad 4679224488766679550
	QUAD $0xf7549530e188c128 // .quad -624710411122851544
	QUAD $0xd12bee59e68ef47d // .quad -3374341425896426371
	QUAD $0x9a94dd3e8cf578b9 // .quad -7307973034592864071
	QUAD $0x82bb74f8301958cf // .quad -9026492418826348337
	QUAD $0xc13a148e3032d6e7 // .quad -4523280274813692185
	QUAD $0xe36a52363c1faf02 // .quad -2059743486678159614
	QUAD $0xf18899b1bc3f8ca1 // .quad -1042414325089727327
	QUAD $0xdc44e6c3cb279ac2 // .quad -2574679358347699518
	QUAD $0x96f5600f15a7b7e5 // .quad -7569037980822161435
	QUAD $0x29ab103a5ef8c0ba // .quad 3002511419460075706
	QUAD $0xbcb2b812db11a5de // .quad -4849611457600313890
	QUAD $0x7415d448f6b6f0e8 // .quad 8364825292752482536
	QUAD $0xebdf661791d60f56 // .quad -1450328303573004458
	QUAD $0x111b495b3464ad22 // .quad 1232659579085827362
	QUAD $0x936b9fcebb25c995 // .quad -7823984217374209643
	QUAD $0xcab10dd900beec35 // .quad -3841273781498745803
	QUAD $0xb84687c269ef3bfb // .quad -5168294253290374149
	QUAD $0x3d5d514f40eea743 // .quad 4421779809981343555
	QUAD $0xe65829b3046b0afa // .quad -1848681798185579782
	QUAD $0x0cb4a5a3112a5113 // .quad 915538744049291539
	QUAD $0x8ff71a0fe2c2e6dc // .quad -8072955151507069220
	QUAD $0x47f0e785eaba72ac // .quad 5183897733458195116
	QUAD $0xb3f4e093db73a093 // .quad -5479507920956448621
	QUAD $0x59ed216765690f57 // .quad 6479872166822743895
	QUAD $0xe0f218b8d25088b8 // .quad -2237698882768172872
	QUAD $0x306869c13ec3532d // .quad 3488154190101041965
	QUAD $0x8c974f7383725573 // .quad -8316090829371189901
	QUAD $0x1e414218c73a13fc // .quad 2180096368813151228
	QUAD $0xafbd2350644eeacf // .quad -5783427518286599473
	QUAD $0xe5d1929ef90898fb // .quad -1886565557410948869
	QUAD $0xdbac6c247d62a583 // .quad -2617598379430861437
	QUAD $0xdf45f746b74abf3a // .quad -2358206946763686086
	QUAD $0x894bc396ce5da772 // .quad -8553528014785370254
	QUAD $0x6b8bba8c328eb784 // .quad 7749492695127472004
	QUAD $0xab9eb47c81f5114f // .quad -6080224000054324913
	QUAD $0x066ea92f3f326565 // .quad 463493832054564197
	QUAD $0xd686619ba27255a2 // .quad -2988593981640518238
	QUAD $0xc80a537b0efefebe // .quad -4032318728359182658
	QUAD $0x8613fd0145877585 // .quad -8785400266166405755
	QUAD $0xbd06742ce95f5f37 // .quad -4826042214438183113
	QUAD $0xa798fc4196e952e7 // .quad -6370064314280619289
	QUAD $0x2c48113823b73705 // .quad 3190819268807046917
	QUAD $0xd17f3b51fca3a7a0 // .quad -3350894374423386208
	QUAD $0xf75a15862ca504c6 // .quad -623161932418579258
	QUAD $0x82ef85133de648c4 // .quad -9011838011655698236
	QUAD $0x9a984d73dbe722fc // .quad -7307005235402693892
	QUAD $0xa3ab66580d5fdaf5 // .quad -6653111496142234891
	QUAD $0xc13e60d0d2e0ebbb // .quad -4522070525825979461
	QUAD $0xcc963fee10b7d1b3 // .quad -3704703351750405709
	QUAD $0x318df905079926a9 // .quad 3570783879572301481
	QUAD $0xffbbcfe994e5c61f // .quad -19193171260619233
	QUAD $0xfdf17746497f7053 // .quad -148206168962011053
	QUAD $0x9fd561f1fd0f9bd3 // .quad -6929524759678968877
	QUAD $0xfeb6ea8bedefa634 // .quad -92628855601256908
	QUAD $0xc7caba6e7c5382c8 // .quad -4050219931171323192
	QUAD $0xfe64a52ee96b8fc1 // .quad -115786069501571135
	QUAD $0xf9bd690a1b68637b // .quad -451088895536766085
	QUAD $0x3dfdce7aa3c673b1 // .quad 4466953431550423985
	QUAD $0x9c1661a651213e2d // .quad -7199459587351560659
	QUAD $0x06bea10ca65c084f // .quad 486002885505321039
	QUAD $0xc31bfa0fe5698db8 // .quad -4387638465762062920
	QUAD $0x486e494fcff30a63 // .quad 5219189625309039203
	QUAD $0xf3e2f893dec3f126 // .quad -872862063775190746
	QUAD $0x5a89dba3c3efccfb // .quad 6523987031636299003
	QUAD $0x986ddb5c6b3a76b7 // .quad -7463067817500576073
	QUAD $0xf89629465a75e01d // .quad -534194123654701027
	QUAD $0xbe89523386091465 // .quad -4717148753448332187
	QUAD $0xf6bbb397f1135824 // .quad -667742654568376284
	QUAD $0xee2ba6c0678b597f // .quad -1284749923383027329
	QUAD $0x746aa07ded582e2d // .quad 8388693718644305453
	QUAD $0x94db483840b717ef // .quad -7720497729755473937
	QUAD $0xa8c2a44eb4571cdd // .quad -6286281471915778851
	QUAD $0xba121a4650e4ddeb // .quad -5038936143766954517
	QUAD $0x92f34d62616ce414 // .quad -7857851839894723564
	QUAD $0xe896a0d7e51e1566 // .quad -1686984161281305242
	QUAD $0x77b020baf9c81d18 // .quad 8624429273841147160
	QUAD $0x915e2486ef32cd60 // .quad -7971894128441897632
	QUAD $0x0ace1474dc1d122f // .quad 778582277723329071
	QUAD $0xb5b5ada8aaff80b8 // .quad -5353181642124984136
	QUAD $0x0d819992132456bb // .quad 973227847154161339
	QUAD $0xe3231912d5bf60e6 // .quad -2079791034228842266
	QUAD $0x10e1fff697ed6c6a // .quad 1216534808942701674
	QUAD $0x8df5efabc5979c8f // .quad -8217398424034108273
	QUAD $0xca8d3ffa1ef463c2 // .quad -3851351762838199358
	QUAD $0xb1736b96b6fd83b3 // .quad -5660062011615247437
	QUAD $0xbd308ff8a6b17cb3 // .quad -4814189703547749197
	QUAD $0xddd0467c64bce4a0 // .quad -2463391496091671392
	QUAD $0xac7cb3f6d05ddbdf // .quad -6017737129434686497
	QUAD $0x8aa22c0dbef60ee4 // .quad -8457148712698376476
	QUAD $0x6bcdf07a423aa96c // .quad 7768129340171790700
	QUAD $0xad4ab7112eb3929d // .quad -5959749872445582691
	QUAD $0x86c16c98d2c953c7 // .quad -8736582398494813241
	QUAD $0xd89d64d57a607744 // .quad -2838001322129590460
	QUAD $0xe871c7bf077ba8b8 // .quad -1697355961263740744
	QUAD $0x87625f056c7c4a8b // .quad -8691279853972075893
	QUAD $0x11471cd764ad4973 // .quad 1244995533423855987
	QUAD $0xa93af6c6c79b5d2d // .quad -6252413799037706963
	QUAD $0xd598e40d3dd89bd0 // .quad -3055441601647567920
	QUAD $0xd389b47879823479 // .quad -3203831230369745799
	QUAD $0x4aff1d108d4ec2c4 // .quad 5404070034795315908
	QUAD $0x843610cb4bf160cb // .quad -8919923546622172981
	QUAD $0xcedf722a585139bb // .quad -3539985255894009413
	QUAD $0xa54394fe1eedb8fe // .quad -6538218414850328322
	QUAD $0xc2974eb4ee658829 // .quad -4424981569867511767
	QUAD $0xce947a3da6a9273e // .quad -3561087000135522498
	QUAD $0x733d226229feea33 // .quad 8303831092947774003
	QUAD $0x811ccc668829b887 // .quad -9143208402725783417
	QUAD $0x0806357d5a3f5260 // .quad 578208414664970848
	QUAD $0xa163ff802a3426a8 // .quad -6817324484979841368
	QUAD $0xca07c2dcb0cf26f8 // .quad -3888925500096174344
	QUAD $0xc9bcff6034c13052 // .quad -3909969587797413806
	QUAD $0xfc89b393dd02f0b6 // .quad -249470856692830026
	QUAD $0xfc2c3f3841f17c67 // .quad -275775966319379353
	QUAD $0xbbac2078d443ace3 // .quad -4923524589293425437
	QUAD $0x9d9ba7832936edc0 // .quad -7089889006590693952
	QUAD $0xd54b944b84aa4c0e // .quad -3077202868308390898
	QUAD $0xc5029163f384a931 // .quad -4250675239810979535
	QUAD $0x0a9e795e65d4df12 // .quad 765182433041899282
	QUAD $0xf64335bcf065d37d // .quad -701658031336336515
	QUAD $0x4d4617b5ff4a16d6 // .quad 5568164059729762006
	QUAD $0x99ea0196163fa42e // .quad -7356065297226292178
	QUAD $0x504bced1bf8e4e46 // .quad 5785945546544795206
	QUAD $0xc06481fb9bcf8d39 // .quad -4583395603105477319
	QUAD $0xe45ec2862f71e1d7 // .quad -1990940103673781801
	QUAD $0xf07da27a82c37088 // .quad -1117558485454458744
	QUAD $0x5d767327bb4e5a4d // .quad 6734696907262548557
	QUAD $0x964e858c91ba2655 // .quad -7616003081050118571
	QUAD $0x3a6a07f8d510f870 // .quad 4209185567039092848
	QUAD $0xbbe226efb628afea // .quad -4908317832885260310
	QUAD $0x890489f70a55368c // .quad -8573576096483297652
	QUAD $0xeadab0aba3b2dbe5 // .quad -1523711272679187483
	QUAD $0x2b45ac74ccea842f // .quad 3118087934678041647
	QUAD $0x92c8ae6b464fc96f // .quad -7869848573065574033
	QUAD $0x3b0b8bc90012929e // .quad 4254647968387469982
	QUAD $0xb77ada0617e3bbcb // .quad -5225624697904579637
	QUAD $0x09ce6ebb40173745 // .quad 706623942056949573
	QUAD $0xe55990879ddcaabd // .quad -1920344853953336643
	QUAD $0xcc420a6a101d0516 // .quad -3728406090856200938
	QUAD $0x8f57fa54c2a9eab6 // .quad -8117744561361917258
	QUAD $0x9fa946824a12232e // .quad -6941939825212513490
	QUAD $0xb32df8e9f3546564 // .quad -5535494683275008668
	QUAD $0x47939822dc96abfa // .quad 5157633273766521850
	QUAD $0xdff9772470297ebd // .quad -2307682335666372931
	QUAD $0x59787e2b93bc56f8 // .quad 6447041592208152312
	QUAD $0x8bfbea76c619ef36 // .quad -8359830487432564938
	QUAD $0x57eb4edb3c55b65b // .quad 6335244004343789147
	QUAD $0xaefae51477a06b03 // .quad -5838102090863318269
	QUAD $0xede622920b6b23f2 // .quad -1304317031425039374
	QUAD $0xdab99e59958885c4 // .quad -2685941595151759932
	QUAD $0xe95fab368e45ecee // .quad -1630396289281299218
	QUAD $0x88b402f7fd75539b // .quad -8596242524610931813
	QUAD $0x11dbcb0218ebb415 // .quad 1286845328412881941
	QUAD $0xaae103b5fcd2a881 // .quad -6133617137336276863
	QUAD $0xd652bdc29f26a11a // .quad -3003129357911285478
	QUAD $0xd59944a37c0752a2 // .quad -3055335403242958174
	QUAD $0x4be76d3346f04960 // .quad 5469460339465668960
	QUAD $0x857fcae62d8493a5 // .quad -8827113654667930715
	QUAD $0x6f70a4400c562ddc // .quad 8030098730593431004
	QUAD $0xa6dfbd9fb8e5b88e // .quad -6422206049907525490
	QUAD $0xcb4ccd500f6bb953 // .quad -3797434642040374957
	QUAD $0xd097ad07a71f26b2 // .quad -3416071543957018958
	QUAD $0x7e2000a41346a7a8 // .quad 9088264752731695016
	QUAD $0x825ecc24c873782f // .quad -9052573742614218705
	QUAD $0x8ed400668c0c28c9 // .quad -8154892584824854327
	QUAD $0xa2f67f2dfa90563b // .quad -6704031159840385477
	QUAD $0x728900802f0f32fb // .quad 8253128342678483707
	QUAD $0xcbb41ef979346bca // .quad -3768352931373093942
	QUAD $0x4f2b40a03ad2ffba // .quad 5704724409920716730
	QUAD $0xfea126b7d78186bc // .quad -98755145788979524
	QUAD $0xe2f610c84987bfa9 // .quad -2092466524453879895
	QUAD $0x9f24b832e6b0f436 // .quad -6979250993759194058
	QUAD $0x0dd9ca7d2df4d7ca // .quad 998051431430019018
	QUAD $0xc6ede63fa05d3143 // .quad -4112377723771604669
	QUAD $0x91503d1c79720dbc // .quad -7975807747567252036
	QUAD $0xf8a95fcf88747d94 // .quad -528786136287117932
	QUAD $0x75a44c6397ce912b // .quad 8476984389250486571
	QUAD $0x9b69dbe1b548ce7c // .quad -7248020362820530564
	QUAD $0xc986afbe3ee11abb // .quad -3925256793573221701
	QUAD $0xc24452da229b021b // .quad -4448339435098275301
	QUAD $0xfbe85badce996169 // .quad -294884973539139223
	QUAD $0xf2d56790ab41c2a2 // .quad -948738275445456222
	QUAD $0xfae27299423fb9c4 // .quad -368606216923924028
	QUAD $0x97c560ba6b0919a5 // .quad -7510490449794491995
	QUAD $0xdccd879fc967d41b // .quad -2536221894791146469
	QUAD $0xbdb6b8e905cb600f // .quad -4776427043815727089
	QUAD $0x5400e987bbc1c921 // .quad 6053094668365842721
	QUAD $0xed246723473e3813 // .quad -1358847786342270957
	QUAD $0x290123e9aab23b69 // .quad 2954682317029915497
	QUAD $0x9436c0760c86e30b // .quad -7766808894105001205
	QUAD $0xf9a0b6720aaf6522 // .quad -459166561069996766
	QUAD $0xb94470938fa89bce // .quad -5096825099203863602
	QUAD $0xf808e40e8d5b3e6a // .quad -573958201337495958
	QUAD $0xe7958cb87392c2c2 // .quad -1759345355577441598
	QUAD $0xb60b1d1230b20e05 // .quad -5329133770099257851
	QUAD $0x90bd77f3483bb9b9 // .quad -8017119874876982855
	QUAD $0xb1c6f22b5e6f48c3 // .quad -5636551615525730109
	QUAD $0xb4ecd5f01a4aa828 // .quad -5409713825168840664
	QUAD $0x1e38aeb6360b1af4 // .quad 2177682517447613172
	QUAD $0xe2280b6c20dd5232 // .quad -2150456263033662926
	QUAD $0x25c6da63c38de1b1 // .quad 2722103146809516465
	QUAD $0x8d590723948a535f // .quad -8261564192037121185
	QUAD $0x579c487e5a38ad0f // .quad 6313000485183335695
	QUAD $0xb0af48ec79ace837 // .quad -5715269221619013577
	QUAD $0x2d835a9df0c6d852 // .quad 3279564588051781714
	QUAD $0xdcdb1b2798182244 // .quad -2532400508596379068
	QUAD $0xf8e431456cf88e66 // .quad -512230283362660762
	QUAD $0x8a08f0f8bf0f156b // .quad -8500279345513818773
	QUAD $0x1b8e9ecb641b5900 // .quad 1985699082112030976
	QUAD $0xac8b2d36eed2dac5 // .quad -6013663163464885563
	QUAD $0xe272467e3d222f40 // .quad -2129562165787349184
	QUAD $0xd7adf884aa879177 // .quad -2905392935903719049
	QUAD $0x5b0ed81dcc6abb10 // .quad 6561419329620589328
	QUAD $0x86ccbb52ea94baea // .quad -8733399612580906262
	QUAD $0x98e947129fc2b4ea // .quad -7428327965055601430
	QUAD $0xa87fea27a539e9a5 // .quad -6305063497298744923
	QUAD $0x3f2398d747b36225 // .quad 4549648098962661925
	QUAD $0xd29fe4b18e88640e // .quad -3269643353196043250
	QUAD $0x8eec7f0d19a03aae // .quad -8147997931578836306
	QUAD $0x83a3eeeef9153e89 // .quad -8961056123388608887
	QUAD $0x1953cf68300424ad // .quad 1825030320404309165
	QUAD $0xa48ceaaab75a8e2b // .quad -6589634135808373205
	QUAD $0x5fa8c3423c052dd8 // .quad 6892973918932774360
	QUAD $0xcdb02555653131b6 // .quad -3625356651333078602
	QUAD $0x3792f412cb06794e // .quad 4004531380238580046
	QUAD $0x808e17555f3ebf11 // .quad -9183376934724255983
	QUAD $0xe2bbd88bbee40bd1 // .quad -2108853905778275375
	QUAD $0xa0b19d2ab70e6ed6 // .quad -6867535149977932074
	QUAD $0x5b6aceaeae9d0ec5 // .quad 6587304654631931589
	QUAD $0xc8de047564d20a8b // .quad -3972732919045027189
	QUAD $0xf245825a5a445276 // .quad -989241218564861322
	QUAD $0xfb158592be068d2e // .quad -354230130378896082
	QUAD $0xeed6e2f0f0d56713 // .quad -1236551523206076653
	QUAD $0x9ced737bb6c4183d // .quad -7138922859127891907
	QUAD $0x55464dd69685606c // .quad 6144684325637283948
	QUAD $0xc428d05aa4751e4c // .quad -4311967555482476980
	QUAD $0xaa97e14c3c26b887 // .quad -6154202648235558777
	QUAD $0xf53304714d9265df // .quad -778273425925708321
	QUAD $0xd53dd99f4b3066a9 // .quad -3081067291867060567
	QUAD $0x993fe2c6d07b7fab // .quad -7403949918844649557
	QUAD $0xe546a8038efe402a // .quad -1925667057416912854
	QUAD $0xbf8fdb78849a5f96 // .quad -4643251380128424042
	QUAD $0xde98520472bdd034 // .quad -2407083821771141068
	QUAD $0xef73d256a5c0f77c // .quad -1192378206733142148
	QUAD $0x963e66858f6d4441 // .quad -7620540795641314239
	QUAD $0x95a8637627989aad // .quad -7662765406849295699
	QUAD $0xdde7001379a44aa9 // .quad -2456994988062127447
	QUAD $0xbb127c53b17ec159 // .quad -4966770740134231719
	QUAD $0x5560c018580d5d53 // .quad 6152128301777116499
	QUAD $0xe9d71b689dde71af // .quad -1596777406740401745
	QUAD $0xaab8f01e6e10b4a7 // .quad -6144897678060768089
	QUAD $0x9226712162ab070d // .quad -7915514906853832947
	QUAD $0xcab3961304ca70e9 // .quad -3840561048787980055
	QUAD $0xb6b00d69bb55c8d1 // .quad -5282707615139903279
	QUAD $0x3d607b97c5fd0d23 // .quad 4422670725869800739
	QUAD $0xe45c10c42a2b3b05 // .quad -1991698500497491195
	QUAD $0x8cb89a7db77c506b // .quad -8306719647944912789
	QUAD $0x8eb98a7a9a5b04e3 // .quad -8162340590452013853
	QUAD $0x77f3608e92adb243 // .quad 8643358275316593219
	QUAD $0xb267ed1940f1c61c // .quad -5591239719637629412
	QUAD $0x55f038b237591ed4 // .quad 6192511825718353620
	QUAD $0xdf01e85f912e37a3 // .quad -2377363631119648861
	QUAD $0x6b6c46dec52f6689 // .quad 7740639782147942025
	QUAD $0x8b61313bbabce2c6 // .quad -8403381297090862394
	QUAD $0x2323ac4b3b3da016 // .quad 2532056854628769814
	QUAD $0xae397d8aa96c1b77 // .quad -5892540602936190089
	QUAD $0xabec975e0a0d081b // .quad -6058300968568813541
	QUAD $0xd9c7dced53c72255 // .quad -2753989735242849707
	QUAD $0x96e7bd358c904a22 // .quad -7572876210711016926
	QUAD $0x881cea14545c7575 // .quad -8638772612167862923
	QUAD $0x7e50d64177da2e55 // .quad 9102010423587778133
	QUAD $0xaa242499697392d2 // .quad -6186779746782440750
	QUAD $0xdde50bd1d5d0b9ea // .quad -2457545025797441046
	QUAD $0xd4ad2dbfc3d07787 // .quad -3121788665050663033
	QUAD $0x955e4ec64b44e865 // .quad -7683617300674189211
	QUAD $0x84ec3c97da624ab4 // .quad -8868646943297746252
	QUAD $0xbd5af13bef0b113f // .quad -4802260812921368257
	QUAD $0xa6274bbdd0fadd61 // .quad -6474122660694794911
	QUAD $0xecb1ad8aeacdd58f // .quad -1391139997724322417
	QUAD $0xcfb11ead453994ba // .quad -3480967307441105734
	QUAD $0x67de18eda5814af3 // .quad 7484447039699372787
	QUAD $0x81ceb32c4b43fcf4 // .quad -9093133594791772940
	QUAD $0x80eacf948770ced8 // .quad -9157278655470055720
	QUAD $0xa2425ff75e14fc31 // .quad -6754730975062328271
	QUAD $0xa1258379a94d028e // .quad -6834912300910181746
	QUAD $0xcad2f7f5359a3b3e // .quad -3831727700400522434
	QUAD $0x096ee45813a04331 // .quad 679731660717048625
	QUAD $0xfd87b5f28300ca0d // .quad -177973607073265139
	QUAD $0x8bca9d6e188853fd // .quad -8373707460958465027
	QUAD $0x9e74d1b791e07e48 // .quad -7028762532061872568
	QUAD $0x775ea264cf55347e // .quad 8601490892183123070
	QUAD $0xc612062576589dda // .quad -4174267146649952806
	QUAD $0x95364afe032a819e // .quad -7694880458480647778
	QUAD $0xf79687aed3eec551 // .quad -606147914885053103
	QUAD $0x3a83ddbd83f52205 // .quad 4216457482181353989
	QUAD $0x9abe14cd44753b52 // .quad -7296371474444240046
	QUAD $0xc4926a9672793543 // .quad -4282243101277735613
	QUAD $0xc16d9a0095928a27 // .quad -4508778324627912153
	QUAD $0x75b7053c0f178294 // .quad 8482254178684994196
	QUAD $0xf1c90080baf72cb1 // .quad -1024286887357502287
	QUAD $0x5324c68b12dd6339 // .quad 5991131704928854841
	QUAD $0x971da05074da7bee // .quad -7557708332239520786
	QUAD $0xd3f6fc16ebca5e04 // .quad -3173071712060547580
	QUAD $0xbce5086492111aea // .quad -4835449396872013078
	QUAD $0x88f4bb1ca6bcf585 // .quad -8578025658503072379
	QUAD $0xec1e4a7db69561a5 // .quad -1432625727662628443
	QUAD $0x2b31e9e3d06c32e6 // .quad 3112525982153323238
	QUAD $0x9392ee8e921d5d07 // .quad -7812920107430224633
	QUAD $0x3aff322e62439fd0 // .quad 4251171748059520976
	QUAD $0xb877aa3236a4b449 // .quad -5154464115860392887
	QUAD $0x09befeb9fad487c3 // .quad 702278666647013315
	QUAD $0xe69594bec44de15b // .quad -1831394126398103205
	QUAD $0x4c2ebe687989a9b4 // .quad 5489534351736154548
	QUAD $0x901d7cf73ab0acd9 // .quad -8062150356639896359
	QUAD $0x0f9d37014bf60a11 // .quad 1125115960621402641
	QUAD $0xb424dc35095cd80f // .quad -5466001927372482545
	QUAD $0x538484c19ef38c95 // .quad 6018080969204141205
	QUAD $0xe12e13424bb40e13 // .quad -2220816390788215277
	QUAD $0x2865a5f206b06fba // .quad 2910915193077788602
	QUAD $0x8cbccc096f5088cb // .quad -8305539271883716405
	QUAD $0xf93f87b7442e45d4 // .quad -486521013540076076
	QUAD $0xafebff0bcb24aafe // .quad -5770238071427257602
	QUAD $0xf78f69a51539d749 // .quad -608151266925095095
	QUAD $0xdbe6fecebdedd5be // .quad -2601111570856684098
	QUAD $0xb573440e5a884d1c // .quad -5371875102083756772
	QUAD $0x89705f4136b4a597 // .quad -8543223759426509417
	QUAD $0x31680a88f8953031 // .quad 3560107088838733873
	QUAD $0xabcc77118461cefc // .quad -6067343680855748868
	QUAD $0xfdc20d2b36ba7c3e // .quad -161552157378970562
	QUAD $0xd6bf94d5e57a42bc // .quad -2972493582642298180
	QUAD $0x3d32907604691b4d // .quad 4409745821703674701
	QUAD $0x8637bd05af6c69b5 // .quad -8775337516792518219
	QUAD $0xa63f9a49c2c1b110 // .quad -6467280898289979120
	QUAD $0xa7c5ac471b478423 // .quad -6357485877563259869
	QUAD $0x0fcf80dc33721d54 // .quad 1139270913992301908
	QUAD $0xd1b71758e219652b // .quad -3335171328526686933
	QUAD $0xd3c36113404ea4a9 // .quad -3187597375937010519
	QUAD $0x83126e978d4fdf3b // .quad -9002011107970261189
	QUAD $0x645a1cac083126ea // .quad 7231123676894144234
	QUAD $0xa3d70a3d70a3d70a // .quad -6640827866535438582
	QUAD $0x3d70a3d70a3d70a4 // .quad 4427218577690292388
	QUAD $0xcccccccccccccccc // .quad -3689348814741910324
	QUAD $0xcccccccccccccccd // .quad -3689348814741910323
	QUAD $0x8000000000000000 // .quad -9223372036854775808
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xa000000000000000 // .quad -6917529027641081856
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xc800000000000000 // .quad -4035225266123964416
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xfa00000000000000 // .quad -432345564227567616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0x9c40000000000000 // .quad -7187745005283311616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xc350000000000000 // .quad -4372995238176751616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xf424000000000000 // .quad -854558029293551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0x9896800000000000 // .quad -7451627795949551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xbebc200000000000 // .quad -4702848726509551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xee6b280000000000 // .quad -1266874889709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0x9502f90000000000 // .quad -7709325833709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xba43b74000000000 // .quad -5024971273709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xe8d4a51000000000 // .quad -1669528073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0x9184e72a00000000 // .quad -7960984073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xb5e620f480000000 // .quad -5339544073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xe35fa931a0000000 // .quad -2062744073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0x8e1bc9bf04000000 // .quad -8206744073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xb1a2bc2ec5000000 // .quad -5646744073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xde0b6b3a76400000 // .quad -2446744073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0x8ac7230489e80000 // .quad -8446744073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xad78ebc5ac620000 // .quad -5946744073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xd8d726b7177a8000 // .quad -2821744073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0x878678326eac9000 // .quad -8681119073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xa968163f0a57b400 // .quad -6239712823709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xd3c21bcecceda100 // .quad -3187955011209551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0x84595161401484a0 // .quad -8910000909647051616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xa56fa5b99019a5c8 // .quad -6525815118631426616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xcecb8f27f4200f3a // .quad -3545582879861895366
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0x813f3978f8940984 // .quad -9133518327554766460
	QUAD $0x4000000000000000 // .quad 4611686018427387904
	QUAD $0xa18f07d736b90be5 // .quad -6805211891016070171
	QUAD $0x5000000000000000 // .quad 5764607523034234880
	QUAD $0xc9f2c9cd04674ede // .quad -3894828845342699810
	QUAD $0xa400000000000000 // .quad -6629298651489370112
	QUAD $0xfc6f7c4045812296 // .quad -256850038250986858
	QUAD $0x4d00000000000000 // .quad 5548434740920451072
	QUAD $0x9dc5ada82b70b59d // .quad -7078060301547948643
	QUAD $0xf020000000000000 // .quad -1143914305352105984
	QUAD $0xc5371912364ce305 // .quad -4235889358507547899
	QUAD $0x6c28000000000000 // .quad 7793479155164643328
	QUAD $0xf684df56c3e01bc6 // .quad -683175679707046970
	QUAD $0xc732000000000000 // .quad -4093209111326359552
	QUAD $0x9a130b963a6c115c // .quad -7344513827457986212
	QUAD $0x3c7f400000000000 // .quad 4359273333062107136
	QUAD $0xc097ce7bc90715b3 // .quad -4568956265895094861
	QUAD $0x4b9f100000000000 // .quad 5449091666327633920
	QUAD $0xf0bdc21abb48db20 // .quad -1099509313941480672
	QUAD $0x1e86d40000000000 // .quad 2199678564482154496
	QUAD $0x96769950b50d88f4 // .quad -7604722348854507276
	QUAD $0x1314448000000000 // .quad 1374799102801346560
	QUAD $0xbc143fa4e250eb31 // .quad -4894216917640746191
	QUAD $0x17d955a000000000 // .quad 1718498878501683200
	QUAD $0xeb194f8e1ae525fd // .quad -1506085128623544835
	QUAD $0x5dcfab0800000000 // .quad 6759809616554491904
	QUAD $0x92efd1b8d0cf37be // .quad -7858832233030797378
	QUAD $0x5aa1cae500000000 // .quad 6530724019560251392
	QUAD $0xb7abc627050305ad // .quad -5211854272861108819
	QUAD $0xf14a3d9e40000000 // .quad -1059967012404461568
	QUAD $0xe596b7b0c643c719 // .quad -1903131822648998119
	QUAD $0x6d9ccd05d0000000 // .quad 7898413271349198848
	QUAD $0x8f7e32ce7bea5c6f // .quad -8106986416796705681
	QUAD $0xe4820023a2000000 // .quad -1981020733047832576
	QUAD $0xb35dbf821ae4f38b // .quad -5522047002568494197
	QUAD $0xdda2802c8a800000 // .quad -2476275916309790720
	QUAD $0xe0352f62a19e306e // .quad -2290872734783229842
	QUAD $0xd50b2037ad200000 // .quad -3095344895387238400
	QUAD $0x8c213d9da502de45 // .quad -8349324486880600507
	QUAD $0x4526f422cc340000 // .quad 4982938468024057856
	QUAD $0xaf298d050e4395d6 // .quad -5824969590173362730
	QUAD $0x9670b12b7f410000 // .quad -7606384970252091392
	QUAD $0xdaf3f04651d47b4c // .quad -2669525969289315508
	QUAD $0x3c0cdd765f114000 // .quad 4327076842467049472
	QUAD $0x88d8762bf324cd0f // .quad -8585982758446904049
	QUAD $0xa5880a69fb6ac800 // .quad -6518949010312869888
	QUAD $0xab0e93b6efee0053 // .quad -6120792429631242157
	QUAD $0x8eea0d047a457a00 // .quad -8148686262891087360
	QUAD $0xd5d238a4abe98068 // .quad -3039304518611664792
	QUAD $0x72a4904598d6d880 // .quad 8260886245095692416
	QUAD $0x85a36366eb71f041 // .quad -8817094351773372351
	QUAD $0x47a6da2b7f864750 // .quad 5163053903184807760
	QUAD $0xa70c3c40a64e6c51 // .quad -6409681921289327535
	QUAD $0x999090b65f67d924 // .quad -7381240676301154012
	QUAD $0xd0cf4b50cfe20765 // .quad -3400416383184271515
	QUAD $0xfff4b4e3f741cf6d // .quad -3178808521666707
	QUAD $0x82818f1281ed449f // .quad -9042789267131251553
	QUAD $0xbff8f10e7a8921a5 // .quad -4613672773753429595
	QUAD $0xa321f2d7226895c7 // .quad -6691800565486676537
	QUAD $0xaff72d52192b6a0e // .quad -5767090967191786994
	QUAD $0xcbea6f8ceb02bb39 // .quad -3753064688430957767
	QUAD $0x9bf4f8a69f764491 // .quad -7208863708989733743
	QUAD $0xfee50b7025c36a08 // .quad -79644842111309304
	QUAD $0x02f236d04753d5b5 // .quad 212292400617608629
	QUAD $0x9f4f2726179a2245 // .quad -6967307053960650171
	QUAD $0x01d762422c946591 // .quad 132682750386005393
	QUAD $0xc722f0ef9d80aad6 // .quad -4097447799023424810
	QUAD $0x424d3ad2b7b97ef6 // .quad 4777539456409894646
	QUAD $0xf8ebad2b84e0d58b // .quad -510123730351893109
	QUAD $0xd2e0898765a7deb3 // .quad -3251447716342407501
	QUAD $0x9b934c3b330c8577 // .quad -7236356359111015049
	QUAD $0x63cc55f49f88eb30 // .quad 7191217214140771120
	QUAD $0xc2781f49ffcfa6d5 // .quad -4433759430461380907
	QUAD $0x3cbf6b71c76b25fc // .quad 4377335499248575996
	QUAD $0xf316271c7fc3908a // .quad -930513269649338230
	QUAD $0x8bef464e3945ef7b // .quad -8363388681221443717
	QUAD $0x97edd871cfda3a56 // .quad -7499099821171918250
	QUAD $0x97758bf0e3cbb5ad // .quad -7532960934977096275
	QUAD $0xbde94e8e43d0c8ec // .quad -4762188758037509908
	QUAD $0x3d52eeed1cbea318 // .quad 4418856886560793368
	QUAD $0xed63a231d4c4fb27 // .quad -1341049929119499481
	QUAD $0x4ca7aaa863ee4bde // .quad 5523571108200991710
	QUAD $0x945e455f24fb1cf8 // .quad -7755685233340769032
	QUAD $0x8fe8caa93e74ef6b // .quad -8076983103442849941
	QUAD $0xb975d6b6ee39e436 // .quad -5082920523248573386
	QUAD $0xb3e2fd538e122b45 // .quad -5484542860876174523
	QUAD $0xe7d34c64a9c85d44 // .quad -1741964635633328828
	QUAD $0x60dbbca87196b617 // .quad 6979379479186945559
	QUAD $0x90e40fbeea1d3a4a // .quad -8006256924911912374
	QUAD $0xbc8955e946fe31ce // .quad -4861259862362934834
	QUAD $0xb51d13aea4a488dd // .quad -5396135137712502563
	QUAD $0x6babab6398bdbe42 // .quad 7758483227328495170
	QUAD $0xe264589a4dcdab14 // .quad -2133482903713240300
	QUAD $0xc696963c7eed2dd2 // .quad -4136954021121544750
	QUAD $0x8d7eb76070a08aec // .quad -8250955842461857044
	QUAD $0xfc1e1de5cf543ca3 // .quad -279753253987271517
	QUAD $0xb0de65388cc8ada8 // .quad -5702008784649933400
	QUAD $0x3b25a55f43294bcc // .quad 4261994450943298508
	QUAD $0xdd15fe86affad912 // .quad -2515824962385028846
	QUAD $0x49ef0eb713f39ebf // .quad 5327493063679123135
	QUAD $0x8a2dbf142dfcc7ab // .quad -8489919629131724885
	QUAD $0x6e3569326c784338 // .quad 7941369183226839864
	QUAD $0xacb92ed9397bf996 // .quad -6000713517987268202
	QUAD $0x49c2c37f07965405 // .quad 5315025460606161925
	QUAD $0xd7e77a8f87daf7fb // .quad -2889205879056697349
	QUAD $0xdc33745ec97be907 // .quad -2579590211097073401
	QUAD $0x86f0ac99b4e8dafd // .quad -8723282702051517699
	QUAD $0x69a028bb3ded71a4 // .quad 7611128154919104932
	QUAD $0xa8acd7c0222311bc // .quad -6292417359137009220
	QUAD $0xc40832ea0d68ce0d // .quad -4321147861633282547
	QUAD $0xd2d80db02aabd62b // .quad -3253835680493873621
	QUAD $0xf50a3fa490c30191 // .quad -789748808614215279
	QUAD $0x83c7088e1aab65db // .quad -8951176327949752869
	QUAD $0x792667c6da79e0fb // .quad 8729779031470891259
	QUAD $0xa4b8cab1a1563f52 // .quad -6577284391509803182
	QUAD $0x577001b891185939 // .quad 6300537770911226169
	QUAD $0xcde6fd5e09abcf26 // .quad -3609919470959866074
	QUAD $0xed4c0226b55e6f87 // .quad -1347699823215743097
	QUAD $0x80b05e5ac60b6178 // .quad -9173728696990998152
	QUAD $0x544f8158315b05b5 // .quad 6075216638131242421
	QUAD $0xa0dc75f1778e39d6 // .quad -6855474852811359786
	QUAD $0x696361ae3db1c722 // .quad 7594020797664053026
	QUAD $0xc913936dd571c84c // .quad -3957657547586811828
	QUAD $0x03bc3a19cd1e38ea // .quad 269153960225290474
	QUAD $0xfb5878494ace3a5f // .quad -335385916056126881
	QUAD $0x04ab48a04065c724 // .quad 336442450281613092
	QUAD $0x9d174b2dcec0e47b // .quad -7127145225176161157
	QUAD $0x62eb0d64283f9c77 // .quad 7127805559067090039
	QUAD $0xc45d1df942711d9a // .quad -4297245513042813542
	QUAD $0x3ba5d0bd324f8395 // .quad 4298070930406474645
	QUAD $0xf5746577930d6500 // .quad -759870872876129024
	QUAD $0xca8f44ec7ee3647a // .quad -3850783373846682502
	QUAD $0x9968bf6abbe85f20 // .quad -7392448323188662496
	QUAD $0x7e998b13cf4e1ecc // .quad 9122475437414293196
	QUAD $0xbfc2ef456ae276e8 // .quad -4628874385558440216
	QUAD $0x9e3fedd8c321a67f // .quad -7043649776941685121
	QUAD $0xefb3ab16c59b14a2 // .quad -1174406963520662366
	QUAD $0xc5cfe94ef3ea101f // .quad -4192876202749718497
	QUAD $0x95d04aee3b80ece5 // .quad -7651533379841495835
	QUAD $0xbba1f1d158724a13 // .quad -4926390635932268013
	QUAD $0xbb445da9ca61281f // .quad -4952730706374481889
	QUAD $0x2a8a6e45ae8edc98 // .quad 3065383741939440792
	QUAD $0xea1575143cf97226 // .quad -1579227364540714458
	QUAD $0xf52d09d71a3293be // .quad -779956341003086914
	QUAD $0x924d692ca61be758 // .quad -7904546130479028392
	QUAD $0x593c2626705f9c57 // .quad 6430056314514152535
	QUAD $0xb6e0c377cfa2e12e // .quad -5268996644671397586
	QUAD $0x6f8b2fb00c77836d // .quad 8037570393142690669
	QUAD $0xe498f455c38b997a // .quad -1974559787411859078
	QUAD $0x0b6dfb9c0f956448 // .quad 823590954573587528
	QUAD $0x8edf98b59a373fec // .quad -8151628894773493780
	QUAD $0x4724bd4189bd5ead // .quad 5126430365035880109
	QUAD $0xb2977ee300c50fe7 // .quad -5577850100039479321
	QUAD $0x58edec91ec2cb658 // .quad 6408037956294850136
	QUAD $0xdf3d5e9bc0f653e1 // .quad -2360626606621961247
	QUAD $0x2f2967b66737e3ee // .quad 3398361426941174766
	QUAD $0x8b865b215899f46c // .quad -8392920656779807636
	QUAD $0xbd79e0d20082ee75 // .quad -4793553135802847627
	QUAD $0xae67f1e9aec07187 // .quad -5879464802547371641
	QUAD $0xecd8590680a3aa12 // .quad -1380255401326171630
	QUAD $0xda01ee641a708de9 // .quad -2737644984756826647
	QUAD $0xe80e6f4820cc9496 // .quad -1725319251657714538
	QUAD $0x884134fe908658b2 // .quad -8628557143114098510
	QUAD $0x3109058d147fdcde // .quad 3533361486141316318
	QUAD $0xaa51823e34a7eede // .quad -6174010410465235234
	QUAD $0xbd4b46f0599fd416 // .quad -4806670179178130410
	QUAD $0xd4e5e2cdc1d1ea96 // .quad -3105826994654156138
	QUAD $0x6c9e18ac7007c91b // .quad 7826720331309500699
	QUAD $0x850fadc09923329e // .quad -8858670899299929442
	QUAD $0x03e2cf6bc604ddb1 // .quad 280014188641050033
	QUAD $0xa6539930bf6bff45 // .quad -6461652605697523899
	QUAD $0x84db8346b786151d // .quad -8873354301053463267
	QUAD $0xcfe87f7cef46ff16 // .quad -3465379738694516970
	QUAD $0xe612641865679a64 // .quad -1868320839462053276
	QUAD $0x81f14fae158c5f6e // .quad -9083391364325154962
	QUAD $0x4fcb7e8f3f60c07f // .quad 5749828502977298559
	QUAD $0xa26da3999aef7749 // .quad -6742553186979055799
	QUAD $0xe3be5e330f38f09e // .quad -2036086408133152610
	QUAD $0xcb090c8001ab551c // .quad -3816505465296431844
	QUAD $0x5cadf5bfd3072cc6 // .quad 6678264026688335046
	QUAD $0xfdcb4fa002162a63 // .quad -158945813193151901
	QUAD $0x73d9732fc7c8f7f7 // .quad 8347830033360418807
	QUAD $0x9e9f11c4014dda7e // .quad -7016870160886801794
	QUAD $0x2867e7fddcdd9afb // .quad 2911550761636567803
	QUAD $0xc646d63501a1511d // .quad -4159401682681114339
	QUAD $0xb281e1fd541501b9 // .quad -5583933584809066055
	QUAD $0xf7d88bc24209a565 // .quad -587566084924005019
	QUAD $0x1f225a7ca91a4227 // .quad 2243455055843443239
	QUAD $0x9ae757596946075f // .quad -7284757830718584993
	QUAD $0x3375788de9b06959 // .quad 3708002419115845977
	QUAD $0xc1a12d2fc3978937 // .quad -4494261269970843337
	QUAD $0x0052d6b1641c83af // .quad 23317005467419567
	QUAD $0xf209787bb47d6b84 // .quad -1006140569036166268
	QUAD $0xc0678c5dbd23a49b // .quad -4582539761593113445
	QUAD $0x9745eb4d50ce6332 // .quad -7546366883288685774
	QUAD $0xf840b7ba963646e1 // .quad -558244341782001951
	QUAD $0xbd176620a501fbff // .quad -4821272585683469313
	QUAD $0xb650e5a93bc3d899 // .quad -5309491445654890343
	QUAD $0xec5d3fa8ce427aff // .quad -1414904713676948737
	QUAD $0xa3e51f138ab4cebf // .quad -6636864307068612929
	QUAD $0x93ba47c980e98cdf // .quad -7801844473689174817
	QUAD $0xc66f336c36b10138 // .quad -4148040191917883080
	QUAD $0xb8a8d9bbe123f017 // .quad -5140619573684080617
	QUAD $0xb80b0047445d4185 // .quad -5185050239897353851
	QUAD $0xe6d3102ad96cec1d // .quad -1814088448677712867
	QUAD $0xa60dc059157491e6 // .quad -6481312799871692314
	QUAD $0x9043ea1ac7e41392 // .quad -8051334308064652398
	QUAD $0x87c89837ad68db30 // .quad -8662506518347195600
	QUAD $0xb454e4a179dd1877 // .quad -5452481866653427593
	QUAD $0x29babe4598c311fc // .quad 3006924907348169212
	QUAD $0xe16a1dc9d8545e94 // .quad -2203916314889396588
	QUAD $0xf4296dd6fef3d67b // .quad -853029884242176389
	QUAD $0x8ce2529e2734bb1d // .quad -8294976724446954723
	QUAD $0x1899e4a65f58660d // .quad 1772699331562333709
	QUAD $0xb01ae745b101e9e4 // .quad -5757034887131305500
	QUAD $0x5ec05dcff72e7f90 // .quad 6827560182880305040
	QUAD $0xdc21a1171d42645d // .quad -2584607590486743971
	QUAD $0x76707543f4fa1f74 // .quad 8534450228600381300
	QUAD $0x899504ae72497eba // .quad -8532908771695296838
	QUAD $0x6a06494a791c53a9 // .quad 7639874402088932265
	QUAD $0xabfa45da0edbde69 // .quad -6054449946191733143
	QUAD $0x0487db9d17636893 // .quad 326470965756389523
	QUAD $0xd6f8d7509292d603 // .quad -2956376414312278525
	QUAD $0x45a9d2845d3c42b7 // .quad 5019774725622874807
	QUAD $0x865b86925b9bc5c2 // .quad -8765264286586255934
	QUAD $0x0b8a2392ba45a9b3 // .quad 831516194300602803
	QUAD $0xa7f26836f282b732 // .quad -6344894339805432014
	QUAD $0x8e6cac7768d7141f // .quad -8183976793979022305
	QUAD $0xd1ef0244af2364ff // .quad -3319431906329402113
	QUAD $0x3207d795430cd927 // .quad 3605087062808385831
	QUAD $0x8335616aed761f1f // .quad -8992173969096958177
	QUAD $0x7f44e6bd49e807b9 // .quad 9170708441896323001
	QUAD $0xa402b9c5a8d3a6e7 // .quad -6628531442943809817
	QUAD $0x5f16206c9c6209a7 // .quad 6851699533943015847
	QUAD $0xcd036837130890a1 // .quad -3673978285252374367
	QUAD $0x36dba887c37a8c10 // .quad 3952938399001381904
	QUAD $0x802221226be55a64 // .quad -9213765455923815836
	QUAD $0xc2494954da2c978a // .quad -4446942528265218166
	QUAD $0xa02aa96b06deb0fd // .quad -6905520801477381891
	QUAD $0xf2db9baa10b7bd6d // .quad -946992141904134803
	QUAD $0xc83553c5c8965d3d // .quad -4020214983419339459
	QUAD $0x6f92829494e5acc8 // .quad 8039631859474607304
	QUAD $0xfa42a8b73abbf48c // .quad -413582710846786420
	QUAD $0xcb772339ba1f17fa // .quad -3785518230938904582
	QUAD $0x9c69a97284b578d7 // .quad -7176018221920323369
	QUAD $0xff2a760414536efc // .quad -60105885123121412
	QUAD $0xc38413cf25e2d70d // .quad -4358336758973016307
	QUAD $0xfef5138519684abb // .quad -75132356403901765
	QUAD $0xf46518c2ef5b8cd1 // .quad -836234930288882479
	QUAD $0x7eb258665fc25d6a // .quad 9129456591349898602
	QUAD $0x98bf2f79d5993802 // .quad -7440175859071633406
	QUAD $0xef2f773ffbd97a62 // .quad -1211618658047395230
	QUAD $0xbeeefb584aff8603 // .quad -4688533805412153853
	QUAD $0xaafb550ffacfd8fb // .quad -6126209340986631941
	QUAD $0xeeaaba2e5dbf6784 // .quad -1248981238337804412
	QUAD $0x95ba2a53f983cf39 // .quad -7657761676233289927
	QUAD $0x952ab45cfa97a0b2 // .quad -7698142301602209614
	QUAD $0xdd945a747bf26184 // .quad -2480258038432112252
	QUAD $0xba756174393d88df // .quad -5010991858575374113
	QUAD $0x94f971119aeef9e5 // .quad -7712008566467528219
	QUAD $0xe912b9d1478ceb17 // .quad -1652053804791829737
	QUAD $0x7a37cd5601aab85e // .quad 8806733365625141342
	QUAD $0x91abb422ccb812ee // .quad -7950062655635975442
	QUAD $0xac62e055c10ab33b // .quad -6025006692552756421
	QUAD $0xb616a12b7fe617aa // .quad -5325892301117581398
	QUAD $0x577b986b314d600a // .quad 6303799689591218186
	QUAD $0xe39c49765fdf9d94 // .quad -2045679357969588844
	QUAD $0xed5a7e85fda0b80c // .quad -1343622424865753076
	QUAD $0x8e41ade9fbebc27d // .quad -8196078626372074883
	QUAD $0x14588f13be847308 // .quad 1466078993672598280
	QUAD $0xb1d219647ae6b31c // .quad -5633412264537705700
	QUAD $0x596eb2d8ae258fc9 // .quad 6444284760518135753
	QUAD $0xde469fbd99a05fe3 // .quad -2430079312244744221
	QUAD $0x6fca5f8ed9aef3bc // .quad 8055355950647669692
	QUAD $0x8aec23d680043bee // .quad -8436328597794046994
	QUAD $0x25de7bb9480d5855 // .quad 2728754459941099605
	QUAD $0xada72ccc20054ae9 // .quad -5933724728815170839
	QUAD $0xaf561aa79a10ae6b // .quad -5812428961928401301
	QUAD $0xd910f7ff28069da4 // .quad -2805469892591575644
	QUAD $0x1b2ba1518094da05 // .quad 1957835834444274181
	QUAD $0x87aa9aff79042286 // .quad -8670947710510816634
	QUAD $0x90fb44d2f05d0843 // .quad -7999724640327104445
	QUAD $0xa99541bf57452b28 // .quad -6226998619711132888
	QUAD $0x353a1607ac744a54 // .quad 3835402254873283156
	QUAD $0xd3fa922f2d1675f2 // .quad -3172062256211528206
	QUAD $0x42889b8997915ce9 // .quad 4794252818591603945
	QUAD $0x847c9b5d7c2e09b7 // .quad -8900067937773286985
	QUAD $0x69956135febada12 // .quad 7608094030047140370
	QUAD $0xa59bc234db398c25 // .quad -6513398903789220827
	QUAD $0x43fab9837e699096 // .quad 4898431519131537558
	QUAD $0xcf02b2c21207ef2e // .quad -3530062611309138130
	QUAD $0x94f967e45e03f4bc // .quad -7712018656367741764
	QUAD $0x8161afb94b44f57d // .quad -9123818159709293187
	QUAD $0x1d1be0eebac278f6 // .quad 2097517367411243254
	QUAD $0xa1ba1ba79e1632dc // .quad -6793086681209228580
	QUAD $0x6462d92a69731733 // .quad 7233582727691441971
	QUAD $0xca28a291859bbf93 // .quad -3879672333084147821
	QUAD $0x7d7b8f7503cfdcff // .quad 9041978409614302463
	QUAD $0xfcb2cb35e702af78 // .quad -237904397927796872
	QUAD $0x5cda735244c3d43f // .quad 6690786993590490175
	QUAD $0x9defbf01b061adab // .quad -7066219276345954901
	QUAD $0x3a0888136afa64a8 // .quad 4181741870994056360
	QUAD $0xc56baec21c7a1916 // .quad -4221088077005055722
	QUAD $0x088aaa1845b8fdd1 // .quad 615491320315182545
	QUAD $0xf6c69a72a3989f5b // .quad -664674077828931749
	QUAD $0x8aad549e57273d46 // .quad -8454007886460797626
	QUAD $0x9a3c2087a63f6399 // .quad -7332950326284164199
	QUAD $0x36ac54e2f678864c // .quad 3939617107816777292
	QUAD $0xc0cb28a98fcf3c7f // .quad -4554501889427817345
	QUAD $0x84576a1bb416a7de // .quad -8910536670511192098
	QUAD $0xf0fdf2d3f3c30b9f // .quad -1081441343357383777
	QUAD $0x656d44a2a11c51d6 // .quad 7308573235570561494
	QUAD $0x969eb7c47859e743 // .quad -7593429867239446717
	QUAD $0x9f644ae5a4b1b326 // .quad -6961356773836868826
	QUAD $0xbc4665b596706114 // .quad -4880101315621920492
	QUAD $0x873d5d9f0dde1fef // .quad -8701695967296086033
	QUAD $0xeb57ff22fc0c7959 // .quad -1488440626100012711
	QUAD $0xa90cb506d155a7eb // .quad -6265433940692719637
	QUAD $0x9316ff75dd87cbd8 // .quad -7847804418953589800
	QUAD $0x09a7f12442d588f3 // .quad 695789805494438131
	QUAD $0xb7dcbf5354e9bece // .quad -5198069505264599346
	QUAD $0x0c11ed6d538aeb30 // .quad 869737256868047664
	QUAD $0xe5d3ef282a242e81 // .quad -1885900863153361279
	QUAD $0x8f1668c8a86da5fb // .quad -8136200465769716229
	QUAD $0x8fa475791a569d10 // .quad -8096217067111932656
	QUAD $0xf96e017d694487bd // .quad -473439272678684739
	QUAD $0xb38d92d760ec4455 // .quad -5508585315462527915
	QUAD $0x37c981dcc395a9ad // .quad 4019886927579031981
	QUAD $0xe070f78d3927556a // .quad -2274045625900771990
	QUAD $0x85bbe253f47b1418 // .quad -8810199395808373736
	QUAD $0x8c469ab843b89562 // .quad -8338807543829064350
	QUAD $0x93956d7478ccec8f // .quad -7812217631593927537
	QUAD $0xaf58416654a6babb // .quad -5811823411358942533
	QUAD $0x387ac8d1970027b3 // .quad 4069786015789754291
	QUAD $0xdb2e51bfe9d0696a // .quad -2653093245771290262
	QUAD $0x06997b05fcc0319f // .quad 475546501309804959
	QUAD $0x88fcf317f22241e2 // .quad -8575712306248138270
	QUAD $0x441fece3bdf81f04 // .quad 4908902581746016004
	QUAD $0xab3c2fddeeaad25a // .quad -6107954364382784934
	QUAD $0xd527e81cad7626c4 // .quad -3087243809672255804
	QUAD $0xd60b3bd56a5586f1 // .quad -3023256937051093263
	QUAD $0x8a71e223d8d3b075 // .quad -8470740780517707659
	QUAD $0x85c7056562757456 // .quad -8807064613298015146
	QUAD $0xf6872d5667844e4a // .quad -682526969396179382
	QUAD $0xa738c6bebb12d16c // .quad -6397144748195131028
	QUAD $0xb428f8ac016561dc // .quad -5464844730172612132
	QUAD $0xd106f86e69d785c7 // .quad -3384744916816525881
	QUAD $0xe13336d701beba53 // .quad -2219369894288377261
	QUAD $0x82a45b450226b39c // .quad -9032994600651410532
	QUAD $0xecc0024661173474 // .quad -1387106183930235788
	QUAD $0xa34d721642b06084 // .quad -6679557232386875260
	QUAD $0x27f002d7f95d0191 // .quad 2877803288514593169
	QUAD $0xcc20ce9bd35c78a5 // .quad -3737760522056206171
	QUAD $0x31ec038df7b441f5 // .quad 3597254110643241461
	QUAD $0xff290242c83396ce // .quad -60514634142869810
	QUAD $0x7e67047175a15272 // .quad 9108253656731439730
	QUAD $0x9f79a169bd203e41 // .quad -6955350673980375487
	QUAD $0x0f0062c6e984d387 // .quad 1080972517029761927
	QUAD $0xc75809c42c684dd1 // .quad -4082502324048081455
	QUAD $0x52c07b78a3e60869 // .quad 5962901664714590313
	QUAD $0xf92e0c3537826145 // .quad -491441886632713915
	QUAD $0xa7709a56ccdf8a83 // .quad -6381430974388925821
	QUAD $0x9bbcc7a142b17ccb // .quad -7224680206786528053
	QUAD $0x88a66076400bb692 // .quad -8600080377420466542
	QUAD $0xc2abf989935ddbfe // .quad -4419164240055772162
	QUAD $0x6acff893d00ea436 // .quad 7696643601933968438
	QUAD $0xf356f7ebf83552fe // .quad -912269281642327298
	QUAD $0x0583f6b8c4124d44 // .quad 397432465562684740
	QUAD $0x98165af37b2153de // .quad -7487697328667536418
	QUAD $0xc3727a337a8b704b // .quad -4363290727450709941
	QUAD $0xbe1bf1b059e9a8d6 // .quad -4747935642407032618
	QUAD $0x744f18c0592e4c5d // .quad 8380944645968776285
	QUAD $0xeda2ee1c7064130c // .quad -1323233534581402868
	QUAD $0x1162def06f79df74 // .quad 1252808770606194548
	QUAD $0x9485d4d1c63e8be7 // .quad -7744549986754458649
	QUAD $0x8addcb5645ac2ba9 // .quad -8440366555225904215
	QUAD $0xb9a74a0637ce2ee1 // .quad -5069001465015685407
	QUAD $0x6d953e2bd7173693 // .quad 7896285879677171347
	QUAD $0xe8111c87c5c1ba99 // .quad -1724565812842218855
	QUAD $0xc8fa8db6ccdd0438 // .quad -3964700705685699528
	QUAD $0x910ab1d4db9914a0 // .quad -7995382660667468640
	QUAD $0x1d9c9892400a22a3 // .quad 2133748077373825699
	QUAD $0xb54d5e4a127f59c8 // .quad -5382542307406947896
	QUAD $0x2503beb6d00cab4c // .quad 2667185096717282124
	QUAD $0xe2a0b5dc971f303a // .quad -2116491865831296966
	QUAD $0x2e44ae64840fd61e // .quad 3333981370896602654
	QUAD $0x8da471a9de737e24 // .quad -8240336443785642460
	QUAD $0x5ceaecfed289e5d3 // .quad 6695424375237764563
	QUAD $0xb10d8e1456105dad // .quad -5688734536304665171
	QUAD $0x7425a83e872c5f48 // .quad 8369280469047205704
	QUAD $0xdd50f1996b947518 // .quad -2499232151953443560
	QUAD $0xd12f124e28f7771a // .quad -3373457468973156582
	QUAD $0x8a5296ffe33cc92f // .quad -8479549122611984081
	QUAD $0x82bd6b70d99aaa70 // .quad -9025939945749304720
	QUAD $0xace73cbfdc0bfb7b // .quad -5987750384837592197
	QUAD $0x636cc64d1001550c // .quad 7164319141522920716
	QUAD $0xd8210befd30efa5a // .quad -2873001962619602342
	QUAD $0x3c47f7e05401aa4f // .quad 4343712908476262991
	QUAD $0x8714a775e3e95c78 // .quad -8713155254278333320
	QUAD $0x65acfaec34810a72 // .quad 7326506586225052274
	QUAD $0xa8d9d1535ce3b396 // .quad -6279758049420528746
	QUAD $0x7f1839a741a14d0e // .quad 9158133232781315342
	QUAD $0xd31045a8341ca07c // .quad -3238011543348273028
	QUAD $0x1ede48111209a051 // .quad 2224294504121868369
	QUAD $0x83ea2b892091e44d // .quad -8941286242233752499
	QUAD $0x934aed0aab460433 // .quad -7833187971778608077
	QUAD $0xa4e4b66b68b65d60 // .quad -6564921784364802720
	QUAD $0xf81da84d56178540 // .quad -568112927868484288
	QUAD $0xce1de40642e3f4b9 // .quad -3594466212028615495
	QUAD $0x36251260ab9d668f // .quad 3901544858591782543
	QUAD $0x80d2ae83e9ce78f3 // .quad -9164070410158966541
	QUAD $0xc1d72b7c6b42601a // .quad -4479063491021217766
	QUAD $0xa1075a24e4421730 // .quad -6843401994271320272
	QUAD $0xb24cf65b8612f820 // .quad -5598829363776522208
	QUAD $0xc94930ae1d529cfc // .quad -3942566474411762436
	QUAD $0xdee033f26797b628 // .quad -2386850686293264856
	QUAD $0xfb9b7cd9a4a7443c // .quad -316522074587315140
	QUAD $0x169840ef017da3b2 // .quad 1628122660560806834
	QUAD $0x9d412e0806e88aa5 // .quad -7115355324258153819
	QUAD $0x8e1f289560ee864f // .quad -8205795374004271537
	QUAD $0xc491798a08a2ad4e // .quad -4282508136895304370
	QUAD $0xf1a6f2bab92a27e3 // .quad -1033872180650563613
	QUAD $0xf5b5d7ec8acb58a2 // .quad -741449152691742558
	QUAD $0xae10af696774b1dc // .quad -5904026244240592420
	QUAD $0x9991a6f3d6bf1765 // .quad -7380934748073420955
	QUAD $0xacca6da1e0a8ef2a // .quad -5995859411864064214
	QUAD $0xbff610b0cc6edd3f // .quad -4614482416664388289
	QUAD $0x17fd090a58d32af4 // .quad 1728547772024695540
	QUAD $0xeff394dcff8a948e // .quad -1156417002403097458
	QUAD $0xddfc4b4cef07f5b1 // .quad -2451001303396518479
	QUAD $0x95f83d0a1fb69cd9 // .quad -7640289654143017767
	QUAD $0x4abdaf101564f98f // .quad 5385653213018257807
	QUAD $0xbb764c4ca7a4440f // .quad -4938676049251384305
	QUAD $0x9d6d1ad41abe37f2 // .quad -7102991539009341454
	QUAD $0xea53df5fd18d5513 // .quad -1561659043136842477
	QUAD $0x84c86189216dc5ee // .quad -8878739423761676818
	QUAD $0x92746b9be2f8552c // .quad -7893565929601608404
	QUAD $0x32fd3cf5b4e49bb5 // .quad 3674159897003727797
	QUAD $0xb7118682dbb66a77 // .quad -5255271393574622601
	QUAD $0x3fbc8c33221dc2a2 // .quad 4592699871254659746
	QUAD $0xe4d5e82392a40515 // .quad -1957403223540890347
	QUAD $0x0fabaf3feaa5334b // .quad 1129188820640936779
	QUAD $0x8f05b1163ba6832d // .quad -8140906042354138323
	QUAD $0x29cb4d87f2a7400f // .quad 3011586022114279439
	QUAD $0xb2c71d5bca9023f8 // .quad -5564446534515285000
	QUAD $0x743e20e9ef511013 // .quad 8376168546070237203
	QUAD $0xdf78e4b2bd342cf6 // .quad -2343872149716718346
	QUAD $0x914da9246b255417 // .quad -7976533391121755113
	QUAD $0x8bab8eefb6409c1a // .quad -8382449121214030822
	QUAD $0x1ad089b6c2f7548f // .quad 1932195658189984911
	QUAD $0xae9672aba3d0c320 // .quad -5866375383090150624
	QUAD $0xa184ac2473b529b2 // .quad -6808127464117294670
	QUAD $0xda3c0f568cc4f3e8 // .quad -2721283210435300376
	QUAD $0xc9e5d72d90a2741f // .quad -3898473311719230433
	QUAD $0x8865899617fb1871 // .quad -8618331034163144591
	QUAD $0x7e2fa67c7a658893 // .quad 9092669226243950739
	QUAD $0xaa7eebfb9df9de8d // .quad -6161227774276542835
	QUAD $0xddbb901b98feeab8 // .quad -2469221522477225288
	QUAD $0xd51ea6fa85785631 // .quad -3089848699418290639
	QUAD $0x552a74227f3ea566 // .quad 6136845133758244198
	QUAD $0x8533285c936b35de // .quad -8848684464777513506
	QUAD $0xd53a88958f872760 // .quad -3082000819042179232
	QUAD $0xa67ff273b8460356 // .quad -6449169562544503978
	QUAD $0x8a892abaf368f138 // .quad -8464187042230111944
	QUAD $0xd01fef10a657842c // .quad -3449775934753242068
	QUAD $0x2d2b7569b0432d86 // .quad 3254824252494523782
	QUAD $0x8213f56a67f6b29b // .quad -9073638986861858149
	QUAD $0x9c3b29620e29fc74 // .quad -7189106879045698444
	QUAD $0xa298f2c501f45f42 // .quad -6730362715149934782
	QUAD $0x8349f3ba91b47b90 // .quad -8986383598807123056
	QUAD $0xcb3f2f7642717713 // .quad -3801267375510030573
	QUAD $0x241c70a936219a74 // .quad 2602078556773259892
	QUAD $0xfe0efb53d30dd4d7 // .quad -139898200960150313
	QUAD $0xed238cd383aa0111 // .quad -1359087822460813039
	QUAD $0x9ec95d1463e8a506 // .quad -7004965403241175802
	QUAD $0xf4363804324a40ab // .quad -849429889038008149
	QUAD $0xc67bb4597ce2ce48 // .quad -4144520735624081848
	QUAD $0xb143c6053edcd0d6 // .quad -5673473379724898090
	QUAD $0xf81aa16fdc1b81da // .quad -568964901102714406
	QUAD $0xdd94b7868e94050b // .quad -2480155706228734709
	QUAD $0x9b10a4e5e9913128 // .quad -7273132090830278360
	QUAD $0xca7cf2b4191c8327 // .quad -3855940325606653145
	QUAD $0xc1d4ce1f63f57d72 // .quad -4479729095110460046
	QUAD $0xfd1c2f611f63a3f1 // .quad -208239388580928527
	QUAD $0xf24a01a73cf2dccf // .quad -987975350460687153
	QUAD $0xbc633b39673c8ced // .quad -4871985254153548563
	QUAD $0x976e41088617ca01 // .quad -7535013621679011327
	QUAD $0xd5be0503e085d814 // .quad -3044990783845967852
	QUAD $0xbd49d14aa79dbc82 // .quad -4807081008671376254
	QUAD $0x4b2d8644d8a74e19 // .quad 5417133557047315993
	QUAD $0xec9c459d51852ba2 // .quad -1397165242411832414
	QUAD $0xddf8e7d60ed1219f // .quad -2451955090545630817
	QUAD $0x93e1ab8252f33b45 // .quad -7790757304148477115
	QUAD $0xcabb90e5c942b504 // .quad -3838314940804713212
	QUAD $0xb8da1662e7b00a17 // .quad -5126760611758208489
	QUAD $0x3d6a751f3b936244 // .quad 4425478360848884292
	QUAD $0xe7109bfba19c0c9d // .quad -1796764746270372707
	QUAD $0x0cc512670a783ad5 // .quad 920161932633717461
	QUAD $0x906a617d450187e2 // .quad -8040506994060064798
	QUAD $0x27fb2b80668b24c6 // .quad 2880944217109767366
	QUAD $0xb484f9dc9641e9da // .quad -5438947724147693094
	QUAD $0xb1f9f660802dedf7 // .quad -5622191765467566601
	QUAD $0xe1a63853bbd26451 // .quad -2186998636757228463
	QUAD $0x5e7873f8a0396974 // .quad 6807318348447705460
	QUAD $0x8d07e33455637eb2 // .quad -8284403175614349646
	QUAD $0xdb0b487b6423e1e9 // .quad -2662955059861265943
	QUAD $0xb049dc016abc5e5f // .quad -5743817951090549153
	QUAD $0x91ce1a9a3d2cda63 // .quad -7940379843253970333
	QUAD $0xdc5c5301c56b75f7 // .quad -2568086420435798537
	QUAD $0x7641a140cc7810fc // .quad 8521269269642088700
	QUAD $0x89b9b3e11b6329ba // .quad -8522583040413455942
	QUAD $0xa9e904c87fcb0a9e // .quad -6203421752542164322
	QUAD $0xac2820d9623bf429 // .quad -6041542782089432023
	QUAD $0x546345fa9fbdcd45 // .quad 6080780864604458309
	QUAD $0xd732290fbacaf133 // .quad -2940242459184402125
	QUAD $0xa97c177947ad4096 // .quad -6234081974526590826
	QUAD $0x867f59a9d4bed6c0 // .quad -8755180564631333184
	QUAD $0x49ed8eabcccc485e // .quad 5327070802775656542
	QUAD $0xa81f301449ee8c70 // .quad -6332289687361778576
	QUAD $0x5c68f256bfff5a75 // .quad 6658838503469570677
	QUAD $0xd226fc195c6a2f8c // .quad -3303676090774835316
	QUAD $0x73832eec6fff3112 // .quad 8323548129336963346
	QUAD $0x83585d8fd9c25db7 // .quad -8982326584375353929
	QUAD $0xc831fd53c5ff7eac // .quad -4021154456019173716
	QUAD $0xa42e74f3d032f525 // .quad -6616222212041804507
	QUAD $0xba3e7ca8b77f5e56 // .quad -5026443070023967146
	QUAD $0xcd3a1230c43fb26f // .quad -3658591746624867729
	QUAD $0x28ce1bd2e55f35ec // .quad 2940318199324816876
	QUAD $0x80444b5e7aa7cf85 // .quad -9204148869281624187
	QUAD $0x7980d163cf5b81b4 // .quad 8755227902219092404
	QUAD $0xa0555e361951c366 // .quad -6893500068174642330
	QUAD $0xd7e105bcc3326220 // .quad -2891023177508298208
	QUAD $0xc86ab5c39fa63440 // .quad -4005189066790915008
	QUAD $0x8dd9472bf3fefaa8 // .quad -8225464990312760664
	QUAD $0xfa856334878fc150 // .quad -394800315061255856
	QUAD $0xb14f98f6f0feb952 // .quad -5670145219463562926
	QUAD $0x9c935e00d4b9d8d2 // .quad -7164279224554366766
	QUAD $0x6ed1bf9a569f33d4 // .quad 7985374283903742932
	QUAD $0xc3b8358109e84f07 // .quad -4343663012265570553
	QUAD $0x0a862f80ec4700c9 // .quad 758345818024902857
	QUAD $0xf4a642e14c6262c8 // .quad -817892746904575288
	QUAD $0xcd27bb612758c0fb // .quad -3663753745896259333
	QUAD $0x98e7e9cccfbd7dbd // .quad -7428711994456441411
	QUAD $0x8038d51cb897789d // .quad -9207375118826243939
	QUAD $0xbf21e44003acdd2c // .quad -4674203974643163860
	QUAD $0xe0470a63e6bd56c4 // .quad -2285846861678029116
	QUAD $0xeeea5d5004981478 // .quad -1231068949876566920
	QUAD $0x1858ccfce06cac75 // .quad 1754377441329851509
	QUAD $0x95527a5202df0ccb // .quad -7686947121313936181
	QUAD $0x0f37801e0c43ebc9 // .quad 1096485900831157193
	QUAD $0xbaa718e68396cffd // .quad -4996997883215032323
	QUAD $0xd30560258f54e6bb // .quad -3241078642388441413
	QUAD $0xe950df20247c83fd // .quad -1634561335591402499
	QUAD $0x47c6b82ef32a206a // .quad 5172023733869224042
	QUAD $0x91d28b7416cdd27e // .quad -7939129862385708418
	QUAD $0x4cdc331d57fa5442 // .quad 5538357842881958978
	QUAD $0xb6472e511c81471d // .quad -5312226309554747619
	QUAD $0xe0133fe4adf8e953 // .quad -2300424733252327085
	QUAD $0xe3d8f9e563a198e5 // .quad -2028596868516046619
	QUAD $0x58180fddd97723a7 // .quad 6347841120289366951
	QUAD $0x8e679c2f5e44ff8f // .quad -8185402070463610993
	QUAD $0x570f09eaa7ea7649 // .quad 6273243709394548297
	QUAD $0xb201833b35d63f73 // .quad -5620066569652125837
	QUAD $0x2cd2cc6551e513db // .quad 3229868618315797467
	QUAD $0xde81e40a034bcf4f // .quad -2413397193637769393
	QUAD $0xf8077f7ea65e58d2 // .quad -574350245532641070
	QUAD $0x8b112e86420f6191 // .quad -8425902273664687727
	QUAD $0xfb04afaf27faf783 // .quad -358968903457900669
	QUAD $0xadd57a27d29339f6 // .quad -5920691823653471754
	QUAD $0x79c5db9af1f9b564 // .quad 8774660907532399972
	QUAD $0xd94ad8b1c7380874 // .quad -2789178761139451788
	QUAD $0x18375281ae7822bd // .quad 1744954097560724157
	QUAD $0x87cec76f1c830548 // .quad -8660765753353239224
	QUAD $0x8f2293910d0b15b6 // .quad -8132775725879323210
	QUAD $0xa9c2794ae3a3c69a // .quad -6214271173264161126
	QUAD $0xb2eb3875504ddb23 // .quad -5554283638921766109
	QUAD $0xd433179d9c8cb841 // .quad -3156152948152813503
	QUAD $0x5fa60692a46151ec // .quad 6892203506629956076
	QUAD $0x849feec281d7f328 // .quad -8890124620236590296
	QUAD $0xdbc7c41ba6bcd334 // .quad -2609901835997359308
	QUAD $0xa5c7ea73224deff3 // .quad -6500969756868349965
	QUAD $0x12b9b522906c0801 // .quad 1349308723430688769
	QUAD $0xcf39e50feae16bef // .quad -3514526177658049553
	QUAD $0xd768226b34870a01 // .quad -2925050114139026943
	QUAD $0x81842f29f2cce375 // .quad -9114107888677362827
	QUAD $0xe6a1158300d46641 // .quad -1828156321336891839
	QUAD $0xa1e53af46f801c53 // .quad -6780948842419315629
	QUAD $0x60495ae3c1097fd1 // .quad 6938176635183661009
	QUAD $0xca5e89b18b602368 // .quad -3864500034596756632
	QUAD $0x385bb19cb14bdfc5 // .quad 4061034775552188357
	QUAD $0xfcf62c1dee382c42 // .quad -218939024818557886
	QUAD $0x46729e03dd9ed7b6 // .quad 5076293469440235446
	QUAD $0x9e19db92b4e31ba9 // .quad -7054365918152680535
	QUAD $0x6c07a2c26a8346d2 // .quad 7784369436827535058

	// .p2align 4, 0x00
_Digits:
	QUAD $0x3330323031303030; QUAD $0x3730363035303430 // .ascii 16, '0001020304050607'
	QUAD $0x3131303139303830; QUAD $0x3531343133313231 // .ascii 16, '0809101112131415'
	QUAD $0x3931383137313631; QUAD $0x3332323231323032 // .ascii 16, '1617181920212223'
	QUAD $0x3732363235323432; QUAD $0x3133303339323832 // .ascii 16, '2425262728293031'
	QUAD $0x3533343333333233; QUAD $0x3933383337333633 // .ascii 16, '3233343536373839'
	QUAD $0x3334323431343034; QUAD $0x3734363435343434 // .ascii 16, '4041424344454647'
	QUAD $0x3135303539343834; QUAD $0x3535343533353235 // .ascii 16, '4849505152535455'
	QUAD $0x3935383537353635; QUAD $0x3336323631363036 // .ascii 16, '5657585960616263'
	QUAD $0x3736363635363436; QUAD $0x3137303739363836 // .ascii 16, '6465666768697071'
	QUAD $0x3537343733373237; QUAD $0x3937383737373637 // .ascii 16, '7273747576777879'
	QUAD $0x3338323831383038; QUAD $0x3738363835383438 // .ascii 16, '8081828384858687'
	QUAD $0x3139303939383838; QUAD $0x3539343933393239 // .ascii 16, '8889909192939495'
	QUAD $0x3939383937393639                           // .ascii 8, '96979899'
	QUAD $0x0000000000000000                           // .p2align 4, 0x00

_VecShiftShuffles:
	QUAD $0x0706050403020100; QUAD $0x0f0e0d0c0b0a0908 // .ascii 16, '\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f'
	QUAD $0x0807060504030201; QUAD $0xff0f0e0d0c0b0a09 // .ascii 16, '\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff'
	QUAD $0x0908070605040302; QUAD $0xffff0f0e0d0c0b0a // .ascii 16, '\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff'
	QUAD $0x0a09080706050403; QUAD $0xffffff0f0e0d0c0b // .ascii 16, '\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff\xff'
	QUAD $0x0b0a090807060504; QUAD $0xffffffff0f0e0d0c // .ascii 16, '\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff\xff\xff'
	QUAD $0x0c0b0a0908070605; QUAD $0xffffffffff0f0e0d // .ascii 16, '\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff\xff\xff\xff'
	QUAD $0x0d0c0b0a09080706; QUAD $0xffffffffffff0f0e // .ascii 16, '\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff\xff\xff\xff\xff'
	QUAD $0x0e0d0c0b0a090807; QUAD $0xffffffffffffff0f // .ascii 16, '\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0x0f0e0d0c0b0a0908; QUAD $0xffffffffffffffff // .ascii 16, '\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff\xff\xff\xff\xff\xff\xff'

	// .p2align 4, 0x00
__SingleQuoteTab:
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000030303030755c                           // .asciz 8, '\\u0000\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000031303030755c                           // .asciz 8, '\\u0001\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000032303030755c                           // .asciz 8, '\\u0002\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000033303030755c                           // .asciz 8, '\\u0003\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000034303030755c                           // .asciz 8, '\\u0004\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000035303030755c                           // .asciz 8, '\\u0005\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000036303030755c                           // .asciz 8, '\\u0006\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000037303030755c                           // .asciz 8, '\\u0007\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000038303030755c                           // .asciz 8, '\\u0008\x00\x00'
	QUAD $0x0000000000000002                           // .quad 2
	QUAD $0x000000000000745c                           // .asciz 8, '\\t\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000002                           // .quad 2
	QUAD $0x0000000000006e5c                           // .asciz 8, '\\n\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000062303030755c                           // .asciz 8, '\\u000b\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000063303030755c                           // .asciz 8, '\\u000c\x00\x00'
	QUAD $0x0000000000000002                           // .quad 2
	QUAD $0x000000000000725c                           // .asciz 8, '\\r\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000065303030755c                           // .asciz 8, '\\u000e\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000066303030755c                           // .asciz 8, '\\u000f\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000030313030755c                           // .asciz 8, '\\u0010\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000031313030755c                           // .asciz 8, '\\u0011\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000032313030755c                           // .asciz 8, '\\u0012\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000033313030755c                           // .asciz 8, '\\u0013\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000034313030755c                           // .asciz 8, '\\u0014\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000035313030755c                           // .asciz 8, '\\u0015\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000036313030755c                           // .asciz 8, '\\u0016\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000037313030755c                           // .asciz 8, '\\u0017\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000038313030755c                           // .asciz 8, '\\u0018\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000039313030755c                           // .asciz 8, '\\u0019\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000061313030755c                           // .asciz 8, '\\u001a\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000062313030755c                           // .asciz 8, '\\u001b\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000063313030755c                           // .asciz 8, '\\u001c\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000064313030755c                           // .asciz 8, '\\u001d\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000065313030755c                           // .asciz 8, '\\u001e\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000066313030755c                           // .asciz 8, '\\u001f\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000002                           // .quad 2
	QUAD $0x000000000000225c                           // .asciz 8, '\\"\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000002                           // .quad 2
	QUAD $0x0000000000005c5c                           // .asciz 8, '\\\\\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

	// .p2align 4, 0x00
__DoubleQuoteTab:
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0030303030755c5c                           // .asciz 8, '\\\\u0000\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0031303030755c5c                           // .asciz 8, '\\\\u0001\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0032303030755c5c                           // .asciz 8, '\\\\u0002\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0033303030755c5c                           // .asciz 8, '\\\\u0003\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0034303030755c5c                           // .asciz 8, '\\\\u0004\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0035303030755c5c                           // .asciz 8, '\\\\u0005\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0036303030755c5c                           // .asciz 8, '\\\\u0006\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0037303030755c5c                           // .asciz 8, '\\\\u0007\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0038303030755c5c                           // .asciz 8, '\\\\u0008\x00'
	QUAD $0x0000000000000003                           // .quad 3
	QUAD $0x0000000000745c5c                           // .asciz 8, '\\\\t\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000003                           // .quad 3
	QUAD $0x00000000006e5c5c                           // .asciz 8, '\\\\n\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0062303030755c5c                           // .asciz 8, '\\\\u000b\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0063303030755c5c                           // .asciz 8, '\\\\u000c\x00'
	QUAD $0x0000000000000003                           // .quad 3
	QUAD $0x0000000000725c5c                           // .asciz 8, '\\\\r\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0065303030755c5c                           // .asciz 8, '\\\\u000e\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0066303030755c5c                           // .asciz 8, '\\\\u000f\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0030313030755c5c                           // .asciz 8, '\\\\u0010\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0031313030755c5c                           // .asciz 8, '\\\\u0011\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0032313030755c5c                           // .asciz 8, '\\\\u0012\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0033313030755c5c                           // .asciz 8, '\\\\u0013\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0034313030755c5c                           // .asciz 8, '\\\\u0014\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0035313030755c5c                           // .asciz 8, '\\\\u0015\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0036313030755c5c                           // .asciz 8, '\\\\u0016\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0037313030755c5c                           // .asciz 8, '\\\\u0017\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0038313030755c5c                           // .asciz 8, '\\\\u0018\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0039313030755c5c                           // .asciz 8, '\\\\u0019\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0061313030755c5c                           // .asciz 8, '\\\\u001a\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0062313030755c5c                           // .asciz 8, '\\\\u001b\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0063313030755c5c                           // .asciz 8, '\\\\u001c\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0064313030755c5c                           // .asciz 8, '\\\\u001d\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0065313030755c5c                           // .asciz 8, '\\\\u001e\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0066313030755c5c                           // .asciz 8, '\\\\u001f\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000004                           // .quad 4
	QUAD $0x00000000225c5c5c                           // .asciz 8, '\\\\\\"\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000004                           // .quad 4
	QUAD $0x000000005c5c5c5c                           // .asciz 8, '\\\\\\\\\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

	// .p2align 4, 0x00
__EscTab:
	QUAD $0x0101010101010101; QUAD $0x0101010101010101     // .ascii 16, '\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01'
	QUAD $0x0101010101010101; QUAD $0x0101010101010101     // .ascii 16, '\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01'
	QUAD $0x0000000000010000; QUAD $0x0000000000000000     // .ascii 16, '\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; LONG $0x00000000; BYTE $0x01 // .ascii 13, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	WORD $0x0000; BYTE $0x00                               // .space 3, '\x00\x00\x00'

	// .p2align 4, 0x00
__UnquoteTab:
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000220000; QUAD $0x2f00000000000000 // .ascii 16, '\x00\x00"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00/'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000005c00000000 // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\\\x00\x00\x00'
	QUAD $0x000c000000080000; QUAD $0x000a000000000000 // .ascii 16, '\x00\x00\x08\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\n\x00'
	LONG $0x000d0000; WORD $0xff09                     // .ascii 6, '\x00\x00\r\x00\t\xff'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; WORD $0x0000             // .space 10, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

	// .p2align 4, 0x00
__HtmlQuoteTab:
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000036323030755c                           // .asciz 8, '\\u0026\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000063333030755c                           // .asciz 8, '\\u003c\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000065333030755c                           // .asciz 8, '\\u003e\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000038323032755c                           // .asciz 8, '\\u2028\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000039323032755c                           // .asciz 8, '\\u2029\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

	// .p2align 4, 0x00
_LSHIFT_TAB:
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000                           // .space 8, '\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000001                                   // .long 1
	QUAD $0x0000000000000035; QUAD $0x0000000000000000 // .asciz 16, '5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000001                                   // .long 1
	QUAD $0x0000000000003532; QUAD $0x0000000000000000 // .asciz 16, '25\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000001                                   // .long 1
	QUAD $0x0000000000353231; QUAD $0x0000000000000000 // .asciz 16, '125\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000002                                   // .long 2
	QUAD $0x0000000000353236; QUAD $0x0000000000000000 // .asciz 16, '625\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000002                                   // .long 2
	QUAD $0x0000000035323133; QUAD $0x0000000000000000 // .asciz 16, '3125\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000002                                   // .long 2
	QUAD $0x0000003532363531; QUAD $0x0000000000000000 // .asciz 16, '15625\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000003                                   // .long 3
	QUAD $0x0000003532313837; QUAD $0x0000000000000000 // .asciz 16, '78125\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000003                                   // .long 3
	QUAD $0x0000353236303933; QUAD $0x0000000000000000 // .asciz 16, '390625\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000003                                   // .long 3
	QUAD $0x0035323133353931; QUAD $0x0000000000000000 // .asciz 16, '1953125\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000004                                   // .long 4
	QUAD $0x0035323635363739; QUAD $0x0000000000000000 // .asciz 16, '9765625\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000004                                   // .long 4
	QUAD $0x3532313832383834; QUAD $0x0000000000000000 // .asciz 16, '48828125\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000004                                   // .long 4
	QUAD $0x3236303431343432; QUAD $0x0000000000000035 // .asciz 16, '244140625\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000004                                   // .long 4
	QUAD $0x3133303730323231; QUAD $0x0000000000003532 // .asciz 16, '1220703125\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000005                                   // .long 5
	QUAD $0x3635313533303136; QUAD $0x0000000000003532 // .asciz 16, '6103515625\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000005                                   // .long 5
	QUAD $0x3837353731353033; QUAD $0x0000000000353231 // .asciz 16, '30517578125\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000005                                   // .long 5
	QUAD $0x3938373835323531; QUAD $0x0000000035323630 // .asciz 16, '152587890625\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000006                                   // .long 6
	QUAD $0x3534393339323637; QUAD $0x0000000035323133 // .asciz 16, '762939453125\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000006                                   // .long 6
	QUAD $0x3237393634313833; QUAD $0x0000003532363536 // .asciz 16, '3814697265625\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000006                                   // .long 6
	QUAD $0x3638343337303931; QUAD $0x0000353231383233 // .asciz 16, '19073486328125\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000007                                   // .long 7
	QUAD $0x3133343736333539; QUAD $0x0000353236303436 // .asciz 16, '95367431640625\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000007                                   // .long 7
	QUAD $0x3531373338363734; QUAD $0x0035323133303238 // .asciz 16, '476837158203125\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000007                                   // .long 7
	QUAD $0x3735383134383332; QUAD $0x3532363531303139 // .asciz 16, '2384185791015625'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000007                                   // .long 7
	QUAD $0x3832393032393131; QUAD $0x3231383730353539 // .asciz 16, '1192092895507812'
	QUAD $0x0000000000000035; QUAD $0x0000000000000000 // .asciz 16, '5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000008                                   // .long 8
	QUAD $0x3434363430363935; QUAD $0x3236303933353737 // .asciz 16, '5960464477539062'
	QUAD $0x0000000000000035; QUAD $0x0000000000000000 // .asciz 16, '5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000008                                   // .long 8
	QUAD $0x3232333230383932; QUAD $0x3133353936373833 // .asciz 16, '2980232238769531'
	QUAD $0x0000000000003532; QUAD $0x0000000000000000 // .asciz 16, '25\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000008                                   // .long 8
	QUAD $0x3136313130393431; QUAD $0x3536373438333931 // .asciz 16, '1490116119384765'
	QUAD $0x0000000000353236; QUAD $0x0000000000000000 // .asciz 16, '625\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000009                                   // .long 9
	QUAD $0x3530383530353437; QUAD $0x3832383332393639 // .asciz 16, '7450580596923828'
	QUAD $0x0000000000353231; QUAD $0x0000000000000000 // .asciz 16, '125\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000009                                   // .long 9
	QUAD $0x3230393235323733; QUAD $0x3431393136343839 // .asciz 16, '3725290298461914'
	QUAD $0x0000000035323630; QUAD $0x0000000000000000 // .asciz 16, '0625\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000009                                   // .long 9
	QUAD $0x3135343632363831; QUAD $0x3735393033323934 // .asciz 16, '1862645149230957'
	QUAD $0x0000003532313330; QUAD $0x0000000000000000 // .asciz 16, '03125\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000a                                   // .long 10
	QUAD $0x3735323233313339; QUAD $0x3538373435313634 // .asciz 16, '9313225746154785'
	QUAD $0x0000003532363531; QUAD $0x0000000000000000 // .asciz 16, '15625\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000a                                   // .long 10
	QUAD $0x3832313636353634; QUAD $0x3239333737303337 // .asciz 16, '4656612873077392'
	QUAD $0x0000353231383735; QUAD $0x0000000000000000 // .asciz 16, '578125\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000a                                   // .long 10
	QUAD $0x3436303338323332; QUAD $0x3639363833353633 // .asciz 16, '2328306436538696'
	QUAD $0x0035323630393832; QUAD $0x0000000000000000 // .asciz 16, '2890625\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000a                                   // .long 10
	QUAD $0x3233353134363131; QUAD $0x3834333936323831 // .asciz 16, '1164153218269348'
	QUAD $0x3532313335343431; QUAD $0x0000000000000000 // .asciz 16, '14453125\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000b                                   // .long 11
	QUAD $0x3036363730323835; QUAD $0x3034373634333139 // .asciz 16, '5820766091346740'
	QUAD $0x3532363536323237; QUAD $0x0000000000000000 // .asciz 16, '72265625\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000b                                   // .long 11
	QUAD $0x3033383330313932; QUAD $0x3037333337363534 // .asciz 16, '2910383045673370'
	QUAD $0x3231383233313633; QUAD $0x0000000000000035 // .asciz 16, '361328125\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000b                                   // .long 11
	QUAD $0x3531393135353431; QUAD $0x3538363633383232 // .asciz 16, '1455191522836685'
	QUAD $0x3630343636303831; QUAD $0x0000000000003532 // .asciz 16, '1806640625\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000c                                   // .long 12
	QUAD $0x3637353935373237; QUAD $0x3532343338313431 // .asciz 16, '7275957614183425'
	QUAD $0x3133303233333039; QUAD $0x0000000000003532 // .asciz 16, '9033203125\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000c                                   // .long 12
	QUAD $0x3838373937333633; QUAD $0x3231373139303730 // .asciz 16, '3637978807091712'
	QUAD $0x3531303636313539; QUAD $0x0000000000353236 // .asciz 16, '95166015625\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000c                                   // .long 12
	QUAD $0x3439383938313831; QUAD $0x3635383534353330 // .asciz 16, '1818989403545856'
	QUAD $0x3730303338353734; QUAD $0x0000000035323138 // .asciz 16, '475830078125\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000d                                   // .long 13
	QUAD $0x3037343934393039; QUAD $0x3238323932373731 // .asciz 16, '9094947017729282'
	QUAD $0x3933303531393733; QUAD $0x0000000035323630 // .asciz 16, '379150390625\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000d                                   // .long 13
	QUAD $0x3533373437343534; QUAD $0x3134363436383830 // .asciz 16, '4547473508864641'
	QUAD $0x3931353735393831; QUAD $0x0000003532313335 // .asciz 16, '1895751953125\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000d                                   // .long 13
	QUAD $0x3736333733373232; QUAD $0x3032333233343435 // .asciz 16, '2273736754432320'
	QUAD $0x3935373837343935; QUAD $0x0000353236353637 // .asciz 16, '59478759765625\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000d                                   // .long 13
	QUAD $0x3338363836333131; QUAD $0x3036313631323737 // .asciz 16, '1136868377216160'
	QUAD $0x3937333933373932; QUAD $0x0035323138323838 // .asciz 16, '297393798828125\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000e                                   // .long 14
	QUAD $0x3831343334383635; QUAD $0x3130383038303638 // .asciz 16, '5684341886080801'
	QUAD $0x3939383639363834; QUAD $0x0035323630343134 // .asciz 16, '486968994140625\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000e                                   // .long 14
	QUAD $0x3930373132343832; QUAD $0x3030343034303334 // .asciz 16, '2842170943040400'
	QUAD $0x3934343834333437; QUAD $0x3532313330373037 // .asciz 16, '7434844970703125'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000e                                   // .long 14
	QUAD $0x3435383031323431; QUAD $0x3030323032353137 // .asciz 16, '1421085471520200'
	QUAD $0x3432323437313733; QUAD $0x3236353135333538 // .asciz 16, '3717422485351562'
	QUAD $0x0000000000000035; QUAD $0x0000000000000000 // .asciz 16, '5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000f                                   // .long 15
	QUAD $0x3337323435303137; QUAD $0x3130303130363735 // .asciz 16, '7105427357601001'
	QUAD $0x3432313137383538; QUAD $0x3231383735373632 // .asciz 16, '8587112426757812'
	QUAD $0x0000000000000035; QUAD $0x0000000000000000 // .asciz 16, '5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000f                                   // .long 15
	QUAD $0x3633313732353533; QUAD $0x3030353030383837 // .asciz 16, '3552713678800500'
	QUAD $0x3236353533393239; QUAD $0x3630393837333331 // .asciz 16, '9293556213378906'
	QUAD $0x0000000000003532; QUAD $0x0000000000000000 // .asciz 16, '25\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000f                                   // .long 15
	QUAD $0x3836353336373731; QUAD $0x3035323030343933 // .asciz 16, '1776356839400250'
	QUAD $0x3138373736343634; QUAD $0x3335343938363630 // .asciz 16, '4646778106689453'
	QUAD $0x0000000000353231; QUAD $0x0000000000000000 // .asciz 16, '125\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000010                                   // .long 16
	QUAD $0x3134383731383838; QUAD $0x3235323130303739 // .asciz 16, '8881784197001252'
	QUAD $0x3530393833333233; QUAD $0x3536323734343333 // .asciz 16, '3233890533447265'
	QUAD $0x0000000000353236; QUAD $0x0000000000000000 // .asciz 16, '625\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000010                                   // .long 16
	QUAD $0x3032393830343434; QUAD $0x3632363030353839 // .asciz 16, '4440892098500626'
	QUAD $0x3235343936313631; QUAD $0x3233363332373636 // .asciz 16, '1616945266723632'
	QUAD $0x0000000035323138; QUAD $0x0000000000000000 // .asciz 16, '8125\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000010                                   // .long 16
	QUAD $0x3036343430323232; QUAD $0x3331333035323934 // .asciz 16, '2220446049250313'
	QUAD $0x3632373438303830; QUAD $0x3631383136333333 // .asciz 16, '0808472633361816'
	QUAD $0x0000003532363034; QUAD $0x0000000000000000 // .asciz 16, '40625\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000010                                   // .long 16
	QUAD $0x3033323230313131; QUAD $0x3635313532363432 // .asciz 16, '1110223024625156'
	QUAD $0x3336333234303435; QUAD $0x3830393038363631 // .asciz 16, '5404236316680908'
	QUAD $0x0000353231333032; QUAD $0x0000000000000000 // .asciz 16, '203125\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000011                                   // .long 17
	QUAD $0x3135313131353535; QUAD $0x3238373532313332 // .asciz 16, '5551115123125782'
	QUAD $0x3531383131323037; QUAD $0x3134353430343338 // .asciz 16, '7021181583404541'
	QUAD $0x0000353236353130; QUAD $0x0000000000000000 // .asciz 16, '015625\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000011                                   // .long 17
	QUAD $0x3537353535373732; QUAD $0x3139383236353136 // .asciz 16, '2775557561562891'
	QUAD $0x3730393530313533; QUAD $0x3037323230373139 // .asciz 16, '3510590791702270'
	QUAD $0x0035323138373035; QUAD $0x0000000000000000 // .asciz 16, '5078125\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000011                                   // .long 17
	QUAD $0x3738373737383331; QUAD $0x3534343138373038 // .asciz 16, '1387778780781445'
	QUAD $0x3335393235353736; QUAD $0x3533313135383539 // .asciz 16, '6755295395851135'
	QUAD $0x3532363039333532; QUAD $0x0000000000000000 // .asciz 16, '25390625\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000012                                   // .long 18
	QUAD $0x3933393838333936; QUAD $0x3832323730393330 // .asciz 16, '6938893903907228'
	QUAD $0x3936373436373733; QUAD $0x3637363535323937 // .asciz 16, '3776476979255676'
	QUAD $0x3532313335393632; QUAD $0x0000000000000000 // .asciz 16, '26953125\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000012                                   // .long 18
	QUAD $0x3936343439363433; QUAD $0x3431363335393135 // .asciz 16, '3469446951953614'
	QUAD $0x3438333238383831; QUAD $0x3833383732363938 // .asciz 16, '1888238489627838'
	QUAD $0x3236353637343331; QUAD $0x0000000000000035 // .asciz 16, '134765625\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000012                                   // .long 18
	QUAD $0x3433323734333731; QUAD $0x3730383637393537 // .asciz 16, '1734723475976807'
	QUAD $0x3239313134343930; QUAD $0x3931393331383434 // .asciz 16, '0944119244813919'
	QUAD $0x3138323833373630; QUAD $0x0000000000003532 // .asciz 16, '0673828125\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000013                                   // .long 19
	QUAD $0x3337313633373638; QUAD $0x3533303438383937 // .asciz 16, '8673617379884035'
	QUAD $0x3236393530323734; QUAD $0x3539353936303432 // .asciz 16, '4720596224069595'
	QUAD $0x3630343139363333; QUAD $0x0000000000003532 // .asciz 16, '3369140625\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	QUAD $0x0000000000000000                           // .p2align 4, 0x00

_P10_TAB:
	QUAD $0x3ff0000000000000 // .quad 0x3ff0000000000000
	QUAD $0x4024000000000000 // .quad 0x4024000000000000
	QUAD $0x4059000000000000 // .quad 0x4059000000000000
	QUAD $0x408f400000000000 // .quad 0x408f400000000000
	QUAD $0x40c3880000000000 // .quad 0x40c3880000000000
	QUAD $0x40f86a0000000000 // .quad 0x40f86a0000000000
	QUAD $0x412e848000000000 // .quad 0x412e848000000000
	QUAD $0x416312d000000000 // .quad 0x416312d000000000
	QUAD $0x4197d78400000000 // .quad 0x4197d78400000000
	QUAD $0x41cdcd6500000000 // .quad 0x41cdcd6500000000
	QUAD $0x4202a05f20000000 // .quad 0x4202a05f20000000
	QUAD $0x42374876e8000000 // .quad 0x42374876e8000000
	QUAD $0x426d1a94a2000000 // .quad 0x426d1a94a2000000
	QUAD $0x42a2309ce5400000 // .quad 0x42a2309ce5400000
	QUAD $0x42d6bcc41e900000 // .quad 0x42d6bcc41e900000
	QUAD $0x430c6bf526340000 // .quad 0x430c6bf526340000
	QUAD $0x4341c37937e08000 // .quad 0x4341c37937e08000
	QUAD $0x4376345785d8a000 // .quad 0x4376345785d8a000
	QUAD $0x43abc16d674ec800 // .quad 0x43abc16d674ec800
	QUAD $0x43e158e460913d00 // .quad 0x43e158e460913d00
	QUAD $0x4415af1d78b58c40 // .quad 0x4415af1d78b58c40
	QUAD $0x444b1ae4d6e2ef50 // .quad 0x444b1ae4d6e2ef50
	QUAD $0x4480f0cf064dd592 // .quad 0x4480f0cf064dd592

TEXT Â·__f64toa(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -200(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_f64toa:
	MOVQ  out+0(FP), DI
	MOVSD val+8(FP), X0
	CALL  Â·__native_entry__+800(SB) // _f64toa
	MOVQ  AX, ret+16(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__html_escape(SB), NOSPLIT | NOFRAME, $0 - 40
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -168(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_html_escape:
	MOVQ sp+0(FP), DI
	MOVQ nb+8(FP), SI
	MOVQ dp+16(FP), DX
	MOVQ dn+24(FP), CX
	CALL Â·__native_entry__+6064(SB) // _html_escape
	MOVQ AX, ret+32(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__i64toa(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -80(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_i64toa:
	MOVQ out+0(FP), DI
	MOVQ val+8(FP), SI
	CALL Â·__native_entry__+1552(SB) // _i64toa
	MOVQ AX, ret+16(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__lspace(SB), NOSPLIT | NOFRAME, $0 - 32
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -8(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_lspace:
	MOVQ sp+0(FP), DI
	MOVQ nb+8(FP), SI
	MOVQ off+16(FP), DX
	CALL Â·__native_entry__+400(SB) // _lspace
	MOVQ AX, ret+24(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__lzero(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -32(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_lzero:
	MOVQ p+0(FP), DI
	MOVQ n+8(FP), SI
	CALL Â·__native_entry__+16(SB) // _lzero
	MOVQ AX, ret+16(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__quote(SB), NOSPLIT | NOFRAME, $0 - 48
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -184(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_quote:
	MOVQ sp+0(FP), DI
	MOVQ nb+8(FP), SI
	MOVQ dp+16(FP), DX
	MOVQ dn+24(FP), CX
	MOVQ flags+32(FP), R8
	CALL Â·__native_entry__+2608(SB) // _quote
	MOVQ AX, ret+40(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__skip_array(SB), NOSPLIT | NOFRAME, $0 - 40
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -184(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_skip_array:
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ m+16(FP), DX
	MOVQ flags+24(FP), CX
	CALL Â·__native_entry__+14096(SB) // _skip_array
	MOVQ AX, ret+32(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__skip_number(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -72(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_skip_number:
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	CALL Â·__native_entry__+15696(SB) // _skip_number
	MOVQ AX, ret+16(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__skip_object(SB), NOSPLIT | NOFRAME, $0 - 40
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -184(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_skip_object:
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ m+16(FP), DX
	MOVQ flags+24(FP), CX
	CALL Â·__native_entry__+14160(SB) // _skip_object
	MOVQ AX, ret+32(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__skip_one(SB), NOSPLIT | NOFRAME, $0 - 40
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -184(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_skip_one:
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ m+16(FP), DX
	MOVQ flags+24(FP), CX
	CALL Â·__native_entry__+12864(SB) // _skip_one
	MOVQ AX, ret+32(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__u64toa(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -72(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_u64toa:
	MOVQ out+0(FP), DI
	MOVQ val+8(FP), SI
	CALL Â·__native_entry__+1600(SB) // _u64toa
	MOVQ AX, ret+16(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__unquote(SB), NOSPLIT | NOFRAME, $0 - 48
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -184(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_unquote:
	MOVQ sp+0(FP), DI
	MOVQ nb+8(FP), SI
	MOVQ dp+16(FP), DX
	MOVQ ep+24(FP), CX
	MOVQ flags+32(FP), R8
	CALL Â·__native_entry__+4208(SB) // _unquote
	MOVQ AX, ret+40(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__validate_one(SB), NOSPLIT | NOFRAME, $0 - 32
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -184(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_validate_one:
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ m+16(FP), DX
	CALL Â·__native_entry__+15840(SB) // _validate_one
	MOVQ AX, ret+24(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__value(SB), NOSPLIT | NOFRAME, $0 - 48
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -400(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_value:
	MOVQ s+0(FP), DI
	MOVQ n+8(FP), SI
	MOVQ p+16(FP), DX
	MOVQ v+24(FP), CX
	MOVQ flags+32(FP), R8
	CALL Â·__native_entry__+8960(SB) // _value
	MOVQ AX, ret+40(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__vnumber(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -320(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_vnumber:
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ v+16(FP), DX
	LEAQ Â·__native_entry__+10528(SB), AX // _vnumber
	JMP  AX

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__vsigned(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -24(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_vsigned:
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ v+16(FP), DX
	LEAQ Â·__native_entry__+12080(SB), AX // _vsigned
	JMP  AX

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__vstring(SB), NOSPLIT | NOFRAME, $0 - 32
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -288(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_vstring:
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ v+16(FP), DX
	MOVQ flags+24(FP), CX
	LEAQ Â·__native_entry__+10176(SB), AX // _vstring
	JMP  AX

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__vunsigned(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -24(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_vunsigned:
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ v+16(FP), DX
	LEAQ Â·__native_entry__+12480(SB), AX // _vunsigned
	JMP  AX

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry
