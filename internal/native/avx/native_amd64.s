// +build !noasm !appengine
// Code generated by asm2asm, DO NOT EDIT.

#include "go_asm.h"
#include "funcdata.h"
#include "textflag.h"

TEXT Â·__native_entry__(SB), NOSPLIT, $0
	NO_LOCAL_POINTERS
	LONG $0xf9058d48; WORD $0xffff; BYTE $0xff // leaq         $-7(%rip), %rax
	LONG $0x24448948; BYTE $0x08               // movq         %rax, $8(%rsp)
	BYTE $0xc3                                 // retq
	WORD $0x0000; BYTE $0x00                   // .p2align 4, 0x00

LCPI0_0:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI0_1:
	QUAD $0x0909090909090909; QUAD $0x0909090909090909 // .space 16, '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'

LCPI0_2:
	QUAD $0x0a0a0a0a0a0a0a0a; QUAD $0x0a0a0a0a0a0a0a0a // .space 16, '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'

LCPI0_3:
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'

	// .p2align 4, 0x90
_lspace:
	BYTE $0x55                             // pushq        %rbp
	WORD $0x8948; BYTE $0xe5               // movq         %rsp, %rbp
	LONG $0x17048d48                       // leaq         (%rdi,%rdx), %rax
	WORD $0x2948; BYTE $0xd6               // subq         %rdx, %rsi
	LONG $0x005d840f; WORD $0x0000         // je           LBB0_7, $93(%rip)
	WORD $0xc189                           // movl         %eax, %ecx
	WORD $0xe183; BYTE $0x0f               // andl         $15, %ecx
	WORD $0x8548; BYTE $0xc9               // testq        %rcx, %rcx
	LONG $0x004f840f; WORD $0x0000         // je           LBB0_7, $79(%rip)
	LONG $0xff4e8d4c                       // leaq         $-1(%rsi), %r9
	WORD $0xd231                           // xorl         %edx, %edx
	QUAD $0x000100002600b849; WORD $0x0000 // movabsq      $4294977024, %r8
	BYTE $0x90                             // .p2align 4, 0x90

LBB0_3:
	LONG $0x100cbe0f               // movsbl       (%rax,%rdx), %ecx
	WORD $0xf983; BYTE $0x20       // cmpl         $32, %ecx
	LONG $0x00fb870f; WORD $0x0000 // ja           LBB0_5, $251(%rip)
	LONG $0xc8a30f49               // btq          %rcx, %r8
	LONG $0x00f1830f; WORD $0x0000 // jae          LBB0_5, $241(%rip)
	LONG $0x01528d4c               // leaq         $1(%rdx), %r10
	WORD $0x3949; BYTE $0xd1       // cmpq         %rdx, %r9
	LONG $0x0014840f; WORD $0x0000 // je           LBB0_6, $20(%rip)
	LONG $0x104c8d48; BYTE $0x01   // leaq         $1(%rax,%rdx), %rcx
	WORD $0xe183; BYTE $0x0f       // andl         $15, %ecx
	WORD $0x894c; BYTE $0xd2       // movq         %r10, %rdx
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0xffc8850f; WORD $0xffff // jne          LBB0_3, $-56(%rip)

LBB0_6:
	WORD $0x014c; BYTE $0xd0 // addq         %r10, %rax
	WORD $0x294c; BYTE $0xd6 // subq         %r10, %rsi

LBB0_7:
	LONG $0x10fe8348               // cmpq         $16, %rsi
	LONG $0x0068820f; WORD $0x0000 // jb           LBB0_14, $104(%rip)
	QUAD $0xffffff40056ff9c5       // vmovdqa      $-192(%rip), %xmm0  /* LCPI0_0(%rip) */
	QUAD $0xffffff480d6ff9c5       // vmovdqa      $-184(%rip), %xmm1  /* LCPI0_1(%rip) */
	QUAD $0xffffff50156ff9c5       // vmovdqa      $-176(%rip), %xmm2  /* LCPI0_2(%rip) */
	QUAD $0xffffff581d6ff9c5       // vmovdqa      $-168(%rip), %xmm3  /* LCPI0_3(%rip) */
	QUAD $0x9090909090909090       // .p2align 4, 0x90

LBB0_9:
	LONG $0x206ff9c5               // vmovdqa      (%rax), %xmm4
	LONG $0xe874d9c5               // vpcmpeqb     %xmm0, %xmm4, %xmm5
	LONG $0xf174d9c5               // vpcmpeqb     %xmm1, %xmm4, %xmm6
	LONG $0xeeebd1c5               // vpor         %xmm6, %xmm5, %xmm5
	LONG $0xf274d9c5               // vpcmpeqb     %xmm2, %xmm4, %xmm6
	LONG $0xe374d9c5               // vpcmpeqb     %xmm3, %xmm4, %xmm4
	LONG $0xe6ebd9c5               // vpor         %xmm6, %xmm4, %xmm4
	LONG $0xe5ebd9c5               // vpor         %xmm5, %xmm4, %xmm4
	LONG $0xccd7f9c5               // vpmovmskb    %xmm4, %ecx
	LONG $0xfff98366               // cmpw         $-1, %cx
	LONG $0x005a850f; WORD $0x0000 // jne          LBB0_10, $90(%rip)
	LONG $0x10c08348               // addq         $16, %rax
	LONG $0xf0c68348               // addq         $-16, %rsi
	LONG $0x0ffe8348               // cmpq         $15, %rsi
	LONG $0xffc0870f; WORD $0xffff // ja           LBB0_9, $-64(%rip)

LBB0_14:
	WORD $0x8548; BYTE $0xf6               // testq        %rsi, %rsi
	LONG $0x0052840f; WORD $0x0000         // je           LBB0_21, $82(%rip)
	LONG $0x30048d4c                       // leaq         (%rax,%rsi), %r8
	WORD $0xff48; BYTE $0xc0               // incq         %rax
	QUAD $0x000100002600ba48; WORD $0x0000 // movabsq      $4294977024, %rdx

LBB0_16:
	LONG $0xff48be0f               // movsbl       $-1(%rax), %ecx
	WORD $0xf983; BYTE $0x20       // cmpl         $32, %ecx
	LONG $0x0039870f; WORD $0x0000 // ja           LBB0_18, $57(%rip)
	LONG $0xcaa30f48               // btq          %rcx, %rdx
	LONG $0x002f830f; WORD $0x0000 // jae          LBB0_18, $47(%rip)
	WORD $0xff48; BYTE $0xce       // decq         %rsi
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0xffda850f; WORD $0xffff // jne          LBB0_16, $-38(%rip)
	WORD $0x894c; BYTE $0xc0       // movq         %r8, %rax
	LONG $0x000013e9; BYTE $0x00   // jmp          LBB0_21, $19(%rip)

LBB0_10:
	WORD $0xb70f; BYTE $0xc9 // movzwl       %cx, %ecx
	WORD $0x2948; BYTE $0xf8 // subq         %rdi, %rax
	WORD $0xd1f7             // notl         %ecx
	WORD $0xbc0f; BYTE $0xc9 // bsfl         %ecx, %ecx
	WORD $0x0148; BYTE $0xc8 // addq         %rcx, %rax
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

LBB0_5:
	WORD $0x0148; BYTE $0xd0 // addq         %rdx, %rax

LBB0_21:
	WORD $0x2948; BYTE $0xf8 // subq         %rdi, %rax
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

LBB0_18:
	WORD $0xf748; BYTE $0xd7 // notq         %rdi
	WORD $0x0148; BYTE $0xf8 // addq         %rdi, %rax
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq
	QUAD $0x0000000000000000 // .p2align 5, 0x00

LCPI1_0:
	QUAD $0x3030303030303030; QUAD $0x3030303030303030 // .space 16, '0000000000000000'
	QUAD $0x3030303030303030; QUAD $0x3030303030303030 // .space 16, '0000000000000000'

	// .p2align 4, 0x90
_f64toa:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	BYTE $0x50                                 // pushq        %rax
	LONG $0x7ef9e1c4; BYTE $0xc2               // vmovq        %xmm0, %rdx
	WORD $0x8948; BYTE $0xd0                   // movq         %rdx, %rax
	LONG $0x34e8c148                           // shrq         $52, %rax
	LONG $0x0007ff25; BYTE $0x00               // andl         $2047, %eax
	LONG $0x0007ff3d; BYTE $0x00               // cmpl         $2047, %eax
	LONG $0x1201840f; WORD $0x0000             // je           LBB1_164, $4609(%rip)
	WORD $0x07c6; BYTE $0x2d                   // movb         $45, (%rdi)
	WORD $0x8948; BYTE $0xd6                   // movq         %rdx, %rsi
	LONG $0x3feec148                           // shrq         $63, %rsi
	LONG $0x37048d4c                           // leaq         (%rdi,%rsi), %r8
	QUAD $0x00000000550c8d48                   // leaq         (,%rdx,2), %rcx
	WORD $0x8548; BYTE $0xc9                   // testq        %rcx, %rcx
	LONG $0x027f840f; WORD $0x0000             // je           LBB1_6, $639(%rip)
	QUAD $0xffffffffffffbb49; WORD $0x000f     // movabsq      $4503599627370495, %r11
	WORD $0x214c; BYTE $0xda                   // andq         %r11, %rdx
	WORD $0xc085                               // testl        %eax, %eax
	LONG $0x11d5840f; WORD $0x0000             // je           LBB1_165, $4565(%rip)
	WORD $0xff49; BYTE $0xc3                   // incq         %r11
	WORD $0x0949; BYTE $0xd3                   // orq          %rdx, %r11
	LONG $0xcd908d44; WORD $0xfffb; BYTE $0xff // leal         $-1075(%rax), %r10d
	LONG $0xfc01888d; WORD $0xffff             // leal         $-1023(%rax), %ecx
	WORD $0xf983; BYTE $0x34                   // cmpl         $52, %ecx
	LONG $0x001b870f; WORD $0x0000             // ja           LBB1_7, $27(%rip)
	WORD $0x8944; BYTE $0xd1                   // movl         %r10d, %ecx
	WORD $0xd9f7                               // negl         %ecx
	LONG $0xffc3c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rbx
	WORD $0xd348; BYTE $0xe3                   // shlq         %cl, %rbx
	WORD $0xf748; BYTE $0xd3                   // notq         %rbx
	WORD $0x8549; BYTE $0xdb                   // testq        %rbx, %r11
	LONG $0x05a3840f; WORD $0x0000             // je           LBB1_41, $1443(%rip)

LBB1_7:
	LONG $0xd0758948 // movq         %rsi, $-48(%rbp)

LBB1_8:
	WORD $0x8548; BYTE $0xd2                   // testq        %rdx, %rdx
	WORD $0x940f; BYTE $0xc1                   // sete         %cl
	WORD $0xf883; BYTE $0x01                   // cmpl         $1, %eax
	WORD $0x970f; BYTE $0xc0                   // seta         %al
	WORD $0xc820                               // andb         %cl, %al
	WORD $0xb60f; BYTE $0xc0                   // movzbl       %al, %eax
	LONG $0x13ca6941; WORD $0x1344; BYTE $0x00 // imull        $1262611, %r10d, %ecx
	WORD $0xd231                               // xorl         %edx, %edx
	WORD $0xc084                               // testb        %al, %al
	LONG $0x0101bf41; WORD $0xfff8             // movl         $-524031, %r15d
	LONG $0xfa440f44                           // cmovel       %edx, %r15d
	LONG $0x984c8d4e; BYTE $0xfe               // leaq         $-2(%rax,%r11,4), %r9
	WORD $0x0141; BYTE $0xcf                   // addl         %ecx, %r15d
	LONG $0x16ffc141                           // sarl         $22, %r15d
	LONG $0xb1cf6941; WORD $0xe56c; BYTE $0xff // imull        $-1741647, %r15d, %ecx
	WORD $0xe9c1; BYTE $0x13                   // shrl         $19, %ecx
	WORD $0x0144; BYTE $0xd1                   // addl         %r10d, %ecx
	LONG $0x000124b8; BYTE $0x00               // movl         $292, %eax
	WORD $0x2944; BYTE $0xf8                   // subl         %r15d, %eax
	LONG $0x04e0c148                           // shlq         $4, %rax
	LONG $0x75158d48; WORD $0x00d4; BYTE $0x00 // leaq         $54389(%rip), %rdx  /* _pow10_ceil_sig.g(%rip) */
	LONG $0x10248b4c                           // movq         (%rax,%rdx), %r12
	LONG $0x106c8b4c; BYTE $0x08               // movq         $8(%rax,%rdx), %r13
	WORD $0xc1fe                               // incb         %cl
	WORD $0xd349; BYTE $0xe1                   // shlq         %cl, %r9
	WORD $0x894c; BYTE $0xc8                   // movq         %r9, %rax
	WORD $0xf749; BYTE $0xe5                   // mulq         %r13
	WORD $0x8949; BYTE $0xd2                   // movq         %rdx, %r10
	WORD $0x894c; BYTE $0xc8                   // movq         %r9, %rax
	WORD $0xf749; BYTE $0xe4                   // mulq         %r12
	QUAD $0x000000009d348d4a                   // leaq         (,%r11,4), %rsi
	WORD $0x014c; BYTE $0xd0                   // addq         %r10, %rax
	LONG $0x00d28348                           // adcq         $0, %rdx
	WORD $0xdb31                               // xorl         %ebx, %ebx
	LONG $0x01f88348                           // cmpq         $1, %rax
	WORD $0x970f; BYTE $0xc3                   // seta         %bl
	WORD $0x0948; BYTE $0xd3                   // orq          %rdx, %rbx
	WORD $0xd348; BYTE $0xe6                   // shlq         %cl, %rsi
	WORD $0x8948; BYTE $0xf0                   // movq         %rsi, %rax
	WORD $0xf749; BYTE $0xe5                   // mulq         %r13
	WORD $0x8949; BYTE $0xd2                   // movq         %rdx, %r10
	WORD $0x8948; BYTE $0xf0                   // movq         %rsi, %rax
	WORD $0xf749; BYTE $0xe4                   // mulq         %r12
	WORD $0x8949; BYTE $0xd1                   // movq         %rdx, %r9
	QUAD $0x000000029d348d4a                   // leaq         $2(,%r11,4), %rsi
	WORD $0x014c; BYTE $0xd0                   // addq         %r10, %rax
	LONG $0x00d18349                           // adcq         $0, %r9
	WORD $0x3145; BYTE $0xd2                   // xorl         %r10d, %r10d
	LONG $0x01f88348                           // cmpq         $1, %rax
	LONG $0xc2970f41                           // seta         %r10b
	WORD $0x094d; BYTE $0xca                   // orq          %r9, %r10
	WORD $0xd348; BYTE $0xe6                   // shlq         %cl, %rsi
	WORD $0x8948; BYTE $0xf0                   // movq         %rsi, %rax
	WORD $0xf749; BYTE $0xe5                   // mulq         %r13
	WORD $0x8948; BYTE $0xd1                   // movq         %rdx, %rcx
	WORD $0x8948; BYTE $0xf0                   // movq         %rsi, %rax
	WORD $0xf749; BYTE $0xe4                   // mulq         %r12
	WORD $0x0148; BYTE $0xc8                   // addq         %rcx, %rax
	LONG $0x00d28348                           // adcq         $0, %rdx
	WORD $0xf631                               // xorl         %esi, %esi
	LONG $0x01f88348                           // cmpq         $1, %rax
	LONG $0xc6970f40                           // seta         %sil
	WORD $0x0948; BYTE $0xd6                   // orq          %rdx, %rsi
	LONG $0x01e38341                           // andl         $1, %r11d
	WORD $0x014c; BYTE $0xdb                   // addq         %r11, %rbx
	WORD $0x294c; BYTE $0xde                   // subq         %r11, %rsi
	LONG $0x28fa8349                           // cmpq         $40, %r10
	LONG $0x003e820f; WORD $0x0000             // jb           LBB1_10, $62(%rip)
	QUAD $0xcccccccccccdb948; WORD $0xcccc     // movabsq      $-3689348814741910323, %rcx
	WORD $0x894c; BYTE $0xc8                   // movq         %r9, %rax
	WORD $0xf748; BYTE $0xe1                   // mulq         %rcx
	WORD $0x8949; BYTE $0xd6                   // movq         %rdx, %r14
	LONG $0x05eec149                           // shrq         $5, %r14
	QUAD $0x00000000f5048d4a                   // leaq         (,%r14,8), %rax
	LONG $0x80148d48                           // leaq         (%rax,%rax,4), %rdx
	WORD $0x3948; BYTE $0xd3                   // cmpq         %rdx, %rbx
	LONG $0xc3970f41                           // seta         %r11b
	LONG $0x80448d48; BYTE $0x28               // leaq         $40(%rax,%rax,4), %rax
	WORD $0x3948; BYTE $0xf0                   // cmpq         %rsi, %rax
	WORD $0x960f; BYTE $0xc2                   // setbe        %dl
	WORD $0x3044; BYTE $0xda                   // xorb         %r11b, %dl
	LONG $0x02de840f; WORD $0x0000             // je           LBB1_22, $734(%rip)

LBB1_10:
	WORD $0x894c; BYTE $0xc8       // movq         %r9, %rax
	LONG $0x02e8c148               // shrq         $2, %rax
	WORD $0x894c; BYTE $0xca       // movq         %r9, %rdx
	LONG $0xfce28348               // andq         $-4, %rdx
	WORD $0x3948; BYTE $0xd3       // cmpq         %rdx, %rbx
	LONG $0xc3970f41               // seta         %r11b
	LONG $0x044a8d48               // leaq         $4(%rdx), %rcx
	WORD $0x3948; BYTE $0xf1       // cmpq         %rsi, %rcx
	WORD $0x960f; BYTE $0xc3       // setbe        %bl
	WORD $0x3044; BYTE $0xdb       // xorb         %r11b, %bl
	LONG $0x00e2840f; WORD $0x0000 // je           LBB1_14, $226(%rip)
	LONG $0x02ca8348               // orq          $2, %rdx
	LONG $0x0001be41; WORD $0x0000 // movl         $1, %r14d
	WORD $0x3949; BYTE $0xd2       // cmpq         %rdx, %r10
	LONG $0x000e870f; WORD $0x0000 // ja           LBB1_13, $14(%rip)
	WORD $0x940f; BYTE $0xc1       // sete         %cl
	LONG $0x02e9c041               // shrb         $2, %r9b
	WORD $0x2041; BYTE $0xc9       // andb         %cl, %r9b
	LONG $0xf1b60f45               // movzbl       %r9b, %r14d

LBB1_13:
	WORD $0x0149; BYTE $0xc6                   // addq         %rax, %r14
	QUAD $0x0001ffffff80ba49; WORD $0x0000     // movabsq      $8589934464, %r10
	LONG $0x7f828d49; WORD $0x0be4; BYTE $0x54 // leaq         $1410065535(%r10), %rax
	WORD $0x3949; BYTE $0xc6                   // cmpq         %rax, %r14
	LONG $0x00c8860f; WORD $0x0000             // jbe          LBB1_23, $200(%rip)

LBB1_15:
	WORD $0x894c; BYTE $0xf2                   // movq         %r14, %rdx
	LONG $0x0beac148                           // shrq         $11, %rdx
	LONG $0x00000bb8; BYTE $0x00               // movl         $11, %eax
	LONG $0xddfa8148; WORD $0xe90e; BYTE $0x02 // cmpq         $48828125, %rdx
	LONG $0x0139820f; WORD $0x0000             // jb           LBB1_31, $313(%rip)
	WORD $0x894c; BYTE $0xf2                   // movq         %r14, %rdx
	LONG $0x0ceac148                           // shrq         $12, %rdx
	LONG $0x00000cb8; BYTE $0x00               // movl         $12, %eax
	LONG $0x51fa8148; WORD $0x8d4a; BYTE $0x0e // cmpq         $244140625, %rdx
	LONG $0x0120820f; WORD $0x0000             // jb           LBB1_31, $288(%rip)
	WORD $0x894c; BYTE $0xf2                   // movq         %r14, %rdx
	LONG $0x0deac148                           // shrq         $13, %rdx
	LONG $0x00000db8; BYTE $0x00               // movl         $13, %eax
	LONG $0x95fa8148; WORD $0xc273; BYTE $0x48 // cmpq         $1220703125, %rdx
	LONG $0x0107820f; WORD $0x0000             // jb           LBB1_31, $263(%rip)
	LONG $0x00000eb8; BYTE $0x00               // movl         $14, %eax
	QUAD $0x5af3107a4000ba48; WORD $0x0000     // movabsq      $100000000000000, %rdx
	WORD $0x3949; BYTE $0xd6                   // cmpq         %rdx, %r14
	LONG $0x00ef820f; WORD $0x0000             // jb           LBB1_31, $239(%rip)
	LONG $0x00000fb8; BYTE $0x00               // movl         $15, %eax
	QUAD $0x8d7ea4c68000ba48; WORD $0x0003     // movabsq      $1000000000000000, %rdx
	WORD $0x3949; BYTE $0xd6                   // cmpq         %rdx, %r14
	LONG $0x00d7820f; WORD $0x0000             // jb           LBB1_31, $215(%rip)
	QUAD $0x86f26fc10000b848; WORD $0x0023     // movabsq      $10000000000000000, %rax
	WORD $0x3949; BYTE $0xc6                   // cmpq         %rax, %r14
	LONG $0x000011b8; BYTE $0x00               // movl         $17, %eax

LBB1_21:
	WORD $0xd883; BYTE $0x00     // sbbl         $0, %eax
	LONG $0x0000bde9; BYTE $0x00 // jmp          LBB1_31, $189(%rip)

LBB1_6:
	LONG $0x3000c641             // movb         $48, (%r8)
	WORD $0x2941; BYTE $0xf8     // subl         %edi, %r8d
	WORD $0xff41; BYTE $0xc0     // incl         %r8d
	LONG $0x000f2ee9; BYTE $0x00 // jmp          LBB1_162, $3886(%rip)

LBB1_14:
	WORD $0x3948; BYTE $0xce                   // cmpq         %rcx, %rsi
	LONG $0xffd88348                           // sbbq         $-1, %rax
	WORD $0x8949; BYTE $0xc6                   // movq         %rax, %r14
	QUAD $0x0001ffffff80ba49; WORD $0x0000     // movabsq      $8589934464, %r10
	LONG $0x7f828d49; WORD $0x0be4; BYTE $0x54 // leaq         $1410065535(%r10), %rax
	WORD $0x3949; BYTE $0xc6                   // cmpq         %rax, %r14
	LONG $0xff38870f; WORD $0xffff             // ja           LBB1_15, $-200(%rip)

LBB1_23:
	LONG $0x000001b8; BYTE $0x00               // movl         $1, %eax
	LONG $0x0afe8349                           // cmpq         $10, %r14
	LONG $0x007b820f; WORD $0x0000             // jb           LBB1_31, $123(%rip)
	LONG $0x000002b8; BYTE $0x00               // movl         $2, %eax
	LONG $0x64fe8349                           // cmpq         $100, %r14
	LONG $0x006c820f; WORD $0x0000             // jb           LBB1_31, $108(%rip)
	LONG $0x000003b8; BYTE $0x00               // movl         $3, %eax
	LONG $0xe8fe8149; WORD $0x0003; BYTE $0x00 // cmpq         $1000, %r14
	LONG $0x005a820f; WORD $0x0000             // jb           LBB1_31, $90(%rip)
	LONG $0x000004b8; BYTE $0x00               // movl         $4, %eax
	LONG $0x10fe8149; WORD $0x0027; BYTE $0x00 // cmpq         $10000, %r14
	LONG $0x0048820f; WORD $0x0000             // jb           LBB1_31, $72(%rip)
	LONG $0x000005b8; BYTE $0x00               // movl         $5, %eax
	LONG $0xa0fe8149; WORD $0x0186; BYTE $0x00 // cmpq         $100000, %r14
	LONG $0x0036820f; WORD $0x0000             // jb           LBB1_31, $54(%rip)
	LONG $0x000006b8; BYTE $0x00               // movl         $6, %eax
	LONG $0x40fe8149; WORD $0x0f42; BYTE $0x00 // cmpq         $1000000, %r14
	LONG $0x0024820f; WORD $0x0000             // jb           LBB1_31, $36(%rip)
	LONG $0x000007b8; BYTE $0x00               // movl         $7, %eax
	LONG $0x80fe8149; WORD $0x9896; BYTE $0x00 // cmpq         $10000000, %r14
	LONG $0x0012820f; WORD $0x0000             // jb           LBB1_31, $18(%rip)
	LONG $0x000008b8; BYTE $0x00               // movl         $8, %eax
	LONG $0x00fe8149; WORD $0xf5e1; BYTE $0x05 // cmpq         $100000000, %r14
	LONG $0x0e95830f; WORD $0x0000             // jae          LBB1_163, $3733(%rip)

LBB1_31:
	LONG $0x380c8d46               // leal         (%rax,%r15), %r9d
	LONG $0x38548d42; BYTE $0x05   // leal         $5(%rax,%r15), %edx
	WORD $0x8941; BYTE $0xc4       // movl         %eax, %r12d
	WORD $0xfa83; BYTE $0x1b       // cmpl         $27, %edx
	LONG $0x00dc820f; WORD $0x0000 // jb           LBB1_35, $220(%rip)
	LONG $0x207c8d4f; BYTE $0x01   // leaq         $1(%r8,%r12), %r15
	WORD $0x894c; BYTE $0xf0       // movq         %r14, %rax
	LONG $0x20e8c148               // shrq         $32, %rax
	LONG $0x0128850f; WORD $0x0000 // jne          LBB1_39, $296(%rip)
	WORD $0x3145; BYTE $0xd2       // xorl         %r10d, %r10d
	WORD $0x8944; BYTE $0xf2       // movl         %r14d, %edx
	WORD $0x894d; BYTE $0xfc       // movq         %r15, %r12
	LONG $0x2710fa81; WORD $0x0000 // cmpl         $10000, %edx
	LONG $0x01d5820f; WORD $0x0000 // jb           LBB1_34, $469(%rip)

LBB1_86:
	LONG $0x1759bb41; WORD $0xd1b7             // movl         $3518437209, %r11d
	LONG $0xc2358d4c; WORD $0x00d0; BYTE $0x00 // leaq         $53442(%rip), %r14  /* _Digits(%rip) */
	WORD $0x9090                               // .p2align 4, 0x90

LBB1_87:
	WORD $0xd389                               // movl         %edx, %ebx
	LONG $0xdbaf0f49                           // imulq        %r11, %rbx
	LONG $0x2debc148                           // shrq         $45, %rbx
	LONG $0xd8f0c369; WORD $0xffff             // imull        $-10000, %ebx, %eax
	WORD $0xd001                               // addl         %edx, %eax
	LONG $0x1ff06948; WORD $0xeb85; BYTE $0x51 // imulq        $1374389535, %rax, %rsi
	LONG $0x25eec148                           // shrq         $37, %rsi
	WORD $0xce6b; BYTE $0x64                   // imull        $100, %esi, %ecx
	WORD $0xc829                               // subl         %ecx, %eax
	LONG $0x04b70f41; BYTE $0x46               // movzwl       (%r14,%rax,2), %eax
	LONG $0x44894166; WORD $0xfe24             // movw         %ax, $-2(%r12)
	LONG $0x04b70f41; BYTE $0x76               // movzwl       (%r14,%rsi,2), %eax
	LONG $0x44894166; WORD $0xfc24             // movw         %ax, $-4(%r12)
	LONG $0xfcc48349                           // addq         $-4, %r12
	LONG $0xe0fffa81; WORD $0x05f5             // cmpl         $99999999, %edx
	WORD $0xda89                               // movl         %ebx, %edx
	LONG $0xffb6870f; WORD $0xffff             // ja           LBB1_87, $-74(%rip)
	WORD $0xfb83; BYTE $0x64                   // cmpl         $100, %ebx
	LONG $0x002e820f; WORD $0x0000             // jb           LBB1_90, $46(%rip)

LBB1_89:
	WORD $0xb70f; BYTE $0xc3                   // movzwl       %bx, %eax
	WORD $0xe8c1; BYTE $0x02                   // shrl         $2, %eax
	LONG $0x147bc069; WORD $0x0000             // imull        $5243, %eax, %eax
	WORD $0xe8c1; BYTE $0x11                   // shrl         $17, %eax
	WORD $0xc86b; BYTE $0x64                   // imull        $100, %eax, %ecx
	WORD $0xcb29                               // subl         %ecx, %ebx
	WORD $0xb70f; BYTE $0xcb                   // movzwl       %bx, %ecx
	LONG $0x4f158d48; WORD $0x00d0; BYTE $0x00 // leaq         $53327(%rip), %rdx  /* _Digits(%rip) */
	LONG $0x4a0cb70f                           // movzwl       (%rdx,%rcx,2), %ecx
	LONG $0x4c894166; WORD $0xfe24             // movw         %cx, $-2(%r12)
	LONG $0xfec48349                           // addq         $-2, %r12
	WORD $0xc389                               // movl         %eax, %ebx

LBB1_90:
	LONG $0x01408d49                           // leaq         $1(%r8), %rax
	WORD $0xfb83; BYTE $0x0a                   // cmpl         $10, %ebx
	LONG $0x0148820f; WORD $0x0000             // jb           LBB1_92, $328(%rip)
	WORD $0xd989                               // movl         %ebx, %ecx
	LONG $0x29158d48; WORD $0x00d0; BYTE $0x00 // leaq         $53289(%rip), %rdx  /* _Digits(%rip) */
	LONG $0x4a0cb70f                           // movzwl       (%rdx,%rcx,2), %ecx
	LONG $0x4c894166; WORD $0xfe24             // movw         %cx, $-2(%r12)
	LONG $0x000135e9; BYTE $0x00               // jmp          LBB1_93, $309(%rip)

LBB1_35:
	WORD $0x8545; BYTE $0xff                   // testl        %r15d, %r15d
	LONG $0x03df880f; WORD $0x0000             // js           LBB1_56, $991(%rip)
	LONG $0x201c8d4b                           // leaq         (%r8,%r12), %rbx
	WORD $0x894c; BYTE $0xf0                   // movq         %r14, %rax
	LONG $0x20e8c148                           // shrq         $32, %rax
	LONG $0x0463850f; WORD $0x0000             // jne          LBB1_61, $1123(%rip)
	WORD $0x8948; BYTE $0xd8                   // movq         %rbx, %rax
	WORD $0x8949; BYTE $0xff                   // movq         %rdi, %r15
	LONG $0x10fe8141; WORD $0x0027; BYTE $0x00 // cmpl         $10000, %r14d
	LONG $0x050d830f; WORD $0x0000             // jae          LBB1_62, $1293(%rip)

LBB1_38:
	WORD $0x8944; BYTE $0xf2     // movl         %r14d, %edx
	LONG $0x00055fe9; BYTE $0x00 // jmp          LBB1_64, $1375(%rip)

LBB1_22:
	WORD $0x3948; BYTE $0xc6                   // cmpq         %rax, %rsi
	LONG $0xffde8349                           // sbbq         $-1, %r14
	WORD $0xff41; BYTE $0xc7                   // incl         %r15d
	QUAD $0x0001ffffff80ba49; WORD $0x0000     // movabsq      $8589934464, %r10
	LONG $0x7f828d49; WORD $0x0be4; BYTE $0x54 // leaq         $1410065535(%r10), %rax
	WORD $0x3949; BYTE $0xc6                   // cmpq         %rax, %r14
	LONG $0xfd64870f; WORD $0xffff             // ja           LBB1_15, $-668(%rip)
	LONG $0xfffe27e9; BYTE $0xff               // jmp          LBB1_23, $-473(%rip)

LBB1_39:
	QUAD $0x77118461cefdba48; WORD $0xabcc     // movabsq      $-6067343680855748867, %rdx
	WORD $0x894c; BYTE $0xf0                   // movq         %r14, %rax
	WORD $0xf748; BYTE $0xe2                   // mulq         %rdx
	LONG $0x1aeac148                           // shrq         $26, %rdx
	LONG $0x1f00da69; WORD $0xfa0a             // imull        $-100000000, %edx, %ebx
	WORD $0x0144; BYTE $0xf3                   // addl         %r14d, %ebx
	LONG $0x06bd840f; WORD $0x0000             // je           LBB1_85, $1725(%rip)
	WORD $0xd889                               // movl         %ebx, %eax
	LONG $0x1759ba41; WORD $0xd1b7             // movl         $3518437209, %r10d
	LONG $0xc2af0f49                           // imulq        %r10, %rax
	LONG $0x2de8c148                           // shrq         $45, %rax
	LONG $0x2710c869; WORD $0x0000             // imull        $10000, %eax, %ecx
	WORD $0xcb29                               // subl         %ecx, %ebx
	WORD $0x8948; BYTE $0xc1                   // movq         %rax, %rcx
	LONG $0xcaaf0f49                           // imulq        %r10, %rcx
	LONG $0x2de9c148                           // shrq         $45, %rcx
	LONG $0x2710c969; WORD $0x0000             // imull        $10000, %ecx, %ecx
	WORD $0xc829                               // subl         %ecx, %eax
	WORD $0xb70f; BYTE $0xcb                   // movzwl       %bx, %ecx
	WORD $0xe9c1; BYTE $0x02                   // shrl         $2, %ecx
	LONG $0x7bd16944; WORD $0x0014; BYTE $0x00 // imull        $5243, %ecx, %r10d
	LONG $0x11eac141                           // shrl         $17, %r10d
	LONG $0x64ca6b41                           // imull        $100, %r10d, %ecx
	WORD $0xcb29                               // subl         %ecx, %ebx
	LONG $0xdbb70f44                           // movzwl       %bx, %r11d
	WORD $0xb70f; BYTE $0xd8                   // movzwl       %ax, %ebx
	WORD $0xebc1; BYTE $0x02                   // shrl         $2, %ebx
	LONG $0x147bdb69; WORD $0x0000             // imull        $5243, %ebx, %ebx
	WORD $0xebc1; BYTE $0x11                   // shrl         $17, %ebx
	WORD $0xcb6b; BYTE $0x64                   // imull        $100, %ebx, %ecx
	WORD $0xc829                               // subl         %ecx, %eax
	LONG $0xf0b70f44                           // movzwl       %ax, %r14d
	LONG $0x340d8d48; WORD $0x00cf; BYTE $0x00 // leaq         $53044(%rip), %rcx  /* _Digits(%rip) */
	LONG $0x04b70f42; BYTE $0x59               // movzwl       (%rcx,%r11,2), %eax
	LONG $0x47894166; BYTE $0xfe               // movw         %ax, $-2(%r15)
	LONG $0x04b70f42; BYTE $0x51               // movzwl       (%rcx,%r10,2), %eax
	LONG $0x47894166; BYTE $0xfc               // movw         %ax, $-4(%r15)
	LONG $0x04b70f42; BYTE $0x71               // movzwl       (%rcx,%r14,2), %eax
	LONG $0x47894166; BYTE $0xfa               // movw         %ax, $-6(%r15)
	LONG $0x5904b70f                           // movzwl       (%rcx,%rbx,2), %eax
	LONG $0x47894166; BYTE $0xf8               // movw         %ax, $-8(%r15)
	WORD $0x3145; BYTE $0xd2                   // xorl         %r10d, %r10d
	LONG $0xf8678d4d                           // leaq         $-8(%r15), %r12
	LONG $0x2710fa81; WORD $0x0000             // cmpl         $10000, %edx
	LONG $0xfe2b830f; WORD $0xffff             // jae          LBB1_86, $-469(%rip)

LBB1_34:
	WORD $0xd389                   // movl         %edx, %ebx
	WORD $0xfb83; BYTE $0x64       // cmpl         $100, %ebx
	LONG $0xfeb0820f; WORD $0xffff // jb           LBB1_90, $-336(%rip)
	LONG $0xfffe7de9; BYTE $0xff   // jmp          LBB1_89, $-387(%rip)

LBB1_92:
	WORD $0xc380; BYTE $0x30 // addb         $48, %bl
	WORD $0x1888             // movb         %bl, (%rax)

LBB1_93:
	WORD $0x294d; BYTE $0xd7 // subq         %r10, %r15
	WORD $0x9090             // .p2align 4, 0x90

LBB1_94:
	LONG $0xff7f8041; BYTE $0x30   // cmpb         $48, $-1(%r15)
	LONG $0xff7f8d4d               // leaq         $-1(%r15), %r15
	LONG $0xfff1840f; WORD $0xffff // je           LBB1_94, $-15(%rip)
	LONG $0x01488a41               // movb         $1(%r8), %cl
	WORD $0x8841; BYTE $0x08       // movb         %cl, (%r8)
	LONG $0x014f8d49               // leaq         $1(%r15), %rcx
	WORD $0x8948; BYTE $0xca       // movq         %rcx, %rdx
	WORD $0x2948; BYTE $0xc2       // subq         %rax, %rdx
	LONG $0x02fa8348               // cmpq         $2, %rdx
	LONG $0x00068c0f; WORD $0x0000 // jl           LBB1_97, $6(%rip)
	WORD $0x00c6; BYTE $0x2e       // movb         $46, (%rax)
	WORD $0x8949; BYTE $0xcf       // movq         %rcx, %r15

LBB1_97:
	LONG $0x6507c641               // movb         $101, (%r15)
	LONG $0xff418d41               // leal         $-1(%r9), %eax
	WORD $0x8545; BYTE $0xc9       // testl        %r9d, %r9d
	LONG $0x02cb8e0f; WORD $0x0000 // jle          LBB1_100, $715(%rip)
	LONG $0x0147c641; BYTE $0x2b   // movb         $43, $1(%r15)
	WORD $0xf883; BYTE $0x64       // cmpl         $100, %eax
	LONG $0x02cd8c0f; WORD $0x0000 // jl           LBB1_101, $717(%rip)

LBB1_99:
	WORD $0xc189                               // movl         %eax, %ecx
	LONG $0xcccccdba; BYTE $0xcc               // movl         $3435973837, %edx
	LONG $0xd1af0f48                           // imulq        %rcx, %rdx
	LONG $0x23eac148                           // shrq         $35, %rdx
	WORD $0x0c8d; BYTE $0x12                   // leal         (%rdx,%rdx), %ecx
	WORD $0x0c8d; BYTE $0x89                   // leal         (%rcx,%rcx,4), %ecx
	WORD $0xc829                               // subl         %ecx, %eax
	LONG $0x730d8d48; WORD $0x00ce; BYTE $0x00 // leaq         $52851(%rip), %rcx  /* _Digits(%rip) */
	LONG $0x510cb70f                           // movzwl       (%rcx,%rdx,2), %ecx
	LONG $0x4f894166; BYTE $0x02               // movw         %cx, $2(%r15)
	WORD $0x300c                               // orb          $48, %al
	LONG $0x04478841                           // movb         %al, $4(%r15)
	LONG $0x05c78349                           // addq         $5, %r15
	WORD $0x894d; BYTE $0xf8                   // movq         %r15, %r8
	LONG $0x000bcae9; BYTE $0x00               // jmp          LBB1_161, $3018(%rip)

LBB1_41:
	WORD $0xd349; BYTE $0xeb               // shrq         %cl, %r11
	QUAD $0x0001ffffff80b848; WORD $0x0000 // movabsq      $8589934464, %rax
	LONG $0xe47f0548; WORD $0x540b         // addq         $1410065535, %rax
	WORD $0x3949; BYTE $0xc3               // cmpq         %rax, %r11
	LONG $0x0499860f; WORD $0x0000         // jbe          LBB1_72, $1177(%rip)
	WORD $0x894c; BYTE $0xd8               // movq         %r11, %rax
	LONG $0x0be8c148                       // shrq         $11, %rax
	LONG $0x000bba41; WORD $0x0000         // movl         $11, %r10d
	LONG $0x0edd3d48; WORD $0x02e9         // cmpq         $48828125, %rax
	LONG $0x007b820f; WORD $0x0000         // jb           LBB1_48, $123(%rip)
	WORD $0x894c; BYTE $0xd8               // movq         %r11, %rax
	LONG $0x0ce8c148                       // shrq         $12, %rax
	LONG $0x000cba41; WORD $0x0000         // movl         $12, %r10d
	LONG $0x4a513d48; WORD $0x0e8d         // cmpq         $244140625, %rax
	LONG $0x0062820f; WORD $0x0000         // jb           LBB1_48, $98(%rip)
	WORD $0x894c; BYTE $0xd8               // movq         %r11, %rax
	LONG $0x0de8c148                       // shrq         $13, %rax
	LONG $0x000dba41; WORD $0x0000         // movl         $13, %r10d
	LONG $0x73953d48; WORD $0x48c2         // cmpq         $1220703125, %rax
	LONG $0x0049820f; WORD $0x0000         // jb           LBB1_48, $73(%rip)
	LONG $0x000eba41; WORD $0x0000         // movl         $14, %r10d
	QUAD $0x5af3107a4000b848; WORD $0x0000 // movabsq      $100000000000000, %rax
	WORD $0x3949; BYTE $0xc3               // cmpq         %rax, %r11
	LONG $0x0030820f; WORD $0x0000         // jb           LBB1_48, $48(%rip)
	LONG $0x000fba41; WORD $0x0000         // movl         $15, %r10d
	QUAD $0x8d7ea4c68000b848; WORD $0x0003 // movabsq      $1000000000000000, %rax
	WORD $0x3949; BYTE $0xc3               // cmpq         %rax, %r11
	LONG $0x0017820f; WORD $0x0000         // jb           LBB1_48, $23(%rip)
	QUAD $0x86f26fc10000b848; WORD $0x0023 // movabsq      $10000000000000000, %rax
	WORD $0x3949; BYTE $0xc3               // cmpq         %rax, %r11
	LONG $0x0011ba41; WORD $0x0000         // movl         $17, %r10d
	LONG $0x00da8349                       // sbbq         $0, %r10

LBB1_48:
	WORD $0x014d; BYTE $0xc2 // addq         %r8, %r10

LBB1_49:
	QUAD $0x77118461cefdba48; WORD $0xabcc     // movabsq      $-6067343680855748867, %rdx
	WORD $0x894c; BYTE $0xd8                   // movq         %r11, %rax
	WORD $0xf748; BYTE $0xe2                   // mulq         %rdx
	LONG $0x1aeac148                           // shrq         $26, %rdx
	LONG $0x1f00ca69; WORD $0xfa0a             // imull        $-100000000, %edx, %ecx
	WORD $0x0144; BYTE $0xd9                   // addl         %r11d, %ecx
	LONG $0x1759b941; WORD $0xd1b7             // movl         $3518437209, %r9d
	WORD $0x8948; BYTE $0xce                   // movq         %rcx, %rsi
	LONG $0xf1af0f49                           // imulq        %r9, %rsi
	LONG $0x2deec148                           // shrq         $45, %rsi
	LONG $0x2710de69; WORD $0x0000             // imull        $10000, %esi, %ebx
	WORD $0xd929                               // subl         %ebx, %ecx
	WORD $0x8948; BYTE $0xf0                   // movq         %rsi, %rax
	LONG $0xc1af0f49                           // imulq        %r9, %rax
	LONG $0x2de8c148                           // shrq         $45, %rax
	LONG $0x2710c069; WORD $0x0000             // imull        $10000, %eax, %eax
	WORD $0xc629                               // subl         %eax, %esi
	WORD $0xb70f; BYTE $0xc1                   // movzwl       %cx, %eax
	WORD $0xe8c1; BYTE $0x02                   // shrl         $2, %eax
	LONG $0x147bc069; WORD $0x0000             // imull        $5243, %eax, %eax
	WORD $0xe8c1; BYTE $0x11                   // shrl         $17, %eax
	WORD $0xd86b; BYTE $0x64                   // imull        $100, %eax, %ebx
	WORD $0xd929                               // subl         %ebx, %ecx
	LONG $0xc9b70f44                           // movzwl       %cx, %r9d
	WORD $0xb70f; BYTE $0xde                   // movzwl       %si, %ebx
	WORD $0xebc1; BYTE $0x02                   // shrl         $2, %ebx
	LONG $0x147bdb69; WORD $0x0000             // imull        $5243, %ebx, %ebx
	WORD $0xebc1; BYTE $0x11                   // shrl         $17, %ebx
	WORD $0xcb6b; BYTE $0x64                   // imull        $100, %ebx, %ecx
	WORD $0xce29                               // subl         %ecx, %esi
	LONG $0xdeb70f44                           // movzwl       %si, %r11d
	LONG $0x25358d48; WORD $0x00cd; BYTE $0x00 // leaq         $52517(%rip), %rsi  /* _Digits(%rip) */
	LONG $0x0cb70f42; BYTE $0x4e               // movzwl       (%rsi,%r9,2), %ecx
	LONG $0x4a894166; BYTE $0xfe               // movw         %cx, $-2(%r10)
	LONG $0x4604b70f                           // movzwl       (%rsi,%rax,2), %eax
	LONG $0x42894166; BYTE $0xfc               // movw         %ax, $-4(%r10)
	LONG $0x04b70f42; BYTE $0x5e               // movzwl       (%rsi,%r11,2), %eax
	LONG $0x42894166; BYTE $0xfa               // movw         %ax, $-6(%r10)
	LONG $0xf8428d49                           // leaq         $-8(%r10), %rax
	LONG $0x5e0cb70f                           // movzwl       (%rsi,%rbx,2), %ecx
	LONG $0x4a894166; BYTE $0xf8               // movw         %cx, $-8(%r10)
	WORD $0x8949; BYTE $0xd3                   // movq         %rdx, %r11
	LONG $0x10fb8141; WORD $0x0027; BYTE $0x00 // cmpl         $10000, %r11d
	LONG $0x03ed820f; WORD $0x0000             // jb           LBB1_82, $1005(%rip)

LBB1_50:
	LONG $0x1759b941; WORD $0xd1b7                           // movl         $3518437209, %r9d
	LONG $0xde358d4c; WORD $0x00cc; BYTE $0x00               // leaq         $52446(%rip), %r14  /* _Digits(%rip) */
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB1_51:
	WORD $0x8944; BYTE $0xda                   // movl         %r11d, %edx
	LONG $0xd1af0f49                           // imulq        %r9, %rdx
	LONG $0x2deac148                           // shrq         $45, %rdx
	LONG $0xd8f0ca69; WORD $0xffff             // imull        $-10000, %edx, %ecx
	WORD $0x0144; BYTE $0xd9                   // addl         %r11d, %ecx
	LONG $0x1ff16948; WORD $0xeb85; BYTE $0x51 // imulq        $1374389535, %rcx, %rsi
	LONG $0x25eec148                           // shrq         $37, %rsi
	WORD $0xde6b; BYTE $0x64                   // imull        $100, %esi, %ebx
	WORD $0xd929                               // subl         %ebx, %ecx
	LONG $0x0cb70f41; BYTE $0x4e               // movzwl       (%r14,%rcx,2), %ecx
	LONG $0xfe488966                           // movw         %cx, $-2(%rax)
	LONG $0x0cb70f41; BYTE $0x76               // movzwl       (%r14,%rsi,2), %ecx
	LONG $0xfc488966                           // movw         %cx, $-4(%rax)
	LONG $0xfcc08348                           // addq         $-4, %rax
	LONG $0xfffb8141; WORD $0xf5e0; BYTE $0x05 // cmpl         $99999999, %r11d
	WORD $0x8941; BYTE $0xd3                   // movl         %edx, %r11d
	LONG $0xffb6870f; WORD $0xffff             // ja           LBB1_51, $-74(%rip)
	WORD $0xfa83; BYTE $0x64                   // cmpl         $100, %edx
	LONG $0x002c820f; WORD $0x0000             // jb           LBB1_54, $44(%rip)

LBB1_53:
	WORD $0xb70f; BYTE $0xca                   // movzwl       %dx, %ecx
	WORD $0xe9c1; BYTE $0x02                   // shrl         $2, %ecx
	LONG $0x147bc969; WORD $0x0000             // imull        $5243, %ecx, %ecx
	WORD $0xe9c1; BYTE $0x11                   // shrl         $17, %ecx
	WORD $0xf16b; BYTE $0x64                   // imull        $100, %ecx, %esi
	WORD $0xf229                               // subl         %esi, %edx
	WORD $0xb70f; BYTE $0xd2                   // movzwl       %dx, %edx
	LONG $0x5f358d48; WORD $0x00cc; BYTE $0x00 // leaq         $52319(%rip), %rsi  /* _Digits(%rip) */
	LONG $0x5614b70f                           // movzwl       (%rsi,%rdx,2), %edx
	LONG $0xfe508966                           // movw         %dx, $-2(%rax)
	LONG $0xfec08348                           // addq         $-2, %rax
	WORD $0xca89                               // movl         %ecx, %edx

LBB1_54:
	WORD $0xfa83; BYTE $0x0a                   // cmpl         $10, %edx
	LONG $0x035b820f; WORD $0x0000             // jb           LBB1_83, $859(%rip)
	WORD $0xd189                               // movl         %edx, %ecx
	LONG $0x3f158d48; WORD $0x00cc; BYTE $0x00 // leaq         $52287(%rip), %rdx  /* _Digits(%rip) */
	LONG $0x4a0cb70f                           // movzwl       (%rdx,%rcx,2), %ecx
	LONG $0xfe488966                           // movw         %cx, $-2(%rax)
	LONG $0x00034be9; BYTE $0x00               // jmp          LBB1_84, $843(%rip)

LBB1_56:
	WORD $0x8545; BYTE $0xc9                   // testl        %r9d, %r9d
	LONG $0x05888f0f; WORD $0x0000             // jg           LBB1_120, $1416(%rip)
	LONG $0x00c74166; WORD $0x2e30             // movw         $11824, (%r8)
	LONG $0x02c08349                           // addq         $2, %r8
	WORD $0x8545; BYTE $0xc9                   // testl        %r9d, %r9d
	LONG $0x0575890f; WORD $0x0000             // jns          LBB1_120, $1397(%rip)
	WORD $0xd0f7                               // notl         %eax
	WORD $0x2944; BYTE $0xf8                   // subl         %r15d, %eax
	WORD $0xd231                               // xorl         %edx, %edx
	WORD $0xf883; BYTE $0x7f                   // cmpl         $127, %eax
	LONG $0x0551820f; WORD $0x0000             // jb           LBB1_118, $1361(%rip)
	WORD $0xff48; BYTE $0xc0                   // incq         %rax
	WORD $0x8948; BYTE $0xc2                   // movq         %rax, %rdx
	WORD $0x214c; BYTE $0xd2                   // andq         %r10, %rdx
	LONG $0x80728d48                           // leaq         $-128(%rdx), %rsi
	WORD $0x8949; BYTE $0xf7                   // movq         %rsi, %r15
	LONG $0x07efc149                           // shrq         $7, %r15
	WORD $0xff49; BYTE $0xc7                   // incq         %r15
	WORD $0x8945; BYTE $0xfb                   // movl         %r15d, %r11d
	LONG $0x03e38341                           // andl         $3, %r11d
	LONG $0x80fe8148; WORD $0x0001; BYTE $0x00 // cmpq         $384, %rsi
	LONG $0x042f830f; WORD $0x0000             // jae          LBB1_112, $1071(%rip)
	WORD $0xdb31                               // xorl         %ebx, %ebx
	LONG $0x0004d6e9; BYTE $0x00               // jmp          LBB1_114, $1238(%rip)

LBB1_100:
	LONG $0x0147c641; BYTE $0x2d   // movb         $45, $1(%r15)
	WORD $0xd8f7                   // negl         %eax
	WORD $0xf883; BYTE $0x64       // cmpl         $100, %eax
	LONG $0xfd338d0f; WORD $0xffff // jge          LBB1_99, $-717(%rip)

LBB1_101:
	WORD $0xf883; BYTE $0x0a                   // cmpl         $10, %eax
	LONG $0x02068c0f; WORD $0x0000             // jl           LBB1_103, $518(%rip)
	WORD $0xc089                               // movl         %eax, %eax
	LONG $0xb20d8d48; WORD $0x00cb; BYTE $0x00 // leaq         $52146(%rip), %rcx  /* _Digits(%rip) */
	LONG $0x4104b70f                           // movzwl       (%rcx,%rax,2), %eax
	LONG $0x47894166; BYTE $0x02               // movw         %ax, $2(%r15)
	LONG $0x04c78349                           // addq         $4, %r15
	WORD $0x894d; BYTE $0xf8                   // movq         %r15, %r8
	LONG $0x00090fe9; BYTE $0x00               // jmp          LBB1_161, $2319(%rip)

LBB1_61:
	QUAD $0x77118461cefdba48; WORD $0xabcc     // movabsq      $-6067343680855748867, %rdx
	WORD $0x894c; BYTE $0xf0                   // movq         %r14, %rax
	WORD $0xf748; BYTE $0xe2                   // mulq         %rdx
	LONG $0x1aeac148                           // shrq         $26, %rdx
	LONG $0x1f00f269; WORD $0xfa0a             // imull        $-100000000, %edx, %esi
	WORD $0x0144; BYTE $0xf6                   // addl         %r14d, %esi
	LONG $0x1759ba41; WORD $0xd1b7             // movl         $3518437209, %r10d
	WORD $0x8948; BYTE $0xf0                   // movq         %rsi, %rax
	LONG $0xc2af0f49                           // imulq        %r10, %rax
	LONG $0x2de8c148                           // shrq         $45, %rax
	LONG $0x2710c869; WORD $0x0000             // imull        $10000, %eax, %ecx
	WORD $0xce29                               // subl         %ecx, %esi
	WORD $0x8948; BYTE $0xc1                   // movq         %rax, %rcx
	LONG $0xcaaf0f49                           // imulq        %r10, %rcx
	LONG $0x2de9c148                           // shrq         $45, %rcx
	LONG $0x2710c969; WORD $0x0000             // imull        $10000, %ecx, %ecx
	WORD $0xc829                               // subl         %ecx, %eax
	WORD $0xb70f; BYTE $0xce                   // movzwl       %si, %ecx
	WORD $0xe9c1; BYTE $0x02                   // shrl         $2, %ecx
	LONG $0x7bd16944; WORD $0x0014; BYTE $0x00 // imull        $5243, %ecx, %r10d
	LONG $0x11eac141                           // shrl         $17, %r10d
	LONG $0x64ca6b41                           // imull        $100, %r10d, %ecx
	WORD $0xce29                               // subl         %ecx, %esi
	LONG $0xdeb70f44                           // movzwl       %si, %r11d
	WORD $0xb70f; BYTE $0xf0                   // movzwl       %ax, %esi
	WORD $0xeec1; BYTE $0x02                   // shrl         $2, %esi
	LONG $0x147bf669; WORD $0x0000             // imull        $5243, %esi, %esi
	WORD $0xeec1; BYTE $0x11                   // shrl         $17, %esi
	WORD $0xce6b; BYTE $0x64                   // imull        $100, %esi, %ecx
	WORD $0xc829                               // subl         %ecx, %eax
	LONG $0xf8b70f44                           // movzwl       %ax, %r15d
	LONG $0x1a0d8d48; WORD $0x00cb; BYTE $0x00 // leaq         $51994(%rip), %rcx  /* _Digits(%rip) */
	LONG $0x04b70f42; BYTE $0x59               // movzwl       (%rcx,%r11,2), %eax
	LONG $0xfe438966                           // movw         %ax, $-2(%rbx)
	LONG $0x04b70f42; BYTE $0x51               // movzwl       (%rcx,%r10,2), %eax
	LONG $0xfc438966                           // movw         %ax, $-4(%rbx)
	LONG $0x04b70f42; BYTE $0x79               // movzwl       (%rcx,%r15,2), %eax
	LONG $0xfa438966                           // movw         %ax, $-6(%rbx)
	LONG $0xf8438d48                           // leaq         $-8(%rbx), %rax
	LONG $0x710cb70f                           // movzwl       (%rcx,%rsi,2), %ecx
	LONG $0xf84b8966                           // movw         %cx, $-8(%rbx)
	WORD $0x8941; BYTE $0xd6                   // movl         %edx, %r14d
	WORD $0x8949; BYTE $0xff                   // movq         %rdi, %r15
	LONG $0x10fe8141; WORD $0x0027; BYTE $0x00 // cmpl         $10000, %r14d
	LONG $0xfaf3820f; WORD $0xffff             // jb           LBB1_38, $-1293(%rip)

LBB1_62:
	LONG $0x1759ba41; WORD $0xd1b7             // movl         $3518437209, %r10d
	LONG $0xd31d8d4c; WORD $0x00ca; BYTE $0x00 // leaq         $51923(%rip), %r11  /* _Digits(%rip) */
	WORD $0x9090; BYTE $0x90                   // .p2align 4, 0x90

LBB1_63:
	WORD $0x8944; BYTE $0xf2                   // movl         %r14d, %edx
	LONG $0xd2af0f49                           // imulq        %r10, %rdx
	LONG $0x2deac148                           // shrq         $45, %rdx
	LONG $0xd8f0f269; WORD $0xffff             // imull        $-10000, %edx, %esi
	WORD $0x0144; BYTE $0xf6                   // addl         %r14d, %esi
	LONG $0x1fce6948; WORD $0xeb85; BYTE $0x51 // imulq        $1374389535, %rsi, %rcx
	LONG $0x25e9c148                           // shrq         $37, %rcx
	WORD $0xf96b; BYTE $0x64                   // imull        $100, %ecx, %edi
	WORD $0xfe29                               // subl         %edi, %esi
	LONG $0x34b70f41; BYTE $0x73               // movzwl       (%r11,%rsi,2), %esi
	LONG $0xfe708966                           // movw         %si, $-2(%rax)
	LONG $0x0cb70f41; BYTE $0x4b               // movzwl       (%r11,%rcx,2), %ecx
	LONG $0xfc488966                           // movw         %cx, $-4(%rax)
	LONG $0xfcc08348                           // addq         $-4, %rax
	LONG $0xfffe8141; WORD $0xf5e0; BYTE $0x05 // cmpl         $99999999, %r14d
	WORD $0x8941; BYTE $0xd6                   // movl         %edx, %r14d
	LONG $0xffb6870f; WORD $0xffff             // ja           LBB1_63, $-74(%rip)

LBB1_64:
	WORD $0xfa83; BYTE $0x64                   // cmpl         $100, %edx
	LONG $0x002c820f; WORD $0x0000             // jb           LBB1_66, $44(%rip)
	WORD $0xb70f; BYTE $0xca                   // movzwl       %dx, %ecx
	WORD $0xe9c1; BYTE $0x02                   // shrl         $2, %ecx
	LONG $0x147bc969; WORD $0x0000             // imull        $5243, %ecx, %ecx
	WORD $0xe9c1; BYTE $0x11                   // shrl         $17, %ecx
	WORD $0xf16b; BYTE $0x64                   // imull        $100, %ecx, %esi
	WORD $0xf229                               // subl         %esi, %edx
	WORD $0xb70f; BYTE $0xd2                   // movzwl       %dx, %edx
	LONG $0x5f358d48; WORD $0x00ca; BYTE $0x00 // leaq         $51807(%rip), %rsi  /* _Digits(%rip) */
	LONG $0x5614b70f                           // movzwl       (%rsi,%rdx,2), %edx
	LONG $0xfe508966                           // movw         %dx, $-2(%rax)
	LONG $0xfec08348                           // addq         $-2, %rax
	WORD $0xca89                               // movl         %ecx, %edx

LBB1_66:
	WORD $0x894c; BYTE $0xff                   // movq         %r15, %rdi
	LONG $0xd05d8b4c                           // movq         $-48(%rbp), %r11
	WORD $0x6349; BYTE $0xc9                   // movslq       %r9d, %rcx
	WORD $0xfa83; BYTE $0x0a                   // cmpl         $10, %edx
	LONG $0x0022820f; WORD $0x0000             // jb           LBB1_68, $34(%rip)
	WORD $0xd289                               // movl         %edx, %edx
	LONG $0x35358d48; WORD $0x00ca; BYTE $0x00 // leaq         $51765(%rip), %rsi  /* _Digits(%rip) */
	LONG $0x5614b70f                           // movzwl       (%rsi,%rdx,2), %edx
	LONG $0xfe508966                           // movw         %dx, $-2(%rax)
	WORD $0x0149; BYTE $0xc8                   // addq         %rcx, %r8
	WORD $0x3949; BYTE $0xcc                   // cmpq         %rcx, %r12
	LONG $0x00178c0f; WORD $0x0000             // jl           LBB1_69, $23(%rip)
	LONG $0x00078ee9; BYTE $0x00               // jmp          LBB1_161, $1934(%rip)

LBB1_68:
	WORD $0xc280; BYTE $0x30       // addb         $48, %dl
	WORD $0x8841; BYTE $0x10       // movb         %dl, (%r8)
	WORD $0x0149; BYTE $0xc8       // addq         %rcx, %r8
	WORD $0x3949; BYTE $0xcc       // cmpq         %rcx, %r12
	LONG $0x077c8d0f; WORD $0x0000 // jge          LBB1_161, $1916(%rip)

LBB1_69:
	LONG $0x23048d4b                           // leaq         (%r11,%r12), %rax
	LONG $0x07548d4c; BYTE $0x01               // leaq         $1(%rdi,%rax), %r10
	WORD $0x394d; BYTE $0xc2                   // cmpq         %r8, %r10
	LONG $0xd0460f4d                           // cmovbeq      %r8, %r10
	LONG $0x1f0c8d4a                           // leaq         (%rdi,%r11), %rcx
	WORD $0x014c; BYTE $0xe1                   // addq         %r12, %rcx
	WORD $0x2949; BYTE $0xca                   // subq         %rcx, %r10
	LONG $0x80fa8149; WORD $0x0000; BYTE $0x00 // cmpq         $128, %r10
	LONG $0x0223820f; WORD $0x0000             // jb           LBB1_111, $547(%rip)
	WORD $0x894d; BYTE $0xd1                   // movq         %r10, %r9
	LONG $0x80e18349                           // andq         $-128, %r9
	LONG $0x80718d49                           // leaq         $-128(%r9), %rsi
	WORD $0x8948; BYTE $0xf2                   // movq         %rsi, %rdx
	LONG $0x07eac148                           // shrq         $7, %rdx
	WORD $0xff48; BYTE $0xc2                   // incq         %rdx
	WORD $0xd189                               // movl         %edx, %ecx
	WORD $0xe183; BYTE $0x03                   // andl         $3, %ecx
	LONG $0x80fe8148; WORD $0x0001; BYTE $0x00 // cmpq         $384, %rsi
	LONG $0x00fb830f; WORD $0x0000             // jae          LBB1_104, $251(%rip)
	WORD $0xc031                               // xorl         %eax, %eax
	LONG $0x0001a5e9; BYTE $0x00               // jmp          LBB1_106, $421(%rip)

LBB1_103:
	WORD $0x3004                 // addb         $48, %al
	LONG $0x02478841             // movb         %al, $2(%r15)
	LONG $0x03c78349             // addq         $3, %r15
	WORD $0x894d; BYTE $0xf8     // movq         %r15, %r8
	LONG $0x000715e9; BYTE $0x00 // jmp          LBB1_161, $1813(%rip)

LBB1_72:
	LONG $0x0001ba41; WORD $0x0000             // movl         $1, %r10d
	LONG $0x0afb8349                           // cmpq         $10, %r11
	LONG $0x0082820f; WORD $0x0000             // jb           LBB1_80, $130(%rip)
	LONG $0x0002ba41; WORD $0x0000             // movl         $2, %r10d
	LONG $0x64fb8349                           // cmpq         $100, %r11
	LONG $0x0072820f; WORD $0x0000             // jb           LBB1_80, $114(%rip)
	LONG $0x0003ba41; WORD $0x0000             // movl         $3, %r10d
	LONG $0xe8fb8149; WORD $0x0003; BYTE $0x00 // cmpq         $1000, %r11
	LONG $0x005f820f; WORD $0x0000             // jb           LBB1_80, $95(%rip)
	LONG $0x0004ba41; WORD $0x0000             // movl         $4, %r10d
	LONG $0x10fb8149; WORD $0x0027; BYTE $0x00 // cmpq         $10000, %r11
	LONG $0x004c820f; WORD $0x0000             // jb           LBB1_80, $76(%rip)
	LONG $0x0005ba41; WORD $0x0000             // movl         $5, %r10d
	LONG $0xa0fb8149; WORD $0x0186; BYTE $0x00 // cmpq         $100000, %r11
	LONG $0x0039820f; WORD $0x0000             // jb           LBB1_80, $57(%rip)
	LONG $0x0006ba41; WORD $0x0000             // movl         $6, %r10d
	LONG $0x40fb8149; WORD $0x0f42; BYTE $0x00 // cmpq         $1000000, %r11
	LONG $0x0026820f; WORD $0x0000             // jb           LBB1_80, $38(%rip)
	LONG $0x0007ba41; WORD $0x0000             // movl         $7, %r10d
	LONG $0x80fb8149; WORD $0x9896; BYTE $0x00 // cmpq         $10000000, %r11
	LONG $0x0013820f; WORD $0x0000             // jb           LBB1_80, $19(%rip)
	LONG $0x0008ba41; WORD $0x0000             // movl         $8, %r10d
	LONG $0xfffb8149; WORD $0xf5e0; BYTE $0x05 // cmpq         $99999999, %r11
	LONG $0x06c6870f; WORD $0x0000             // ja           LBB1_166, $1734(%rip)

LBB1_80:
	WORD $0x014d; BYTE $0xc2 // addq         %r8, %r10

LBB1_81:
	WORD $0x894c; BYTE $0xd0                   // movq         %r10, %rax
	LONG $0x10fb8141; WORD $0x0027; BYTE $0x00 // cmpl         $10000, %r11d
	LONG $0xfc13830f; WORD $0xffff             // jae          LBB1_50, $-1005(%rip)

LBB1_82:
	WORD $0x8944; BYTE $0xda       // movl         %r11d, %edx
	WORD $0xfa83; BYTE $0x64       // cmpl         $100, %edx
	LONG $0xfc75830f; WORD $0xffff // jae          LBB1_53, $-907(%rip)
	LONG $0xfffc9ce9; BYTE $0xff   // jmp          LBB1_54, $-868(%rip)

LBB1_83:
	WORD $0xc280; BYTE $0x30 // addb         $48, %dl
	WORD $0x8841; BYTE $0x10 // movb         %dl, (%r8)

LBB1_84:
	WORD $0x2941; BYTE $0xfa     // subl         %edi, %r10d
	WORD $0x8945; BYTE $0xd0     // movl         %r10d, %r8d
	LONG $0x000651e9; BYTE $0x00 // jmp          LBB1_162, $1617(%rip)

LBB1_85:
	LONG $0x0008ba41; WORD $0x0000 // movl         $8, %r10d
	LONG $0xf8678d4d               // leaq         $-8(%r15), %r12
	LONG $0x2710fa81; WORD $0x0000 // cmpl         $10000, %edx
	LONG $0xf9cc820f; WORD $0xffff // jb           LBB1_34, $-1588(%rip)
	LONG $0xfff7f2e9; BYTE $0xff   // jmp          LBB1_86, $-2062(%rip)

LBB1_104:
	QUAD $0x000001e007b48d48 // leaq         $480(%rdi,%rax), %rsi
	LONG $0xfce28348         // andq         $-4, %rdx
	WORD $0xf748; BYTE $0xda // negq         %rdx
	WORD $0xc031             // xorl         %eax, %eax
	QUAD $0xfffff3f8056ffdc5 // vmovdqa      $-3080(%rip), %ymm0  /* LCPI1_0(%rip) */
	QUAD $0x9090909090909090 // .p2align 4, 0x90

LBB1_105:
	QUAD $0xfffe2006847ffec5; BYTE $0xff // vmovdqu      %ymm0, $-480(%rsi,%rax)
	QUAD $0xfffe4006847ffec5; BYTE $0xff // vmovdqu      %ymm0, $-448(%rsi,%rax)
	QUAD $0xfffe6006847ffec5; BYTE $0xff // vmovdqu      %ymm0, $-416(%rsi,%rax)
	QUAD $0xfffe8006847ffec5; BYTE $0xff // vmovdqu      %ymm0, $-384(%rsi,%rax)
	QUAD $0xfffea006847ffec5; BYTE $0xff // vmovdqu      %ymm0, $-352(%rsi,%rax)
	QUAD $0xfffec006847ffec5; BYTE $0xff // vmovdqu      %ymm0, $-320(%rsi,%rax)
	QUAD $0xfffee006847ffec5; BYTE $0xff // vmovdqu      %ymm0, $-288(%rsi,%rax)
	QUAD $0xffff0006847ffec5; BYTE $0xff // vmovdqu      %ymm0, $-256(%rsi,%rax)
	QUAD $0xffff2006847ffec5; BYTE $0xff // vmovdqu      %ymm0, $-224(%rsi,%rax)
	QUAD $0xffff4006847ffec5; BYTE $0xff // vmovdqu      %ymm0, $-192(%rsi,%rax)
	QUAD $0xffff6006847ffec5; BYTE $0xff // vmovdqu      %ymm0, $-160(%rsi,%rax)
	LONG $0x447ffec5; WORD $0x8006       // vmovdqu      %ymm0, $-128(%rsi,%rax)
	LONG $0x447ffec5; WORD $0xa006       // vmovdqu      %ymm0, $-96(%rsi,%rax)
	LONG $0x447ffec5; WORD $0xc006       // vmovdqu      %ymm0, $-64(%rsi,%rax)
	LONG $0x447ffec5; WORD $0xe006       // vmovdqu      %ymm0, $-32(%rsi,%rax)
	LONG $0x047ffec5; BYTE $0x06         // vmovdqu      %ymm0, (%rsi,%rax)
	LONG $0x02000548; WORD $0x0000       // addq         $512, %rax
	LONG $0x04c28348                     // addq         $4, %rdx
	LONG $0xff70850f; WORD $0xffff       // jne          LBB1_105, $-144(%rip)

LBB1_106:
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0x0037840f; WORD $0x0000 // je           LBB1_109, $55(%rip)
	WORD $0x014c; BYTE $0xd8       // addq         %r11, %rax
	WORD $0x014c; BYTE $0xe0       // addq         %r12, %rax
	LONG $0x07448d48; BYTE $0x60   // leaq         $96(%rdi,%rax), %rax
	WORD $0xf748; BYTE $0xd9       // negq         %rcx
	QUAD $0xfffff341056ffdc5       // vmovdqa      $-3263(%rip), %ymm0  /* LCPI1_0(%rip) */
	BYTE $0x90                     // .p2align 4, 0x90

LBB1_108:
	LONG $0x407ffec5; BYTE $0xa0   // vmovdqu      %ymm0, $-96(%rax)
	LONG $0x407ffec5; BYTE $0xc0   // vmovdqu      %ymm0, $-64(%rax)
	LONG $0x407ffec5; BYTE $0xe0   // vmovdqu      %ymm0, $-32(%rax)
	LONG $0x007ffec5               // vmovdqu      %ymm0, (%rax)
	LONG $0x80e88348               // subq         $-128, %rax
	WORD $0xff48; BYTE $0xc1       // incq         %rcx
	LONG $0xffe0850f; WORD $0xffff // jne          LBB1_108, $-32(%rip)

LBB1_109:
	WORD $0x394d; BYTE $0xd1       // cmpq         %r10, %r9
	LONG $0x0539840f; WORD $0x0000 // je           LBB1_161, $1337(%rip)
	WORD $0x014c; BYTE $0xcb       // addq         %r9, %rbx
	LONG $0x90909090               // .p2align 4, 0x90

LBB1_111:
	WORD $0x03c6; BYTE $0x30       // movb         $48, (%rbx)
	WORD $0xff48; BYTE $0xc3       // incq         %rbx
	WORD $0x394c; BYTE $0xc3       // cmpq         %r8, %rbx
	LONG $0xfff1820f; WORD $0xffff // jb           LBB1_111, $-15(%rip)
	LONG $0x00051ee9; BYTE $0x00   // jmp          LBB1_161, $1310(%rip)

LBB1_112:
	LONG $0xd04d8b48         // movq         $-48(%rbp), %rcx
	QUAD $0x000001e239b48d48 // leaq         $482(%rcx,%rdi), %rsi
	LONG $0xfce78349         // andq         $-4, %r15
	WORD $0xf749; BYTE $0xdf // negq         %r15
	WORD $0xdb31             // xorl         %ebx, %ebx
	QUAD $0xfffff2df056ffdc5 // vmovdqa      $-3361(%rip), %ymm0  /* LCPI1_0(%rip) */

LBB1_113:
	QUAD $0xfffe201e847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-480(%rsi,%rbx)
	QUAD $0xfffe401e847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-448(%rsi,%rbx)
	QUAD $0xfffe601e847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-416(%rsi,%rbx)
	QUAD $0xfffe801e847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-384(%rsi,%rbx)
	QUAD $0xfffea01e847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-352(%rsi,%rbx)
	QUAD $0xfffec01e847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-320(%rsi,%rbx)
	QUAD $0xfffee01e847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-288(%rsi,%rbx)
	QUAD $0xffff001e847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-256(%rsi,%rbx)
	QUAD $0xffff201e847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-224(%rsi,%rbx)
	QUAD $0xffff401e847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-192(%rsi,%rbx)
	QUAD $0xffff601e847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-160(%rsi,%rbx)
	LONG $0x447ffec5; WORD $0x801e             // vmovdqu      %ymm0, $-128(%rsi,%rbx)
	LONG $0x447ffec5; WORD $0xa01e             // vmovdqu      %ymm0, $-96(%rsi,%rbx)
	LONG $0x447ffec5; WORD $0xc01e             // vmovdqu      %ymm0, $-64(%rsi,%rbx)
	LONG $0x447ffec5; WORD $0xe01e             // vmovdqu      %ymm0, $-32(%rsi,%rbx)
	LONG $0x047ffec5; BYTE $0x1e               // vmovdqu      %ymm0, (%rsi,%rbx)
	LONG $0x00c38148; WORD $0x0002; BYTE $0x00 // addq         $512, %rbx
	LONG $0x04c78349                           // addq         $4, %r15
	LONG $0xff6f850f; WORD $0xffff             // jne          LBB1_113, $-145(%rip)

LBB1_114:
	WORD $0x854d; BYTE $0xdb       // testq        %r11, %r11
	LONG $0x0034840f; WORD $0x0000 // je           LBB1_117, $52(%rip)
	LONG $0xd05d0348               // addq         $-48(%rbp), %rbx
	LONG $0x1f748d48; BYTE $0x62   // leaq         $98(%rdi,%rbx), %rsi
	WORD $0xf749; BYTE $0xdb       // negq         %r11
	QUAD $0xfffff231056ffdc5       // vmovdqa      $-3535(%rip), %ymm0  /* LCPI1_0(%rip) */

LBB1_116:
	LONG $0x467ffec5; BYTE $0xa0   // vmovdqu      %ymm0, $-96(%rsi)
	LONG $0x467ffec5; BYTE $0xc0   // vmovdqu      %ymm0, $-64(%rsi)
	LONG $0x467ffec5; BYTE $0xe0   // vmovdqu      %ymm0, $-32(%rsi)
	LONG $0x067ffec5               // vmovdqu      %ymm0, (%rsi)
	LONG $0x80ee8348               // subq         $-128, %rsi
	WORD $0xff49; BYTE $0xc3       // incq         %r11
	LONG $0xffe0850f; WORD $0xffff // jne          LBB1_116, $-32(%rip)

LBB1_117:
	WORD $0x0149; BYTE $0xd0       // addq         %rdx, %r8
	WORD $0x3948; BYTE $0xd0       // cmpq         %rdx, %rax
	LONG $0x0014840f; WORD $0x0000 // je           LBB1_120, $20(%rip)

LBB1_118:
	WORD $0x0144; BYTE $0xca // addl         %r9d, %edx
	WORD $0xdaf7             // negl         %edx

	// .p2align 4, 0x90
LBB1_119:
	LONG $0x3000c641               // movb         $48, (%r8)
	WORD $0xff49; BYTE $0xc0       // incq         %r8
	WORD $0xcaff                   // decl         %edx
	LONG $0xfff1850f; WORD $0xffff // jne          LBB1_119, $-15(%rip)

LBB1_120:
	LONG $0x202c8d4f               // leaq         (%r8,%r12), %r13
	WORD $0x894c; BYTE $0xf0       // movq         %r14, %rax
	LONG $0x20e8c148               // shrq         $32, %rax
	LONG $0x00be850f; WORD $0x0000 // jne          LBB1_123, $190(%rip)
	WORD $0x3145; BYTE $0xdb       // xorl         %r11d, %r11d
	WORD $0x8944; BYTE $0xf2       // movl         %r14d, %edx
	LONG $0x2710fa81; WORD $0x0000 // cmpl         $10000, %edx
	LONG $0x016e820f; WORD $0x0000 // jb           LBB1_122, $366(%rip)

LBB1_126:
	LONG $0x1759be41; WORD $0xd1b7             // movl         $3518437209, %r14d
	LONG $0x713d8d4c; WORD $0x00c6; BYTE $0x00 // leaq         $50801(%rip), %r15  /* _Digits(%rip) */
	BYTE $0x90                                 // .p2align 4, 0x90

LBB1_127:
	WORD $0xd189                               // movl         %edx, %ecx
	LONG $0xceaf0f49                           // imulq        %r14, %rcx
	LONG $0x2de9c148                           // shrq         $45, %rcx
	LONG $0xd8f0f169; WORD $0xffff             // imull        $-10000, %ecx, %esi
	WORD $0xd601                               // addl         %edx, %esi
	LONG $0x1fc66948; WORD $0xeb85; BYTE $0x51 // imulq        $1374389535, %rsi, %rax
	LONG $0x25e8c148                           // shrq         $37, %rax
	WORD $0xd86b; BYTE $0x64                   // imull        $100, %eax, %ebx
	WORD $0xde29                               // subl         %ebx, %esi
	LONG $0x34b70f41; BYTE $0x77               // movzwl       (%r15,%rsi,2), %esi
	LONG $0x75894166; BYTE $0xfe               // movw         %si, $-2(%r13)
	LONG $0x04b70f41; BYTE $0x47               // movzwl       (%r15,%rax,2), %eax
	LONG $0x45894166; BYTE $0xfc               // movw         %ax, $-4(%r13)
	LONG $0xfcc58349                           // addq         $-4, %r13
	LONG $0xe0fffa81; WORD $0x05f5             // cmpl         $99999999, %edx
	WORD $0xca89                               // movl         %ecx, %edx
	LONG $0xffb8870f; WORD $0xffff             // ja           LBB1_127, $-72(%rip)
	WORD $0xf983; BYTE $0x64                   // cmpl         $100, %ecx
	LONG $0x002d820f; WORD $0x0000             // jb           LBB1_130, $45(%rip)

LBB1_129:
	WORD $0xb70f; BYTE $0xc1                   // movzwl       %cx, %eax
	WORD $0xe8c1; BYTE $0x02                   // shrl         $2, %eax
	LONG $0x147bc069; WORD $0x0000             // imull        $5243, %eax, %eax
	WORD $0xe8c1; BYTE $0x11                   // shrl         $17, %eax
	WORD $0xd06b; BYTE $0x64                   // imull        $100, %eax, %edx
	WORD $0xd129                               // subl         %edx, %ecx
	WORD $0xb70f; BYTE $0xc9                   // movzwl       %cx, %ecx
	LONG $0x01158d48; WORD $0x00c6; BYTE $0x00 // leaq         $50689(%rip), %rdx  /* _Digits(%rip) */
	LONG $0x4a0cb70f                           // movzwl       (%rdx,%rcx,2), %ecx
	LONG $0x4d894166; BYTE $0xfe               // movw         %cx, $-2(%r13)
	LONG $0xfec58349                           // addq         $-2, %r13
	WORD $0xc189                               // movl         %eax, %ecx

LBB1_130:
	WORD $0xf983; BYTE $0x0a                   // cmpl         $10, %ecx
	LONG $0x00e9820f; WORD $0x0000             // jb           LBB1_132, $233(%rip)
	WORD $0xc889                               // movl         %ecx, %eax
	LONG $0xe00d8d48; WORD $0x00c5; BYTE $0x00 // leaq         $50656(%rip), %rcx  /* _Digits(%rip) */
	LONG $0x4104b70f                           // movzwl       (%rcx,%rax,2), %eax
	LONG $0x45894166; BYTE $0xfe               // movw         %ax, $-2(%r13)
	LONG $0x0000d8e9; BYTE $0x00               // jmp          LBB1_133, $216(%rip)

LBB1_123:
	QUAD $0x77118461cefdba48; WORD $0xabcc     // movabsq      $-6067343680855748867, %rdx
	WORD $0x894c; BYTE $0xf0                   // movq         %r14, %rax
	WORD $0xf748; BYTE $0xe2                   // mulq         %rdx
	LONG $0x1aeac148                           // shrq         $26, %rdx
	LONG $0x1f00f269; WORD $0xfa0a             // imull        $-100000000, %edx, %esi
	WORD $0x0144; BYTE $0xf6                   // addl         %r14d, %esi
	LONG $0x0189840f; WORD $0x0000             // je           LBB1_125, $393(%rip)
	WORD $0xf089                               // movl         %esi, %eax
	LONG $0x1759bb41; WORD $0xd1b7             // movl         $3518437209, %r11d
	LONG $0xc3af0f49                           // imulq        %r11, %rax
	LONG $0x2de8c148                           // shrq         $45, %rax
	LONG $0x2710c869; WORD $0x0000             // imull        $10000, %eax, %ecx
	WORD $0xce29                               // subl         %ecx, %esi
	WORD $0x8948; BYTE $0xc1                   // movq         %rax, %rcx
	LONG $0xcbaf0f49                           // imulq        %r11, %rcx
	LONG $0x2de9c148                           // shrq         $45, %rcx
	LONG $0x2710c969; WORD $0x0000             // imull        $10000, %ecx, %ecx
	WORD $0xc829                               // subl         %ecx, %eax
	WORD $0xb70f; BYTE $0xce                   // movzwl       %si, %ecx
	WORD $0xe9c1; BYTE $0x02                   // shrl         $2, %ecx
	LONG $0x7bd96944; WORD $0x0014; BYTE $0x00 // imull        $5243, %ecx, %r11d
	LONG $0x11ebc141                           // shrl         $17, %r11d
	LONG $0x64cb6b41                           // imull        $100, %r11d, %ecx
	WORD $0xce29                               // subl         %ecx, %esi
	LONG $0xf6b70f44                           // movzwl       %si, %r14d
	WORD $0xb70f; BYTE $0xf0                   // movzwl       %ax, %esi
	WORD $0xeec1; BYTE $0x02                   // shrl         $2, %esi
	LONG $0x147bf669; WORD $0x0000             // imull        $5243, %esi, %esi
	WORD $0xeec1; BYTE $0x11                   // shrl         $17, %esi
	WORD $0xce6b; BYTE $0x64                   // imull        $100, %esi, %ecx
	WORD $0xc829                               // subl         %ecx, %eax
	LONG $0xf8b70f44                           // movzwl       %ax, %r15d
	LONG $0x4a0d8d48; WORD $0x00c5; BYTE $0x00 // leaq         $50506(%rip), %rcx  /* _Digits(%rip) */
	LONG $0x04b70f42; BYTE $0x71               // movzwl       (%rcx,%r14,2), %eax
	LONG $0x45894166; BYTE $0xfe               // movw         %ax, $-2(%r13)
	LONG $0x04b70f42; BYTE $0x59               // movzwl       (%rcx,%r11,2), %eax
	LONG $0x45894166; BYTE $0xfc               // movw         %ax, $-4(%r13)
	LONG $0x04b70f42; BYTE $0x79               // movzwl       (%rcx,%r15,2), %eax
	LONG $0x45894166; BYTE $0xfa               // movw         %ax, $-6(%r13)
	LONG $0x7104b70f                           // movzwl       (%rcx,%rsi,2), %eax
	LONG $0x45894166; BYTE $0xf8               // movw         %ax, $-8(%r13)
	WORD $0x3145; BYTE $0xdb                   // xorl         %r11d, %r11d
	LONG $0xf8c58349                           // addq         $-8, %r13
	LONG $0x2710fa81; WORD $0x0000             // cmpl         $10000, %edx
	LONG $0xfe92830f; WORD $0xffff             // jae          LBB1_126, $-366(%rip)

LBB1_122:
	WORD $0xd189                   // movl         %edx, %ecx
	WORD $0xf983; BYTE $0x64       // cmpl         $100, %ecx
	LONG $0xff13820f; WORD $0xffff // jb           LBB1_130, $-237(%rip)
	LONG $0xfffee1e9; BYTE $0xff   // jmp          LBB1_129, $-287(%rip)

LBB1_132:
	WORD $0xc180; BYTE $0x30 // addb         $48, %cl
	WORD $0x8841; BYTE $0x08 // movb         %cl, (%r8)

LBB1_133:
	WORD $0x294d; BYTE $0xdc     // subq         %r11, %r12
	LONG $0x24448d49; BYTE $0x01 // leaq         $1(%r12), %rax
	LONG $0x245c8d49; BYTE $0x61 // leaq         $97(%r12), %rbx
	LONG $0x24548d49; BYTE $0x02 // leaq         $2(%r12), %rdx
	QUAD $0x9090909090909090     // .p2align 4, 0x90

LBB1_134:
	WORD $0xff48; BYTE $0xcb       // decq         %rbx
	WORD $0xff48; BYTE $0xc8       // decq         %rax
	WORD $0xff48; BYTE $0xca       // decq         %rdx
	LONG $0x207c8043; WORD $0x30ff // cmpb         $48, $-1(%r8,%r12)
	LONG $0x24648d4d; BYTE $0xff   // leaq         $-1(%r12), %r12
	LONG $0xffe6840f; WORD $0xffff // je           LBB1_134, $-26(%rip)
	LONG $0x001c8d4d               // leaq         (%r8,%rax), %r11
	WORD $0x8545; BYTE $0xc9       // testl        %r9d, %r9d
	LONG $0x008b8e0f; WORD $0x0000 // jle          LBB1_140, $139(%rip)
	WORD $0x8944; BYTE $0xd9       // movl         %r11d, %ecx
	WORD $0x2944; BYTE $0xc1       // subl         %r8d, %ecx
	WORD $0x8945; BYTE $0xcf       // movl         %r9d, %r15d
	WORD $0x2941; BYTE $0xcf       // subl         %ecx, %r15d
	LONG $0x00288d0f; WORD $0x0000 // jge          LBB1_141, $40(%rip)
	WORD $0x2944; BYTE $0xc9       // subl         %r9d, %ecx
	LONG $0x00e88e0f; WORD $0x0000 // jle          LBB1_152, $232(%rip)
	WORD $0x8941; BYTE $0xcb       // movl         %ecx, %r11d
	LONG $0xff738d49               // leaq         $-1(%r11), %rsi
	WORD $0x8945; BYTE $0xda       // movl         %r11d, %r10d
	LONG $0x03e28341               // andl         $3, %r10d
	LONG $0x03fe8348               // cmpq         $3, %rsi
	LONG $0x007b830f; WORD $0x0000 // jae          LBB1_146, $123(%rip)
	WORD $0xf631                   // xorl         %esi, %esi
	LONG $0x00009be9; BYTE $0x00   // jmp          LBB1_149, $155(%rip)

LBB1_141:
	LONG $0x004b8e0f; WORD $0x0000             // jle          LBB1_140, $75(%rip)
	WORD $0x0145; BYTE $0xc1                   // addl         %r8d, %r9d
	WORD $0x8945; BYTE $0xde                   // movl         %r11d, %r14d
	WORD $0xf741; BYTE $0xd6                   // notl         %r14d
	WORD $0x0145; BYTE $0xce                   // addl         %r9d, %r14d
	WORD $0xc931                               // xorl         %ecx, %ecx
	LONG $0x7efe8341                           // cmpl         $126, %r14d
	LONG $0x01b4860f; WORD $0x0000             // jbe          LBB1_159, $436(%rip)
	WORD $0xff49; BYTE $0xc6                   // incq         %r14
	WORD $0x214d; BYTE $0xf2                   // andq         %r14, %r10
	LONG $0x101c8d4f                           // leaq         (%r8,%r10), %r11
	LONG $0x804a8d49                           // leaq         $-128(%r10), %rcx
	WORD $0x8948; BYTE $0xce                   // movq         %rcx, %rsi
	LONG $0x07eec148                           // shrq         $7, %rsi
	WORD $0xff48; BYTE $0xc6                   // incq         %rsi
	WORD $0x8941; BYTE $0xf1                   // movl         %esi, %r9d
	LONG $0x03e18341                           // andl         $3, %r9d
	LONG $0x80f98148; WORD $0x0001; BYTE $0x00 // cmpq         $384, %rcx
	LONG $0x008f830f; WORD $0x0000             // jae          LBB1_153, $143(%rip)
	WORD $0xc931                               // xorl         %ecx, %ecx
	LONG $0x000131e9; BYTE $0x00               // jmp          LBB1_155, $305(%rip)

LBB1_140:
	WORD $0x894d; BYTE $0xd8     // movq         %r11, %r8
	LONG $0x000198e9; BYTE $0x00 // jmp          LBB1_161, $408(%rip)

LBB1_125:
	LONG $0x0008bb41; WORD $0x0000 // movl         $8, %r11d
	LONG $0xf8c58349               // addq         $-8, %r13
	LONG $0x2710fa81; WORD $0x0000 // cmpl         $10000, %edx
	LONG $0xff00820f; WORD $0xffff // jb           LBB1_122, $-256(%rip)
	LONG $0xfffd8de9; BYTE $0xff   // jmp          LBB1_126, $-627(%rip)

LBB1_146:
	LONG $0xfce38341         // andl         $-4, %r11d
	WORD $0xf749; BYTE $0xdb // negq         %r11
	WORD $0xf631             // xorl         %esi, %esi
	WORD $0x9090             // .p2align 4, 0x90

LBB1_147:
	LONG $0x301c8d49               // leaq         (%r8,%rsi), %rbx
	LONG $0xfc184c8b               // movl         $-4(%rax,%rbx), %ecx
	LONG $0xfd184c89               // movl         %ecx, $-3(%rax,%rbx)
	LONG $0xfcc68348               // addq         $-4, %rsi
	WORD $0x3949; BYTE $0xf3       // cmpq         %rsi, %r11
	LONG $0xffe7850f; WORD $0xffff // jne          LBB1_147, $-25(%rip)
	WORD $0xf748; BYTE $0xde       // negq         %rsi

LBB1_149:
	WORD $0x854d; BYTE $0xd2       // testq        %r10, %r10
	LONG $0x0025840f; WORD $0x0000 // je           LBB1_152, $37(%rip)
	WORD $0xf749; BYTE $0xda       // negq         %r10
	WORD $0x894c; BYTE $0xc0       // movq         %r8, %rax
	WORD $0x2948; BYTE $0xf0       // subq         %rsi, %rax
	WORD $0xc931                   // xorl         %ecx, %ecx

	// .p2align 4, 0x90
LBB1_151:
	LONG $0x08348d48               // leaq         (%rax,%rcx), %rsi
	LONG $0x1cb60f41; BYTE $0x34   // movzbl       (%r12,%rsi), %ebx
	LONG $0x345c8841; BYTE $0x01   // movb         %bl, $1(%r12,%rsi)
	WORD $0xff48; BYTE $0xc9       // decq         %rcx
	WORD $0x3949; BYTE $0xca       // cmpq         %rcx, %r10
	LONG $0xffe6850f; WORD $0xffff // jne          LBB1_151, $-26(%rip)

LBB1_152:
	WORD $0x6349; BYTE $0xc1     // movslq       %r9d, %rax
	LONG $0x0004c641; BYTE $0x2e // movb         $46, (%r8,%rax)
	WORD $0x0149; BYTE $0xd0     // addq         %rdx, %r8
	LONG $0x000118e9; BYTE $0x00 // jmp          LBB1_161, $280(%rip)

LBB1_153:
	LONG $0xfce68348         // andq         $-4, %rsi
	WORD $0xf748; BYTE $0xde // negq         %rsi
	WORD $0xc931             // xorl         %ecx, %ecx
	QUAD $0xffffeee5056ffdc5 // vmovdqa      $-4379(%rip), %ymm0  /* LCPI1_0(%rip) */

LBB1_154:
	LONG $0x08148d49                           // leaq         (%r8,%rcx), %rdx
	LONG $0x047ffec5; BYTE $0x10               // vmovdqu      %ymm0, (%rax,%rdx)
	LONG $0x447ffec5; WORD $0x2010             // vmovdqu      %ymm0, $32(%rax,%rdx)
	LONG $0x447ffec5; WORD $0x4010             // vmovdqu      %ymm0, $64(%rax,%rdx)
	LONG $0x447ffec5; WORD $0x6010             // vmovdqu      %ymm0, $96(%rax,%rdx)
	QUAD $0x00008010847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $128(%rax,%rdx)
	QUAD $0x0000a010847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $160(%rax,%rdx)
	QUAD $0x0000c010847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $192(%rax,%rdx)
	QUAD $0x0000e010847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $224(%rax,%rdx)
	QUAD $0x00010010847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $256(%rax,%rdx)
	QUAD $0x00012010847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $288(%rax,%rdx)
	QUAD $0x00014010847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $320(%rax,%rdx)
	QUAD $0x00016010847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $352(%rax,%rdx)
	QUAD $0x00018010847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $384(%rax,%rdx)
	QUAD $0x0001a010847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $416(%rax,%rdx)
	QUAD $0x0001c010847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $448(%rax,%rdx)
	QUAD $0x0001e010847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $480(%rax,%rdx)
	LONG $0x00c18148; WORD $0x0002; BYTE $0x00 // addq         $512, %rcx
	LONG $0x04c68348                           // addq         $4, %rsi
	LONG $0xff68850f; WORD $0xffff             // jne          LBB1_154, $-152(%rip)

LBB1_155:
	WORD $0x0149; BYTE $0xc3       // addq         %rax, %r11
	WORD $0x854d; BYTE $0xc9       // testq        %r9, %r9
	LONG $0x0035840f; WORD $0x0000 // je           LBB1_158, $53(%rip)
	WORD $0x0149; BYTE $0xc8       // addq         %rcx, %r8
	WORD $0x0149; BYTE $0xd8       // addq         %rbx, %r8
	WORD $0xf749; BYTE $0xd9       // negq         %r9
	QUAD $0xffffee30056ffdc5       // vmovdqa      $-4560(%rip), %ymm0  /* LCPI1_0(%rip) */

LBB1_157:
	LONG $0x7f7ec1c4; WORD $0xa040 // vmovdqu      %ymm0, $-96(%r8)
	LONG $0x7f7ec1c4; WORD $0xc040 // vmovdqu      %ymm0, $-64(%r8)
	LONG $0x7f7ec1c4; WORD $0xe040 // vmovdqu      %ymm0, $-32(%r8)
	LONG $0x7f7ec1c4; BYTE $0x00   // vmovdqu      %ymm0, (%r8)
	LONG $0x80e88349               // subq         $-128, %r8
	WORD $0xff49; BYTE $0xc1       // incq         %r9
	LONG $0xffdc850f; WORD $0xffff // jne          LBB1_157, $-36(%rip)

LBB1_158:
	WORD $0x8944; BYTE $0xd1       // movl         %r10d, %ecx
	WORD $0x894d; BYTE $0xd8       // movq         %r11, %r8
	WORD $0x394d; BYTE $0xd6       // cmpq         %r10, %r14
	LONG $0x001f840f; WORD $0x0000 // je           LBB1_161, $31(%rip)

LBB1_159:
	WORD $0x894d; BYTE $0xd8               // movq         %r11, %r8
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

LBB1_160:
	LONG $0x3000c641               // movb         $48, (%r8)
	WORD $0xff49; BYTE $0xc0       // incq         %r8
	WORD $0xc1ff                   // incl         %ecx
	WORD $0x3944; BYTE $0xf9       // cmpl         %r15d, %ecx
	LONG $0xffee8c0f; WORD $0xffff // jl           LBB1_160, $-18(%rip)

LBB1_161:
	WORD $0x2941; BYTE $0xf8 // subl         %edi, %r8d

LBB1_162:
	WORD $0x8944; BYTE $0xc0 // movl         %r8d, %eax
	LONG $0x08c48348         // addq         $8, %rsp
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

LBB1_163:
	LONG $0x00fe8149; WORD $0x9aca; BYTE $0x3b // cmpq         $1000000000, %r14
	LONG $0x00000ab8; BYTE $0x00               // movl         $10, %eax
	LONG $0xfff095e9; BYTE $0xff               // jmp          LBB1_21, $-3947(%rip)

LBB1_164:
	WORD $0x3145; BYTE $0xc0     // xorl         %r8d, %r8d
	LONG $0xffffd2e9; BYTE $0xff // jmp          LBB1_162, $-46(%rip)

LBB1_165:
	LONG $0xd0758948               // movq         %rsi, $-48(%rbp)
	LONG $0xfbceba41; WORD $0xffff // movl         $-1074, %r10d
	WORD $0x8949; BYTE $0xd3       // movq         %rdx, %r11
	LONG $0xffee54e9; BYTE $0xff   // jmp          LBB1_8, $-4524(%rip)

LBB1_166:
	LONG $0x00fb8149; WORD $0x9aca; BYTE $0x3b // cmpq         $1000000000, %r11
	WORD $0x894d; BYTE $0xc2                   // movq         %r8, %r10
	LONG $0x00da8349                           // sbbq         $0, %r10
	LONG $0x0ac28349                           // addq         $10, %r10
	WORD $0x894c; BYTE $0xd8                   // movq         %r11, %rax
	LONG $0x20e8c148                           // shrq         $32, %rax
	LONG $0xf487850f; WORD $0xffff             // jne          LBB1_49, $-2937(%rip)
	LONG $0xfff919e9; BYTE $0xff               // jmp          LBB1_81, $-1767(%rip)
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

_i64toa:
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x0005880f; WORD $0x0000 // js           LBB2_1, $5(%rip)
	LONG $0x000062e9; BYTE $0x00   // jmp          _u64toa, $98(%rip)

LBB2_1:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x07c6; BYTE $0x2d                   // movb         $45, (%rdi)
	WORD $0xff48; BYTE $0xc7                   // incq         %rdi
	WORD $0xf748; BYTE $0xde                   // negq         %rsi
	LONG $0x000050e8; BYTE $0x00               // callq        _u64toa, $80(%rip)
	WORD $0xc0ff                               // incl         %eax
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq
	QUAD $0x0000000000000000; LONG $0x00000000 // .p2align 4, 0x00

LCPI3_0:
	QUAD $0x00000000d1b71759 // .quad 3518437209
	QUAD $0x00000000d1b71759 // .quad 3518437209

LCPI3_3:
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10

LCPI3_4:
	QUAD $0x3030303030303030; QUAD $0x3030303030303030 // .space 16, '0000000000000000'

	// .p2align 3, 0x00
LCPI3_1:
	QUAD $0x80003334147b20c5 // .quad -9223315738079846203

LCPI3_2:
	QUAD $0x8000200008000080 // .quad -9223336852348469120

	// .p2align 4, 0x90
_u64toa:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	LONG $0x0ffe8148; WORD $0x0027; BYTE $0x00 // cmpq         $9999, %rsi
	LONG $0x00a2870f; WORD $0x0000             // ja           LBB3_8, $162(%rip)
	WORD $0xb70f; BYTE $0xc6                   // movzwl       %si, %eax
	WORD $0xe8c1; BYTE $0x02                   // shrl         $2, %eax
	LONG $0x147bc069; WORD $0x0000             // imull        $5243, %eax, %eax
	WORD $0xe8c1; BYTE $0x11                   // shrl         $17, %eax
	LONG $0x00148d48                           // leaq         (%rax,%rax), %rdx
	WORD $0xc06b; BYTE $0x64                   // imull        $100, %eax, %eax
	WORD $0xf189                               // movl         %esi, %ecx
	WORD $0xc129                               // subl         %eax, %ecx
	WORD $0xb70f; BYTE $0xc1                   // movzwl       %cx, %eax
	WORD $0x0148; BYTE $0xc0                   // addq         %rax, %rax
	LONG $0x03e8fe81; WORD $0x0000             // cmpl         $1000, %esi
	LONG $0x0016820f; WORD $0x0000             // jb           LBB3_3, $22(%rip)
	LONG $0x6c0d8d48; WORD $0x00c1; BYTE $0x00 // leaq         $49516(%rip), %rcx  /* _Digits(%rip) */
	WORD $0x0c8a; BYTE $0x0a                   // movb         (%rdx,%rcx), %cl
	WORD $0x0f88                               // movb         %cl, (%rdi)
	LONG $0x000001b9; BYTE $0x00               // movl         $1, %ecx
	LONG $0x00000be9; BYTE $0x00               // jmp          LBB3_4, $11(%rip)

LBB3_3:
	WORD $0xc931                   // xorl         %ecx, %ecx
	WORD $0xfe83; BYTE $0x64       // cmpl         $100, %esi
	LONG $0x0045820f; WORD $0x0000 // jb           LBB3_5, $69(%rip)

LBB3_4:
	WORD $0xb70f; BYTE $0xd2                   // movzwl       %dx, %edx
	LONG $0x01ca8348                           // orq          $1, %rdx
	LONG $0x44358d48; WORD $0x00c1; BYTE $0x00 // leaq         $49476(%rip), %rsi  /* _Digits(%rip) */
	WORD $0x148a; BYTE $0x32                   // movb         (%rdx,%rsi), %dl
	WORD $0xce89                               // movl         %ecx, %esi
	WORD $0xc1ff                               // incl         %ecx
	WORD $0x1488; BYTE $0x37                   // movb         %dl, (%rdi,%rsi)

LBB3_6:
	LONG $0x33158d48; WORD $0x00c1; BYTE $0x00 // leaq         $49459(%rip), %rdx  /* _Digits(%rip) */
	WORD $0x148a; BYTE $0x10                   // movb         (%rax,%rdx), %dl
	WORD $0xce89                               // movl         %ecx, %esi
	WORD $0xc1ff                               // incl         %ecx
	WORD $0x1488; BYTE $0x37                   // movb         %dl, (%rdi,%rsi)

LBB3_7:
	WORD $0xb70f; BYTE $0xc0                   // movzwl       %ax, %eax
	LONG $0x01c88348                           // orq          $1, %rax
	LONG $0x1b158d48; WORD $0x00c1; BYTE $0x00 // leaq         $49435(%rip), %rdx  /* _Digits(%rip) */
	WORD $0x048a; BYTE $0x10                   // movb         (%rax,%rdx), %al
	WORD $0xca89                               // movl         %ecx, %edx
	WORD $0xc1ff                               // incl         %ecx
	WORD $0x0488; BYTE $0x17                   // movb         %al, (%rdi,%rdx)
	WORD $0xc889                               // movl         %ecx, %eax
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq

LBB3_5:
	WORD $0xc931                   // xorl         %ecx, %ecx
	WORD $0xfe83; BYTE $0x0a       // cmpl         $10, %esi
	LONG $0xffc8830f; WORD $0xffff // jae          LBB3_6, $-56(%rip)
	LONG $0xffffd4e9; BYTE $0xff   // jmp          LBB3_7, $-44(%rip)

LBB3_8:
	LONG $0xfffe8148; WORD $0xf5e0; BYTE $0x05 // cmpq         $99999999, %rsi
	LONG $0x011e870f; WORD $0x0000             // ja           LBB3_16, $286(%rip)
	WORD $0xf089                               // movl         %esi, %eax
	LONG $0xb71759ba; BYTE $0xd1               // movl         $3518437209, %edx
	LONG $0xd0af0f48                           // imulq        %rax, %rdx
	LONG $0x2deac148                           // shrq         $45, %rdx
	LONG $0x10c26944; WORD $0x0027; BYTE $0x00 // imull        $10000, %edx, %r8d
	WORD $0xf189                               // movl         %esi, %ecx
	WORD $0x2944; BYTE $0xc1                   // subl         %r8d, %ecx
	LONG $0x83d0694c; WORD $0x1bde; BYTE $0x43 // imulq        $1125899907, %rax, %r10
	LONG $0x31eac149                           // shrq         $49, %r10
	LONG $0xfee28341                           // andl         $-2, %r10d
	WORD $0xb70f; BYTE $0xc2                   // movzwl       %dx, %eax
	WORD $0xe8c1; BYTE $0x02                   // shrl         $2, %eax
	LONG $0x147bc069; WORD $0x0000             // imull        $5243, %eax, %eax
	WORD $0xe8c1; BYTE $0x11                   // shrl         $17, %eax
	WORD $0xc06b; BYTE $0x64                   // imull        $100, %eax, %eax
	WORD $0xc229                               // subl         %eax, %edx
	LONG $0xcab70f44                           // movzwl       %dx, %r9d
	WORD $0x014d; BYTE $0xc9                   // addq         %r9, %r9
	WORD $0xb70f; BYTE $0xc1                   // movzwl       %cx, %eax
	WORD $0xe8c1; BYTE $0x02                   // shrl         $2, %eax
	LONG $0x147bc069; WORD $0x0000             // imull        $5243, %eax, %eax
	WORD $0xe8c1; BYTE $0x11                   // shrl         $17, %eax
	LONG $0x00048d4c                           // leaq         (%rax,%rax), %r8
	WORD $0xc06b; BYTE $0x64                   // imull        $100, %eax, %eax
	WORD $0xc129                               // subl         %eax, %ecx
	LONG $0xd9b70f44                           // movzwl       %cx, %r11d
	WORD $0x014d; BYTE $0xdb                   // addq         %r11, %r11
	LONG $0x9680fe81; WORD $0x0098             // cmpl         $10000000, %esi
	LONG $0x0017820f; WORD $0x0000             // jb           LBB3_11, $23(%rip)
	LONG $0x79058d48; WORD $0x00c0; BYTE $0x00 // leaq         $49273(%rip), %rax  /* _Digits(%rip) */
	LONG $0x02048a41                           // movb         (%r10,%rax), %al
	WORD $0x0788                               // movb         %al, (%rdi)
	LONG $0x000001b9; BYTE $0x00               // movl         $1, %ecx
	LONG $0x00000ee9; BYTE $0x00               // jmp          LBB3_12, $14(%rip)

LBB3_11:
	WORD $0xc931                   // xorl         %ecx, %ecx
	LONG $0x4240fe81; WORD $0x000f // cmpl         $1000000, %esi
	LONG $0x0076820f; WORD $0x0000 // jb           LBB3_13, $118(%rip)

LBB3_12:
	WORD $0x8944; BYTE $0xd0                   // movl         %r10d, %eax
	LONG $0x01c88348                           // orq          $1, %rax
	LONG $0x4d358d48; WORD $0x00c0; BYTE $0x00 // leaq         $49229(%rip), %rsi  /* _Digits(%rip) */
	WORD $0x048a; BYTE $0x30                   // movb         (%rax,%rsi), %al
	WORD $0xce89                               // movl         %ecx, %esi
	WORD $0xc1ff                               // incl         %ecx
	WORD $0x0488; BYTE $0x37                   // movb         %al, (%rdi,%rsi)

LBB3_14:
	LONG $0x3c058d48; WORD $0x00c0; BYTE $0x00 // leaq         $49212(%rip), %rax  /* _Digits(%rip) */
	LONG $0x01048a41                           // movb         (%r9,%rax), %al
	WORD $0xce89                               // movl         %ecx, %esi
	WORD $0xc1ff                               // incl         %ecx
	WORD $0x0488; BYTE $0x37                   // movb         %al, (%rdi,%rsi)

LBB3_15:
	LONG $0xc1b70f41                           // movzwl       %r9w, %eax
	LONG $0x01c88348                           // orq          $1, %rax
	LONG $0x22358d48; WORD $0x00c0; BYTE $0x00 // leaq         $49186(%rip), %rsi  /* _Digits(%rip) */
	WORD $0x048a; BYTE $0x30                   // movb         (%rax,%rsi), %al
	WORD $0xca89                               // movl         %ecx, %edx
	WORD $0x0488; BYTE $0x17                   // movb         %al, (%rdi,%rdx)
	LONG $0x30048a41                           // movb         (%r8,%rsi), %al
	LONG $0x01174488                           // movb         %al, $1(%rdi,%rdx)
	LONG $0xc0b70f41                           // movzwl       %r8w, %eax
	LONG $0x01c88348                           // orq          $1, %rax
	WORD $0x048a; BYTE $0x30                   // movb         (%rax,%rsi), %al
	LONG $0x02174488                           // movb         %al, $2(%rdi,%rdx)
	LONG $0x33048a41                           // movb         (%r11,%rsi), %al
	LONG $0x03174488                           // movb         %al, $3(%rdi,%rdx)
	LONG $0xc3b70f41                           // movzwl       %r11w, %eax
	LONG $0x01c88348                           // orq          $1, %rax
	WORD $0x048a; BYTE $0x30                   // movb         (%rax,%rsi), %al
	WORD $0xc183; BYTE $0x05                   // addl         $5, %ecx
	LONG $0x04174488                           // movb         %al, $4(%rdi,%rdx)
	WORD $0xc889                               // movl         %ecx, %eax
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq

LBB3_13:
	WORD $0xc931                   // xorl         %ecx, %ecx
	LONG $0x86a0fe81; WORD $0x0001 // cmpl         $100000, %esi
	LONG $0xff94830f; WORD $0xffff // jae          LBB3_14, $-108(%rip)
	LONG $0xffffa1e9; BYTE $0xff   // jmp          LBB3_15, $-95(%rip)

LBB3_16:
	QUAD $0x86f26fc0ffffb848; WORD $0x0023     // movabsq      $9999999999999999, %rax
	WORD $0x3948; BYTE $0xc6                   // cmpq         %rax, %rsi
	LONG $0x0105870f; WORD $0x0000             // ja           LBB3_18, $261(%rip)
	QUAD $0x77118461cefdb948; WORD $0xabcc     // movabsq      $-6067343680855748867, %rcx
	WORD $0x8948; BYTE $0xf0                   // movq         %rsi, %rax
	WORD $0xf748; BYTE $0xe1                   // mulq         %rcx
	LONG $0x1aeac148                           // shrq         $26, %rdx
	LONG $0xe100c269; WORD $0x05f5             // imull        $100000000, %edx, %eax
	WORD $0xc629                               // subl         %eax, %esi
	LONG $0xc26ef9c5                           // vmovd        %edx, %xmm0
	QUAD $0xfffffda70d6ff9c5                   // vmovdqa      $-601(%rip), %xmm1  /* LCPI3_0(%rip) */
	LONG $0xd1f4f9c5                           // vpmuludq     %xmm1, %xmm0, %xmm2
	LONG $0xd273e9c5; BYTE $0x2d               // vpsrlq       $45, %xmm2, %xmm2
	LONG $0x002710b8; BYTE $0x00               // movl         $10000, %eax
	LONG $0x6ef9e1c4; BYTE $0xd8               // vmovq        %rax, %xmm3
	LONG $0xe3f4e9c5                           // vpmuludq     %xmm3, %xmm2, %xmm4
	LONG $0xc4faf9c5                           // vpsubd       %xmm4, %xmm0, %xmm0
	LONG $0xc061e9c5                           // vpunpcklwd   %xmm0, %xmm2, %xmm0
	LONG $0xf073f9c5; BYTE $0x02               // vpsllq       $2, %xmm0, %xmm0
	LONG $0xc070fbc5; BYTE $0x50               // vpshuflw     $80, %xmm0, %xmm0
	LONG $0xc070f9c5; BYTE $0x50               // vpshufd      $80, %xmm0, %xmm0
	QUAD $0xfffffda11512fbc5                   // vmovddup     $-607(%rip), %xmm2  /* LCPI3_1(%rip) */
	LONG $0xc2e4f9c5                           // vpmulhuw     %xmm2, %xmm0, %xmm0
	QUAD $0xfffffd9d2512fbc5                   // vmovddup     $-611(%rip), %xmm4  /* LCPI3_2(%rip) */
	LONG $0xc4e4f9c5                           // vpmulhuw     %xmm4, %xmm0, %xmm0
	QUAD $0xfffffd692d6ff9c5                   // vmovdqa      $-663(%rip), %xmm5  /* LCPI3_3(%rip) */
	LONG $0xf5d5f9c5                           // vpmullw      %xmm5, %xmm0, %xmm6
	LONG $0xf673c9c5; BYTE $0x10               // vpsllq       $16, %xmm6, %xmm6
	LONG $0xc6f9f9c5                           // vpsubw       %xmm6, %xmm0, %xmm0
	LONG $0xf66ef9c5                           // vmovd        %esi, %xmm6
	LONG $0xc9f4c9c5                           // vpmuludq     %xmm1, %xmm6, %xmm1
	LONG $0xd173f1c5; BYTE $0x2d               // vpsrlq       $45, %xmm1, %xmm1
	LONG $0xdbf4f1c5                           // vpmuludq     %xmm3, %xmm1, %xmm3
	LONG $0xdbfac9c5                           // vpsubd       %xmm3, %xmm6, %xmm3
	LONG $0xcb61f1c5                           // vpunpcklwd   %xmm3, %xmm1, %xmm1
	LONG $0xf173f1c5; BYTE $0x02               // vpsllq       $2, %xmm1, %xmm1
	LONG $0xc970fbc5; BYTE $0x50               // vpshuflw     $80, %xmm1, %xmm1
	LONG $0xc970f9c5; BYTE $0x50               // vpshufd      $80, %xmm1, %xmm1
	LONG $0xcae4f1c5                           // vpmulhuw     %xmm2, %xmm1, %xmm1
	LONG $0xcce4f1c5                           // vpmulhuw     %xmm4, %xmm1, %xmm1
	LONG $0xd5d5f1c5                           // vpmullw      %xmm5, %xmm1, %xmm2
	LONG $0xf273e9c5; BYTE $0x10               // vpsllq       $16, %xmm2, %xmm2
	LONG $0xcaf9f1c5                           // vpsubw       %xmm2, %xmm1, %xmm1
	LONG $0xc167f9c5                           // vpackuswb    %xmm1, %xmm0, %xmm0
	QUAD $0xfffffd230dfcf9c5                   // vpaddb       $-733(%rip), %xmm0, %xmm1  /* LCPI3_4(%rip) */
	LONG $0xd2efe9c5                           // vpxor        %xmm2, %xmm2, %xmm2
	LONG $0xc274f9c5                           // vpcmpeqb     %xmm2, %xmm0, %xmm0
	LONG $0xc0d7f9c5                           // vpmovmskb    %xmm0, %eax
	LONG $0x0080000d; BYTE $0x00               // orl          $32768, %eax
	LONG $0xff7fff35; BYTE $0xff               // xorl         $-32769, %eax
	WORD $0xbc0f; BYTE $0xc0                   // bsfl         %eax, %eax
	LONG $0x000010b9; BYTE $0x00               // movl         $16, %ecx
	WORD $0xc129                               // subl         %eax, %ecx
	LONG $0x04e0c148                           // shlq         $4, %rax
	LONG $0x28158d48; WORD $0x00e6; BYTE $0x00 // leaq         $58920(%rip), %rdx  /* _VecShiftShuffles(%rip) */
	LONG $0x0071e2c4; WORD $0x1004             // vpshufb      (%rax,%rdx), %xmm1, %xmm0
	LONG $0x077ffac5                           // vmovdqu      %xmm0, (%rdi)
	WORD $0xc889                               // movl         %ecx, %eax
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq

LBB3_18:
	QUAD $0x652fb1137857b948; WORD $0x39a5 // movabsq      $4153837486827862103, %rcx
	WORD $0x8948; BYTE $0xf0               // movq         %rsi, %rax
	WORD $0xf748; BYTE $0xe1               // mulq         %rcx
	LONG $0x33eac148                       // shrq         $51, %rdx
	QUAD $0x86f26fc10000b848; WORD $0x0023 // movabsq      $10000000000000000, %rax
	LONG $0xc2af0f48                       // imulq        %rdx, %rax
	WORD $0x2948; BYTE $0xc6               // subq         %rax, %rsi
	WORD $0xfa83; BYTE $0x09               // cmpl         $9, %edx
	LONG $0x000f870f; WORD $0x0000         // ja           LBB3_20, $15(%rip)
	WORD $0xc280; BYTE $0x30               // addb         $48, %dl
	WORD $0x1788                           // movb         %dl, (%rdi)
	LONG $0x000001b9; BYTE $0x00           // movl         $1, %ecx
	LONG $0x0000bae9; BYTE $0x00           // jmp          LBB3_25, $186(%rip)

LBB3_20:
	WORD $0xfa83; BYTE $0x63                   // cmpl         $99, %edx
	LONG $0x001f870f; WORD $0x0000             // ja           LBB3_22, $31(%rip)
	WORD $0xd089                               // movl         %edx, %eax
	LONG $0x6b0d8d48; WORD $0x00be; BYTE $0x00 // leaq         $48747(%rip), %rcx  /* _Digits(%rip) */
	WORD $0x148a; BYTE $0x41                   // movb         (%rcx,%rax,2), %dl
	LONG $0x0141448a                           // movb         $1(%rcx,%rax,2), %al
	WORD $0x1788                               // movb         %dl, (%rdi)
	WORD $0x4788; BYTE $0x01                   // movb         %al, $1(%rdi)
	LONG $0x000002b9; BYTE $0x00               // movl         $2, %ecx
	LONG $0x000092e9; BYTE $0x00               // jmp          LBB3_25, $146(%rip)

LBB3_22:
	WORD $0xd089                               // movl         %edx, %eax
	WORD $0xe8c1; BYTE $0x02                   // shrl         $2, %eax
	LONG $0x147bc069; WORD $0x0000             // imull        $5243, %eax, %eax
	WORD $0xe8c1; BYTE $0x11                   // shrl         $17, %eax
	LONG $0x03e7fa81; WORD $0x0000             // cmpl         $999, %edx
	LONG $0x003c870f; WORD $0x0000             // ja           LBB3_24, $60(%rip)
	WORD $0xc083; BYTE $0x30                   // addl         $48, %eax
	WORD $0x0788                               // movb         %al, (%rdi)
	WORD $0xb70f; BYTE $0xc2                   // movzwl       %dx, %eax
	WORD $0xc189                               // movl         %eax, %ecx
	WORD $0xe9c1; BYTE $0x02                   // shrl         $2, %ecx
	LONG $0x147bc969; WORD $0x0000             // imull        $5243, %ecx, %ecx
	WORD $0xe9c1; BYTE $0x11                   // shrl         $17, %ecx
	WORD $0xc96b; BYTE $0x64                   // imull        $100, %ecx, %ecx
	WORD $0xc829                               // subl         %ecx, %eax
	WORD $0xb70f; BYTE $0xc0                   // movzwl       %ax, %eax
	LONG $0x160d8d48; WORD $0x00be; BYTE $0x00 // leaq         $48662(%rip), %rcx  /* _Digits(%rip) */
	WORD $0x148a; BYTE $0x41                   // movb         (%rcx,%rax,2), %dl
	LONG $0x0141448a                           // movb         $1(%rcx,%rax,2), %al
	WORD $0x5788; BYTE $0x01                   // movb         %dl, $1(%rdi)
	WORD $0x4788; BYTE $0x02                   // movb         %al, $2(%rdi)
	LONG $0x000003b9; BYTE $0x00               // movl         $3, %ecx
	LONG $0x00003ce9; BYTE $0x00               // jmp          LBB3_25, $60(%rip)

LBB3_24:
	WORD $0xc86b; BYTE $0x64                   // imull        $100, %eax, %ecx
	WORD $0xca29                               // subl         %ecx, %edx
	WORD $0xb70f; BYTE $0xc0                   // movzwl       %ax, %eax
	LONG $0xf0058d4c; WORD $0x00bd; BYTE $0x00 // leaq         $48624(%rip), %r8  /* _Digits(%rip) */
	LONG $0x400c8a41                           // movb         (%r8,%rax,2), %cl
	LONG $0x40448a41; BYTE $0x01               // movb         $1(%r8,%rax,2), %al
	WORD $0x0f88                               // movb         %cl, (%rdi)
	WORD $0x4788; BYTE $0x01                   // movb         %al, $1(%rdi)
	WORD $0xb70f; BYTE $0xc2                   // movzwl       %dx, %eax
	LONG $0x400c8a41                           // movb         (%r8,%rax,2), %cl
	WORD $0x0148; BYTE $0xc0                   // addq         %rax, %rax
	WORD $0x4f88; BYTE $0x02                   // movb         %cl, $2(%rdi)
	WORD $0xc883; BYTE $0x01                   // orl          $1, %eax
	WORD $0xb70f; BYTE $0xc0                   // movzwl       %ax, %eax
	LONG $0x00048a42                           // movb         (%rax,%r8), %al
	WORD $0x4788; BYTE $0x03                   // movb         %al, $3(%rdi)
	LONG $0x000004b9; BYTE $0x00               // movl         $4, %ecx

LBB3_25:
	QUAD $0x77118461cefdba48; WORD $0xabcc // movabsq      $-6067343680855748867, %rdx
	WORD $0x8948; BYTE $0xf0               // movq         %rsi, %rax
	WORD $0xf748; BYTE $0xe2               // mulq         %rdx
	LONG $0x1aeac148                       // shrq         $26, %rdx
	LONG $0xc26ef9c5                       // vmovd        %edx, %xmm0
	QUAD $0xfffffbb30d6ff9c5               // vmovdqa      $-1101(%rip), %xmm1  /* LCPI3_0(%rip) */
	LONG $0xd1f4f9c5                       // vpmuludq     %xmm1, %xmm0, %xmm2
	LONG $0xd273e9c5; BYTE $0x2d           // vpsrlq       $45, %xmm2, %xmm2
	LONG $0x002710b8; BYTE $0x00           // movl         $10000, %eax
	LONG $0x6ef9e1c4; BYTE $0xd8           // vmovq        %rax, %xmm3
	LONG $0xe3f4e9c5                       // vpmuludq     %xmm3, %xmm2, %xmm4
	LONG $0xc4faf9c5                       // vpsubd       %xmm4, %xmm0, %xmm0
	LONG $0xc061e9c5                       // vpunpcklwd   %xmm0, %xmm2, %xmm0
	LONG $0xf073f9c5; BYTE $0x02           // vpsllq       $2, %xmm0, %xmm0
	LONG $0xc070fbc5; BYTE $0x50           // vpshuflw     $80, %xmm0, %xmm0
	LONG $0xc070f9c5; BYTE $0x50           // vpshufd      $80, %xmm0, %xmm0
	QUAD $0xfffffbad1512fbc5               // vmovddup     $-1107(%rip), %xmm2  /* LCPI3_1(%rip) */
	LONG $0xc2e4f9c5                       // vpmulhuw     %xmm2, %xmm0, %xmm0
	QUAD $0xfffffba92512fbc5               // vmovddup     $-1111(%rip), %xmm4  /* LCPI3_2(%rip) */
	LONG $0xc4e4f9c5                       // vpmulhuw     %xmm4, %xmm0, %xmm0
	QUAD $0xfffffb752d6ff9c5               // vmovdqa      $-1163(%rip), %xmm5  /* LCPI3_3(%rip) */
	LONG $0xf5d5f9c5                       // vpmullw      %xmm5, %xmm0, %xmm6
	LONG $0xf673c9c5; BYTE $0x10           // vpsllq       $16, %xmm6, %xmm6
	LONG $0xc6f9f9c5                       // vpsubw       %xmm6, %xmm0, %xmm0
	LONG $0xe100c269; WORD $0x05f5         // imull        $100000000, %edx, %eax
	WORD $0xc629                           // subl         %eax, %esi
	LONG $0xf66ef9c5                       // vmovd        %esi, %xmm6
	LONG $0xc9f4c9c5                       // vpmuludq     %xmm1, %xmm6, %xmm1
	LONG $0xd173f1c5; BYTE $0x2d           // vpsrlq       $45, %xmm1, %xmm1
	LONG $0xdbf4f1c5                       // vpmuludq     %xmm3, %xmm1, %xmm3
	LONG $0xdbfac9c5                       // vpsubd       %xmm3, %xmm6, %xmm3
	LONG $0xcb61f1c5                       // vpunpcklwd   %xmm3, %xmm1, %xmm1
	LONG $0xf173f1c5; BYTE $0x02           // vpsllq       $2, %xmm1, %xmm1
	LONG $0xc970fbc5; BYTE $0x50           // vpshuflw     $80, %xmm1, %xmm1
	LONG $0xc970f9c5; BYTE $0x50           // vpshufd      $80, %xmm1, %xmm1
	LONG $0xcae4f1c5                       // vpmulhuw     %xmm2, %xmm1, %xmm1
	LONG $0xcce4f1c5                       // vpmulhuw     %xmm4, %xmm1, %xmm1
	LONG $0xd5d5f1c5                       // vpmullw      %xmm5, %xmm1, %xmm2
	LONG $0xf273e9c5; BYTE $0x10           // vpsllq       $16, %xmm2, %xmm2
	LONG $0xcaf9f1c5                       // vpsubw       %xmm2, %xmm1, %xmm1
	LONG $0xc167f9c5                       // vpackuswb    %xmm1, %xmm0, %xmm0
	QUAD $0xfffffb2705fcf9c5               // vpaddb       $-1241(%rip), %xmm0, %xmm0  /* LCPI3_4(%rip) */
	WORD $0xc889                           // movl         %ecx, %eax
	LONG $0x047ffac5; BYTE $0x07           // vmovdqu      %xmm0, (%rdi,%rax)
	WORD $0xc983; BYTE $0x10               // orl          $16, %ecx
	WORD $0xc889                           // movl         %ecx, %eax
	BYTE $0x5d                             // popq         %rbp
	BYTE $0xc3                             // retq
	QUAD $0x0000000000000000; BYTE $0x00   // .p2align 4, 0x00

LCPI4_0:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI4_1:
	QUAD $0x2222222222222222; QUAD $0x2222222222222222 // .space 16, '""""""""""""""""'

LCPI4_2:
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'

	// .p2align 4, 0x90
_quote:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	BYTE $0x50                                 // pushq        %rax
	WORD $0x8949; BYTE $0xcd                   // movq         %rcx, %r13
	WORD $0x8949; BYTE $0xd7                   // movq         %rdx, %r15
	WORD $0x8948; BYTE $0xf0                   // movq         %rsi, %rax
	WORD $0x8b4c; BYTE $0x31                   // movq         (%rcx), %r14
	LONG $0x01c0f641                           // testb        $1, %r8b
	LONG $0x7b0d8d48; WORD $0x00e4; BYTE $0x00 // leaq         $58491(%rip), %rcx  /* __SingleQuoteTab(%rip) */
	LONG $0x74058d4c; WORD $0x00f4; BYTE $0x00 // leaq         $62580(%rip), %r8  /* __DoubleQuoteTab(%rip) */
	LONG $0xc1440f4c                           // cmoveq       %rcx, %r8
	QUAD $0x00000000f50c8d48                   // leaq         (,%rsi,8), %rcx
	WORD $0x3949; BYTE $0xce                   // cmpq         %rcx, %r14
	LONG $0x04328d0f; WORD $0x0000             // jge          LBB4_51, $1074(%rip)
	WORD $0x894d; BYTE $0xfb                   // movq         %r15, %r11
	WORD $0x8949; BYTE $0xfa                   // movq         %rdi, %r10
	WORD $0x8548; BYTE $0xc0                   // testq        %rax, %rax
	LONG $0x0414840f; WORD $0x0000             // je           LBB4_74, $1044(%rip)
	QUAD $0xffffff78056ff9c5                   // vmovdqa      $-136(%rip), %xmm0  /* LCPI4_0(%rip) */
	QUAD $0xffffff800d6ff9c5                   // vmovdqa      $-128(%rip), %xmm1  /* LCPI4_1(%rip) */
	QUAD $0xffffff88156ff9c5                   // vmovdqa      $-120(%rip), %xmm2  /* LCPI4_2(%rip) */
	LONG $0xdb76e1c5                           // vpcmpeqd     %xmm3, %xmm3, %xmm3
	WORD $0x8949; BYTE $0xfa                   // movq         %rdi, %r10
	WORD $0x894d; BYTE $0xfb                   // movq         %r15, %r11
	LONG $0xd07d894c                           // movq         %r15, $-48(%rbp)

LBB4_3:
	LONG $0x0ff88348                           // cmpq         $15, %rax
	WORD $0x9f0f; BYTE $0xc2                   // setg         %dl
	WORD $0x894d; BYTE $0xf1                   // movq         %r14, %r9
	WORD $0x894d; BYTE $0xdf                   // movq         %r11, %r15
	WORD $0x8948; BYTE $0xc1                   // movq         %rax, %rcx
	WORD $0x894d; BYTE $0xd4                   // movq         %r10, %r12
	LONG $0x10fe8349                           // cmpq         $16, %r14
	LONG $0x008d8c0f; WORD $0x0000             // jl           LBB4_9, $141(%rip)
	LONG $0x10f88348                           // cmpq         $16, %rax
	LONG $0x00838c0f; WORD $0x0000             // jl           LBB4_9, $131(%rip)
	WORD $0x894d; BYTE $0xd4                   // movq         %r10, %r12
	WORD $0x8948; BYTE $0xc6                   // movq         %rax, %rsi
	WORD $0x894d; BYTE $0xdf                   // movq         %r11, %r15
	WORD $0x894c; BYTE $0xf3                   // movq         %r14, %rbx
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB4_6:
	LONG $0x6f7ac1c4; WORD $0x2424                     // vmovdqu      (%r12), %xmm4
	LONG $0xec64f9c5                                   // vpcmpgtb     %xmm4, %xmm0, %xmm5
	LONG $0xf174d9c5                                   // vpcmpeqb     %xmm1, %xmm4, %xmm6
	LONG $0xfa74d9c5                                   // vpcmpeqb     %xmm2, %xmm4, %xmm7
	LONG $0xf6ebc1c5                                   // vpor         %xmm6, %xmm7, %xmm6
	LONG $0x7f7ac1c4; BYTE $0x27                       // vmovdqu      %xmm4, (%r15)
	LONG $0xe364d9c5                                   // vpcmpgtb     %xmm3, %xmm4, %xmm4
	LONG $0xe4dbd1c5                                   // vpand        %xmm4, %xmm5, %xmm4
	LONG $0xe4ebc9c5                                   // vpor         %xmm4, %xmm6, %xmm4
	LONG $0xccd7f9c5                                   // vpmovmskb    %xmm4, %ecx
	WORD $0x8566; BYTE $0xc9                           // testw        %cx, %cx
	LONG $0x011a850f; WORD $0x0000                     // jne          LBB4_18, $282(%rip)
	LONG $0x10c48349                                   // addq         $16, %r12
	LONG $0x10c78349                                   // addq         $16, %r15
	LONG $0xf04e8d48                                   // leaq         $-16(%rsi), %rcx
	LONG $0xf04b8d4c                                   // leaq         $-16(%rbx), %r9
	LONG $0x1ffe8348                                   // cmpq         $31, %rsi
	WORD $0x9f0f; BYTE $0xc2                           // setg         %dl
	LONG $0x20fe8348                                   // cmpq         $32, %rsi
	LONG $0x001b8c0f; WORD $0x0000                     // jl           LBB4_9, $27(%rip)
	WORD $0x8948; BYTE $0xce                           // movq         %rcx, %rsi
	LONG $0x1ffb8348                                   // cmpq         $31, %rbx
	WORD $0x894c; BYTE $0xcb                           // movq         %r9, %rbx
	LONG $0xff9b8f0f; WORD $0xffff                     // jg           LBB4_6, $-101(%rip)
	QUAD $0x9090909090909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB4_9:
	WORD $0xd284                   // testb        %dl, %dl
	LONG $0x006a840f; WORD $0x0000 // je           LBB4_13, $106(%rip)
	WORD $0x894c; BYTE $0xea       // movq         %r13, %rdx
	LONG $0x6f7ac1c4; WORD $0x2424 // vmovdqu      (%r12), %xmm4
	LONG $0xec64f9c5               // vpcmpgtb     %xmm4, %xmm0, %xmm5
	LONG $0xf174d9c5               // vpcmpeqb     %xmm1, %xmm4, %xmm6
	LONG $0xfa74d9c5               // vpcmpeqb     %xmm2, %xmm4, %xmm7
	LONG $0xf6ebc1c5               // vpor         %xmm6, %xmm7, %xmm6
	LONG $0xfb64d9c5               // vpcmpgtb     %xmm3, %xmm4, %xmm7
	LONG $0xefdbd1c5               // vpand        %xmm7, %xmm5, %xmm5
	LONG $0xedebc9c5               // vpor         %xmm5, %xmm6, %xmm5
	LONG $0xcdd7f9c5               // vpmovmskb    %xmm5, %ecx
	LONG $0x0000c981; WORD $0x0001 // orl          $65536, %ecx
	LONG $0xe9bc0f44               // bsfl         %ecx, %r13d
	LONG $0x7ef9e1c4; BYTE $0xe1   // vmovq        %xmm4, %rcx
	WORD $0x394d; BYTE $0xe9       // cmpq         %r13, %r9
	LONG $0x00be8d0f; WORD $0x0000 // jge          LBB4_19, $190(%rip)
	LONG $0x08f98349               // cmpq         $8, %r9
	LONG $0x00ff820f; WORD $0x0000 // jb           LBB4_22, $255(%rip)
	WORD $0x8949; BYTE $0x0f       // movq         %rcx, (%r15)
	LONG $0x246c8d4d; BYTE $0x08   // leaq         $8(%r12), %r13
	LONG $0x08c78349               // addq         $8, %r15
	LONG $0xf8718d49               // leaq         $-8(%r9), %rsi
	LONG $0x04fe8348               // cmpq         $4, %rsi
	LONG $0x00f58d0f; WORD $0x0000 // jge          LBB4_23, $245(%rip)
	LONG $0x000103e9; BYTE $0x00   // jmp          LBB4_24, $259(%rip)

LBB4_13:
	WORD $0x854d; BYTE $0xc9             // testq        %r9, %r9
	LONG $0x01458e0f; WORD $0x0000       // jle          LBB4_28, $325(%rip)
	WORD $0x8948; BYTE $0xca             // movq         %rcx, %rdx
	WORD $0x8548; BYTE $0xc9             // testq        %rcx, %rcx
	LONG $0x013c8e0f; WORD $0x0000       // jle          LBB4_29, $316(%rip)
	QUAD $0x9090909090909090; BYTE $0x90 // .p2align 4, 0x90

LBB4_15:
	LONG $0x34b60f41; BYTE $0x24               // movzbl       (%r12), %esi
	WORD $0x8948; BYTE $0xf2                   // movq         %rsi, %rdx
	LONG $0x04e2c148                           // shlq         $4, %rdx
	LONG $0xdd1d8d48; WORD $0x00e2; BYTE $0x00 // leaq         $58077(%rip), %rbx  /* __SingleQuoteTab(%rip) */
	LONG $0x1a3c8348; BYTE $0x00               // cmpq         $0, (%rdx,%rbx)
	LONG $0x0082850f; WORD $0x0000             // jne          LBB4_21, $130(%rip)
	LONG $0xff518d48                           // leaq         $-1(%rcx), %rdx
	WORD $0xff49; BYTE $0xc4                   // incq         %r12
	WORD $0x8841; BYTE $0x37                   // movb         %sil, (%r15)
	LONG $0x02f98348                           // cmpq         $2, %rcx
	LONG $0x01018c0f; WORD $0x0000             // jl           LBB4_29, $257(%rip)
	LONG $0xff718d49                           // leaq         $-1(%r9), %rsi
	WORD $0xff49; BYTE $0xc7                   // incq         %r15
	WORD $0x8948; BYTE $0xd1                   // movq         %rdx, %rcx
	LONG $0x01f98349                           // cmpq         $1, %r9
	WORD $0x8949; BYTE $0xf1                   // movq         %rsi, %r9
	LONG $0xffb78f0f; WORD $0xffff             // jg           LBB4_15, $-73(%rip)
	LONG $0x0000e5e9; BYTE $0x00               // jmp          LBB4_29, $229(%rip)

LBB4_18:
	WORD $0xb70f; BYTE $0xc9               // movzwl       %cx, %ecx
	WORD $0x294d; BYTE $0xd4               // subq         %r10, %r12
	LONG $0xc9bc0f44                       // bsfl         %ecx, %r9d
	WORD $0x014d; BYTE $0xe1               // addq         %r12, %r9
	WORD $0x854d; BYTE $0xc9               // testq        %r9, %r9
	LONG $0xd07d8b4c                       // movq         $-48(%rbp), %r15
	QUAD $0x000300000001bc49; WORD $0x0000 // movabsq      $12884901889, %r12
	LONG $0x0166890f; WORD $0x0000         // jns          LBB4_37, $358(%rip)
	LONG $0x0004abe9; BYTE $0x00           // jmp          LBB4_78, $1195(%rip)

LBB4_19:
	LONG $0x08fd8341               // cmpl         $8, %r13d
	LONG $0x00da820f; WORD $0x0000 // jb           LBB4_30, $218(%rip)
	WORD $0x8949; BYTE $0x0f       // movq         %rcx, (%r15)
	LONG $0x24748d49; BYTE $0x08   // leaq         $8(%r12), %rsi
	LONG $0x08c78349               // addq         $8, %r15
	LONG $0xf85d8d49               // leaq         $-8(%r13), %rbx
	LONG $0x04fb8348               // cmpq         $4, %rbx
	LONG $0x00d08d0f; WORD $0x0000 // jge          LBB4_31, $208(%rip)
	LONG $0x0000dce9; BYTE $0x00   // jmp          LBB4_32, $220(%rip)

LBB4_21:
	WORD $0x294d; BYTE $0xd4               // subq         %r10, %r12
	WORD $0x894d; BYTE $0xe1               // movq         %r12, %r9
	WORD $0x854d; BYTE $0xc9               // testq        %r9, %r9
	LONG $0xd07d8b4c                       // movq         $-48(%rbp), %r15
	QUAD $0x000300000001bc49; WORD $0x0000 // movabsq      $12884901889, %r12
	LONG $0x011b890f; WORD $0x0000         // jns          LBB4_37, $283(%rip)
	LONG $0x000460e9; BYTE $0x00           // jmp          LBB4_78, $1120(%rip)

LBB4_22:
	WORD $0x894d; BYTE $0xe5       // movq         %r12, %r13
	WORD $0x894c; BYTE $0xce       // movq         %r9, %rsi
	LONG $0x04fe8348               // cmpq         $4, %rsi
	LONG $0x00138c0f; WORD $0x0000 // jl           LBB4_24, $19(%rip)

LBB4_23:
	LONG $0x004d8b41         // movl         (%r13), %ecx
	WORD $0x8941; BYTE $0x0f // movl         %ecx, (%r15)
	LONG $0x04c58349         // addq         $4, %r13
	LONG $0x04c78349         // addq         $4, %r15
	LONG $0xfcc68348         // addq         $-4, %rsi

LBB4_24:
	LONG $0x02fe8348               // cmpq         $2, %rsi
	LONG $0x0023820f; WORD $0x0000 // jb           LBB4_25, $35(%rip)
	LONG $0x4db70f41; BYTE $0x00   // movzwl       (%r13), %ecx
	LONG $0x0f894166               // movw         %cx, (%r15)
	LONG $0x02c58349               // addq         $2, %r13
	LONG $0x02c78349               // addq         $2, %r15
	LONG $0xfec68348               // addq         $-2, %rsi
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x000e850f; WORD $0x0000 // jne          LBB4_26, $14(%rip)
	LONG $0x000010e9; BYTE $0x00   // jmp          LBB4_27, $16(%rip)

LBB4_25:
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x0007840f; WORD $0x0000 // je           LBB4_27, $7(%rip)

LBB4_26:
	LONG $0x004d8a41         // movb         (%r13), %cl
	WORD $0x8841; BYTE $0x0f // movb         %cl, (%r15)

LBB4_27:
	WORD $0x294d; BYTE $0xd1     // subq         %r10, %r9
	WORD $0x014d; BYTE $0xe1     // addq         %r12, %r9
	WORD $0xf749; BYTE $0xd1     // notq         %r9
	LONG $0x00008ee9; BYTE $0x00 // jmp          LBB4_36, $142(%rip)

LBB4_28:
	WORD $0x8948; BYTE $0xca // movq         %rcx, %rdx

LBB4_29:
	WORD $0x294d; BYTE $0xd4               // subq         %r10, %r12
	WORD $0xf748; BYTE $0xda               // negq         %rdx
	WORD $0x194d; BYTE $0xc9               // sbbq         %r9, %r9
	WORD $0x314d; BYTE $0xe1               // xorq         %r12, %r9
	WORD $0x854d; BYTE $0xc9               // testq        %r9, %r9
	LONG $0xd07d8b4c                       // movq         $-48(%rbp), %r15
	QUAD $0x000300000001bc49; WORD $0x0000 // movabsq      $12884901889, %r12
	LONG $0x0082890f; WORD $0x0000         // jns          LBB4_37, $130(%rip)
	LONG $0x0003c7e9; BYTE $0x00           // jmp          LBB4_78, $967(%rip)

LBB4_30:
	WORD $0x894c; BYTE $0xe6       // movq         %r12, %rsi
	WORD $0x894c; BYTE $0xeb       // movq         %r13, %rbx
	LONG $0x04fb8348               // cmpq         $4, %rbx
	LONG $0x00118c0f; WORD $0x0000 // jl           LBB4_32, $17(%rip)

LBB4_31:
	WORD $0x0e8b             // movl         (%rsi), %ecx
	WORD $0x8941; BYTE $0x0f // movl         %ecx, (%r15)
	LONG $0x04c68348         // addq         $4, %rsi
	LONG $0x04c78349         // addq         $4, %r15
	LONG $0xfcc38348         // addq         $-4, %rbx

LBB4_32:
	LONG $0x02fb8348               // cmpq         $2, %rbx
	LONG $0x0021820f; WORD $0x0000 // jb           LBB4_33, $33(%rip)
	WORD $0xb70f; BYTE $0x0e       // movzwl       (%rsi), %ecx
	LONG $0x0f894166               // movw         %cx, (%r15)
	LONG $0x02c68348               // addq         $2, %rsi
	LONG $0x02c78349               // addq         $2, %r15
	LONG $0xfec38348               // addq         $-2, %rbx
	WORD $0x8548; BYTE $0xdb       // testq        %rbx, %rbx
	LONG $0x000e850f; WORD $0x0000 // jne          LBB4_34, $14(%rip)
	LONG $0x00000ee9; BYTE $0x00   // jmp          LBB4_35, $14(%rip)

LBB4_33:
	WORD $0x8548; BYTE $0xdb       // testq        %rbx, %rbx
	LONG $0x0005840f; WORD $0x0000 // je           LBB4_35, $5(%rip)

LBB4_34:
	WORD $0x0e8a             // movb         (%rsi), %cl
	WORD $0x8841; BYTE $0x0f // movb         %cl, (%r15)

LBB4_35:
	WORD $0x294d; BYTE $0xd4 // subq         %r10, %r12
	WORD $0x014d; BYTE $0xec // addq         %r13, %r12
	WORD $0x894d; BYTE $0xe1 // movq         %r12, %r9

LBB4_36:
	WORD $0x8949; BYTE $0xd5               // movq         %rdx, %r13
	WORD $0x854d; BYTE $0xc9               // testq        %r9, %r9
	LONG $0xd07d8b4c                       // movq         $-48(%rbp), %r15
	QUAD $0x000300000001bc49; WORD $0x0000 // movabsq      $12884901889, %r12
	LONG $0x034a880f; WORD $0x0000         // js           LBB4_78, $842(%rip)

LBB4_37:
	WORD $0x014d; BYTE $0xca                                 // addq         %r9, %r10
	WORD $0x014d; BYTE $0xcb                                 // addq         %r9, %r11
	WORD $0x394c; BYTE $0xc8                                 // cmpq         %r9, %rax
	LONG $0x00cd840f; WORD $0x0000                           // je           LBB4_74, $205(%rip)
	WORD $0x294d; BYTE $0xce                                 // subq         %r9, %r14
	WORD $0x2949; BYTE $0xc1                                 // subq         %rax, %r9
	LONG $0x00001de9; BYTE $0x00                             // jmp          LBB4_40, $29(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB4_39:
	WORD $0xff49; BYTE $0xc2       // incq         %r10
	WORD $0x0149; BYTE $0xc3       // addq         %rax, %r11
	WORD $0xff49; BYTE $0xc1       // incq         %r9
	LONG $0x00a5840f; WORD $0x0000 // je           LBB4_74, $165(%rip)

LBB4_40:
	LONG $0x0ab60f41                                         // movzbl       (%r10), %ecx
	LONG $0x04e1c148                                         // shlq         $4, %rcx
	LONG $0x08348b49                                         // movq         (%r8,%rcx), %rsi
	WORD $0xf685                                             // testl        %esi, %esi
	LONG $0x0082840f; WORD $0x0000                           // je           LBB4_48, $130(%rip)
	WORD $0x6348; BYTE $0xc6                                 // movslq       %esi, %rax
	WORD $0x2949; BYTE $0xc6                                 // subq         %rax, %r14
	LONG $0x02d48c0f; WORD $0x0000                           // jl           LBB4_75, $724(%rip)
	LONG $0x20e6c148                                         // shlq         $32, %rsi
	LONG $0x08548d49; BYTE $0x08                             // leaq         $8(%r8,%rcx), %rdx
	WORD $0x394c; BYTE $0xe6                                 // cmpq         %r12, %rsi
	LONG $0x002f8c0f; WORD $0x0000                           // jl           LBB4_44, $47(%rip)
	WORD $0x128b                                             // movl         (%rdx), %edx
	WORD $0x8941; BYTE $0x13                                 // movl         %edx, (%r11)
	LONG $0x08548d49; BYTE $0x0c                             // leaq         $12(%r8,%rcx), %rdx
	LONG $0x044b8d49                                         // leaq         $4(%r11), %rcx
	LONG $0xfc708d48                                         // leaq         $-4(%rax), %rsi
	LONG $0x02fe8348                                         // cmpq         $2, %rsi
	LONG $0x0023830f; WORD $0x0000                           // jae          LBB4_45, $35(%rip)
	LONG $0x000030e9; BYTE $0x00                             // jmp          LBB4_46, $48(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB4_44:
	WORD $0x894c; BYTE $0xd9       // movq         %r11, %rcx
	WORD $0x8948; BYTE $0xc6       // movq         %rax, %rsi
	LONG $0x02fe8348               // cmpq         $2, %rsi
	LONG $0x0012820f; WORD $0x0000 // jb           LBB4_46, $18(%rip)

LBB4_45:
	WORD $0xb70f; BYTE $0x1a // movzwl       (%rdx), %ebx
	WORD $0x8966; BYTE $0x19 // movw         %bx, (%rcx)
	LONG $0x02c28348         // addq         $2, %rdx
	LONG $0x02c18348         // addq         $2, %rcx
	LONG $0xfec68348         // addq         $-2, %rsi

LBB4_46:
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0xff65840f; WORD $0xffff // je           LBB4_39, $-155(%rip)
	WORD $0xb60f; BYTE $0x12       // movzbl       (%rdx), %edx
	WORD $0x1188                   // movb         %dl, (%rcx)
	LONG $0xffff5be9; BYTE $0xff   // jmp          LBB4_39, $-165(%rip)

LBB4_48:
	WORD $0x894c; BYTE $0xc8       // movq         %r9, %rax
	WORD $0xf748; BYTE $0xd8       // negq         %rax
	WORD $0x854d; BYTE $0xc9       // testq        %r9, %r9
	LONG $0xfc12850f; WORD $0xffff // jne          LBB4_3, $-1006(%rip)

LBB4_74:
	WORD $0x294d; BYTE $0xfb     // subq         %r15, %r11
	LONG $0x005d894d             // movq         %r11, (%r13)
	WORD $0x2949; BYTE $0xfa     // subq         %rdi, %r10
	LONG $0x00024de9; BYTE $0x00 // jmp          LBB4_76, $589(%rip)

LBB4_51:
	LONG $0x260d8d4c; WORD $0x0100; BYTE $0x00 // leaq         $65574(%rip), %r9  /* __EscTab(%rip) */
	QUAD $0xfffffb4e056ff9c5                   // vmovdqa      $-1202(%rip), %xmm0  /* LCPI4_0(%rip) */
	QUAD $0xfffffb560d6ff9c5                   // vmovdqa      $-1194(%rip), %xmm1  /* LCPI4_1(%rip) */
	QUAD $0xfffffb5e156ff9c5                   // vmovdqa      $-1186(%rip), %xmm2  /* LCPI4_2(%rip) */
	LONG $0xdb76e1c5                           // vpcmpeqd     %xmm3, %xmm3, %xmm3
	WORD $0x894c; BYTE $0xfb                   // movq         %r15, %rbx
	WORD $0x8949; BYTE $0xc2                   // movq         %rax, %r10

LBB4_52:
	LONG $0x10fa8349               // cmpq         $16, %r10
	LONG $0x005d8c0f; WORD $0x0000 // jl           LBB4_57, $93(%rip)
	LONG $0x000010b9; BYTE $0x00   // movl         $16, %ecx
	WORD $0xd231                   // xorl         %edx, %edx
	WORD $0x9090; BYTE $0x90       // .p2align 4, 0x90

LBB4_54:
	LONG $0x246ffac5; BYTE $0x17   // vmovdqu      (%rdi,%rdx), %xmm4
	LONG $0xec64f9c5               // vpcmpgtb     %xmm4, %xmm0, %xmm5
	LONG $0xf174d9c5               // vpcmpeqb     %xmm1, %xmm4, %xmm6
	LONG $0xfa74d9c5               // vpcmpeqb     %xmm2, %xmm4, %xmm7
	LONG $0xf6ebc1c5               // vpor         %xmm6, %xmm7, %xmm6
	LONG $0x247ffac5; BYTE $0x13   // vmovdqu      %xmm4, (%rbx,%rdx)
	LONG $0xe364d9c5               // vpcmpgtb     %xmm3, %xmm4, %xmm4
	LONG $0xe4dbd1c5               // vpand        %xmm4, %xmm5, %xmm4
	LONG $0xe4ebc9c5               // vpor         %xmm4, %xmm6, %xmm4
	LONG $0xf4d7f9c5               // vpmovmskb    %xmm4, %esi
	WORD $0x8566; BYTE $0xf6       // testw        %si, %si
	LONG $0x0139850f; WORD $0x0000 // jne          LBB4_67, $313(%rip)
	LONG $0x10c28348               // addq         $16, %rdx
	LONG $0x0a748d49; BYTE $0xf0   // leaq         $-16(%r10,%rcx), %rsi
	LONG $0xf0c18348               // addq         $-16, %rcx
	LONG $0x1ffe8348               // cmpq         $31, %rsi
	LONG $0xffb68f0f; WORD $0xffff // jg           LBB4_54, $-74(%rip)
	WORD $0x0148; BYTE $0xd7       // addq         %rdx, %rdi
	WORD $0x2949; BYTE $0xd2       // subq         %rdx, %r10
	WORD $0x0148; BYTE $0xd3       // addq         %rdx, %rbx

LBB4_57:
	LONG $0x08fa8349               // cmpq         $8, %r10
	LONG $0x00858c0f; WORD $0x0000 // jl           LBB4_61, $133(%rip)
	WORD $0xb60f; BYTE $0x0f       // movzbl       (%rdi), %ecx
	LONG $0x0cb60f42; BYTE $0x09   // movzbl       (%rcx,%r9), %ecx
	LONG $0x0157b60f               // movzbl       $1(%rdi), %edx
	LONG $0x14b60f42; BYTE $0x0a   // movzbl       (%rdx,%r9), %edx
	WORD $0xd201                   // addl         %edx, %edx
	WORD $0xca09                   // orl          %ecx, %edx
	LONG $0x024fb60f               // movzbl       $2(%rdi), %ecx
	LONG $0x34b60f42; BYTE $0x09   // movzbl       (%rcx,%r9), %esi
	WORD $0xe6c1; BYTE $0x02       // shll         $2, %esi
	LONG $0x034fb60f               // movzbl       $3(%rdi), %ecx
	LONG $0x0cb60f42; BYTE $0x09   // movzbl       (%rcx,%r9), %ecx
	WORD $0xe1c1; BYTE $0x03       // shll         $3, %ecx
	WORD $0xf109                   // orl          %esi, %ecx
	WORD $0xd109                   // orl          %edx, %ecx
	WORD $0x8b48; BYTE $0x17       // movq         (%rdi), %rdx
	WORD $0x8948; BYTE $0x13       // movq         %rdx, (%rbx)
	WORD $0xc984                   // testb        %cl, %cl
	LONG $0x0131850f; WORD $0x0000 // jne          LBB4_71, $305(%rip)
	LONG $0x044fb60f               // movzbl       $4(%rdi), %ecx
	LONG $0x0cb60f42; BYTE $0x09   // movzbl       (%rcx,%r9), %ecx
	LONG $0x0557b60f               // movzbl       $5(%rdi), %edx
	LONG $0x14b60f42; BYTE $0x0a   // movzbl       (%rdx,%r9), %edx
	WORD $0xd201                   // addl         %edx, %edx
	WORD $0xca09                   // orl          %ecx, %edx
	LONG $0x064fb60f               // movzbl       $6(%rdi), %ecx
	LONG $0x34b60f42; BYTE $0x09   // movzbl       (%rcx,%r9), %esi
	WORD $0xe6c1; BYTE $0x02       // shll         $2, %esi
	LONG $0x074fb60f               // movzbl       $7(%rdi), %ecx
	LONG $0x0cb60f42; BYTE $0x09   // movzbl       (%rcx,%r9), %ecx
	WORD $0xe1c1; BYTE $0x03       // shll         $3, %ecx
	WORD $0xf109                   // orl          %esi, %ecx
	WORD $0xd109                   // orl          %edx, %ecx
	WORD $0xc984                   // testb        %cl, %cl
	LONG $0x0108850f; WORD $0x0000 // jne          LBB4_72, $264(%rip)
	LONG $0x08c38348               // addq         $8, %rbx
	LONG $0x08c78348               // addq         $8, %rdi
	LONG $0xf8c28349               // addq         $-8, %r10

LBB4_61:
	LONG $0x04fa8349               // cmpq         $4, %r10
	LONG $0x00498c0f; WORD $0x0000 // jl           LBB4_64, $73(%rip)
	WORD $0xb60f; BYTE $0x0f       // movzbl       (%rdi), %ecx
	LONG $0x0cb60f42; BYTE $0x09   // movzbl       (%rcx,%r9), %ecx
	LONG $0x0157b60f               // movzbl       $1(%rdi), %edx
	LONG $0x14b60f42; BYTE $0x0a   // movzbl       (%rdx,%r9), %edx
	WORD $0xd201                   // addl         %edx, %edx
	WORD $0xca09                   // orl          %ecx, %edx
	LONG $0x024fb60f               // movzbl       $2(%rdi), %ecx
	LONG $0x34b60f42; BYTE $0x09   // movzbl       (%rcx,%r9), %esi
	WORD $0xe6c1; BYTE $0x02       // shll         $2, %esi
	LONG $0x034fb60f               // movzbl       $3(%rdi), %ecx
	LONG $0x0cb60f42; BYTE $0x09   // movzbl       (%rcx,%r9), %ecx
	WORD $0xe1c1; BYTE $0x03       // shll         $3, %ecx
	WORD $0xf109                   // orl          %esi, %ecx
	WORD $0xd109                   // orl          %edx, %ecx
	WORD $0x178b                   // movl         (%rdi), %edx
	WORD $0x1389                   // movl         %edx, (%rbx)
	WORD $0xc984                   // testb        %cl, %cl
	LONG $0x00a4850f; WORD $0x0000 // jne          LBB4_71, $164(%rip)
	LONG $0x04c38348               // addq         $4, %rbx
	LONG $0x04c78348               // addq         $4, %rdi
	LONG $0xfcc28349               // addq         $-4, %r10

LBB4_64:
	WORD $0x854d; BYTE $0xd2       // testq        %r10, %r10
	LONG $0x00b98e0f; WORD $0x0000 // jle          LBB4_73, $185(%rip)
	WORD $0x9090                   // .p2align 4, 0x90

LBB4_65:
	WORD $0xb60f; BYTE $0x0f       // movzbl       (%rdi), %ecx
	LONG $0x093c8042; BYTE $0x00   // cmpb         $0, (%rcx,%r9)
	LONG $0x0036850f; WORD $0x0000 // jne          LBB4_68, $54(%rip)
	WORD $0xff48; BYTE $0xc7       // incq         %rdi
	WORD $0x0b88                   // movb         %cl, (%rbx)
	WORD $0xff48; BYTE $0xc3       // incq         %rbx
	LONG $0xff4a8d49               // leaq         $-1(%r10), %rcx
	LONG $0x01fa8349               // cmpq         $1, %r10
	WORD $0x8949; BYTE $0xca       // movq         %rcx, %r10
	LONG $0xffd98f0f; WORD $0xffff // jg           LBB4_65, $-39(%rip)
	LONG $0x00008be9; BYTE $0x00   // jmp          LBB4_73, $139(%rip)

LBB4_67:
	WORD $0xb70f; BYTE $0xce // movzwl       %si, %ecx
	WORD $0xbc0f; BYTE $0xc9 // bsfl         %ecx, %ecx
	WORD $0x0148; BYTE $0xcf // addq         %rcx, %rdi
	WORD $0x0148; BYTE $0xd7 // addq         %rdx, %rdi
	WORD $0x2949; BYTE $0xca // subq         %rcx, %r10
	WORD $0x2949; BYTE $0xd2 // subq         %rdx, %r10
	WORD $0x0148; BYTE $0xcb // addq         %rcx, %rbx
	WORD $0x0148; BYTE $0xd3 // addq         %rdx, %rbx

LBB4_68:
	WORD $0x0f8a                           // movb         (%rdi), %cl
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

LBB4_69:
	WORD $0x8948; BYTE $0xda       // movq         %rbx, %rdx
	WORD $0xb60f; BYTE $0xc9       // movzbl       %cl, %ecx
	LONG $0x04e1c148               // shlq         $4, %rcx
	LONG $0x081c6349               // movslq       (%r8,%rcx), %rbx
	LONG $0x084c8b49; BYTE $0x08   // movq         $8(%r8,%rcx), %rcx
	WORD $0x8948; BYTE $0x0a       // movq         %rcx, (%rdx)
	WORD $0x0148; BYTE $0xd3       // addq         %rdx, %rbx
	LONG $0x02fa8349               // cmpq         $2, %r10
	LONG $0x00448c0f; WORD $0x0000 // jl           LBB4_73, $68(%rip)
	WORD $0xff49; BYTE $0xca       // decq         %r10
	LONG $0x014fb60f               // movzbl       $1(%rdi), %ecx
	WORD $0xff48; BYTE $0xc7       // incq         %rdi
	LONG $0x093c8042; BYTE $0x00   // cmpb         $0, (%rcx,%r9)
	LONG $0xffc8850f; WORD $0xffff // jne          LBB4_69, $-56(%rip)
	LONG $0xfffe1fe9; BYTE $0xff   // jmp          LBB4_52, $-481(%rip)

LBB4_71:
	WORD $0xbc0f; BYTE $0xc9     // bsfl         %ecx, %ecx
	WORD $0x0148; BYTE $0xcf     // addq         %rcx, %rdi
	WORD $0x2949; BYTE $0xca     // subq         %rcx, %r10
	WORD $0x0148; BYTE $0xcb     // addq         %rcx, %rbx
	LONG $0xffffa6e9; BYTE $0xff // jmp          LBB4_68, $-90(%rip)

LBB4_72:
	WORD $0xbc0f; BYTE $0xc9     // bsfl         %ecx, %ecx
	LONG $0x04518d48             // leaq         $4(%rcx), %rdx
	LONG $0x0f7c8d48; BYTE $0x04 // leaq         $4(%rdi,%rcx), %rdi
	WORD $0x2949; BYTE $0xd2     // subq         %rdx, %r10
	LONG $0x0b5c8d48; BYTE $0x04 // leaq         $4(%rbx,%rcx), %rbx
	LONG $0xffff8de9; BYTE $0xff // jmp          LBB4_68, $-115(%rip)

LBB4_73:
	WORD $0x294c; BYTE $0xfb     // subq         %r15, %rbx
	LONG $0x005d8949             // movq         %rbx, (%r13)
	LONG $0x000010e9; BYTE $0x00 // jmp          LBB4_77, $16(%rip)

LBB4_75:
	WORD $0x294d; BYTE $0xfb // subq         %r15, %r11
	LONG $0x005d894d         // movq         %r11, (%r13)
	WORD $0xf749; BYTE $0xd2 // notq         %r10
	WORD $0x0149; BYTE $0xfa // addq         %rdi, %r10

LBB4_76:
	WORD $0x894c; BYTE $0xd0 // movq         %r10, %rax

LBB4_77:
	LONG $0x08c48348 // addq         $8, %rsp
	BYTE $0x5b       // popq         %rbx
	WORD $0x5c41     // popq         %r12
	WORD $0x5d41     // popq         %r13
	WORD $0x5e41     // popq         %r14
	WORD $0x5f41     // popq         %r15
	BYTE $0x5d       // popq         %rbp
	BYTE $0xc3       // retq

LBB4_78:
	WORD $0x294d; BYTE $0xfb     // subq         %r15, %r11
	WORD $0x894c; BYTE $0xc8     // movq         %r9, %rax
	WORD $0xf748; BYTE $0xd0     // notq         %rax
	WORD $0x014c; BYTE $0xd8     // addq         %r11, %rax
	LONG $0x00458949             // movq         %rax, (%r13)
	WORD $0x294c; BYTE $0xd7     // subq         %r10, %rdi
	WORD $0x014c; BYTE $0xcf     // addq         %r9, %rdi
	WORD $0x8948; BYTE $0xf8     // movq         %rdi, %rax
	LONG $0xffffd3e9; BYTE $0xff // jmp          LBB4_77, $-45(%rip)

	// .p2align 4, 0x00
LCPI5_0:
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'

	// .p2align 4, 0x90
_unquote:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	LONG $0x28ec8348                           // subq         $40, %rsp
	WORD $0x8548; BYTE $0xf6                   // testq        %rsi, %rsi
	LONG $0x066f840f; WORD $0x0000             // je           LBB5_81, $1647(%rip)
	WORD $0x8949; BYTE $0xf3                   // movq         %rsi, %r11
	LONG $0xc84d8948                           // movq         %rcx, $-56(%rbp)
	WORD $0x894c; BYTE $0xc0                   // movq         %r8, %rax
	LONG $0xb845894c                           // movq         %r8, $-72(%rbp)
	WORD $0x8945; BYTE $0xc2                   // movl         %r8d, %r10d
	LONG $0x01e28341                           // andl         $1, %r10d
	LONG $0x6a058d4c; WORD $0x00fe; BYTE $0x00 // leaq         $65130(%rip), %r8  /* __UnquoteTab(%rip) */
	QUAD $0xffffffb2056ff9c5                   // vmovdqa      $-78(%rip), %xmm0  /* LCPI5_0(%rip) */
	WORD $0x8949; BYTE $0xf9                   // movq         %rdi, %r9
	WORD $0x8949; BYTE $0xf5                   // movq         %rsi, %r13
	WORD $0x8948; BYTE $0xd0                   // movq         %rdx, %rax

LBB5_2:
	LONG $0x5c398041               // cmpb         $92, (%r9)
	LONG $0x000f850f; WORD $0x0000 // jne          LBB5_4, $15(%rip)
	WORD $0xf631                   // xorl         %esi, %esi
	LONG $0x0000c8e9; BYTE $0x00   // jmp          LBB5_13, $200(%rip)
	QUAD $0x9090909090909090       // .p2align 4, 0x90

LBB5_4:
	WORD $0x894d; BYTE $0xee                               // movq         %r13, %r14
	WORD $0x8948; BYTE $0xc1                               // movq         %rax, %rcx
	WORD $0x894d; BYTE $0xcf                               // movq         %r9, %r15
	LONG $0x10fd8349                                       // cmpq         $16, %r13
	LONG $0x00408c0f; WORD $0x0000                         // jl           LBB5_7, $64(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

LBB5_5:
	LONG $0x6f7ac1c4; BYTE $0x0f   // vmovdqu      (%r15), %xmm1
	LONG $0x097ffac5               // vmovdqu      %xmm1, (%rcx)
	LONG $0xc874f1c5               // vpcmpeqb     %xmm0, %xmm1, %xmm1
	LONG $0xf1d7f9c5               // vpmovmskb    %xmm1, %esi
	WORD $0x8566; BYTE $0xf6       // testw        %si, %si
	LONG $0x0060850f; WORD $0x0000 // jne          LBB5_12, $96(%rip)
	LONG $0x10c78349               // addq         $16, %r15
	LONG $0x10c18348               // addq         $16, %rcx
	LONG $0xf0768d49               // leaq         $-16(%r14), %rsi
	LONG $0x1ffe8349               // cmpq         $31, %r14
	WORD $0x8949; BYTE $0xf6       // movq         %rsi, %r14
	LONG $0xffcd8f0f; WORD $0xffff // jg           LBB5_5, $-51(%rip)

LBB5_7:
	WORD $0x854d; BYTE $0xf6       // testq        %r14, %r14
	LONG $0x05d3840f; WORD $0x0000 // je           LBB5_82, $1491(%rip)
	WORD $0xf631                   // xorl         %esi, %esi
	WORD $0x9090                   // .p2align 4, 0x90

LBB5_9:
	LONG $0x1cb60f41; BYTE $0x37   // movzbl       (%r15,%rsi), %ebx
	WORD $0xfb80; BYTE $0x5c       // cmpb         $92, %bl
	LONG $0x0014840f; WORD $0x0000 // je           LBB5_11, $20(%rip)
	WORD $0x1c88; BYTE $0x31       // movb         %bl, (%rcx,%rsi)
	WORD $0xff48; BYTE $0xc6       // incq         %rsi
	WORD $0x3949; BYTE $0xf6       // cmpq         %rsi, %r14
	LONG $0xffe3850f; WORD $0xffff // jne          LBB5_9, $-29(%rip)
	LONG $0x0005ade9; BYTE $0x00   // jmp          LBB5_82, $1453(%rip)

LBB5_11:
	WORD $0x0149; BYTE $0xf7       // addq         %rsi, %r15
	WORD $0x294d; BYTE $0xcf       // subq         %r9, %r15
	WORD $0x894c; BYTE $0xfe       // movq         %r15, %rsi
	LONG $0xfffe8348               // cmpq         $-1, %rsi
	LONG $0x002b850f; WORD $0x0000 // jne          LBB5_13, $43(%rip)
	LONG $0x000595e9; BYTE $0x00   // jmp          LBB5_82, $1429(%rip)

LBB5_12:
	WORD $0xb70f; BYTE $0xce                                             // movzwl       %si, %ecx
	WORD $0x294d; BYTE $0xcf                                             // subq         %r9, %r15
	LONG $0xf1bc0f48                                                     // bsfq         %rcx, %rsi
	WORD $0x014c; BYTE $0xfe                                             // addq         %r15, %rsi
	LONG $0xfffe8348                                                     // cmpq         $-1, %rsi
	LONG $0x057e840f; WORD $0x0000                                       // je           LBB5_82, $1406(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB5_13:
	LONG $0x024e8d48               // leaq         $2(%rsi), %rcx
	WORD $0x2949; BYTE $0xcd       // subq         %rcx, %r13
	LONG $0x075b880f; WORD $0x0000 // js           LBB5_111, $1883(%rip)
	LONG $0x314c8d4d; BYTE $0x02   // leaq         $2(%r9,%rsi), %r9
	WORD $0x854d; BYTE $0xd2       // testq        %r10, %r10
	LONG $0x03f5850f; WORD $0x0000 // jne          LBB5_58, $1013(%rip)

LBB5_15:
	WORD $0x0148; BYTE $0xf0                                 // addq         %rsi, %rax
	LONG $0x49b60f41; BYTE $0xff                             // movzbl       $-1(%r9), %ecx
	LONG $0x010c8a42                                         // movb         (%rcx,%r8), %cl
	WORD $0xf980; BYTE $0xff                                 // cmpb         $-1, %cl
	LONG $0x0020840f; WORD $0x0000                           // je           LBB5_18, $32(%rip)
	WORD $0xc984                                             // testb        %cl, %cl
	LONG $0x0600840f; WORD $0x0000                           // je           LBB5_93, $1536(%rip)
	WORD $0x0888                                             // movb         %cl, (%rax)
	WORD $0xff48; BYTE $0xc0                                 // incq         %rax
	LONG $0x0003c0e9; BYTE $0x00                             // jmp          LBB5_57, $960(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB5_18:
	LONG $0x03fd8349                           // cmpq         $3, %r13
	LONG $0x070e8e0f; WORD $0x0000             // jle          LBB5_111, $1806(%rip)
	WORD $0x8b41; BYTE $0x31                   // movl         (%r9), %esi
	WORD $0xf189                               // movl         %esi, %ecx
	WORD $0xd1f7                               // notl         %ecx
	LONG $0xcfd09e8d; WORD $0xcfcf             // leal         $-808464432(%rsi), %ebx
	LONG $0x8080e181; WORD $0x8080             // andl         $-2139062144, %ecx
	WORD $0xd985                               // testl        %ebx, %ecx
	LONG $0x050f850f; WORD $0x0000             // jne          LBB5_84, $1295(%rip)
	LONG $0x19199e8d; WORD $0x1919             // leal         $421075225(%rsi), %ebx
	WORD $0xf309                               // orl          %esi, %ebx
	LONG $0x8080c3f7; WORD $0x8080             // testl        $-2139062144, %ebx
	LONG $0x04fb850f; WORD $0x0000             // jne          LBB5_84, $1275(%rip)
	WORD $0xf389                               // movl         %esi, %ebx
	LONG $0x7f7fe381; WORD $0x7f7f             // andl         $2139062143, %ebx
	LONG $0xc0c0be41; WORD $0xc0c0             // movl         $-1061109568, %r14d
	WORD $0x2941; BYTE $0xde                   // subl         %ebx, %r14d
	LONG $0x46bb8d44; WORD $0x4646; BYTE $0x46 // leal         $1179010630(%rbx), %r15d
	WORD $0x2141; BYTE $0xce                   // andl         %ecx, %r14d
	WORD $0x8545; BYTE $0xfe                   // testl        %r15d, %r14d
	LONG $0x04d7850f; WORD $0x0000             // jne          LBB5_84, $1239(%rip)
	LONG $0xe0e0be41; WORD $0xe0e0             // movl         $-522133280, %r14d
	WORD $0x2941; BYTE $0xde                   // subl         %ebx, %r14d
	LONG $0x3939c381; WORD $0x3939             // addl         $960051513, %ebx
	WORD $0x2144; BYTE $0xf1                   // andl         %r14d, %ecx
	WORD $0xd985                               // testl        %ebx, %ecx
	LONG $0x04bd850f; WORD $0x0000             // jne          LBB5_84, $1213(%rip)
	WORD $0xce0f                               // bswapl       %esi
	WORD $0xf189                               // movl         %esi, %ecx
	WORD $0xe9c1; BYTE $0x04                   // shrl         $4, %ecx
	WORD $0xd1f7                               // notl         %ecx
	LONG $0x0101e181; WORD $0x0101             // andl         $16843009, %ecx
	WORD $0x0c8d; BYTE $0xc9                   // leal         (%rcx,%rcx,8), %ecx
	LONG $0x0f0fe681; WORD $0x0f0f             // andl         $252645135, %esi
	WORD $0xce01                               // addl         %ecx, %esi
	WORD $0xf189                               // movl         %esi, %ecx
	WORD $0xe9c1; BYTE $0x04                   // shrl         $4, %ecx
	WORD $0xf109                               // orl          %esi, %ecx
	LONG $0xf9b60f44                           // movzbl       %cl, %r15d
	WORD $0xe9c1; BYTE $0x08                   // shrl         $8, %ecx
	LONG $0xff00e181; WORD $0x0000             // andl         $65280, %ecx
	WORD $0x0941; BYTE $0xcf                   // orl          %ecx, %r15d
	LONG $0xfc758d4d                           // leaq         $-4(%r13), %r14
	LONG $0x80ff8141; WORD $0x0000; BYTE $0x00 // cmpl         $128, %r15d
	LONG $0x0356820f; WORD $0x0000             // jb           LBB5_66, $854(%rip)
	WORD $0x3145; BYTE $0xe4                   // xorl         %r12d, %r12d
	WORD $0x854d; BYTE $0xd2                   // testq        %r10, %r10
	LONG $0x014b850f; WORD $0x0000             // jne          LBB5_38, $331(%rip)

LBB5_25:
	LONG $0x00ff8141; WORD $0x0008; BYTE $0x00 // cmpl         $2048, %r15d
	LONG $0x034c820f; WORD $0x0000             // jb           LBB5_68, $844(%rip)
	WORD $0x8944; BYTE $0xf9                   // movl         %r15d, %ecx
	LONG $0xf800e181; WORD $0xffff             // andl         $-2048, %ecx
	LONG $0xd800f981; WORD $0x0000             // cmpl         $55296, %ecx
	LONG $0x0299850f; WORD $0x0000             // jne          LBB5_54, $665(%rip)
	LONG $0xffff8141; WORD $0x00db; BYTE $0x00 // cmpl         $56319, %r15d
	LONG $0x034f870f; WORD $0x0000             // ja           LBB5_69, $847(%rip)
	LONG $0x06fe8349                           // cmpq         $6, %r14
	LONG $0x03458c0f; WORD $0x0000             // jl           LBB5_69, $837(%rip)
	LONG $0x217c8043; WORD $0x5c04             // cmpb         $92, $4(%r9,%r12)
	LONG $0x0339850f; WORD $0x0000             // jne          LBB5_69, $825(%rip)
	LONG $0x217c8043; WORD $0x7505             // cmpb         $117, $5(%r9,%r12)
	LONG $0x032d850f; WORD $0x0000             // jne          LBB5_69, $813(%rip)
	LONG $0x21748b43; BYTE $0x06               // movl         $6(%r9,%r12), %esi
	WORD $0xf189                               // movl         %esi, %ecx
	WORD $0xd1f7                               // notl         %ecx
	LONG $0xcfd09e8d; WORD $0xcfcf             // leal         $-808464432(%rsi), %ebx
	LONG $0x8080e181; WORD $0x8080             // andl         $-2139062144, %ecx
	WORD $0xd985                               // testl        %ebx, %ecx
	LONG $0x04d9850f; WORD $0x0000             // jne          LBB5_95, $1241(%rip)
	LONG $0x19199e8d; WORD $0x1919             // leal         $421075225(%rsi), %ebx
	WORD $0xf309                               // orl          %esi, %ebx
	LONG $0x8080c3f7; WORD $0x8080             // testl        $-2139062144, %ebx
	LONG $0x04c5850f; WORD $0x0000             // jne          LBB5_95, $1221(%rip)
	WORD $0xf389                               // movl         %esi, %ebx
	LONG $0x7f7fe381; WORD $0x7f7f             // andl         $2139062143, %ebx
	LONG $0xc0d445c7; WORD $0xc0c0; BYTE $0xc0 // movl         $-1061109568, $-44(%rbp)
	WORD $0x5d29; BYTE $0xd4                   // subl         %ebx, $-44(%rbp)
	LONG $0xb0758948                           // movq         %rsi, $-80(%rbp)
	LONG $0x4646b38d; WORD $0x4646             // leal         $1179010630(%rbx), %esi
	WORD $0x7589; BYTE $0xc4                   // movl         %esi, $-60(%rbp)
	WORD $0x4d21; BYTE $0xd4                   // andl         %ecx, $-44(%rbp)
	WORD $0x758b; BYTE $0xc4                   // movl         $-60(%rbp), %esi
	WORD $0x7585; BYTE $0xd4                   // testl        %esi, $-44(%rbp)
	LONG $0xb0758b48                           // movq         $-80(%rbp), %rsi
	LONG $0x0493850f; WORD $0x0000             // jne          LBB5_95, $1171(%rip)
	LONG $0xe0d445c7; WORD $0xe0e0; BYTE $0xe0 // movl         $-522133280, $-44(%rbp)
	WORD $0x5d29; BYTE $0xd4                   // subl         %ebx, $-44(%rbp)
	LONG $0x3939c381; WORD $0x3939             // addl         $960051513, %ebx
	WORD $0x4d23; BYTE $0xd4                   // andl         $-44(%rbp), %ecx
	WORD $0xd985                               // testl        %ebx, %ecx
	LONG $0x0478850f; WORD $0x0000             // jne          LBB5_95, $1144(%rip)
	WORD $0xce0f                               // bswapl       %esi
	WORD $0xf189                               // movl         %esi, %ecx
	WORD $0xe9c1; BYTE $0x04                   // shrl         $4, %ecx
	WORD $0xd1f7                               // notl         %ecx
	LONG $0x0101e181; WORD $0x0101             // andl         $16843009, %ecx
	WORD $0x0c8d; BYTE $0xc9                   // leal         (%rcx,%rcx,8), %ecx
	LONG $0x0f0fe681; WORD $0x0f0f             // andl         $252645135, %esi
	WORD $0xce01                               // addl         %ecx, %esi
	WORD $0xf189                               // movl         %esi, %ecx
	WORD $0xe9c1; BYTE $0x04                   // shrl         $4, %ecx
	WORD $0xf109                               // orl          %esi, %ecx
	WORD $0xce89                               // movl         %ecx, %esi
	WORD $0xeec1; BYTE $0x08                   // shrl         $8, %esi
	LONG $0xff00e681; WORD $0x0000             // andl         $65280, %esi
	WORD $0xb60f; BYTE $0xd9                   // movzbl       %cl, %ebx
	WORD $0xf309                               // orl          %esi, %ebx
	LONG $0x0000e181; WORD $0x00fc             // andl         $16515072, %ecx
	LONG $0x0000f981; WORD $0x00dc             // cmpl         $14417920, %ecx
	LONG $0x02b1840f; WORD $0x0000             // je           LBB5_75, $689(%rip)
	LONG $0x02b845f6                           // testb        $2, $-72(%rbp)
	LONG $0x0564840f; WORD $0x0000             // je           LBB5_114, $1380(%rip)
	LONG $0xfac68349                           // addq         $-6, %r14
	LONG $0xef00c766; BYTE $0xbf               // movw         $-16401, (%rax)
	LONG $0xbd0240c6                           // movb         $-67, $2(%rax)
	LONG $0x03c08348                           // addq         $3, %rax
	LONG $0x06c48349                           // addq         $6, %r12
	WORD $0x8941; BYTE $0xdf                   // movl         %ebx, %r15d
	WORD $0xfb83; BYTE $0x7f                   // cmpl         $127, %ebx
	LONG $0xfec3870f; WORD $0xffff             // ja           LBB5_25, $-317(%rip)
	LONG $0x00015ee9; BYTE $0x00               // jmp          LBB5_53, $350(%rip)
	QUAD $0x9090909090909090; BYTE $0x90       // .p2align 4, 0x90

LBB5_38:
	LONG $0x00ff8141; WORD $0x0008; BYTE $0x00 // cmpl         $2048, %r15d
	LONG $0x0201820f; WORD $0x0000             // jb           LBB5_68, $513(%rip)
	WORD $0x8944; BYTE $0xf9                   // movl         %r15d, %ecx
	LONG $0xf800e181; WORD $0xffff             // andl         $-2048, %ecx
	LONG $0xd800f981; WORD $0x0000             // cmpl         $55296, %ecx
	LONG $0x014e850f; WORD $0x0000             // jne          LBB5_54, $334(%rip)
	WORD $0x854d; BYTE $0xf6                   // testq        %r14, %r14
	LONG $0x04be8e0f; WORD $0x0000             // jle          LBB5_108, $1214(%rip)
	LONG $0x217c8043; WORD $0x5c04             // cmpb         $92, $4(%r9,%r12)
	LONG $0x022d850f; WORD $0x0000             // jne          LBB5_73, $557(%rip)
	LONG $0xffff8141; WORD $0x00db; BYTE $0x00 // cmpl         $56319, %r15d
	LONG $0x01f9870f; WORD $0x0000             // ja           LBB5_70, $505(%rip)
	LONG $0x07fe8349                           // cmpq         $7, %r14
	LONG $0x01ef8c0f; WORD $0x0000             // jl           LBB5_70, $495(%rip)
	LONG $0x217c8043; WORD $0x5c05             // cmpb         $92, $5(%r9,%r12)
	LONG $0x01e3850f; WORD $0x0000             // jne          LBB5_70, $483(%rip)
	LONG $0x217c8043; WORD $0x7506             // cmpb         $117, $6(%r9,%r12)
	LONG $0x01d7850f; WORD $0x0000             // jne          LBB5_70, $471(%rip)
	LONG $0x21748b43; BYTE $0x07               // movl         $7(%r9,%r12), %esi
	WORD $0xf189                               // movl         %esi, %ecx
	WORD $0xd1f7                               // notl         %ecx
	LONG $0xcfd09e8d; WORD $0xcfcf             // leal         $-808464432(%rsi), %ebx
	LONG $0x8080e181; WORD $0x8080             // andl         $-2139062144, %ecx
	WORD $0xd985                               // testl        %ebx, %ecx
	LONG $0x0383850f; WORD $0x0000             // jne          LBB5_96, $899(%rip)
	LONG $0x19199e8d; WORD $0x1919             // leal         $421075225(%rsi), %ebx
	WORD $0xf309                               // orl          %esi, %ebx
	LONG $0x8080c3f7; WORD $0x8080             // testl        $-2139062144, %ebx
	LONG $0x036f850f; WORD $0x0000             // jne          LBB5_96, $879(%rip)
	WORD $0xf389                               // movl         %esi, %ebx
	LONG $0x7f7fe381; WORD $0x7f7f             // andl         $2139062143, %ebx
	LONG $0xc0d445c7; WORD $0xc0c0; BYTE $0xc0 // movl         $-1061109568, $-44(%rbp)
	WORD $0x5d29; BYTE $0xd4                   // subl         %ebx, $-44(%rbp)
	LONG $0xb0758948                           // movq         %rsi, $-80(%rbp)
	LONG $0x4646b38d; WORD $0x4646             // leal         $1179010630(%rbx), %esi
	WORD $0x7589; BYTE $0xc4                   // movl         %esi, $-60(%rbp)
	WORD $0x4d21; BYTE $0xd4                   // andl         %ecx, $-44(%rbp)
	WORD $0x758b; BYTE $0xc4                   // movl         $-60(%rbp), %esi
	WORD $0x7585; BYTE $0xd4                   // testl        %esi, $-44(%rbp)
	LONG $0xb0758b48                           // movq         $-80(%rbp), %rsi
	LONG $0x033d850f; WORD $0x0000             // jne          LBB5_96, $829(%rip)
	LONG $0xe0d445c7; WORD $0xe0e0; BYTE $0xe0 // movl         $-522133280, $-44(%rbp)
	WORD $0x5d29; BYTE $0xd4                   // subl         %ebx, $-44(%rbp)
	LONG $0x3939c381; WORD $0x3939             // addl         $960051513, %ebx
	WORD $0x4d23; BYTE $0xd4                   // andl         $-44(%rbp), %ecx
	WORD $0xd985                               // testl        %ebx, %ecx
	LONG $0x0322850f; WORD $0x0000             // jne          LBB5_96, $802(%rip)
	WORD $0xce0f                               // bswapl       %esi
	WORD $0xf189                               // movl         %esi, %ecx
	WORD $0xe9c1; BYTE $0x04                   // shrl         $4, %ecx
	WORD $0xd1f7                               // notl         %ecx
	LONG $0x0101e181; WORD $0x0101             // andl         $16843009, %ecx
	WORD $0x0c8d; BYTE $0xc9                   // leal         (%rcx,%rcx,8), %ecx
	LONG $0x0f0fe681; WORD $0x0f0f             // andl         $252645135, %esi
	WORD $0xce01                               // addl         %ecx, %esi
	WORD $0xf189                               // movl         %esi, %ecx
	WORD $0xe9c1; BYTE $0x04                   // shrl         $4, %ecx
	WORD $0xf109                               // orl          %esi, %ecx
	WORD $0xce89                               // movl         %ecx, %esi
	WORD $0xeec1; BYTE $0x08                   // shrl         $8, %esi
	LONG $0xff00e681; WORD $0x0000             // andl         $65280, %esi
	WORD $0xb60f; BYTE $0xd9                   // movzbl       %cl, %ebx
	WORD $0xf309                               // orl          %esi, %ebx
	LONG $0x0000e181; WORD $0x00fc             // andl         $16515072, %ecx
	LONG $0x0000f981; WORD $0x00dc             // cmpl         $14417920, %ecx
	LONG $0x0162840f; WORD $0x0000             // je           LBB5_76, $354(%rip)
	LONG $0x02b845f6                           // testb        $2, $-72(%rbp)
	LONG $0x040e840f; WORD $0x0000             // je           LBB5_115, $1038(%rip)
	LONG $0xf9c68349                           // addq         $-7, %r14
	LONG $0xef00c766; BYTE $0xbf               // movw         $-16401, (%rax)
	LONG $0xbd0240c6                           // movb         $-67, $2(%rax)
	LONG $0x03c08348                           // addq         $3, %rax
	LONG $0x07c48349                           // addq         $7, %r12
	WORD $0x8941; BYTE $0xdf                   // movl         %ebx, %r15d
	LONG $0x0080fb81; WORD $0x0000             // cmpl         $128, %ebx
	LONG $0xfeab830f; WORD $0xffff             // jae          LBB5_38, $-341(%rip)

LBB5_53:
	LONG $0x214c8d4f; BYTE $0x04                             // leaq         $4(%r9,%r12), %r9
	WORD $0x8941; BYTE $0xdf                                 // movl         %ebx, %r15d
	LONG $0x0000a1e9; BYTE $0x00                             // jmp          LBB5_67, $161(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB5_54:
	LONG $0x214c8d4f; BYTE $0x04 // leaq         $4(%r9,%r12), %r9
	WORD $0x8944; BYTE $0xf9     // movl         %r15d, %ecx
	WORD $0xe9c1; BYTE $0x0c     // shrl         $12, %ecx
	WORD $0xc980; BYTE $0xe0     // orb          $-32, %cl
	WORD $0x0888                 // movb         %cl, (%rax)
	WORD $0x8944; BYTE $0xf9     // movl         %r15d, %ecx
	WORD $0xe9c1; BYTE $0x06     // shrl         $6, %ecx
	WORD $0xe180; BYTE $0x3f     // andb         $63, %cl
	WORD $0xc980; BYTE $0x80     // orb          $-128, %cl
	WORD $0x4888; BYTE $0x01     // movb         %cl, $1(%rax)
	LONG $0x3fe78041             // andb         $63, %r15b
	LONG $0x80cf8041             // orb          $-128, %r15b
	LONG $0x02788844             // movb         %r15b, $2(%rax)

LBB5_55:
	LONG $0x03c08348 // addq         $3, %rax

LBB5_56:
	WORD $0x894d; BYTE $0xf5 // movq         %r14, %r13

LBB5_57:
	WORD $0x854d; BYTE $0xed       // testq        %r13, %r13
	LONG $0xfb1c850f; WORD $0xffff // jne          LBB5_2, $-1252(%rip)
	LONG $0x000350e9; BYTE $0x00   // jmp          LBB5_110, $848(%rip)

LBB5_58:
	WORD $0x8545; BYTE $0xed       // testl        %r13d, %r13d
	LONG $0x034f840f; WORD $0x0000 // je           LBB5_111, $847(%rip)
	LONG $0xff798041; BYTE $0x5c   // cmpb         $92, $-1(%r9)
	LONG $0x022d850f; WORD $0x0000 // jne          LBB5_94, $557(%rip)
	LONG $0x5c398041               // cmpb         $92, (%r9)
	LONG $0x0026850f; WORD $0x0000 // jne          LBB5_65, $38(%rip)
	LONG $0x01fd8341               // cmpl         $1, %r13d
	LONG $0x03308e0f; WORD $0x0000 // jle          LBB5_111, $816(%rip)
	LONG $0x01498a41               // movb         $1(%r9), %cl
	WORD $0xf980; BYTE $0x22       // cmpb         $34, %cl
	LONG $0x0009840f; WORD $0x0000 // je           LBB5_64, $9(%rip)
	WORD $0xf980; BYTE $0x5c       // cmpb         $92, %cl
	LONG $0x02e2850f; WORD $0x0000 // jne          LBB5_106, $738(%rip)

LBB5_64:
	WORD $0xff49; BYTE $0xc1 // incq         %r9
	WORD $0xff49; BYTE $0xcd // decq         %r13

LBB5_65:
	WORD $0xff49; BYTE $0xc1     // incq         %r9
	WORD $0xff49; BYTE $0xcd     // decq         %r13
	LONG $0xfffbbce9; BYTE $0xff // jmp          LBB5_15, $-1092(%rip)

LBB5_66:
	LONG $0x04c18349 // addq         $4, %r9

LBB5_67:
	WORD $0x8844; BYTE $0x38     // movb         %r15b, (%rax)
	WORD $0xff48; BYTE $0xc0     // incq         %rax
	LONG $0xffff91e9; BYTE $0xff // jmp          LBB5_56, $-111(%rip)

LBB5_68:
	LONG $0x214c8d4f; BYTE $0x04 // leaq         $4(%r9,%r12), %r9
	WORD $0x8944; BYTE $0xf9     // movl         %r15d, %ecx
	WORD $0xe9c1; BYTE $0x06     // shrl         $6, %ecx
	WORD $0xc980; BYTE $0xc0     // orb          $-64, %cl
	WORD $0x0888                 // movb         %cl, (%rax)
	LONG $0x3fe78041             // andb         $63, %r15b
	LONG $0x80cf8041             // orb          $-128, %r15b
	LONG $0x01788844             // movb         %r15b, $1(%rax)
	LONG $0x02c08348             // addq         $2, %rax
	LONG $0xffff6ce9; BYTE $0xff // jmp          LBB5_56, $-148(%rip)

LBB5_69:
	LONG $0x214c8d4f; BYTE $0x04 // leaq         $4(%r9,%r12), %r9
	LONG $0x00000fe9; BYTE $0x00 // jmp          LBB5_71, $15(%rip)

LBB5_70:
	LONG $0x214c8d4f; BYTE $0x05 // leaq         $5(%r9,%r12), %r9
	WORD $0x294d; BYTE $0xe5     // subq         %r12, %r13
	LONG $0xfbc58349             // addq         $-5, %r13
	WORD $0x894d; BYTE $0xee     // movq         %r13, %r14

LBB5_71:
	LONG $0x02b845f6               // testb        $2, $-72(%rbp)
	LONG $0x0308840f; WORD $0x0000 // je           LBB5_117, $776(%rip)

LBB5_72:
	LONG $0xef00c766; BYTE $0xbf // movw         $-16401, (%rax)
	LONG $0xbd0240c6             // movb         $-67, $2(%rax)
	LONG $0xffff37e9; BYTE $0xff // jmp          LBB5_55, $-201(%rip)

LBB5_73:
	LONG $0x02b845f6               // testb        $2, $-72(%rbp)
	LONG $0x02fd840f; WORD $0x0000 // je           LBB5_118, $765(%rip)
	LONG $0x214c8d4f; BYTE $0x04   // leaq         $4(%r9,%r12), %r9
	LONG $0xffffdee9; BYTE $0xff   // jmp          LBB5_72, $-34(%rip)

LBB5_75:
	LONG $0x214c8d4f; BYTE $0x0a // leaq         $10(%r9,%r12), %r9
	WORD $0x294d; BYTE $0xe5     // subq         %r12, %r13
	LONG $0xf6c58349             // addq         $-10, %r13
	LONG $0x00000ce9; BYTE $0x00 // jmp          LBB5_77, $12(%rip)

LBB5_76:
	LONG $0x214c8d4f; BYTE $0x0b // leaq         $11(%r9,%r12), %r9
	WORD $0x294d; BYTE $0xe5     // subq         %r12, %r13
	LONG $0xf5c58349             // addq         $-11, %r13

LBB5_77:
	LONG $0x0ae7c141               // shll         $10, %r15d
	QUAD $0xfca024001f8c8d41       // leal         $-56613888(%r15,%rbx), %ecx
	LONG $0x0000f981; WORD $0x0011 // cmpl         $1114112, %ecx
	LONG $0x001c820f; WORD $0x0000 // jb           LBB5_80, $28(%rip)
	LONG $0x02b845f6               // testb        $2, $-72(%rbp)
	LONG $0x0264840f; WORD $0x0000 // je           LBB5_112, $612(%rip)
	LONG $0xef00c766; BYTE $0xbf   // movw         $-16401, (%rax)
	LONG $0xbd0240c6               // movb         $-67, $2(%rax)
	LONG $0x03c08348               // addq         $3, %rax
	LONG $0xfffed9e9; BYTE $0xff   // jmp          LBB5_57, $-295(%rip)

LBB5_80:
	WORD $0xce89                 // movl         %ecx, %esi
	WORD $0xeec1; BYTE $0x12     // shrl         $18, %esi
	LONG $0xf0ce8040             // orb          $-16, %sil
	WORD $0x8840; BYTE $0x30     // movb         %sil, (%rax)
	WORD $0xce89                 // movl         %ecx, %esi
	WORD $0xeec1; BYTE $0x0c     // shrl         $12, %esi
	LONG $0x3fe68040             // andb         $63, %sil
	LONG $0x80ce8040             // orb          $-128, %sil
	LONG $0x01708840             // movb         %sil, $1(%rax)
	WORD $0xce89                 // movl         %ecx, %esi
	WORD $0xeec1; BYTE $0x06     // shrl         $6, %esi
	LONG $0x3fe68040             // andb         $63, %sil
	LONG $0x80ce8040             // orb          $-128, %sil
	LONG $0x02708840             // movb         %sil, $2(%rax)
	WORD $0xe180; BYTE $0x3f     // andb         $63, %cl
	WORD $0xc980; BYTE $0x80     // orb          $-128, %cl
	WORD $0x4888; BYTE $0x03     // movb         %cl, $3(%rax)
	LONG $0x04c08348             // addq         $4, %rax
	LONG $0xfffe99e9; BYTE $0xff // jmp          LBB5_57, $-359(%rip)

LBB5_81:
	WORD $0x3145; BYTE $0xed // xorl         %r13d, %r13d
	WORD $0x8948; BYTE $0xd0 // movq         %rdx, %rax

LBB5_82:
	WORD $0x014c; BYTE $0xe8 // addq         %r13, %rax
	WORD $0x2948; BYTE $0xd0 // subq         %rdx, %rax

LBB5_83:
	LONG $0x28c48348 // addq         $40, %rsp
	BYTE $0x5b       // popq         %rbx
	WORD $0x5c41     // popq         %r12
	WORD $0x5d41     // popq         %r13
	WORD $0x5e41     // popq         %r14
	WORD $0x5f41     // popq         %r15
	BYTE $0x5d       // popq         %rbp
	BYTE $0xc3       // retq

LBB5_84:
	WORD $0x894c; BYTE $0xca                   // movq         %r9, %rdx
	WORD $0x2948; BYTE $0xfa                   // subq         %rdi, %rdx
	LONG $0xc87d8b48                           // movq         $-56(%rbp), %rdi
	WORD $0x8948; BYTE $0x17                   // movq         %rdx, (%rdi)
	WORD $0x8a41; BYTE $0x09                   // movb         (%r9), %cl
	WORD $0x718d; BYTE $0xd0                   // leal         $-48(%rcx), %esi
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x0afe8040                           // cmpb         $10, %sil
	LONG $0x000f820f; WORD $0x0000             // jb           LBB5_86, $15(%rip)
	WORD $0xe180; BYTE $0xdf                   // andb         $-33, %cl
	WORD $0xc180; BYTE $0xbf                   // addb         $-65, %cl
	WORD $0xf980; BYTE $0x05                   // cmpb         $5, %cl
	LONG $0xffbe870f; WORD $0xffff             // ja           LBB5_83, $-66(%rip)

LBB5_86:
	LONG $0x014a8d48               // leaq         $1(%rdx), %rcx
	WORD $0x8948; BYTE $0x0f       // movq         %rcx, (%rdi)
	LONG $0x01498a41               // movb         $1(%r9), %cl
	WORD $0x718d; BYTE $0xd0       // leal         $-48(%rcx), %esi
	LONG $0x0afe8040               // cmpb         $10, %sil
	LONG $0x000f820f; WORD $0x0000 // jb           LBB5_88, $15(%rip)
	WORD $0xe180; BYTE $0xdf       // andb         $-33, %cl
	WORD $0xc180; BYTE $0xbf       // addb         $-65, %cl
	WORD $0xf980; BYTE $0x05       // cmpb         $5, %cl
	LONG $0xff97870f; WORD $0xffff // ja           LBB5_83, $-105(%rip)

LBB5_88:
	LONG $0x024a8d48               // leaq         $2(%rdx), %rcx
	WORD $0x8948; BYTE $0x0f       // movq         %rcx, (%rdi)
	LONG $0x02498a41               // movb         $2(%r9), %cl
	WORD $0x718d; BYTE $0xd0       // leal         $-48(%rcx), %esi
	LONG $0x0afe8040               // cmpb         $10, %sil
	LONG $0x000f820f; WORD $0x0000 // jb           LBB5_90, $15(%rip)
	WORD $0xe180; BYTE $0xdf       // andb         $-33, %cl
	WORD $0xc180; BYTE $0xbf       // addb         $-65, %cl
	WORD $0xf980; BYTE $0x05       // cmpb         $5, %cl
	LONG $0xff70870f; WORD $0xffff // ja           LBB5_83, $-144(%rip)

LBB5_90:
	LONG $0x034a8d48               // leaq         $3(%rdx), %rcx
	WORD $0x8948; BYTE $0x0f       // movq         %rcx, (%rdi)
	LONG $0x03498a41               // movb         $3(%r9), %cl
	WORD $0x718d; BYTE $0xd0       // leal         $-48(%rcx), %esi
	LONG $0x0afe8040               // cmpb         $10, %sil
	LONG $0x000f820f; WORD $0x0000 // jb           LBB5_92, $15(%rip)
	WORD $0xe180; BYTE $0xdf       // andb         $-33, %cl
	WORD $0xc180; BYTE $0xbf       // addb         $-65, %cl
	WORD $0xf980; BYTE $0x05       // cmpb         $5, %cl
	LONG $0xff49870f; WORD $0xffff // ja           LBB5_83, $-183(%rip)

LBB5_92:
	LONG $0x04c28348             // addq         $4, %rdx
	WORD $0x8948; BYTE $0x17     // movq         %rdx, (%rdi)
	LONG $0xffff3de9; BYTE $0xff // jmp          LBB5_83, $-195(%rip)

LBB5_93:
	WORD $0xf748; BYTE $0xd7                   // notq         %rdi
	WORD $0x0149; BYTE $0xf9                   // addq         %rdi, %r9
	LONG $0xc8458b48                           // movq         $-56(%rbp), %rax
	WORD $0x894c; BYTE $0x08                   // movq         %r9, (%rax)
	LONG $0xfdc0c748; WORD $0xffff; BYTE $0xff // movq         $-3, %rax
	LONG $0xffff24e9; BYTE $0xff               // jmp          LBB5_83, $-220(%rip)

LBB5_94:
	WORD $0xf748; BYTE $0xd7     // notq         %rdi
	WORD $0x0149; BYTE $0xf9     // addq         %rdi, %r9
	LONG $0x0000dae9; BYTE $0x00 // jmp          LBB5_107, $218(%rip)

LBB5_95:
	LONG $0x21748d4b; BYTE $0x04 // leaq         $4(%r9,%r12), %rsi
	LONG $0x000005e9; BYTE $0x00 // jmp          LBB5_97, $5(%rip)

LBB5_96:
	LONG $0x21748d4b; BYTE $0x05 // leaq         $5(%r9,%r12), %rsi

LBB5_97:
	WORD $0x8948; BYTE $0xf2                   // movq         %rsi, %rdx
	WORD $0x2948; BYTE $0xfa                   // subq         %rdi, %rdx
	LONG $0x02c28348                           // addq         $2, %rdx
	LONG $0xc8458b48                           // movq         $-56(%rbp), %rax
	WORD $0x8948; BYTE $0x10                   // movq         %rdx, (%rax)
	WORD $0x4e8a; BYTE $0x02                   // movb         $2(%rsi), %cl
	WORD $0x798d; BYTE $0xd0                   // leal         $-48(%rcx), %edi
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x0aff8040                           // cmpb         $10, %dil
	LONG $0x000f820f; WORD $0x0000             // jb           LBB5_99, $15(%rip)
	WORD $0xe180; BYTE $0xdf                   // andb         $-33, %cl
	WORD $0xc180; BYTE $0xbf                   // addb         $-65, %cl
	WORD $0xf980; BYTE $0x05                   // cmpb         $5, %cl
	LONG $0xfed3870f; WORD $0xffff             // ja           LBB5_83, $-301(%rip)

LBB5_99:
	LONG $0x014a8d48               // leaq         $1(%rdx), %rcx
	LONG $0xc87d8b48               // movq         $-56(%rbp), %rdi
	WORD $0x8948; BYTE $0x0f       // movq         %rcx, (%rdi)
	WORD $0x4e8a; BYTE $0x03       // movb         $3(%rsi), %cl
	WORD $0x798d; BYTE $0xd0       // leal         $-48(%rcx), %edi
	LONG $0x0aff8040               // cmpb         $10, %dil
	LONG $0x000f820f; WORD $0x0000 // jb           LBB5_101, $15(%rip)
	WORD $0xe180; BYTE $0xdf       // andb         $-33, %cl
	WORD $0xc180; BYTE $0xbf       // addb         $-65, %cl
	WORD $0xf980; BYTE $0x05       // cmpb         $5, %cl
	LONG $0xfea9870f; WORD $0xffff // ja           LBB5_83, $-343(%rip)

LBB5_101:
	LONG $0x024a8d48               // leaq         $2(%rdx), %rcx
	LONG $0xc87d8b48               // movq         $-56(%rbp), %rdi
	WORD $0x8948; BYTE $0x0f       // movq         %rcx, (%rdi)
	WORD $0x4e8a; BYTE $0x04       // movb         $4(%rsi), %cl
	WORD $0x798d; BYTE $0xd0       // leal         $-48(%rcx), %edi
	LONG $0x0aff8040               // cmpb         $10, %dil
	LONG $0x000f820f; WORD $0x0000 // jb           LBB5_103, $15(%rip)
	WORD $0xe180; BYTE $0xdf       // andb         $-33, %cl
	WORD $0xc180; BYTE $0xbf       // addb         $-65, %cl
	WORD $0xf980; BYTE $0x05       // cmpb         $5, %cl
	LONG $0xfe7f870f; WORD $0xffff // ja           LBB5_83, $-385(%rip)

LBB5_103:
	LONG $0x034a8d48               // leaq         $3(%rdx), %rcx
	LONG $0xc87d8b48               // movq         $-56(%rbp), %rdi
	WORD $0x8948; BYTE $0x0f       // movq         %rcx, (%rdi)
	WORD $0x4e8a; BYTE $0x05       // movb         $5(%rsi), %cl
	WORD $0x718d; BYTE $0xd0       // leal         $-48(%rcx), %esi
	LONG $0x0afe8040               // cmpb         $10, %sil
	LONG $0x000f820f; WORD $0x0000 // jb           LBB5_105, $15(%rip)
	WORD $0xe180; BYTE $0xdf       // andb         $-33, %cl
	WORD $0xc180; BYTE $0xbf       // addb         $-65, %cl
	WORD $0xf980; BYTE $0x05       // cmpb         $5, %cl
	LONG $0xfe55870f; WORD $0xffff // ja           LBB5_83, $-427(%rip)

LBB5_105:
	LONG $0x04c28348             // addq         $4, %rdx
	LONG $0xc84d8b48             // movq         $-56(%rbp), %rcx
	WORD $0x8948; BYTE $0x11     // movq         %rdx, (%rcx)
	LONG $0xfffe45e9; BYTE $0xff // jmp          LBB5_83, $-443(%rip)

LBB5_106:
	WORD $0x2949; BYTE $0xf9 // subq         %rdi, %r9
	WORD $0xff49; BYTE $0xc1 // incq         %r9

LBB5_107:
	LONG $0xc8458b48                           // movq         $-56(%rbp), %rax
	WORD $0x894c; BYTE $0x08                   // movq         %r9, (%rax)
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0xfffe2ce9; BYTE $0xff               // jmp          LBB5_83, $-468(%rip)

LBB5_108:
	LONG $0x02b845f6               // testb        $2, $-72(%rbp)
	LONG $0x0015840f; WORD $0x0000 // je           LBB5_111, $21(%rip)
	LONG $0xef00c766; BYTE $0xbf   // movw         $-16401, (%rax)
	LONG $0xbd0240c6               // movb         $-67, $2(%rax)
	LONG $0x03c08348               // addq         $3, %rax

LBB5_110:
	WORD $0x3145; BYTE $0xed     // xorl         %r13d, %r13d
	LONG $0xfffe07e9; BYTE $0xff // jmp          LBB5_82, $-505(%rip)

LBB5_111:
	LONG $0xc8458b48                           // movq         $-56(%rbp), %rax
	WORD $0x894c; BYTE $0x18                   // movq         %r11, (%rax)
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	LONG $0xfffdfae9; BYTE $0xff               // jmp          LBB5_83, $-518(%rip)

LBB5_112:
	WORD $0x2949; BYTE $0xf9 // subq         %rdi, %r9
	LONG $0xfcc18349         // addq         $-4, %r9

LBB5_113:
	LONG $0xc8458b48                           // movq         $-56(%rbp), %rax
	WORD $0x894c; BYTE $0x08                   // movq         %r9, (%rax)
	LONG $0xfcc0c748; WORD $0xffff; BYTE $0xff // movq         $-4, %rax
	LONG $0xfffde0e9; BYTE $0xff               // jmp          LBB5_83, $-544(%rip)

LBB5_114:
	LONG $0x21448d4b; BYTE $0x0a // leaq         $10(%r9,%r12), %rax
	LONG $0x000005e9; BYTE $0x00 // jmp          LBB5_116, $5(%rip)

LBB5_115:
	LONG $0x21448d4b; BYTE $0x0b // leaq         $11(%r9,%r12), %rax

LBB5_116:
	WORD $0x2948; BYTE $0xf8                   // subq         %rdi, %rax
	LONG $0xfcc08348                           // addq         $-4, %rax
	LONG $0xc84d8b48                           // movq         $-56(%rbp), %rcx
	WORD $0x8948; BYTE $0x01                   // movq         %rax, (%rcx)
	LONG $0xfcc0c748; WORD $0xffff; BYTE $0xff // movq         $-4, %rax
	LONG $0xfffdb7e9; BYTE $0xff               // jmp          LBB5_83, $-585(%rip)

LBB5_117:
	LONG $0x3a448d49; BYTE $0x04 // leaq         $4(%r10,%rdi), %rax
	WORD $0x2949; BYTE $0xc1     // subq         %rax, %r9
	LONG $0xffffb7e9; BYTE $0xff // jmp          LBB5_113, $-73(%rip)

LBB5_118:
	WORD $0x014d; BYTE $0xe1               // addq         %r12, %r9
	WORD $0x2949; BYTE $0xf9               // subq         %rdi, %r9
	LONG $0xfffface9; BYTE $0xff           // jmp          LBB5_113, $-84(%rip)
	QUAD $0x0000000000000000; WORD $0x0000 // .p2align 4, 0x00

LCPI6_0:
	QUAD $0x2626262626262626; QUAD $0x2626262626262626 // .space 16, '&&&&&&&&&&&&&&&&'

LCPI6_1:
	QUAD $0xe2e2e2e2e2e2e2e2; QUAD $0xe2e2e2e2e2e2e2e2 // .space 16, '\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2\xe2'

LCPI6_2:
	QUAD $0xfdfdfdfdfdfdfdfd; QUAD $0xfdfdfdfdfdfdfdfd // .space 16, '\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd\xfd'

LCPI6_3:
	QUAD $0x3c3c3c3c3c3c3c3c; QUAD $0x3c3c3c3c3c3c3c3c // .space 16, '<<<<<<<<<<<<<<<<'

	// .p2align 4, 0x90
_html_escape:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	LONG $0x10ec8348                           // subq         $16, %rsp
	LONG $0xc84d8948                           // movq         %rcx, $-56(%rbp)
	WORD $0x8949; BYTE $0xd2                   // movq         %rdx, %r10
	LONG $0xd0558948                           // movq         %rdx, $-48(%rbp)
	WORD $0x8948; BYTE $0xf8                   // movq         %rdi, %rax
	WORD $0x8548; BYTE $0xf6                   // testq        %rsi, %rsi
	LONG $0x04618e0f; WORD $0x0000             // jle          LBB6_67, $1121(%rip)
	LONG $0xc8458b48                           // movq         $-56(%rbp), %rax
	WORD $0x8b4c; BYTE $0x08                   // movq         (%rax), %r9
	QUAD $0xffffff89056ff9c5                   // vmovdqa      $-119(%rip), %xmm0  /* LCPI6_0(%rip) */
	QUAD $0xffffff910d6ff9c5                   // vmovdqa      $-111(%rip), %xmm1  /* LCPI6_1(%rip) */
	QUAD $0xffffff99156ff9c5                   // vmovdqa      $-103(%rip), %xmm2  /* LCPI6_2(%rip) */
	QUAD $0xffffffa11d6ff9c5                   // vmovdqa      $-95(%rip), %xmm3  /* LCPI6_3(%rip) */
	LONG $0x0a1d8d4c; WORD $0x00f6; BYTE $0x00 // leaq         $62986(%rip), %r11  /* __HtmlQuoteTab(%rip) */
	WORD $0x8949; BYTE $0xff                   // movq         %rdi, %r15
	LONG $0xd0558b4c                           // movq         $-48(%rbp), %r10
	WORD $0x9090; BYTE $0x90                   // .p2align 4, 0x90

LBB6_2:
	WORD $0x854d; BYTE $0xc9       // testq        %r9, %r9
	LONG $0x043e8e0f; WORD $0x0000 // jle          LBB6_3, $1086(%rip)
	LONG $0x0ffe8348               // cmpq         $15, %rsi
	WORD $0x9f0f; BYTE $0xc3       // setg         %bl
	WORD $0x894d; BYTE $0xcc       // movq         %r9, %r12
	WORD $0x894d; BYTE $0xd0       // movq         %r10, %r8
	WORD $0x8948; BYTE $0xf0       // movq         %rsi, %rax
	WORD $0x894d; BYTE $0xfd       // movq         %r15, %r13
	LONG $0x10f98349               // cmpq         $16, %r9
	LONG $0x008a8c0f; WORD $0x0000 // jl           LBB6_11, $138(%rip)
	LONG $0x10fe8348               // cmpq         $16, %rsi
	LONG $0x00808c0f; WORD $0x0000 // jl           LBB6_11, $128(%rip)
	WORD $0x894d; BYTE $0xfd       // movq         %r15, %r13
	WORD $0x8948; BYTE $0xf2       // movq         %rsi, %rdx
	WORD $0x894d; BYTE $0xd0       // movq         %r10, %r8
	WORD $0x894c; BYTE $0xc9       // movq         %r9, %rcx
	LONG $0x90909090               // .p2align 4, 0x90

LBB6_7:
	LONG $0x6f7ac1c4; WORD $0x0065                                       // vmovdqu      (%r13), %xmm4
	LONG $0xe874d9c5                                                     // vpcmpeqb     %xmm0, %xmm4, %xmm5
	LONG $0xf174d9c5                                                     // vpcmpeqb     %xmm1, %xmm4, %xmm6
	LONG $0xedebc9c5                                                     // vpor         %xmm5, %xmm6, %xmm5
	LONG $0xf2dbd9c5                                                     // vpand        %xmm2, %xmm4, %xmm6
	LONG $0xf374c9c5                                                     // vpcmpeqb     %xmm3, %xmm6, %xmm6
	LONG $0xeeebd1c5                                                     // vpor         %xmm6, %xmm5, %xmm5
	LONG $0x7f7ac1c4; BYTE $0x20                                         // vmovdqu      %xmm4, (%r8)
	LONG $0xc5d7f9c5                                                     // vpmovmskb    %xmm5, %eax
	WORD $0x8566; BYTE $0xc0                                             // testw        %ax, %ax
	LONG $0x0130850f; WORD $0x0000                                       // jne          LBB6_8, $304(%rip)
	LONG $0x10c58349                                                     // addq         $16, %r13
	LONG $0x10c08349                                                     // addq         $16, %r8
	LONG $0xf0428d48                                                     // leaq         $-16(%rdx), %rax
	LONG $0xf0618d4c                                                     // leaq         $-16(%rcx), %r12
	LONG $0x1ffa8348                                                     // cmpq         $31, %rdx
	WORD $0x9f0f; BYTE $0xc3                                             // setg         %bl
	LONG $0x20fa8348                                                     // cmpq         $32, %rdx
	LONG $0x001f8c0f; WORD $0x0000                                       // jl           LBB6_11, $31(%rip)
	WORD $0x8948; BYTE $0xc2                                             // movq         %rax, %rdx
	LONG $0x1ff98348                                                     // cmpq         $31, %rcx
	WORD $0x894c; BYTE $0xe1                                             // movq         %r12, %rcx
	LONG $0xff9f8f0f; WORD $0xffff                                       // jg           LBB6_7, $-97(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB6_11:
	WORD $0xdb84                   // testb        %bl, %bl
	LONG $0x0068840f; WORD $0x0000 // je           LBB6_12, $104(%rip)
	LONG $0x6f7ac1c4; WORD $0x0065 // vmovdqu      (%r13), %xmm4
	LONG $0xe874d9c5               // vpcmpeqb     %xmm0, %xmm4, %xmm5
	LONG $0xf174d9c5               // vpcmpeqb     %xmm1, %xmm4, %xmm6
	LONG $0xedebc9c5               // vpor         %xmm5, %xmm6, %xmm5
	LONG $0xf2dbd9c5               // vpand        %xmm2, %xmm4, %xmm6
	LONG $0xf374c9c5               // vpcmpeqb     %xmm3, %xmm6, %xmm6
	LONG $0xeeebd1c5               // vpor         %xmm6, %xmm5, %xmm5
	LONG $0xc5d7f9c5               // vpmovmskb    %xmm5, %eax
	LONG $0x0100000d; BYTE $0x00   // orl          $65536, %eax
	LONG $0xf0bc0f44               // bsfl         %eax, %r14d
	LONG $0x7ef9e1c4; BYTE $0xe0   // vmovq        %xmm4, %rax
	WORD $0x394d; BYTE $0xf4       // cmpq         %r14, %r12
	LONG $0x00ca8d0f; WORD $0x0000 // jge          LBB6_15, $202(%rip)
	LONG $0x08fc8349               // cmpq         $8, %r12
	LONG $0x00f0820f; WORD $0x0000 // jb           LBB6_26, $240(%rip)
	WORD $0x8949; BYTE $0x00       // movq         %rax, (%r8)
	LONG $0x08758d4d               // leaq         $8(%r13), %r14
	LONG $0x08c08349               // addq         $8, %r8
	LONG $0x24448d49; BYTE $0xf8   // leaq         $-8(%r12), %rax
	LONG $0x04f88348               // cmpq         $4, %rax
	LONG $0x00e68d0f; WORD $0x0000 // jge          LBB6_29, $230(%rip)
	LONG $0x0000f3e9; BYTE $0x00   // jmp          LBB6_30, $243(%rip)
	LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB6_12:
	WORD $0x854d; BYTE $0xe4                           // testq        %r12, %r12
	LONG $0x01148e0f; WORD $0x0000                     // jle          LBB6_13, $276(%rip)
	WORD $0x8948; BYTE $0xc1                           // movq         %rax, %rcx
	WORD $0x8548; BYTE $0xc0                           // testq        %rax, %rax
	LONG $0x010b8e0f; WORD $0x0000                     // jle          LBB6_40, $267(%rip)
	QUAD $0x9090909090909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB6_36:
	LONG $0x55b60f41; BYTE $0x00           // movzbl       (%r13), %edx
	LONG $0x3efa8348                       // cmpq         $62, %rdx
	LONG $0x0014870f; WORD $0x0000         // ja           LBB6_37, $20(%rip)
	QUAD $0x004000000000b948; WORD $0x5000 // movabsq      $5764607797912141824, %rcx
	LONG $0xd1a30f48                       // btq          %rdx, %rcx
	LONG $0x0080820f; WORD $0x0000         // jb           LBB6_42, $128(%rip)

LBB6_37:
	WORD $0xfa80; BYTE $0xe2       // cmpb         $-30, %dl
	LONG $0x0077840f; WORD $0x0000 // je           LBB6_42, $119(%rip)
	LONG $0xff488d48               // leaq         $-1(%rax), %rcx
	WORD $0xff49; BYTE $0xc5       // incq         %r13
	WORD $0x8841; BYTE $0x10       // movb         %dl, (%r8)
	LONG $0x02f88348               // cmpq         $2, %rax
	LONG $0x00c08c0f; WORD $0x0000 // jl           LBB6_40, $192(%rip)
	LONG $0x24548d49; BYTE $0xff   // leaq         $-1(%r12), %rdx
	WORD $0xff49; BYTE $0xc0       // incq         %r8
	WORD $0x8948; BYTE $0xc8       // movq         %rcx, %rax
	LONG $0x01fc8349               // cmpq         $1, %r12
	WORD $0x8949; BYTE $0xd4       // movq         %rdx, %r12
	LONG $0xffa88f0f; WORD $0xffff // jg           LBB6_36, $-88(%rip)
	LONG $0x0000a3e9; BYTE $0x00   // jmp          LBB6_40, $163(%rip)
	WORD $0x9090; BYTE $0x90       // .p2align 4, 0x90

LBB6_8:
	WORD $0xb70f; BYTE $0xc0       // movzwl       %ax, %eax
	WORD $0x294d; BYTE $0xfd       // subq         %r15, %r13
	LONG $0xe0bc0f44               // bsfl         %eax, %r12d
	WORD $0x014d; BYTE $0xec       // addq         %r13, %r12
	WORD $0x854d; BYTE $0xe4       // testq        %r12, %r12
	LONG $0x00f3890f; WORD $0x0000 // jns          LBB6_46, $243(%rip)
	LONG $0x000249e9; BYTE $0x00   // jmp          LBB6_45, $585(%rip)

LBB6_15:
	LONG $0x08fe8341               // cmpl         $8, %r14d
	LONG $0x0095820f; WORD $0x0000 // jb           LBB6_16, $149(%rip)
	WORD $0x8949; BYTE $0x00       // movq         %rax, (%r8)
	LONG $0x08658d4d               // leaq         $8(%r13), %r12
	LONG $0x08c08349               // addq         $8, %r8
	LONG $0xf8468d49               // leaq         $-8(%r14), %rax
	LONG $0x04f88348               // cmpq         $4, %rax
	LONG $0x008c8d0f; WORD $0x0000 // jge          LBB6_19, $140(%rip)
	LONG $0x00009ae9; BYTE $0x00   // jmp          LBB6_20, $154(%rip)

LBB6_42:
	WORD $0x294d; BYTE $0xfd     // subq         %r15, %r13
	LONG $0x0000b2e9; BYTE $0x00 // jmp          LBB6_43, $178(%rip)

LBB6_26:
	WORD $0x894d; BYTE $0xee       // movq         %r13, %r14
	WORD $0x894c; BYTE $0xe0       // movq         %r12, %rax
	LONG $0x04f88348               // cmpq         $4, %rax
	LONG $0x00128c0f; WORD $0x0000 // jl           LBB6_30, $18(%rip)

LBB6_29:
	WORD $0x8b41; BYTE $0x0e // movl         (%r14), %ecx
	WORD $0x8941; BYTE $0x08 // movl         %ecx, (%r8)
	LONG $0x04c68349         // addq         $4, %r14
	LONG $0x04c08349         // addq         $4, %r8
	LONG $0xfcc08348         // addq         $-4, %rax

LBB6_30:
	LONG $0x02f88348               // cmpq         $2, %rax
	LONG $0x015b830f; WORD $0x0000 // jae          LBB6_31, $347(%rip)
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x0006840f; WORD $0x0000 // je           LBB6_34, $6(%rip)

LBB6_33:
	WORD $0x8a41; BYTE $0x06 // movb         (%r14), %al
	WORD $0x8841; BYTE $0x00 // movb         %al, (%r8)

LBB6_34:
	WORD $0x294d; BYTE $0xfc       // subq         %r15, %r12
	WORD $0x014d; BYTE $0xec       // addq         %r13, %r12
	WORD $0xf749; BYTE $0xd4       // notq         %r12
	WORD $0x854d; BYTE $0xe4       // testq        %r12, %r12
	LONG $0x0071890f; WORD $0x0000 // jns          LBB6_46, $113(%rip)
	LONG $0x0001c7e9; BYTE $0x00   // jmp          LBB6_45, $455(%rip)

LBB6_13:
	WORD $0x8948; BYTE $0xc1 // movq         %rax, %rcx

LBB6_40:
	WORD $0x294d; BYTE $0xfd       // subq         %r15, %r13
	WORD $0xf748; BYTE $0xd9       // negq         %rcx
	WORD $0x194d; BYTE $0xe4       // sbbq         %r12, %r12
	WORD $0x314d; BYTE $0xec       // xorq         %r13, %r12
	WORD $0x854d; BYTE $0xe4       // testq        %r12, %r12
	LONG $0x0054890f; WORD $0x0000 // jns          LBB6_46, $84(%rip)
	LONG $0x0001aae9; BYTE $0x00   // jmp          LBB6_45, $426(%rip)

LBB6_16:
	WORD $0x894d; BYTE $0xec       // movq         %r13, %r12
	WORD $0x894c; BYTE $0xf0       // movq         %r14, %rax
	LONG $0x04f88348               // cmpq         $4, %rax
	LONG $0x00138c0f; WORD $0x0000 // jl           LBB6_20, $19(%rip)

LBB6_19:
	LONG $0x240c8b41         // movl         (%r12), %ecx
	WORD $0x8941; BYTE $0x08 // movl         %ecx, (%r8)
	LONG $0x04c48349         // addq         $4, %r12
	LONG $0x04c08349         // addq         $4, %r8
	LONG $0xfcc08348         // addq         $-4, %rax

LBB6_20:
	LONG $0x02f88348               // cmpq         $2, %rax
	LONG $0x010d830f; WORD $0x0000 // jae          LBB6_21, $269(%rip)
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x0007840f; WORD $0x0000 // je           LBB6_24, $7(%rip)

LBB6_23:
	LONG $0x24048a41         // movb         (%r12), %al
	WORD $0x8841; BYTE $0x00 // movb         %al, (%r8)

LBB6_24:
	WORD $0x294d; BYTE $0xfd // subq         %r15, %r13
	WORD $0x014d; BYTE $0xf5 // addq         %r14, %r13

LBB6_43:
	WORD $0x894d; BYTE $0xec       // movq         %r13, %r12
	WORD $0x854d; BYTE $0xe4       // testq        %r12, %r12
	LONG $0x015b880f; WORD $0x0000 // js           LBB6_45, $347(%rip)

LBB6_46:
	WORD $0x014d; BYTE $0xe7       // addq         %r12, %r15
	WORD $0x014d; BYTE $0xe2       // addq         %r12, %r10
	WORD $0x294c; BYTE $0xe6       // subq         %r12, %rsi
	LONG $0x016e8e0f; WORD $0x0000 // jle          LBB6_47, $366(%rip)
	WORD $0x294d; BYTE $0xe1       // subq         %r12, %r9
	WORD $0x8a41; BYTE $0x0f       // movb         (%r15), %cl
	WORD $0xf980; BYTE $0xe2       // cmpb         $-30, %cl
	LONG $0x00f0840f; WORD $0x0000 // je           LBB6_50, $240(%rip)
	WORD $0x894c; BYTE $0xf8       // movq         %r15, %rax

LBB6_54:
	WORD $0xb60f; BYTE $0xd1               // movzbl       %cl, %edx
	LONG $0x04e2c148                       // shlq         $4, %rdx
	LONG $0x1a0c8b4a                       // movq         (%rdx,%r11), %rcx
	WORD $0x634c; BYTE $0xe1               // movslq       %ecx, %r12
	WORD $0x294d; BYTE $0xe1               // subq         %r12, %r9
	LONG $0x015b8c0f; WORD $0x0000         // jl           LBB6_55, $347(%rip)
	LONG $0x20e1c148                       // shlq         $32, %rcx
	LONG $0x1a748d4e; BYTE $0x08           // leaq         $8(%rdx,%r11), %r14
	QUAD $0x000300000001bb48; WORD $0x0000 // movabsq      $12884901889, %rbx
	WORD $0x3948; BYTE $0xd9               // cmpq         %rbx, %rcx
	LONG $0x00238c0f; WORD $0x0000         // jl           LBB6_59, $35(%rip)
	WORD $0x8b41; BYTE $0x0e               // movl         (%r14), %ecx
	WORD $0x8941; BYTE $0x0a               // movl         %ecx, (%r10)
	LONG $0x1a748d4e; BYTE $0x0c           // leaq         $12(%rdx,%r11), %r14
	LONG $0x04428d4d                       // leaq         $4(%r10), %r8
	LONG $0x24548d49; BYTE $0xfc           // leaq         $-4(%r12), %rdx
	LONG $0x02fa8348                       // cmpq         $2, %rdx
	LONG $0x0015830f; WORD $0x0000         // jae          LBB6_62, $21(%rip)
	LONG $0x000024e9; BYTE $0x00           // jmp          LBB6_63, $36(%rip)

	// .p2align 4, 0x90
LBB6_59:
	WORD $0x894d; BYTE $0xd0       // movq         %r10, %r8
	WORD $0x894c; BYTE $0xe2       // movq         %r12, %rdx
	LONG $0x02fa8348               // cmpq         $2, %rdx
	LONG $0x0014820f; WORD $0x0000 // jb           LBB6_63, $20(%rip)

LBB6_62:
	LONG $0x0eb70f41 // movzwl       (%r14), %ecx
	LONG $0x08894166 // movw         %cx, (%r8)
	LONG $0x02c68349 // addq         $2, %r14
	LONG $0x02c08349 // addq         $2, %r8
	LONG $0xfec28348 // addq         $-2, %rdx

LBB6_63:
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0x0006840f; WORD $0x0000 // je           LBB6_65, $6(%rip)
	WORD $0x8a41; BYTE $0x0e       // movb         (%r14), %cl
	WORD $0x8841; BYTE $0x08       // movb         %cl, (%r8)

LBB6_65:
	WORD $0x014d; BYTE $0xe2 // addq         %r12, %r10

LBB6_66:
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	LONG $0xff4e8d48               // leaq         $-1(%rsi), %rcx
	WORD $0x8949; BYTE $0xc7       // movq         %rax, %r15
	LONG $0x01fe8348               // cmpq         $1, %rsi
	WORD $0x8948; BYTE $0xce       // movq         %rcx, %rsi
	LONG $0xfc938f0f; WORD $0xffff // jg           LBB6_2, $-877(%rip)
	LONG $0x0000b7e9; BYTE $0x00   // jmp          LBB6_67, $183(%rip)

LBB6_31:
	LONG $0x0eb70f41               // movzwl       (%r14), %ecx
	LONG $0x08894166               // movw         %cx, (%r8)
	LONG $0x02c68349               // addq         $2, %r14
	LONG $0x02c08349               // addq         $2, %r8
	LONG $0xfec08348               // addq         $-2, %rax
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0xfe91850f; WORD $0xffff // jne          LBB6_33, $-367(%rip)
	LONG $0xfffe92e9; BYTE $0xff   // jmp          LBB6_34, $-366(%rip)

LBB6_21:
	LONG $0x0cb70f41; BYTE $0x24   // movzwl       (%r12), %ecx
	LONG $0x08894166               // movw         %cx, (%r8)
	LONG $0x02c48349               // addq         $2, %r12
	LONG $0x02c08349               // addq         $2, %r8
	LONG $0xfec08348               // addq         $-2, %rax
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0xfede850f; WORD $0xffff // jne          LBB6_23, $-290(%rip)
	LONG $0xfffee0e9; BYTE $0xff   // jmp          LBB6_24, $-288(%rip)

LBB6_50:
	LONG $0x03fe8348               // cmpq         $3, %rsi
	LONG $0x00288c0f; WORD $0x0000 // jl           LBB6_56, $40(%rip)
	LONG $0x017f8041; BYTE $0x80   // cmpb         $-128, $1(%r15)
	LONG $0x001d850f; WORD $0x0000 // jne          LBB6_56, $29(%rip)
	LONG $0x024f8a41               // movb         $2(%r15), %cl
	WORD $0xc889                   // movl         %ecx, %eax
	WORD $0xfe24                   // andb         $-2, %al
	WORD $0xa83c                   // cmpb         $-88, %al
	LONG $0x000d850f; WORD $0x0000 // jne          LBB6_56, $13(%rip)
	LONG $0x02478d49               // leaq         $2(%r15), %rax
	LONG $0xfec68348               // addq         $-2, %rsi
	LONG $0xfffee1e9; BYTE $0xff   // jmp          LBB6_54, $-287(%rip)

LBB6_56:
	WORD $0x854d; BYTE $0xc9       // testq        %r9, %r9
	LONG $0x00558e0f; WORD $0x0000 // jle          LBB6_3, $85(%rip)
	LONG $0xe202c641               // movb         $-30, (%r10)
	WORD $0xff49; BYTE $0xc2       // incq         %r10
	WORD $0xff49; BYTE $0xc9       // decq         %r9
	WORD $0x894c; BYTE $0xf8       // movq         %r15, %rax
	LONG $0xffff52e9; BYTE $0xff   // jmp          LBB6_66, $-174(%rip)

LBB6_45:
	LONG $0xd0552b4c             // subq         $-48(%rbp), %r10
	WORD $0x894c; BYTE $0xe0     // movq         %r12, %rax
	WORD $0xf748; BYTE $0xd0     // notq         %rax
	WORD $0x014c; BYTE $0xd0     // addq         %r10, %rax
	LONG $0xc84d8b48             // movq         $-56(%rbp), %rcx
	WORD $0x8948; BYTE $0x01     // movq         %rax, (%rcx)
	WORD $0x294c; BYTE $0xff     // subq         %r15, %rdi
	WORD $0x014c; BYTE $0xe7     // addq         %r12, %rdi
	WORD $0x8948; BYTE $0xf8     // movq         %rdi, %rax
	LONG $0x00002ae9; BYTE $0x00 // jmp          LBB6_68, $42(%rip)

LBB6_47:
	WORD $0x894c; BYTE $0xf8 // movq         %r15, %rax

LBB6_67:
	LONG $0xd0552b4c             // subq         $-48(%rbp), %r10
	LONG $0xc84d8b48             // movq         $-56(%rbp), %rcx
	WORD $0x894c; BYTE $0x11     // movq         %r10, (%rcx)
	WORD $0x2948; BYTE $0xf8     // subq         %rdi, %rax
	LONG $0x000014e9; BYTE $0x00 // jmp          LBB6_68, $20(%rip)

LBB6_55:
	LONG $0xd0552b4c         // subq         $-48(%rbp), %r10
	LONG $0xc8458b48         // movq         $-56(%rbp), %rax
	WORD $0x894c; BYTE $0x10 // movq         %r10, (%rax)

LBB6_3:
	WORD $0xf749; BYTE $0xd7 // notq         %r15
	WORD $0x0149; BYTE $0xff // addq         %rdi, %r15
	WORD $0x894c; BYTE $0xf8 // movq         %r15, %rax

LBB6_68:
	LONG $0x10c48348 // addq         $16, %rsp
	BYTE $0x5b       // popq         %rbx
	WORD $0x5c41     // popq         %r12
	WORD $0x5d41     // popq         %r13
	WORD $0x5e41     // popq         %r14
	WORD $0x5f41     // popq         %r15
	BYTE $0x5d       // popq         %rbp
	BYTE $0xc3       // retq
	BYTE $0x00       // .p2align 4, 0x00

LCPI7_0:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI7_1:
	QUAD $0x0909090909090909; QUAD $0x0909090909090909 // .space 16, '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'

LCPI7_2:
	QUAD $0x0a0a0a0a0a0a0a0a; QUAD $0x0a0a0a0a0a0a0a0a // .space 16, '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'

LCPI7_3:
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'

	// .p2align 4, 0x90
_value:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0x5741                   // pushq        %r15
	WORD $0x5641                   // pushq        %r14
	BYTE $0x53                     // pushq        %rbx
	LONG $0x18ec8348               // subq         $24, %rsp
	WORD $0x8949; BYTE $0xce       // movq         %rcx, %r14
	LONG $0xe0558948               // movq         %rdx, $-32(%rbp)
	LONG $0xd07d8948               // movq         %rdi, $-48(%rbp)
	LONG $0xd8758948               // movq         %rsi, $-40(%rbp)
	WORD $0x3948; BYTE $0xf2       // cmpq         %rsi, %rdx
	LONG $0x0028830f; WORD $0x0000 // jae          LBB7_5, $40(%rip)
	WORD $0x0c8a; BYTE $0x17       // movb         (%rdi,%rdx), %cl
	WORD $0xf980; BYTE $0x0d       // cmpb         $13, %cl
	LONG $0x001c840f; WORD $0x0000 // je           LBB7_5, $28(%rip)
	WORD $0xf980; BYTE $0x20       // cmpb         $32, %cl
	LONG $0x0013840f; WORD $0x0000 // je           LBB7_5, $19(%rip)
	WORD $0x418d; BYTE $0xf7       // leal         $-9(%rcx), %eax
	WORD $0x013c                   // cmpb         $1, %al
	LONG $0x0008860f; WORD $0x0000 // jbe          LBB7_5, $8(%rip)
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	LONG $0x000219e9; BYTE $0x00   // jmp          LBB7_41, $537(%rip)

LBB7_5:
	LONG $0x01428d48               // leaq         $1(%rdx), %rax
	WORD $0x3948; BYTE $0xf0       // cmpq         %rsi, %rax
	LONG $0x0021830f; WORD $0x0000 // jae          LBB7_9, $33(%rip)
	WORD $0x0c8a; BYTE $0x07       // movb         (%rdi,%rax), %cl
	WORD $0xf980; BYTE $0x0d       // cmpb         $13, %cl
	LONG $0x0015840f; WORD $0x0000 // je           LBB7_9, $21(%rip)
	WORD $0xf980; BYTE $0x20       // cmpb         $32, %cl
	LONG $0x000c840f; WORD $0x0000 // je           LBB7_9, $12(%rip)
	WORD $0x598d; BYTE $0xf7       // leal         $-9(%rcx), %ebx
	WORD $0xfb80; BYTE $0x01       // cmpb         $1, %bl
	LONG $0x01eb870f; WORD $0x0000 // ja           LBB7_41, $491(%rip)

LBB7_9:
	LONG $0x02428d48               // leaq         $2(%rdx), %rax
	WORD $0x3948; BYTE $0xf0       // cmpq         %rsi, %rax
	LONG $0x0021830f; WORD $0x0000 // jae          LBB7_13, $33(%rip)
	WORD $0x0c8a; BYTE $0x07       // movb         (%rdi,%rax), %cl
	WORD $0xf980; BYTE $0x0d       // cmpb         $13, %cl
	LONG $0x0015840f; WORD $0x0000 // je           LBB7_13, $21(%rip)
	WORD $0xf980; BYTE $0x20       // cmpb         $32, %cl
	LONG $0x000c840f; WORD $0x0000 // je           LBB7_13, $12(%rip)
	WORD $0x598d; BYTE $0xf7       // leal         $-9(%rcx), %ebx
	WORD $0xfb80; BYTE $0x01       // cmpb         $1, %bl
	LONG $0x01bd870f; WORD $0x0000 // ja           LBB7_41, $445(%rip)

LBB7_13:
	LONG $0x03428d48               // leaq         $3(%rdx), %rax
	WORD $0x3948; BYTE $0xf0       // cmpq         %rsi, %rax
	LONG $0x0021830f; WORD $0x0000 // jae          LBB7_17, $33(%rip)
	WORD $0x0c8a; BYTE $0x07       // movb         (%rdi,%rax), %cl
	WORD $0xf980; BYTE $0x0d       // cmpb         $13, %cl
	LONG $0x0015840f; WORD $0x0000 // je           LBB7_17, $21(%rip)
	WORD $0xf980; BYTE $0x20       // cmpb         $32, %cl
	LONG $0x000c840f; WORD $0x0000 // je           LBB7_17, $12(%rip)
	WORD $0x598d; BYTE $0xf7       // leal         $-9(%rcx), %ebx
	WORD $0xfb80; BYTE $0x01       // cmpb         $1, %bl
	LONG $0x018f870f; WORD $0x0000 // ja           LBB7_41, $399(%rip)

LBB7_17:
	LONG $0x045a8d48                       // leaq         $4(%rdx), %rbx
	WORD $0x3948; BYTE $0xf3               // cmpq         %rsi, %rbx
	LONG $0x0140830f; WORD $0x0000         // jae          LBB7_37, $320(%rip)
	LONG $0x1f048d48                       // leaq         (%rdi,%rbx), %rax
	WORD $0x8948; BYTE $0xf1               // movq         %rsi, %rcx
	WORD $0x2948; BYTE $0xd9               // subq         %rbx, %rcx
	LONG $0x0072840f; WORD $0x0000         // je           LBB7_26, $114(%rip)
	WORD $0xc389                           // movl         %eax, %ebx
	WORD $0xe383; BYTE $0x0f               // andl         $15, %ebx
	WORD $0x8548; BYTE $0xdb               // testq        %rbx, %rbx
	LONG $0x0064840f; WORD $0x0000         // je           LBB7_26, $100(%rip)
	LONG $0x173c8d4c                       // leaq         (%rdi,%rdx), %r15
	WORD $0x8948; BYTE $0xf1               // movq         %rsi, %rcx
	WORD $0x2948; BYTE $0xd1               // subq         %rdx, %rcx
	LONG $0xfb518d4c                       // leaq         $-5(%rcx), %r10
	WORD $0xdb31                           // xorl         %ebx, %ebx
	QUAD $0x000100002600b949; WORD $0x0000 // movabsq      $4294977024, %r9
	LONG $0x90909090                       // .p2align 4, 0x90

LBB7_21:
	LONG $0x44be0f41; WORD $0x041f // movsbl       $4(%r15,%rbx), %eax
	WORD $0xf883; BYTE $0x20       // cmpl         $32, %eax
	LONG $0x011d870f; WORD $0x0000 // ja           LBB7_39, $285(%rip)
	LONG $0xc1a30f49               // btq          %rax, %r9
	LONG $0x0113830f; WORD $0x0000 // jae          LBB7_39, $275(%rip)
	LONG $0x015b8d4c               // leaq         $1(%rbx), %r11
	WORD $0x3949; BYTE $0xda       // cmpq         %rbx, %r10
	LONG $0x0014840f; WORD $0x0000 // je           LBB7_25, $20(%rip)
	LONG $0x1f448d49; BYTE $0x05   // leaq         $5(%r15,%rbx), %rax
	WORD $0xe083; BYTE $0x0f       // andl         $15, %eax
	WORD $0x894c; BYTE $0xdb       // movq         %r11, %rbx
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0xffc6850f; WORD $0xffff // jne          LBB7_21, $-58(%rip)

LBB7_25:
	LONG $0x3b448d4b; BYTE $0x04 // leaq         $4(%r11,%r15), %rax
	WORD $0x294c; BYTE $0xd9     // subq         %r11, %rcx
	LONG $0xfcc18348             // addq         $-4, %rcx

LBB7_26:
	LONG $0x10f98348               // cmpq         $16, %rcx
	LONG $0x0060820f; WORD $0x0000 // jb           LBB7_30, $96(%rip)
	QUAD $0xfffffe48056ff9c5       // vmovdqa      $-440(%rip), %xmm0  /* LCPI7_0(%rip) */
	QUAD $0xfffffe500d6ff9c5       // vmovdqa      $-432(%rip), %xmm1  /* LCPI7_1(%rip) */
	QUAD $0xfffffe58156ff9c5       // vmovdqa      $-424(%rip), %xmm2  /* LCPI7_2(%rip) */
	QUAD $0xfffffe601d6ff9c5       // vmovdqa      $-416(%rip), %xmm3  /* LCPI7_3(%rip) */

	// .p2align 4, 0x90
LBB7_28:
	LONG $0x206ff9c5               // vmovdqa      (%rax), %xmm4
	LONG $0xe874d9c5               // vpcmpeqb     %xmm0, %xmm4, %xmm5
	LONG $0xf174d9c5               // vpcmpeqb     %xmm1, %xmm4, %xmm6
	LONG $0xeeebd1c5               // vpor         %xmm6, %xmm5, %xmm5
	LONG $0xf274d9c5               // vpcmpeqb     %xmm2, %xmm4, %xmm6
	LONG $0xe374d9c5               // vpcmpeqb     %xmm3, %xmm4, %xmm4
	LONG $0xe6ebd9c5               // vpor         %xmm6, %xmm4, %xmm4
	LONG $0xe5ebd9c5               // vpor         %xmm5, %xmm4, %xmm4
	LONG $0xdcd7f9c5               // vpmovmskb    %xmm4, %ebx
	LONG $0xfffb8366               // cmpw         $-1, %bx
	LONG $0x0072850f; WORD $0x0000 // jne          LBB7_38, $114(%rip)
	LONG $0x10c08348               // addq         $16, %rax
	LONG $0xf0c18348               // addq         $-16, %rcx
	LONG $0x0ff98348               // cmpq         $15, %rcx
	LONG $0xffc0870f; WORD $0xffff // ja           LBB7_28, $-64(%rip)

LBB7_30:
	WORD $0x8548; BYTE $0xc9               // testq        %rcx, %rcx
	LONG $0x003a840f; WORD $0x0000         // je           LBB7_36, $58(%rip)
	LONG $0x080c8d4c                       // leaq         (%rax,%rcx), %r9
	WORD $0xff48; BYTE $0xc0               // incq         %rax
	QUAD $0x000100002600ba49; WORD $0x0000 // movabsq      $4294977024, %r10

LBB7_32:
	LONG $0xff58be0f               // movsbl       $-1(%rax), %ebx
	WORD $0xfb83; BYTE $0x20       // cmpl         $32, %ebx
	LONG $0x031a870f; WORD $0x0000 // ja           LBB7_83, $794(%rip)
	LONG $0xdaa30f49               // btq          %rbx, %r10
	LONG $0x0310830f; WORD $0x0000 // jae          LBB7_83, $784(%rip)
	WORD $0xff48; BYTE $0xc9       // decq         %rcx
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0xffda850f; WORD $0xffff // jne          LBB7_32, $-38(%rip)
	WORD $0x894c; BYTE $0xc8       // movq         %r9, %rax

LBB7_36:
	WORD $0x2948; BYTE $0xf8       // subq         %rdi, %rax
	WORD $0x3948; BYTE $0xf0       // cmpq         %rsi, %rax
	LONG $0x0044820f; WORD $0x0000 // jb           LBB7_40, $68(%rip)
	LONG $0x0002ffe9; BYTE $0x00   // jmp          LBB7_84, $767(%rip)

LBB7_37:
	LONG $0xe05d8948             // movq         %rbx, $-32(%rbp)
	WORD $0x8948; BYTE $0xda     // movq         %rbx, %rdx
	LONG $0x0002f3e9; BYTE $0x00 // jmp          LBB7_84, $755(%rip)

LBB7_38:
	WORD $0xb70f; BYTE $0xcb       // movzwl       %bx, %ecx
	WORD $0x2948; BYTE $0xf8       // subq         %rdi, %rax
	WORD $0xd1f7                   // notl         %ecx
	WORD $0xbc0f; BYTE $0xc9       // bsfl         %ecx, %ecx
	WORD $0x0148; BYTE $0xc8       // addq         %rcx, %rax
	WORD $0x3948; BYTE $0xf0       // cmpq         %rsi, %rax
	LONG $0x001c820f; WORD $0x0000 // jb           LBB7_40, $28(%rip)
	LONG $0x0002d7e9; BYTE $0x00   // jmp          LBB7_84, $727(%rip)

LBB7_39:
	WORD $0x0149; BYTE $0xdf       // addq         %rbx, %r15
	WORD $0x8948; BYTE $0xf8       // movq         %rdi, %rax
	WORD $0xf748; BYTE $0xd0       // notq         %rax
	LONG $0x38448d4a; BYTE $0x05   // leaq         $5(%rax,%r15), %rax
	WORD $0x3948; BYTE $0xf0       // cmpq         %rsi, %rax
	LONG $0x02c0830f; WORD $0x0000 // jae          LBB7_84, $704(%rip)

LBB7_40:
	WORD $0x0c8a; BYTE $0x07 // movb         (%rdi,%rax), %cl

LBB7_41:
	LONG $0x01508d48                           // leaq         $1(%rax), %rdx
	LONG $0xe0558948                           // movq         %rdx, $-32(%rbp)
	WORD $0xbe0f; BYTE $0xc9                   // movsbl       %cl, %ecx
	WORD $0xf983; BYTE $0x7d                   // cmpl         $125, %ecx
	LONG $0x0065870f; WORD $0x0000             // ja           LBB7_48, $101(%rip)
	LONG $0xc31d8d48; WORD $0x0002; BYTE $0x00 // leaq         $707(%rip), %rbx  /* LJTI7_0(%rip) */
	LONG $0x8b0c6348                           // movslq       (%rbx,%rcx,4), %rcx
	WORD $0x0148; BYTE $0xd9                   // addq         %rbx, %rcx
	JMP  CX

LBB7_43:
	LONG $0xe0458948               // movq         %rax, $-32(%rbp)
	LONG $0xd07d8d48               // leaq         $-48(%rbp), %rdi
	LONG $0xe0758d48               // leaq         $-32(%rbp), %rsi
	LONG $0x02c0f641               // testb        $2, %r8b
	LONG $0x0011850f; WORD $0x0000 // jne          LBB7_45, $17(%rip)
	WORD $0x894c; BYTE $0xf2       // movq         %r14, %rdx
	LONG $0x000d58e8; BYTE $0x00   // callq        _vnumber, $3416(%rip)
	LONG $0xe0458b48               // movq         $-32(%rbp), %rax
	LONG $0x00027ce9; BYTE $0x00   // jmp          LBB7_86, $636(%rip)

LBB7_45:
	LONG $0x00538ae8; BYTE $0x00               // callq        _skip_number, $21386(%rip)
	WORD $0x8548; BYTE $0xc0                   // testq        %rax, %rax
	LONG $0x0014880f; WORD $0x0000             // js           LBB7_47, $20(%rip)
	LONG $0x0806c749; WORD $0x0000; BYTE $0x00 // movq         $8, (%r14)
	LONG $0x18468949                           // movq         %rax, $24(%r14)
	LONG $0xe0458b48                           // movq         $-32(%rbp), %rax
	LONG $0x00025ae9; BYTE $0x00               // jmp          LBB7_86, $602(%rip)

LBB7_47:
	WORD $0x8949; BYTE $0x06     // movq         %rax, (%r14)
	LONG $0xe0458b48             // movq         $-32(%rbp), %rax
	LONG $0x00024ee9; BYTE $0x00 // jmp          LBB7_86, $590(%rip)

LBB7_48:
	LONG $0xfe06c749; WORD $0xffff; BYTE $0xff // movq         $-2, (%r14)
	LONG $0x000242e9; BYTE $0x00               // jmp          LBB7_86, $578(%rip)

LBB7_49:
	LONG $0xd07d8d48             // leaq         $-48(%rbp), %rdi
	LONG $0xe0758d48             // leaq         $-32(%rbp), %rsi
	WORD $0x894c; BYTE $0xf2     // movq         %r14, %rdx
	WORD $0x894c; BYTE $0xc1     // movq         %r8, %rcx
	LONG $0x000472e8; BYTE $0x00 // callq        _vstring, $1138(%rip)
	LONG $0xe0458b48             // movq         $-32(%rbp), %rax
	LONG $0x000226e9; BYTE $0x00 // jmp          LBB7_86, $550(%rip)

LBB7_50:
	WORD $0x8545; BYTE $0xc0                   // testl        %r8d, %r8d
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x00000bb9; BYTE $0x00               // movl         $11, %ecx
	LONG $0x0000a5e9; BYTE $0x00               // jmp          LBB7_61, $165(%rip)

LBB7_51:
	WORD $0x8545; BYTE $0xc0                   // testl        %r8d, %r8d
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x00000ab9; BYTE $0x00               // movl         $10, %ecx
	LONG $0x000091e9; BYTE $0x00               // jmp          LBB7_61, $145(%rip)

LBB7_52:
	LONG $0x0506c749; WORD $0x0000; BYTE $0x00 // movq         $5, (%r14)
	LONG $0x0001efe9; BYTE $0x00               // jmp          LBB7_85, $495(%rip)

LBB7_53:
	LONG $0xfd4e8d48               // leaq         $-3(%rsi), %rcx
	WORD $0x3948; BYTE $0xc8       // cmpq         %rcx, %rax
	LONG $0x00c2830f; WORD $0x0000 // jae          LBB7_65, $194(%rip)
	WORD $0x148b; BYTE $0x07       // movl         (%rdi,%rax), %edx
	LONG $0x756efa81; WORD $0x6c6c // cmpl         $1819047278, %edx
	LONG $0x00cf850f; WORD $0x0000 // jne          LBB7_67, $207(%rip)
	LONG $0x04c08348               // addq         $4, %rax
	LONG $0xe0458948               // movq         %rax, $-32(%rbp)
	LONG $0x000002b9; BYTE $0x00   // movl         $2, %ecx
	WORD $0x8948; BYTE $0xc6       // movq         %rax, %rsi
	LONG $0x00019ae9; BYTE $0x00   // jmp          LBB7_93, $410(%rip)

LBB7_56:
	LONG $0xfd4e8d48               // leaq         $-3(%rsi), %rcx
	WORD $0x3948; BYTE $0xc8       // cmpq         %rcx, %rax
	LONG $0x0091830f; WORD $0x0000 // jae          LBB7_65, $145(%rip)
	WORD $0x148b; BYTE $0x07       // movl         (%rdi,%rax), %edx
	LONG $0x7274fa81; WORD $0x6575 // cmpl         $1702195828, %edx
	LONG $0x00de850f; WORD $0x0000 // jne          LBB7_71, $222(%rip)
	LONG $0x04c08348               // addq         $4, %rax
	LONG $0xe0458948               // movq         %rax, $-32(%rbp)
	LONG $0x000003b9; BYTE $0x00   // movl         $3, %ecx
	WORD $0x8948; BYTE $0xc6       // movq         %rax, %rsi
	LONG $0x000169e9; BYTE $0x00   // jmp          LBB7_93, $361(%rip)

LBB7_59:
	WORD $0x8545; BYTE $0xc0                   // testl        %r8d, %r8d
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x00000db9; BYTE $0x00               // movl         $13, %ecx
	LONG $0x00000fe9; BYTE $0x00               // jmp          LBB7_61, $15(%rip)

LBB7_60:
	WORD $0x8545; BYTE $0xc0                   // testl        %r8d, %r8d
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x00000cb9; BYTE $0x00               // movl         $12, %ecx

LBB7_61:
	LONG $0xc8490f48             // cmovnsq      %rax, %rcx
	WORD $0x8949; BYTE $0x0e     // movq         %rcx, (%r14)
	LONG $0x1ff8c141             // sarl         $31, %r8d
	WORD $0xf741; BYTE $0xd0     // notl         %r8d
	WORD $0x6349; BYTE $0xc0     // movslq       %r8d, %rax
	WORD $0x0148; BYTE $0xc2     // addq         %rax, %rdx
	LONG $0x000151e9; BYTE $0x00 // jmp          LBB7_85, $337(%rip)

LBB7_62:
	LONG $0xfc4e8d48               // leaq         $-4(%rsi), %rcx
	WORD $0x3948; BYTE $0xc8       // cmpq         %rcx, %rax
	LONG $0x0024830f; WORD $0x0000 // jae          LBB7_65, $36(%rip)
	WORD $0x348b; BYTE $0x17       // movl         (%rdi,%rdx), %esi
	LONG $0x6c61fe81; WORD $0x6573 // cmpl         $1702063201, %esi
	LONG $0x00b9850f; WORD $0x0000 // jne          LBB7_75, $185(%rip)
	LONG $0x05c08348               // addq         $5, %rax
	LONG $0xe0458948               // movq         %rax, $-32(%rbp)
	LONG $0x000004b9; BYTE $0x00   // movl         $4, %ecx
	WORD $0x8948; BYTE $0xc6       // movq         %rax, %rsi
	LONG $0x0000fce9; BYTE $0x00   // jmp          LBB7_93, $252(%rip)

LBB7_65:
	LONG $0xe0758948                           // movq         %rsi, $-32(%rbp)
	LONG $0xffc1c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rcx
	LONG $0x0000ece9; BYTE $0x00               // jmp          LBB7_93, $236(%rip)

LBB7_66:
	LONG $0x0606c749; WORD $0x0000; BYTE $0x00 // movq         $6, (%r14)
	LONG $0x000104e9; BYTE $0x00               // jmp          LBB7_85, $260(%rip)

LBB7_67:
	LONG $0xe0458948                           // movq         %rax, $-32(%rbp)
	LONG $0xfec1c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rcx
	WORD $0xfa80; BYTE $0x6e                   // cmpb         $110, %dl
	LONG $0x006c850f; WORD $0x0000             // jne          LBB7_80, $108(%rip)
	LONG $0x01077c80; BYTE $0x75               // cmpb         $117, $1(%rdi,%rax)
	LONG $0x00a6850f; WORD $0x0000             // jne          LBB7_81, $166(%rip)
	LONG $0x02077c80; BYTE $0x6c               // cmpb         $108, $2(%rdi,%rax)
	LONG $0x00ab850f; WORD $0x0000             // jne          LBB7_89, $171(%rip)
	LONG $0x03708d48                           // leaq         $3(%rax), %rsi
	LONG $0x04508d48                           // leaq         $4(%rax), %rdx
	LONG $0x03077c80; BYTE $0x6c               // cmpb         $108, $3(%rdi,%rax)
	LONG $0xf2440f48                           // cmoveq       %rdx, %rsi
	LONG $0x00009ce9; BYTE $0x00               // jmp          LBB7_92, $156(%rip)

LBB7_71:
	LONG $0xe0458948                           // movq         %rax, $-32(%rbp)
	LONG $0xfec1c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rcx
	WORD $0xfa80; BYTE $0x74                   // cmpb         $116, %dl
	LONG $0x002c850f; WORD $0x0000             // jne          LBB7_80, $44(%rip)
	LONG $0x01077c80; BYTE $0x72               // cmpb         $114, $1(%rdi,%rax)
	LONG $0x0066850f; WORD $0x0000             // jne          LBB7_81, $102(%rip)
	LONG $0x02077c80; BYTE $0x75               // cmpb         $117, $2(%rdi,%rax)
	LONG $0x006b850f; WORD $0x0000             // jne          LBB7_89, $107(%rip)
	LONG $0x03708d48                           // leaq         $3(%rax), %rsi
	LONG $0x04508d48                           // leaq         $4(%rax), %rdx
	LONG $0x03077c80; BYTE $0x65               // cmpb         $101, $3(%rdi,%rax)
	LONG $0xf2440f48                           // cmoveq       %rdx, %rsi
	LONG $0x00005ce9; BYTE $0x00               // jmp          LBB7_92, $92(%rip)

LBB7_80:
	WORD $0x8948; BYTE $0xc6     // movq         %rax, %rsi
	LONG $0x000058e9; BYTE $0x00 // jmp          LBB7_93, $88(%rip)

LBB7_75:
	LONG $0xfec1c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rcx
	LONG $0x61fe8040                           // cmpb         $97, %sil
	LONG $0x0034850f; WORD $0x0000             // jne          LBB7_82, $52(%rip)
	LONG $0x02077c80; BYTE $0x6c               // cmpb         $108, $2(%rdi,%rax)
	LONG $0x0031850f; WORD $0x0000             // jne          LBB7_89, $49(%rip)
	LONG $0x03077c80; BYTE $0x73               // cmpb         $115, $3(%rdi,%rax)
	LONG $0x0063850f; WORD $0x0000             // jne          LBB7_90, $99(%rip)
	LONG $0x04708d48                           // leaq         $4(%rax), %rsi
	LONG $0x05508d48                           // leaq         $5(%rax), %rdx
	LONG $0x04077c80; BYTE $0x65               // cmpb         $101, $4(%rdi,%rax)
	LONG $0xf2440f48                           // cmoveq       %rdx, %rsi
	LONG $0x000017e9; BYTE $0x00               // jmp          LBB7_92, $23(%rip)

LBB7_81:
	WORD $0xff48; BYTE $0xc0     // incq         %rax
	LONG $0x00000ce9; BYTE $0x00 // jmp          LBB7_91, $12(%rip)

LBB7_82:
	WORD $0x8948; BYTE $0xd6     // movq         %rdx, %rsi
	LONG $0x00000be9; BYTE $0x00 // jmp          LBB7_93, $11(%rip)

LBB7_89:
	LONG $0x02c08348 // addq         $2, %rax

LBB7_91:
	WORD $0x8948; BYTE $0xc6 // movq         %rax, %rsi

LBB7_92:
	LONG $0xe0758948 // movq         %rsi, $-32(%rbp)

LBB7_93:
	WORD $0x8949; BYTE $0x0e     // movq         %rcx, (%r14)
	WORD $0x8948; BYTE $0xf0     // movq         %rsi, %rax
	LONG $0x00001ce9; BYTE $0x00 // jmp          LBB7_86, $28(%rip)

LBB7_83:
	WORD $0x8948; BYTE $0xf9       // movq         %rdi, %rcx
	WORD $0xf748; BYTE $0xd1       // notq         %rcx
	WORD $0x0148; BYTE $0xc8       // addq         %rcx, %rax
	WORD $0x3948; BYTE $0xf0       // cmpq         %rsi, %rax
	LONG $0xfd40820f; WORD $0xffff // jb           LBB7_40, $-704(%rip)

LBB7_84:
	LONG $0x0106c749; WORD $0x0000; BYTE $0x00 // movq         $1, (%r14)

LBB7_85:
	WORD $0x8948; BYTE $0xd0 // movq         %rdx, %rax

LBB7_86:
	LONG $0x18c48348 // addq         $24, %rsp
	BYTE $0x5b       // popq         %rbx
	WORD $0x5e41     // popq         %r14
	WORD $0x5f41     // popq         %r15
	BYTE $0x5d       // popq         %rbp
	BYTE $0xc3       // retq

LBB7_90:
	LONG $0x03c08348             // addq         $3, %rax
	LONG $0xffffbee9; BYTE $0xff // jmp          LBB7_91, $-66(%rip)
	WORD $0x9090; BYTE $0x90     // .p2align 2, 0x90

	// .set L7_0_set_84, LBB7_84-LJTI7_0
	// .set L7_0_set_48, LBB7_48-LJTI7_0
	// .set L7_0_set_49, LBB7_49-LJTI7_0
	// .set L7_0_set_50, LBB7_50-LJTI7_0
	// .set L7_0_set_43, LBB7_43-LJTI7_0
	// .set L7_0_set_51, LBB7_51-LJTI7_0
	// .set L7_0_set_52, LBB7_52-LJTI7_0
	// .set L7_0_set_60, LBB7_60-LJTI7_0
	// .set L7_0_set_62, LBB7_62-LJTI7_0
	// .set L7_0_set_53, LBB7_53-LJTI7_0
	// .set L7_0_set_56, LBB7_56-LJTI7_0
	// .set L7_0_set_66, LBB7_66-LJTI7_0
	// .set L7_0_set_59, LBB7_59-LJTI7_0
LJTI7_0:
	LONG $0xffffffdf // .long L7_0_set_84
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffda7 // .long L7_0_set_49
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffdc3 // .long L7_0_set_50
	LONG $0xfffffd46 // .long L7_0_set_43
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd46 // .long L7_0_set_43
	LONG $0xfffffd46 // .long L7_0_set_43
	LONG $0xfffffd46 // .long L7_0_set_43
	LONG $0xfffffd46 // .long L7_0_set_43
	LONG $0xfffffd46 // .long L7_0_set_43
	LONG $0xfffffd46 // .long L7_0_set_43
	LONG $0xfffffd46 // .long L7_0_set_43
	LONG $0xfffffd46 // .long L7_0_set_43
	LONG $0xfffffd46 // .long L7_0_set_43
	LONG $0xfffffd46 // .long L7_0_set_43
	LONG $0xfffffdd7 // .long L7_0_set_51
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffdeb // .long L7_0_set_52
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffe6d // .long L7_0_set_60
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffe95 // .long L7_0_set_62
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffdf7 // .long L7_0_set_53
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffe28 // .long L7_0_set_56
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffed6 // .long L7_0_set_66
	LONG $0xfffffd9b // .long L7_0_set_48
	LONG $0xfffffe59 // .long L7_0_set_59
	LONG $0x00000000 // .p2align 4, 0x00

LCPI8_0:
	QUAD $0x2222222222222222; QUAD $0x2222222222222222 // .space 16, '""""""""""""""""'

LCPI8_1:
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'

LCPI8_2:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

	// .p2align 4, 0x90
_vstring:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	LONG $0x38ec8348                           // subq         $56, %rsp
	LONG $0xa8558948                           // movq         %rdx, $-88(%rbp)
	WORD $0x8b48; BYTE $0x06                   // movq         (%rsi), %rax
	WORD $0xc1f6; BYTE $0x20                   // testb        $32, %cl
	LONG $0x0184850f; WORD $0x0000             // jne          LBB8_13, $388(%rip)
	LONG $0x084f8b4c                           // movq         $8(%rdi), %r9
	LONG $0xc84d894c                           // movq         %r9, $-56(%rbp)
	WORD $0x2949; BYTE $0xc1                   // subq         %rax, %r9
	LONG $0x036b840f; WORD $0x0000             // je           LBB8_33, $875(%rip)
	WORD $0x8949; BYTE $0xf6                   // movq         %rsi, %r14
	WORD $0x8b4c; BYTE $0x1f                   // movq         (%rdi), %r11
	WORD $0x8949; BYTE $0xc7                   // movq         %rax, %r15
	LONG $0x03148d4d                           // leaq         (%r11,%rax), %r10
	LONG $0x40f98349                           // cmpq         $64, %r9
	LONG $0x0360820f; WORD $0x0000             // jb           LBB8_34, $864(%rip)
	QUAD $0xffffffffd045c748                   // movq         $-1, $-48(%rbp)
	WORD $0x3145; BYTE $0xe4                   // xorl         %r12d, %r12d
	QUAD $0xffffff74056ff9c5                   // vmovdqa      $-140(%rip), %xmm0  /* LCPI8_0(%rip) */
	QUAD $0xffffff7c0d6ff9c5                   // vmovdqa      $-132(%rip), %xmm1  /* LCPI8_1(%rip) */
	QUAD $0x9090909090909090; LONG $0x90909090 // .p2align 4, 0x90

LBB8_4:
	LONG $0x6f7ac1c4; BYTE $0x12   // vmovdqu      (%r10), %xmm2
	LONG $0x6f7ac1c4; WORD $0x105a // vmovdqu      $16(%r10), %xmm3
	LONG $0x6f7ac1c4; WORD $0x2062 // vmovdqu      $32(%r10), %xmm4
	LONG $0x6f7ac1c4; WORD $0x306a // vmovdqu      $48(%r10), %xmm5
	LONG $0xf074e9c5               // vpcmpeqb     %xmm0, %xmm2, %xmm6
	LONG $0xc6d779c5               // vpmovmskb    %xmm6, %r8d
	LONG $0xf074e1c5               // vpcmpeqb     %xmm0, %xmm3, %xmm6
	LONG $0xd6d7f9c5               // vpmovmskb    %xmm6, %edx
	LONG $0xf074d9c5               // vpcmpeqb     %xmm0, %xmm4, %xmm6
	LONG $0xf6d7f9c5               // vpmovmskb    %xmm6, %esi
	LONG $0xf074d1c5               // vpcmpeqb     %xmm0, %xmm5, %xmm6
	LONG $0xc6d7f9c5               // vpmovmskb    %xmm6, %eax
	LONG $0xd174e9c5               // vpcmpeqb     %xmm1, %xmm2, %xmm2
	LONG $0xead779c5               // vpmovmskb    %xmm2, %r13d
	LONG $0xd174e1c5               // vpcmpeqb     %xmm1, %xmm3, %xmm2
	LONG $0xcad7f9c5               // vpmovmskb    %xmm2, %ecx
	LONG $0xd174d9c5               // vpcmpeqb     %xmm1, %xmm4, %xmm2
	LONG $0xdad7f9c5               // vpmovmskb    %xmm2, %ebx
	LONG $0xd174d1c5               // vpcmpeqb     %xmm1, %xmm5, %xmm2
	LONG $0xfad7f9c5               // vpmovmskb    %xmm2, %edi
	LONG $0x30e0c148               // shlq         $48, %rax
	LONG $0x20e6c148               // shlq         $32, %rsi
	LONG $0x10e2c148               // shlq         $16, %rdx
	WORD $0x0949; BYTE $0xd0       // orq          %rdx, %r8
	WORD $0x0949; BYTE $0xf0       // orq          %rsi, %r8
	WORD $0x0949; BYTE $0xc0       // orq          %rax, %r8
	LONG $0x30e7c148               // shlq         $48, %rdi
	LONG $0x20e3c148               // shlq         $32, %rbx
	LONG $0x10e1c148               // shlq         $16, %rcx
	WORD $0x0949; BYTE $0xcd       // orq          %rcx, %r13
	WORD $0x0949; BYTE $0xdd       // orq          %rbx, %r13
	WORD $0x0949; BYTE $0xfd       // orq          %rdi, %r13
	LONG $0x002c850f; WORD $0x0000 // jne          LBB8_8, $44(%rip)
	WORD $0x854d; BYTE $0xe4       // testq        %r12, %r12
	LONG $0x003f850f; WORD $0x0000 // jne          LBB8_10, $63(%rip)
	WORD $0x3145; BYTE $0xe4       // xorl         %r12d, %r12d
	WORD $0x854d; BYTE $0xc0       // testq        %r8, %r8
	LONG $0x0085850f; WORD $0x0000 // jne          LBB8_11, $133(%rip)

LBB8_7:
	LONG $0x40c28349               // addq         $64, %r10
	LONG $0xc0c18349               // addq         $-64, %r9
	LONG $0x3ff98349               // cmpq         $63, %r9
	LONG $0xff52870f; WORD $0xffff // ja           LBB8_4, $-174(%rip)
	LONG $0x000291e9; BYTE $0x00   // jmp          LBB8_35, $657(%rip)

LBB8_8:
	LONG $0xd07d8348; BYTE $0xff   // cmpq         $-1, $-48(%rbp)
	LONG $0x0011850f; WORD $0x0000 // jne          LBB8_10, $17(%rip)
	WORD $0x894c; BYTE $0xd0       // movq         %r10, %rax
	WORD $0x294c; BYTE $0xd8       // subq         %r11, %rax
	LONG $0xcdbc0f49               // bsfq         %r13, %rcx
	WORD $0x0148; BYTE $0xc1       // addq         %rax, %rcx
	LONG $0xd04d8948               // movq         %rcx, $-48(%rbp)

LBB8_10:
	WORD $0x894c; BYTE $0xe0               // movq         %r12, %rax
	WORD $0xf748; BYTE $0xd0               // notq         %rax
	WORD $0x214c; BYTE $0xe8               // andq         %r13, %rax
	LONG $0x000c8d48                       // leaq         (%rax,%rax), %rcx
	WORD $0x094c; BYTE $0xe1               // orq          %r12, %rcx
	WORD $0x8948; BYTE $0xca               // movq         %rcx, %rdx
	WORD $0xf748; BYTE $0xd2               // notq         %rdx
	WORD $0x214c; BYTE $0xea               // andq         %r13, %rdx
	QUAD $0xaaaaaaaaaaaabe48; WORD $0xaaaa // movabsq      $-6148914691236517206, %rsi
	WORD $0x2148; BYTE $0xf2               // andq         %rsi, %rdx
	WORD $0x3145; BYTE $0xe4               // xorl         %r12d, %r12d
	WORD $0x0148; BYTE $0xc2               // addq         %rax, %rdx
	LONG $0xc4920f41                       // setb         %r12b
	WORD $0x0148; BYTE $0xd2               // addq         %rdx, %rdx
	QUAD $0x555555555555b848; WORD $0x5555 // movabsq      $6148914691236517205, %rax
	WORD $0x3148; BYTE $0xc2               // xorq         %rax, %rdx
	WORD $0x2148; BYTE $0xca               // andq         %rcx, %rdx
	WORD $0xf748; BYTE $0xd2               // notq         %rdx
	WORD $0x2149; BYTE $0xd0               // andq         %rdx, %r8
	WORD $0x854d; BYTE $0xc0               // testq        %r8, %r8
	LONG $0xff7b840f; WORD $0xffff         // je           LBB8_7, $-133(%rip)

LBB8_11:
	LONG $0xc0bc0f49 // bsfq         %r8, %rax

LBB8_12:
	WORD $0x294d; BYTE $0xda     // subq         %r11, %r10
	LONG $0x027c8d49; BYTE $0x01 // leaq         $1(%r10,%rax), %rdi
	WORD $0x894c; BYTE $0xf6     // movq         %r14, %rsi
	LONG $0x0004dce9; BYTE $0x00 // jmp          LBB8_30, $1244(%rip)

LBB8_13:
	LONG $0x086f8b4c               // movq         $8(%rdi), %r13
	LONG $0xc86d894c               // movq         %r13, $-56(%rbp)
	WORD $0x2949; BYTE $0xc5       // subq         %rax, %r13
	LONG $0x01e7840f; WORD $0x0000 // je           LBB8_33, $487(%rip)
	LONG $0xc0758948               // movq         %rsi, $-64(%rbp)
	WORD $0x8b48; BYTE $0x0f       // movq         (%rdi), %rcx
	LONG $0xb8458948               // movq         %rax, $-72(%rbp)
	LONG $0xb04d8948               // movq         %rcx, $-80(%rbp)
	WORD $0x0148; BYTE $0xc1       // addq         %rax, %rcx
	LONG $0x40fd8349               // cmpq         $64, %r13
	LONG $0x0259820f; WORD $0x0000 // jb           LBB8_40, $601(%rip)
	QUAD $0xffffffffd045c748       // movq         $-1, $-48(%rbp)
	WORD $0xd231                   // xorl         %edx, %edx
	QUAD $0xfffffdec056f79c5       // vmovdqa      $-532(%rip), %xmm8  /* LCPI8_0(%rip) */
	QUAD $0xfffffdf40d6ff9c5       // vmovdqa      $-524(%rip), %xmm1  /* LCPI8_1(%rip) */
	QUAD $0xfffffdfc156ff9c5       // vmovdqa      $-516(%rip), %xmm2  /* LCPI8_2(%rip) */
	LONG $0xdb76e1c5               // vpcmpeqd     %xmm3, %xmm3, %xmm3
	QUAD $0x9090909090909090       // .p2align 4, 0x90

LBB8_16:
	LONG $0xa06d894c               // movq         %r13, $-96(%rbp)
	WORD $0x8949; BYTE $0xd5       // movq         %rdx, %r13
	LONG $0x216ffac5               // vmovdqu      (%rcx), %xmm4
	LONG $0x696ffac5; BYTE $0x10   // vmovdqu      $16(%rcx), %xmm5
	LONG $0x716ffac5; BYTE $0x20   // vmovdqu      $32(%rcx), %xmm6
	LONG $0x796ffac5; BYTE $0x30   // vmovdqu      $48(%rcx), %xmm7
	LONG $0xc474b9c5               // vpcmpeqb     %xmm4, %xmm8, %xmm0
	LONG $0xd8d7f9c5               // vpmovmskb    %xmm0, %ebx
	LONG $0xc574b9c5               // vpcmpeqb     %xmm5, %xmm8, %xmm0
	LONG $0xe0d779c5               // vpmovmskb    %xmm0, %r12d
	LONG $0xc674b9c5               // vpcmpeqb     %xmm6, %xmm8, %xmm0
	LONG $0xd0d7f9c5               // vpmovmskb    %xmm0, %edx
	LONG $0xc774b9c5               // vpcmpeqb     %xmm7, %xmm8, %xmm0
	LONG $0xd0d779c5               // vpmovmskb    %xmm0, %r10d
	LONG $0xc174d9c5               // vpcmpeqb     %xmm1, %xmm4, %xmm0
	LONG $0xf0d779c5               // vpmovmskb    %xmm0, %r14d
	LONG $0xc174d1c5               // vpcmpeqb     %xmm1, %xmm5, %xmm0
	LONG $0xd8d779c5               // vpmovmskb    %xmm0, %r11d
	LONG $0xc174c9c5               // vpcmpeqb     %xmm1, %xmm6, %xmm0
	LONG $0xc8d779c5               // vpmovmskb    %xmm0, %r9d
	LONG $0xc174c1c5               // vpcmpeqb     %xmm1, %xmm7, %xmm0
	LONG $0xf8d779c5               // vpmovmskb    %xmm0, %r15d
	LONG $0xc464e9c5               // vpcmpgtb     %xmm4, %xmm2, %xmm0
	LONG $0xe364d9c5               // vpcmpgtb     %xmm3, %xmm4, %xmm4
	LONG $0xc4dbf9c5               // vpand        %xmm4, %xmm0, %xmm0
	LONG $0xf8d7f9c5               // vpmovmskb    %xmm0, %edi
	LONG $0xc564e9c5               // vpcmpgtb     %xmm5, %xmm2, %xmm0
	LONG $0xe364d1c5               // vpcmpgtb     %xmm3, %xmm5, %xmm4
	LONG $0xc4dbf9c5               // vpand        %xmm4, %xmm0, %xmm0
	LONG $0xc0d779c5               // vpmovmskb    %xmm0, %r8d
	LONG $0xc664e9c5               // vpcmpgtb     %xmm6, %xmm2, %xmm0
	LONG $0xe364c9c5               // vpcmpgtb     %xmm3, %xmm6, %xmm4
	LONG $0xc4dbf9c5               // vpand        %xmm4, %xmm0, %xmm0
	LONG $0xf0d7f9c5               // vpmovmskb    %xmm0, %esi
	LONG $0xc764e9c5               // vpcmpgtb     %xmm7, %xmm2, %xmm0
	LONG $0xe364c1c5               // vpcmpgtb     %xmm3, %xmm7, %xmm4
	LONG $0xc4dbf9c5               // vpand        %xmm4, %xmm0, %xmm0
	LONG $0xc0d7f9c5               // vpmovmskb    %xmm0, %eax
	LONG $0x30e2c149               // shlq         $48, %r10
	LONG $0x20e2c148               // shlq         $32, %rdx
	LONG $0x10e4c149               // shlq         $16, %r12
	WORD $0x094c; BYTE $0xe3       // orq          %r12, %rbx
	WORD $0x0948; BYTE $0xd3       // orq          %rdx, %rbx
	WORD $0x094c; BYTE $0xd3       // orq          %r10, %rbx
	LONG $0x30e7c149               // shlq         $48, %r15
	LONG $0x20e1c149               // shlq         $32, %r9
	LONG $0x10e3c149               // shlq         $16, %r11
	WORD $0x094d; BYTE $0xde       // orq          %r11, %r14
	WORD $0x094d; BYTE $0xce       // orq          %r9, %r14
	LONG $0x30e0c148               // shlq         $48, %rax
	LONG $0x20e6c148               // shlq         $32, %rsi
	LONG $0x10e0c149               // shlq         $16, %r8
	WORD $0x094c; BYTE $0xc7       // orq          %r8, %rdi
	WORD $0x0948; BYTE $0xf7       // orq          %rsi, %rdi
	WORD $0x094d; BYTE $0xfe       // orq          %r15, %r14
	LONG $0x003b850f; WORD $0x0000 // jne          LBB8_21, $59(%rip)
	WORD $0x854d; BYTE $0xed       // testq        %r13, %r13
	LONG $0x004f850f; WORD $0x0000 // jne          LBB8_23, $79(%rip)
	WORD $0xd231                   // xorl         %edx, %edx
	WORD $0x0948; BYTE $0xc7       // orq          %rax, %rdi
	WORD $0x8548; BYTE $0xdb       // testq        %rbx, %rbx
	LONG $0x0094850f; WORD $0x0000 // jne          LBB8_24, $148(%rip)

LBB8_19:
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0x0471850f; WORD $0x0000 // jne          LBB8_76, $1137(%rip)
	LONG $0x40c18348               // addq         $64, %rcx
	LONG $0xa06d8b4c               // movq         $-96(%rbp), %r13
	LONG $0xc0c58349               // addq         $-64, %r13
	LONG $0x3ffd8349               // cmpq         $63, %r13
	LONG $0xfeee870f; WORD $0xffff // ja           LBB8_16, $-274(%rip)
	LONG $0x00011ee9; BYTE $0x00   // jmp          LBB8_41, $286(%rip)

LBB8_21:
	LONG $0xd07d8348; BYTE $0xff   // cmpq         $-1, $-48(%rbp)
	LONG $0x0012850f; WORD $0x0000 // jne          LBB8_23, $18(%rip)
	WORD $0x8948; BYTE $0xca       // movq         %rcx, %rdx
	LONG $0xb0552b48               // subq         $-80(%rbp), %rdx
	LONG $0xf6bc0f49               // bsfq         %r14, %rsi
	WORD $0x0148; BYTE $0xd6       // addq         %rdx, %rsi
	LONG $0xd0758948               // movq         %rsi, $-48(%rbp)

LBB8_23:
	WORD $0x894d; BYTE $0xe9               // movq         %r13, %r9
	WORD $0xf749; BYTE $0xd1               // notq         %r9
	WORD $0x214d; BYTE $0xf1               // andq         %r14, %r9
	LONG $0x09048d4f                       // leaq         (%r9,%r9), %r8
	WORD $0x094d; BYTE $0xe8               // orq          %r13, %r8
	WORD $0x894d; BYTE $0xc2               // movq         %r8, %r10
	WORD $0xf749; BYTE $0xd2               // notq         %r10
	WORD $0x214d; BYTE $0xf2               // andq         %r14, %r10
	QUAD $0xaaaaaaaaaaaaba48; WORD $0xaaaa // movabsq      $-6148914691236517206, %rdx
	WORD $0x2149; BYTE $0xd2               // andq         %rdx, %r10
	WORD $0xd231                           // xorl         %edx, %edx
	WORD $0x014d; BYTE $0xca               // addq         %r9, %r10
	WORD $0x920f; BYTE $0xc2               // setb         %dl
	WORD $0x014d; BYTE $0xd2               // addq         %r10, %r10
	QUAD $0x555555555555be48; WORD $0x5555 // movabsq      $6148914691236517205, %rsi
	WORD $0x3149; BYTE $0xf2               // xorq         %rsi, %r10
	WORD $0x214d; BYTE $0xc2               // andq         %r8, %r10
	WORD $0xf749; BYTE $0xd2               // notq         %r10
	WORD $0x214c; BYTE $0xd3               // andq         %r10, %rbx
	WORD $0x0948; BYTE $0xc7               // orq          %rax, %rdi
	WORD $0x8548; BYTE $0xdb               // testq        %rbx, %rbx
	LONG $0xff6c840f; WORD $0xffff         // je           LBB8_19, $-148(%rip)

LBB8_24:
	LONG $0xc3bc0f48               // bsfq         %rbx, %rax
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0x02ce840f; WORD $0x0000 // je           LBB8_26, $718(%rip)
	LONG $0xd7bc0f48               // bsfq         %rdi, %rdx
	LONG $0x0002cae9; BYTE $0x00   // jmp          LBB8_27, $714(%rip)

LBB8_33:
	LONG $0xffc7c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rdi
	LONG $0x00042de9; BYTE $0x00               // jmp          LBB8_83, $1069(%rip)

LBB8_34:
	QUAD $0xffffffffd045c748 // movq         $-1, $-48(%rbp)
	WORD $0x3145; BYTE $0xe4 // xorl         %r12d, %r12d

LBB8_35:
	LONG $0x20f98349               // cmpq         $32, %r9
	LONG $0x017f820f; WORD $0x0000 // jb           LBB8_50, $383(%rip)
	LONG $0x6f7ac1c4; BYTE $0x02   // vmovdqu      (%r10), %xmm0
	LONG $0x6f7ac1c4; WORD $0x104a // vmovdqu      $16(%r10), %xmm1
	QUAD $0xfffffbff156ff9c5       // vmovdqa      $-1025(%rip), %xmm2  /* LCPI8_0(%rip) */
	QUAD $0xfffffc071d6ff9c5       // vmovdqa      $-1017(%rip), %xmm3  /* LCPI8_1(%rip) */
	LONG $0xe274f9c5               // vpcmpeqb     %xmm2, %xmm0, %xmm4
	LONG $0xdcd7f9c5               // vpmovmskb    %xmm4, %ebx
	LONG $0xd274f1c5               // vpcmpeqb     %xmm2, %xmm1, %xmm2
	LONG $0xc2d7f9c5               // vpmovmskb    %xmm2, %eax
	LONG $0xc374f9c5               // vpcmpeqb     %xmm3, %xmm0, %xmm0
	LONG $0xf8d7f9c5               // vpmovmskb    %xmm0, %edi
	LONG $0xc374f1c5               // vpcmpeqb     %xmm3, %xmm1, %xmm0
	LONG $0xc8d7f9c5               // vpmovmskb    %xmm0, %ecx
	LONG $0x10e0c148               // shlq         $16, %rax
	WORD $0x0948; BYTE $0xc3       // orq          %rax, %rbx
	LONG $0x10e1c148               // shlq         $16, %rcx
	WORD $0x0948; BYTE $0xcf       // orq          %rcx, %rdi
	LONG $0x00cf850f; WORD $0x0000 // jne          LBB8_46, $207(%rip)
	WORD $0x854d; BYTE $0xe4       // testq        %r12, %r12
	LONG $0x00e2850f; WORD $0x0000 // jne          LBB8_48, $226(%rip)
	WORD $0x3145; BYTE $0xe4       // xorl         %r12d, %r12d
	WORD $0x8548; BYTE $0xdb       // testq        %rbx, %rbx
	LONG $0x0113840f; WORD $0x0000 // je           LBB8_49, $275(%rip)

LBB8_39:
	LONG $0xc3bc0f48             // bsfq         %rbx, %rax
	LONG $0xfffd6ae9; BYTE $0xff // jmp          LBB8_12, $-662(%rip)

LBB8_40:
	QUAD $0xffffffffd045c748 // movq         $-1, $-48(%rbp)
	WORD $0xd231             // xorl         %edx, %edx

LBB8_41:
	WORD $0x894d; BYTE $0xeb       // movq         %r13, %r11
	LONG $0x20fd8349               // cmpq         $32, %r13
	LONG $0x0286820f; WORD $0x0000 // jb           LBB8_68, $646(%rip)
	LONG $0x016ffac5               // vmovdqu      (%rcx), %xmm0
	LONG $0x496ffac5; BYTE $0x10   // vmovdqu      $16(%rcx), %xmm1
	QUAD $0xfffffb7d156ff9c5       // vmovdqa      $-1155(%rip), %xmm2  /* LCPI8_0(%rip) */
	LONG $0xda74f9c5               // vpcmpeqb     %xmm2, %xmm0, %xmm3
	LONG $0xfbd7f9c5               // vpmovmskb    %xmm3, %edi
	LONG $0xd274f1c5               // vpcmpeqb     %xmm2, %xmm1, %xmm2
	LONG $0xc2d7f9c5               // vpmovmskb    %xmm2, %eax
	QUAD $0xfffffb75156ff9c5       // vmovdqa      $-1163(%rip), %xmm2  /* LCPI8_1(%rip) */
	LONG $0xda74f9c5               // vpcmpeqb     %xmm2, %xmm0, %xmm3
	LONG $0xd3d779c5               // vpmovmskb    %xmm3, %r10d
	LONG $0xd274f1c5               // vpcmpeqb     %xmm2, %xmm1, %xmm2
	LONG $0xf2d7f9c5               // vpmovmskb    %xmm2, %esi
	QUAD $0xfffffb6d156ff9c5       // vmovdqa      $-1171(%rip), %xmm2  /* LCPI8_2(%rip) */
	LONG $0xd864e9c5               // vpcmpgtb     %xmm0, %xmm2, %xmm3
	LONG $0xe476d9c5               // vpcmpeqd     %xmm4, %xmm4, %xmm4
	LONG $0xc464f9c5               // vpcmpgtb     %xmm4, %xmm0, %xmm0
	LONG $0xc0dbe1c5               // vpand        %xmm0, %xmm3, %xmm0
	LONG $0xf0d779c5               // vpmovmskb    %xmm0, %r14d
	LONG $0xc164e9c5               // vpcmpgtb     %xmm1, %xmm2, %xmm0
	LONG $0xcc64f1c5               // vpcmpgtb     %xmm4, %xmm1, %xmm1
	LONG $0xc1dbf9c5               // vpand        %xmm1, %xmm0, %xmm0
	LONG $0xd8d7f9c5               // vpmovmskb    %xmm0, %ebx
	LONG $0x10e0c148               // shlq         $16, %rax
	WORD $0x0948; BYTE $0xc7       // orq          %rax, %rdi
	LONG $0x10e6c148               // shlq         $16, %rsi
	WORD $0x0949; BYTE $0xf2       // orq          %rsi, %r10
	LONG $0x0121850f; WORD $0x0000 // jne          LBB8_59, $289(%rip)
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0x0135850f; WORD $0x0000 // jne          LBB8_61, $309(%rip)
	WORD $0xd231                   // xorl         %edx, %edx
	LONG $0x10e3c148               // shlq         $16, %rbx
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0x016c840f; WORD $0x0000 // je           LBB8_62, $364(%rip)

LBB8_45:
	LONG $0xc7bc0f48             // bsfq         %rdi, %rax
	LONG $0x000168e9; BYTE $0x00 // jmp          LBB8_63, $360(%rip)

LBB8_46:
	LONG $0xd07d8348; BYTE $0xff   // cmpq         $-1, $-48(%rbp)
	LONG $0x0011850f; WORD $0x0000 // jne          LBB8_48, $17(%rip)
	WORD $0x894c; BYTE $0xd0       // movq         %r10, %rax
	WORD $0x294c; BYTE $0xd8       // subq         %r11, %rax
	LONG $0xcfbc0f48               // bsfq         %rdi, %rcx
	WORD $0x0148; BYTE $0xc1       // addq         %rax, %rcx
	LONG $0xd04d8948               // movq         %rcx, $-48(%rbp)

LBB8_48:
	WORD $0x8944; BYTE $0xe0       // movl         %r12d, %eax
	WORD $0xd0f7                   // notl         %eax
	WORD $0xf821                   // andl         %edi, %eax
	LONG $0x440c8d41               // leal         (%r12,%rax,2), %ecx
	WORD $0x148d; BYTE $0x00       // leal         (%rax,%rax), %edx
	LONG $0xaaaaaabe; BYTE $0xaa   // movl         $2863311530, %esi
	WORD $0xd631                   // xorl         %edx, %esi
	WORD $0xfe21                   // andl         %edi, %esi
	LONG $0xaaaae681; WORD $0xaaaa // andl         $-1431655766, %esi
	WORD $0x3145; BYTE $0xe4       // xorl         %r12d, %r12d
	WORD $0xc601                   // addl         %eax, %esi
	LONG $0xc4920f41               // setb         %r12b
	WORD $0xf601                   // addl         %esi, %esi
	LONG $0x5555f681; WORD $0x5555 // xorl         $1431655765, %esi
	WORD $0xce21                   // andl         %ecx, %esi
	WORD $0xd6f7                   // notl         %esi
	WORD $0xf321                   // andl         %esi, %ebx
	WORD $0x8548; BYTE $0xdb       // testq        %rbx, %rbx
	LONG $0xfeed850f; WORD $0xffff // jne          LBB8_39, $-275(%rip)

LBB8_49:
	LONG $0x20c28349 // addq         $32, %r10
	LONG $0xe0c18349 // addq         $-32, %r9

LBB8_50:
	WORD $0x854d; BYTE $0xe4                   // testq        %r12, %r12
	LONG $0x024a850f; WORD $0x0000             // jne          LBB8_80, $586(%rip)
	WORD $0x894c; BYTE $0xf6                   // movq         %r14, %rsi
	LONG $0xd04d8b48                           // movq         $-48(%rbp), %rcx
	LONG $0xffc7c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rdi
	WORD $0x854d; BYTE $0xc9                   // testq        %r9, %r9
	LONG $0x0275840f; WORD $0x0000             // je           LBB8_82, $629(%rip)

LBB8_52:
	WORD $0x894d; BYTE $0xd8 // movq         %r11, %r8
	WORD $0xf749; BYTE $0xd0 // notq         %r8

LBB8_53:
	LONG $0x01528d49               // leaq         $1(%r10), %rdx
	LONG $0x1ab60f41               // movzbl       (%r10), %ebx
	WORD $0xfb80; BYTE $0x22       // cmpb         $34, %bl
	LONG $0x005d840f; WORD $0x0000 // je           LBB8_58, $93(%rip)
	LONG $0xff418d49               // leaq         $-1(%r9), %rax
	WORD $0xfb80; BYTE $0x5c       // cmpb         $92, %bl
	LONG $0x0014840f; WORD $0x0000 // je           LBB8_56, $20(%rip)
	WORD $0x8949; BYTE $0xc1       // movq         %rax, %r9
	WORD $0x8949; BYTE $0xd2       // movq         %rdx, %r10
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0xffd3850f; WORD $0xffff // jne          LBB8_53, $-45(%rip)
	LONG $0x00023de9; BYTE $0x00   // jmp          LBB8_82, $573(%rip)

LBB8_56:
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x02a4840f; WORD $0x0000 // je           LBB8_88, $676(%rip)
	WORD $0x014c; BYTE $0xc2       // addq         %r8, %rdx
	LONG $0xfff98348               // cmpq         $-1, %rcx
	LONG $0xd0458b48               // movq         $-48(%rbp), %rax
	LONG $0xc2440f48               // cmoveq       %rdx, %rax
	LONG $0xd0458948               // movq         %rax, $-48(%rbp)
	LONG $0xca440f48               // cmoveq       %rdx, %rcx
	LONG $0x02c28349               // addq         $2, %r10
	LONG $0xfec18349               // addq         $-2, %r9
	WORD $0x894c; BYTE $0xc8       // movq         %r9, %rax
	WORD $0x894c; BYTE $0xf6       // movq         %r14, %rsi
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0xff97850f; WORD $0xffff // jne          LBB8_53, $-105(%rip)
	LONG $0x000201e9; BYTE $0x00   // jmp          LBB8_82, $513(%rip)

LBB8_58:
	WORD $0x294c; BYTE $0xda     // subq         %r11, %rdx
	WORD $0x8948; BYTE $0xd7     // movq         %rdx, %rdi
	LONG $0x0000a5e9; BYTE $0x00 // jmp          LBB8_30, $165(%rip)

LBB8_59:
	LONG $0xd07d8348; BYTE $0xff   // cmpq         $-1, $-48(%rbp)
	LONG $0x0012850f; WORD $0x0000 // jne          LBB8_61, $18(%rip)
	WORD $0x8949; BYTE $0xc8       // movq         %rcx, %r8
	LONG $0xb0452b4c               // subq         $-80(%rbp), %r8
	LONG $0xf2bc0f49               // bsfq         %r10, %rsi
	WORD $0x014c; BYTE $0xc6       // addq         %r8, %rsi
	LONG $0xd0758948               // movq         %rsi, $-48(%rbp)

LBB8_61:
	WORD $0x8948; BYTE $0xd6       // movq         %rdx, %rsi
	WORD $0xf089                   // movl         %esi, %eax
	WORD $0xd0f7                   // notl         %eax
	WORD $0x2144; BYTE $0xd0       // andl         %r10d, %eax
	LONG $0x42048d44               // leal         (%rdx,%rax,2), %r8d
	LONG $0x000c8d44               // leal         (%rax,%rax), %r9d
	LONG $0xaaaaaabe; BYTE $0xaa   // movl         $2863311530, %esi
	WORD $0x3144; BYTE $0xce       // xorl         %r9d, %esi
	WORD $0x2144; BYTE $0xd6       // andl         %r10d, %esi
	LONG $0xaaaae681; WORD $0xaaaa // andl         $-1431655766, %esi
	WORD $0xd231                   // xorl         %edx, %edx
	WORD $0xc601                   // addl         %eax, %esi
	WORD $0x920f; BYTE $0xc2       // setb         %dl
	WORD $0xf601                   // addl         %esi, %esi
	LONG $0x5555f681; WORD $0x5555 // xorl         $1431655765, %esi
	WORD $0x2144; BYTE $0xc6       // andl         %r8d, %esi
	WORD $0xd6f7                   // notl         %esi
	WORD $0xf721                   // andl         %esi, %edi
	LONG $0x10e3c148               // shlq         $16, %rbx
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0xfe94850f; WORD $0xffff // jne          LBB8_45, $-364(%rip)

LBB8_62:
	LONG $0x000040b8; BYTE $0x00 // movl         $64, %eax

LBB8_63:
	WORD $0x094c; BYTE $0xf3       // orq          %r14, %rbx
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0x0067840f; WORD $0x0000 // je           LBB8_66, $103(%rip)
	WORD $0x8548; BYTE $0xdb       // testq        %rbx, %rbx
	LONG $0x0009840f; WORD $0x0000 // je           LBB8_26, $9(%rip)
	LONG $0xd3bc0f48               // bsfq         %rbx, %rdx
	LONG $0x000005e9; BYTE $0x00   // jmp          LBB8_27, $5(%rip)

LBB8_26:
	LONG $0x000040ba; BYTE $0x00 // movl         $64, %edx

LBB8_27:
	LONG $0xb87d8b4c               // movq         $-72(%rbp), %r15
	WORD $0x3948; BYTE $0xc2       // cmpq         %rax, %rdx
	LONG $0x00f9820f; WORD $0x0000 // jb           LBB8_76, $249(%rip)
	LONG $0xb04d2b48               // subq         $-80(%rbp), %rcx
	LONG $0x017c8d48; BYTE $0x01   // leaq         $1(%rcx,%rax), %rdi

LBB8_29:
	LONG $0xc0758b48 // movq         $-64(%rbp), %rsi

LBB8_30:
	WORD $0x8548; BYTE $0xff                   // testq        %rdi, %rdi
	LONG $0x0148880f; WORD $0x0000             // js           LBB8_82, $328(%rip)
	WORD $0x8948; BYTE $0x3e                   // movq         %rdi, (%rsi)
	LONG $0xa84d8b48                           // movq         $-88(%rbp), %rcx
	LONG $0x1079894c                           // movq         %r15, $16(%rcx)
	LONG $0x0701c748; WORD $0x0000; BYTE $0x00 // movq         $7, (%rcx)
	LONG $0xd0558b48                           // movq         $-48(%rbp), %rdx
	WORD $0x3948; BYTE $0xfa                   // cmpq         %rdi, %rdx
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	LONG $0xc24c0f48                           // cmovlq       %rdx, %rax
	LONG $0x18418948                           // movq         %rax, $24(%rcx)
	LONG $0x000129e9; BYTE $0x00               // jmp          LBB8_84, $297(%rip)

LBB8_66:
	WORD $0x8548; BYTE $0xdb       // testq        %rbx, %rbx
	LONG $0x00ad850f; WORD $0x0000 // jne          LBB8_76, $173(%rip)
	LONG $0x20c18348               // addq         $32, %rcx
	LONG $0xe0c38349               // addq         $-32, %r11

LBB8_68:
	LONG $0xb87d8b4c                           // movq         $-72(%rbp), %r15
	WORD $0x8548; BYTE $0xd2                   // testq        %rdx, %rdx
	LONG $0x011a850f; WORD $0x0000             // jne          LBB8_85, $282(%rip)
	LONG $0xd0458b48                           // movq         $-48(%rbp), %rax
	LONG $0xffc7c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rdi
	WORD $0x854d; BYTE $0xdb                   // testq        %r11, %r11
	LONG $0x008b840f; WORD $0x0000             // je           LBB8_77, $139(%rip)

LBB8_70:
	WORD $0xb60f; BYTE $0x11                   // movzbl       (%rcx), %edx
	WORD $0xfa80; BYTE $0x22                   // cmpb         $34, %dl
	LONG $0x008c840f; WORD $0x0000             // je           LBB8_79, $140(%rip)
	WORD $0xfa80; BYTE $0x5c                   // cmpb         $92, %dl
	LONG $0x0026840f; WORD $0x0000             // je           LBB8_74, $38(%rip)
	WORD $0xfa80; BYTE $0x20                   // cmpb         $32, %dl
	LONG $0x0066820f; WORD $0x0000             // jb           LBB8_76, $102(%rip)
	LONG $0xffc2c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rdx
	LONG $0x000001be; BYTE $0x00               // movl         $1, %esi
	WORD $0x0148; BYTE $0xf1                   // addq         %rsi, %rcx
	WORD $0x0149; BYTE $0xd3                   // addq         %rdx, %r11
	LONG $0xffca850f; WORD $0xffff             // jne          LBB8_70, $-54(%rip)
	LONG $0x000050e9; BYTE $0x00               // jmp          LBB8_77, $80(%rip)

LBB8_74:
	LONG $0x01fb8349                           // cmpq         $1, %r11
	LONG $0x0046840f; WORD $0x0000             // je           LBB8_77, $70(%rip)
	WORD $0x894c; BYTE $0xdb                   // movq         %r11, %rbx
	WORD $0x8948; BYTE $0xca                   // movq         %rcx, %rdx
	LONG $0xb0552b48                           // subq         $-80(%rbp), %rdx
	LONG $0xfff88348                           // cmpq         $-1, %rax
	LONG $0xd0758b48                           // movq         $-48(%rbp), %rsi
	LONG $0xf2440f48                           // cmoveq       %rdx, %rsi
	LONG $0xd0758948                           // movq         %rsi, $-48(%rbp)
	LONG $0xc2440f48                           // cmoveq       %rdx, %rax
	LONG $0xfec2c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rdx
	LONG $0x000002be; BYTE $0x00               // movl         $2, %esi
	LONG $0xb87d8b4c                           // movq         $-72(%rbp), %r15
	WORD $0x0148; BYTE $0xf1                   // addq         %rsi, %rcx
	WORD $0x0149; BYTE $0xd3                   // addq         %rdx, %r11
	LONG $0xff81850f; WORD $0xffff             // jne          LBB8_70, $-127(%rip)
	LONG $0x000007e9; BYTE $0x00               // jmp          LBB8_77, $7(%rip)

LBB8_76:
	LONG $0xfec7c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rdi

LBB8_77:
	LONG $0xc8458b48             // movq         $-56(%rbp), %rax
	LONG $0xc0758b48             // movq         $-64(%rbp), %rsi
	LONG $0x000055e9; BYTE $0x00 // jmp          LBB8_83, $85(%rip)

LBB8_79:
	LONG $0xb04d2b48             // subq         $-80(%rbp), %rcx
	WORD $0xff48; BYTE $0xc1     // incq         %rcx
	WORD $0x8948; BYTE $0xcf     // movq         %rcx, %rdi
	LONG $0xfffeede9; BYTE $0xff // jmp          LBB8_29, $-275(%rip)

LBB8_80:
	WORD $0x854d; BYTE $0xc9                   // testq        %r9, %r9
	LONG $0x00a2840f; WORD $0x0000             // je           LBB8_87, $162(%rip)
	WORD $0x894c; BYTE $0xd9                   // movq         %r11, %rcx
	WORD $0xf748; BYTE $0xd1                   // notq         %rcx
	WORD $0x014c; BYTE $0xd1                   // addq         %r10, %rcx
	LONG $0xd0558b48                           // movq         $-48(%rbp), %rdx
	LONG $0xfffa8348                           // cmpq         $-1, %rdx
	WORD $0x8948; BYTE $0xd0                   // movq         %rdx, %rax
	LONG $0xc1440f48                           // cmoveq       %rcx, %rax
	LONG $0xca450f48                           // cmovneq      %rdx, %rcx
	WORD $0xff49; BYTE $0xc2                   // incq         %r10
	WORD $0xff49; BYTE $0xc9                   // decq         %r9
	LONG $0xd0458948                           // movq         %rax, $-48(%rbp)
	WORD $0x894c; BYTE $0xf6                   // movq         %r14, %rsi
	LONG $0xffc7c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rdi
	WORD $0x854d; BYTE $0xc9                   // testq        %r9, %r9
	LONG $0xfd8b850f; WORD $0xffff             // jne          LBB8_52, $-629(%rip)

LBB8_82:
	LONG $0xc8458b48 // movq         $-56(%rbp), %rax

LBB8_83:
	WORD $0x8948; BYTE $0x06 // movq         %rax, (%rsi)
	LONG $0xa8458b48         // movq         $-88(%rbp), %rax
	WORD $0x8948; BYTE $0x38 // movq         %rdi, (%rax)

LBB8_84:
	LONG $0x38c48348 // addq         $56, %rsp
	BYTE $0x5b       // popq         %rbx
	WORD $0x5c41     // popq         %r12
	WORD $0x5d41     // popq         %r13
	WORD $0x5e41     // popq         %r14
	WORD $0x5f41     // popq         %r15
	BYTE $0x5d       // popq         %rbp
	BYTE $0xc3       // retq

LBB8_85:
	WORD $0x854d; BYTE $0xdb                   // testq        %r11, %r11
	LONG $0x0056840f; WORD $0x0000             // je           LBB8_89, $86(%rip)
	WORD $0x894c; BYTE $0xdf                   // movq         %r11, %rdi
	LONG $0xb0458b48                           // movq         $-80(%rbp), %rax
	WORD $0xf748; BYTE $0xd0                   // notq         %rax
	WORD $0x0148; BYTE $0xc8                   // addq         %rcx, %rax
	LONG $0xd0758b48                           // movq         $-48(%rbp), %rsi
	LONG $0xfffe8348                           // cmpq         $-1, %rsi
	WORD $0x8948; BYTE $0xf2                   // movq         %rsi, %rdx
	LONG $0xd0440f48                           // cmoveq       %rax, %rdx
	LONG $0xc6450f48                           // cmovneq      %rsi, %rax
	WORD $0xff48; BYTE $0xc1                   // incq         %rcx
	WORD $0xff49; BYTE $0xcb                   // decq         %r11
	LONG $0xd0558948                           // movq         %rdx, $-48(%rbp)
	LONG $0xb87d8b4c                           // movq         $-72(%rbp), %r15
	LONG $0xffc7c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rdi
	WORD $0x854d; BYTE $0xdb                   // testq        %r11, %r11
	LONG $0xfeb3850f; WORD $0xffff             // jne          LBB8_70, $-333(%rip)
	LONG $0xffff39e9; BYTE $0xff               // jmp          LBB8_77, $-199(%rip)

LBB8_87:
	LONG $0xffc7c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rdi

LBB8_88:
	LONG $0xc8458b48             // movq         $-56(%rbp), %rax
	WORD $0x894c; BYTE $0xf6     // movq         %r14, %rsi
	LONG $0xffff88e9; BYTE $0xff // jmp          LBB8_83, $-120(%rip)

LBB8_89:
	LONG $0xffc7c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rdi
	LONG $0xffff1ae9; BYTE $0xff               // jmp          LBB8_77, $-230(%rip)
	LONG $0x00000000; WORD $0x0000             // .p2align 4, 0x00

LCPI9_0:
	LONG $0x43300000 // .long 1127219200
	LONG $0x45300000 // .long 1160773632
	LONG $0x00000000 // .long 0
	LONG $0x00000000 // .long 0

LCPI9_1:
	QUAD $0x4330000000000000 // .quad 0x4330000000000000
	QUAD $0x4530000000000000 // .quad 0x4530000000000000

	// .p2align 3, 0x00
LCPI9_2:
	QUAD $0x430c6bf526340000 // .quad 0x430c6bf526340000

LCPI9_3:
	QUAD $0xc30c6bf526340000 // .quad 0xc30c6bf526340000

	// .p2align 4, 0x90
_vnumber:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	LONG $0x50ec8348                           // subq         $80, %rsp
	WORD $0x8b48; BYTE $0x06                   // movq         (%rsi), %rax
	WORD $0x8b4c; BYTE $0x17                   // movq         (%rdi), %r10
	LONG $0x087f8b4c                           // movq         $8(%rdi), %r15
	LONG $0x20628b4c                           // movq         $32(%rdx), %r12
	LONG $0x286a8b4c                           // movq         $40(%rdx), %r13
	LONG $0x0902c748; WORD $0x0000; BYTE $0x00 // movq         $9, (%rdx)
	LONG $0xc0eff9c5                           // vpxor        %xmm0, %xmm0, %xmm0
	LONG $0x427ffac5; BYTE $0x08               // vmovdqu      %xmm0, $8(%rdx)
	WORD $0x8b48; BYTE $0x0e                   // movq         (%rsi), %rcx
	LONG $0x184a8948                           // movq         %rcx, $24(%rdx)
	WORD $0x394c; BYTE $0xf8                   // cmpq         %r15, %rax
	LONG $0x00f5830f; WORD $0x0000             // jae          LBB9_16, $245(%rip)
	LONG $0x021c8a45                           // movb         (%r10,%rax), %r11b
	LONG $0x2dfb8041                           // cmpb         $45, %r11b
	LONG $0x00f6850f; WORD $0x0000             // jne          LBB9_17, $246(%rip)
	WORD $0xff48; BYTE $0xc0                   // incq         %rax
	WORD $0x394c; BYTE $0xf8                   // cmpq         %r15, %rax
	LONG $0x00db830f; WORD $0x0000             // jae          LBB9_16, $219(%rip)
	LONG $0x021c8a45                           // movb         (%r10,%rax), %r11b
	LONG $0xffffbe41; WORD $0xffff             // movl         $-1, %r14d
	WORD $0xb740; BYTE $0x01                   // movb         $1, %dil
	LONG $0xd04b8d41                           // leal         $-48(%r11), %ecx
	WORD $0xf980; BYTE $0x0a                   // cmpb         $10, %cl
	LONG $0x00e5830f; WORD $0x0000             // jae          LBB9_18, $229(%rip)

LBB9_4:
	LONG $0x30fb8041                       // cmpb         $48, %r11b
	LONG $0x0035850f; WORD $0x0000         // jne          LBB9_8, $53(%rip)
	LONG $0x01488d4c                       // leaq         $1(%rax), %r9
	WORD $0x394c; BYTE $0xf8               // cmpq         %r15, %rax
	LONG $0x00ea830f; WORD $0x0000         // jae          LBB9_20, $234(%rip)
	LONG $0x0a1c8a43                       // movb         (%r10,%r9), %bl
	WORD $0xc380; BYTE $0xd2               // addb         $-46, %bl
	WORD $0xfb80; BYTE $0x37               // cmpb         $55, %bl
	LONG $0x00da870f; WORD $0x0000         // ja           LBB9_20, $218(%rip)
	LONG $0xc3b60f44                       // movzbl       %bl, %r8d
	QUAD $0x000000800001bb48; WORD $0x0080 // movabsq      $36028797027352577, %rbx
	LONG $0xc3a30f4c                       // btq          %r8, %rbx
	LONG $0x00c2830f; WORD $0x0000         // jae          LBB9_20, $194(%rip)

LBB9_8:
	WORD $0x394c; BYTE $0xf8       // cmpq         %r15, %rax
	WORD $0x7d89; BYTE $0xa8       // movl         %edi, $-88(%rbp)
	LONG $0xa0758948               // movq         %rsi, $-96(%rbp)
	LONG $0xc875894c               // movq         %r14, $-56(%rbp)
	LONG $0x00a1830f; WORD $0x0000 // jae          LBB9_19, $161(%rip)
	WORD $0xf980; BYTE $0x09       // cmpb         $9, %cl
	LONG $0xc07d894c               // movq         %r15, $-64(%rbp)
	LONG $0x00a9870f; WORD $0x0000 // ja           LBB9_21, $169(%rip)
	LONG $0xffd0b941; WORD $0xffff // movl         $4294967248, %r9d
	WORD $0xff49; BYTE $0xcf       // decq         %r15
	WORD $0x3145; BYTE $0xf6       // xorl         %r14d, %r14d
	WORD $0xc931                   // xorl         %ecx, %ecx
	WORD $0x3145; BYTE $0xc0       // xorl         %r8d, %r8d
	QUAD $0x9090909090909090       // .p2align 4, 0x90

LBB9_11:
	WORD $0xf983; BYTE $0x12       // cmpl         $18, %ecx
	LONG $0x00178f0f; WORD $0x0000 // jg           LBB9_13, $23(%rip)
	LONG $0x803c8d4b               // leaq         (%r8,%r8,4), %rdi
	LONG $0xdbbe0f41               // movsbl       %r11b, %ebx
	WORD $0x0144; BYTE $0xcb       // addl         %r9d, %ebx
	LONG $0x7b048d4c               // leaq         (%rbx,%rdi,2), %r8
	WORD $0xc1ff                   // incl         %ecx
	LONG $0x000004e9; BYTE $0x00   // jmp          LBB9_14, $4(%rip)
	BYTE $0x90                     // .p2align 4, 0x90

LBB9_13:
	WORD $0xff41; BYTE $0xc6 // incl         %r14d

LBB9_14:
	WORD $0x3949; BYTE $0xc7       // cmpq         %rax, %r15
	LONG $0x00b8840f; WORD $0x0000 // je           LBB9_27, $184(%rip)
	LONG $0x5cb60f45; WORD $0x0102 // movzbl       $1(%r10,%rax), %r11d
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	LONG $0xd07b8d41               // leal         $-48(%r11), %edi
	LONG $0x0aff8040               // cmpb         $10, %dil
	LONG $0xffbd820f; WORD $0xffff // jb           LBB9_11, $-67(%rip)
	LONG $0x000050e9; BYTE $0x00   // jmp          LBB9_22, $80(%rip)

LBB9_16:
	WORD $0x894c; BYTE $0x3e                   // movq         %r15, (%rsi)
	LONG $0xff02c748; WORD $0xffff; BYTE $0xff // movq         $-1, (%rdx)
	LONG $0x000b21e9; BYTE $0x00               // jmp          LBB9_165, $2849(%rip)

LBB9_17:
	LONG $0x0001be41; WORD $0x0000 // movl         $1, %r14d
	WORD $0xff31                   // xorl         %edi, %edi
	LONG $0xd04b8d41               // leal         $-48(%r11), %ecx
	WORD $0xf980; BYTE $0x0a       // cmpb         $10, %cl
	LONG $0xff1b820f; WORD $0xffff // jb           LBB9_4, $-229(%rip)

LBB9_18:
	WORD $0x8948; BYTE $0x06                   // movq         %rax, (%rsi)
	LONG $0xfe02c748; WORD $0xffff; BYTE $0xff // movq         $-2, (%rdx)
	LONG $0x000afde9; BYTE $0x00               // jmp          LBB9_165, $2813(%rip)

LBB9_19:
	WORD $0x3145; BYTE $0xf6     // xorl         %r14d, %r14d
	WORD $0xc931                 // xorl         %ecx, %ecx
	WORD $0x3145; BYTE $0xc0     // xorl         %r8d, %r8d
	LONG $0x000063e9; BYTE $0x00 // jmp          LBB9_28, $99(%rip)

LBB9_20:
	WORD $0x894c; BYTE $0x0e     // movq         %r9, (%rsi)
	LONG $0x000ae8e9; BYTE $0x00 // jmp          LBB9_165, $2792(%rip)

LBB9_21:
	WORD $0x3145; BYTE $0xc0 // xorl         %r8d, %r8d
	WORD $0xc931             // xorl         %ecx, %ecx
	WORD $0x3145; BYTE $0xf6 // xorl         %r14d, %r14d

LBB9_22:
	WORD $0x3145; BYTE $0xc9                   // xorl         %r9d, %r9d
	WORD $0x8545; BYTE $0xf6                   // testl        %r14d, %r14d
	LONG $0xc19f0f41                           // setg         %r9b
	LONG $0x2efb8041                           // cmpb         $46, %r11b
	LONG $0x002f850f; WORD $0x0000             // jne          LBB9_26, $47(%rip)
	WORD $0xff48; BYTE $0xc0                   // incq         %rax
	LONG $0x0802c748; WORD $0x0000; BYTE $0x00 // movq         $8, (%rdx)
	LONG $0xc07d8b4c                           // movq         $-64(%rbp), %r15
	WORD $0x394c; BYTE $0xf8                   // cmpq         %r15, %rax
	LONG $0x0291830f; WORD $0x0000             // jae          LBB9_68, $657(%rip)
	LONG $0x021c8a41                           // movb         (%r10,%rax), %bl
	WORD $0xc380; BYTE $0xd0                   // addb         $-48, %bl
	WORD $0xfb80; BYTE $0x0a                   // cmpb         $10, %bl
	LONG $0x05f3830f; WORD $0x0000             // jae          LBB9_105, $1523(%rip)
	WORD $0x3145; BYTE $0xdb                   // xorl         %r11d, %r11d
	LONG $0x00001de9; BYTE $0x00               // jmp          LBB9_30, $29(%rip)

LBB9_26:
	LONG $0xc07d8b4c             // movq         $-64(%rbp), %r15
	LONG $0x000011e9; BYTE $0x00 // jmp          LBB9_29, $17(%rip)

LBB9_27:
	LONG $0xc07d8b4c         // movq         $-64(%rbp), %r15
	WORD $0x894c; BYTE $0xf8 // movq         %r15, %rax

LBB9_28:
	WORD $0x3145; BYTE $0xc9 // xorl         %r9d, %r9d
	WORD $0x8545; BYTE $0xf6 // testl        %r14d, %r14d
	LONG $0xc19f0f41         // setg         %r9b

LBB9_29:
	WORD $0xb341; BYTE $0x01 // movb         $1, %r11b

LBB9_30:
	WORD $0x8545; BYTE $0xf6                                 // testl        %r14d, %r14d
	LONG $0x0072850f; WORD $0x0000                           // jne          LBB9_39, $114(%rip)
	WORD $0x854d; BYTE $0xc0                                 // testq        %r8, %r8
	LONG $0x0069850f; WORD $0x0000                           // jne          LBB9_39, $105(%rip)
	WORD $0x394c; BYTE $0xf8                                 // cmpq         %r15, %rax
	LONG $0x004c830f; WORD $0x0000                           // jae          LBB9_37, $76(%rip)
	LONG $0xb84d8944                                         // movl         %r9d, $-72(%rbp)
	WORD $0x8941; BYTE $0xc1                                 // movl         %eax, %r9d
	WORD $0x2945; BYTE $0xf9                                 // subl         %r15d, %r9d
	WORD $0xc931                                             // xorl         %ecx, %ecx
	WORD $0x3145; BYTE $0xf6                                 // xorl         %r14d, %r14d
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB9_34:
	LONG $0x023c8041; BYTE $0x30   // cmpb         $48, (%r10,%rax)
	LONG $0x0031850f; WORD $0x0000 // jne          LBB9_38, $49(%rip)
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	WORD $0xff41; BYTE $0xce       // decl         %r14d
	WORD $0x3949; BYTE $0xc7       // cmpq         %rax, %r15
	LONG $0xffe6850f; WORD $0xffff // jne          LBB9_34, $-26(%rip)
	WORD $0x3145; BYTE $0xc0       // xorl         %r8d, %r8d
	WORD $0x8445; BYTE $0xdb       // testb        %r11b, %r11b
	LONG $0xc87d8b48               // movq         $-56(%rbp), %rdi
	LONG $0x0134850f; WORD $0x0000 // jne          LBB9_58, $308(%rip)
	LONG $0x000164e9; BYTE $0x00   // jmp          LBB9_62, $356(%rip)

LBB9_37:
	WORD $0x3145; BYTE $0xf6     // xorl         %r14d, %r14d
	WORD $0xc931                 // xorl         %ecx, %ecx
	WORD $0x3145; BYTE $0xc0     // xorl         %r8d, %r8d
	LONG $0x000007e9; BYTE $0x00 // jmp          LBB9_39, $7(%rip)

LBB9_38:
	WORD $0x3145; BYTE $0xc0 // xorl         %r8d, %r8d
	LONG $0xb84d8b44         // movl         $-72(%rbp), %r9d

LBB9_39:
	WORD $0x394c; BYTE $0xf8       // cmpq         %r15, %rax
	LONG $0x004d830f; WORD $0x0000 // jae          LBB9_45, $77(%rip)
	WORD $0xf983; BYTE $0x12       // cmpl         $18, %ecx
	LONG $0x00448f0f; WORD $0x0000 // jg           LBB9_45, $68(%rip)
	LONG $0xffffd0be; BYTE $0xff   // movl         $4294967248, %esi
	LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB9_42:
	LONG $0x1cb60f41; BYTE $0x02   // movzbl       (%r10,%rax), %ebx
	WORD $0x7b8d; BYTE $0xd0       // leal         $-48(%rbx), %edi
	LONG $0x09ff8040               // cmpb         $9, %dil
	LONG $0x0027870f; WORD $0x0000 // ja           LBB9_45, $39(%rip)
	LONG $0x803c8d4b               // leaq         (%r8,%r8,4), %rdi
	WORD $0xf301                   // addl         %esi, %ebx
	LONG $0x7b048d4c               // leaq         (%rbx,%rdi,2), %r8
	WORD $0xff41; BYTE $0xce       // decl         %r14d
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	WORD $0x394c; BYTE $0xf8       // cmpq         %r15, %rax
	LONG $0x000e830f; WORD $0x0000 // jae          LBB9_45, $14(%rip)
	WORD $0x798d; BYTE $0x01       // leal         $1(%rcx), %edi
	WORD $0xf983; BYTE $0x12       // cmpl         $18, %ecx
	WORD $0xf989                   // movl         %edi, %ecx
	LONG $0xffc78c0f; WORD $0xffff // jl           LBB9_42, $-57(%rip)

LBB9_45:
	WORD $0x394c; BYTE $0xf8             // cmpq         %r15, %rax
	LONG $0x00a5830f; WORD $0x0000       // jae          LBB9_57, $165(%rip)
	LONG $0x020c8a41                     // movb         (%r10,%rax), %cl
	WORD $0x718d; BYTE $0xd0             // leal         $-48(%rcx), %esi
	LONG $0x09fe8040                     // cmpb         $9, %sil
	LONG $0x0032870f; WORD $0x0000       // ja           LBB9_51, $50(%rip)
	LONG $0xff778d49                     // leaq         $-1(%r15), %rsi
	QUAD $0x9090909090909090; BYTE $0x90 // .p2align 4, 0x90

LBB9_48:
	WORD $0x3948; BYTE $0xc6       // cmpq         %rax, %rsi
	LONG $0x016e840f; WORD $0x0000 // je           LBB9_69, $366(%rip)
	LONG $0x4cb60f41; WORD $0x0102 // movzbl       $1(%r10,%rax), %ecx
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	WORD $0x798d; BYTE $0xd0       // leal         $-48(%rcx), %edi
	LONG $0x09ff8040               // cmpb         $9, %dil
	LONG $0xffe1860f; WORD $0xffff // jbe          LBB9_48, $-31(%rip)
	LONG $0x0001b941; WORD $0x0000 // movl         $1, %r9d

LBB9_51:
	WORD $0xc980; BYTE $0x20                   // orb          $32, %cl
	WORD $0xf980; BYTE $0x65                   // cmpb         $101, %cl
	LONG $0x0056850f; WORD $0x0000             // jne          LBB9_57, $86(%rip)
	LONG $0x01588d48                           // leaq         $1(%rax), %rbx
	LONG $0x0802c748; WORD $0x0000; BYTE $0x00 // movq         $8, (%rdx)
	WORD $0x394c; BYTE $0xfb                   // cmpq         %r15, %rbx
	LONG $0x011f830f; WORD $0x0000             // jae          LBB9_68, $287(%rip)
	LONG $0x1a348a41                           // movb         (%r10,%rbx), %sil
	LONG $0x2dfe8040                           // cmpb         $45, %sil
	LONG $0x0010840f; WORD $0x0000             // je           LBB9_55, $16(%rip)
	LONG $0x0001bb41; WORD $0x0000             // movl         $1, %r11d
	LONG $0x2bfe8040                           // cmpb         $43, %sil
	LONG $0x0464850f; WORD $0x0000             // jne          LBB9_103, $1124(%rip)

LBB9_55:
	LONG $0x02c08348               // addq         $2, %rax
	WORD $0x394c; BYTE $0xf8       // cmpq         %r15, %rax
	LONG $0x00f4830f; WORD $0x0000 // jae          LBB9_68, $244(%rip)
	WORD $0xc931                   // xorl         %ecx, %ecx
	LONG $0x2bfe8040               // cmpb         $43, %sil
	WORD $0x940f; BYTE $0xc1       // sete         %cl
	LONG $0x095c8d44; BYTE $0xff   // leal         $-1(%rcx,%rcx), %r11d
	LONG $0x02348a41               // movb         (%r10,%rax), %sil
	LONG $0x000443e9; BYTE $0x00   // jmp          LBB9_104, $1091(%rip)

LBB9_57:
	LONG $0xb84d8944               // movl         %r9d, $-72(%rbp)
	WORD $0x8945; BYTE $0xf1       // movl         %r14d, %r9d
	WORD $0x8949; BYTE $0xc7       // movq         %rax, %r15
	WORD $0x8445; BYTE $0xdb       // testb        %r11b, %r11b
	LONG $0xc87d8b48               // movq         $-56(%rbp), %rdi
	LONG $0x0035840f; WORD $0x0000 // je           LBB9_62, $53(%rip)

LBB9_58:
	WORD $0x8545; BYTE $0xc9               // testl        %r9d, %r9d
	LONG $0x0025850f; WORD $0x0000         // jne          LBB9_61, $37(%rip)
	QUAD $0x000000000000b848; WORD $0x8000 // movabsq      $-9223372036854775808, %rax
	WORD $0x6348; BYTE $0xcf               // movslq       %edi, %rcx
	WORD $0x854d; BYTE $0xc0               // testq        %r8, %r8
	LONG $0x0126890f; WORD $0x0000         // jns          LBB9_75, $294(%rip)
	WORD $0x894c; BYTE $0xc6               // movq         %r8, %rsi
	WORD $0x2148; BYTE $0xce               // andq         %rcx, %rsi
	WORD $0x3948; BYTE $0xc6               // cmpq         %rax, %rsi
	LONG $0x0117840f; WORD $0x0000         // je           LBB9_75, $279(%rip)

LBB9_61:
	LONG $0x0802c748; WORD $0x0000; BYTE $0x00 // movq         $8, (%rdx)

LBB9_62:
	QUAD $0xffffffffffffb848; WORD $0x000f     // movabsq      $4503599627370495, %rax
	LONG $0x01708d48                           // leaq         $1(%rax), %rsi
	WORD $0x3949; BYTE $0xf0                   // cmpq         %rsi, %r8
	LONG $0x88558948                           // movq         %rdx, $-120(%rbp)
	LONG $0x00c9830f; WORD $0x0000             // jae          LBB9_72, $201(%rip)
	LONG $0x6ef9c1c4; BYTE $0xc0               // vmovq        %r8, %xmm0
	QUAD $0xfffffbf50562f9c5                   // vpunpckldq   $-1035(%rip), %xmm0, %xmm0  /* LCPI9_0(%rip) */
	QUAD $0xfffffbfd055cf9c5                   // vsubpd       $-1027(%rip), %xmm0, %xmm0  /* LCPI9_1(%rip) */
	LONG $0x0579e3c4; WORD $0x01c8             // vpermilpd    $1, %xmm0, %xmm1
	LONG $0xc058f3c5                           // vaddsd       %xmm0, %xmm1, %xmm0
	LONG $0x7ef9e1c4; BYTE $0xc0               // vmovq        %xmm0, %rax
	WORD $0xefc1; BYTE $0x1f                   // shrl         $31, %edi
	LONG $0x3fe7c148                           // shlq         $63, %rdi
	WORD $0x0948; BYTE $0xc7                   // orq          %rax, %rdi
	WORD $0x854d; BYTE $0xc0                   // testq        %r8, %r8
	LONG $0x082a840f; WORD $0x0000             // je           LBB9_161, $2090(%rip)
	WORD $0x8545; BYTE $0xc9                   // testl        %r9d, %r9d
	LONG $0x0821840f; WORD $0x0000             // je           LBB9_161, $2081(%rip)
	LONG $0x6ef9e1c4; BYTE $0xc7               // vmovq        %rdi, %xmm0
	LONG $0xff418d41                           // leal         $-1(%r9), %eax
	WORD $0xf883; BYTE $0x24                   // cmpl         $36, %eax
	LONG $0x0053870f; WORD $0x0000             // ja           LBB9_70, $83(%rip)
	LONG $0x17f98341                           // cmpl         $23, %r9d
	LONG $0x00d48c0f; WORD $0x0000             // jl           LBB9_76, $212(%rip)
	LONG $0xea418d41                           // leal         $-22(%r9), %eax
	LONG $0x2b0d8d48; WORD $0x00ed; BYTE $0x00 // leaq         $60715(%rip), %rcx  /* _P10_TAB(%rip) */
	LONG $0x0459fbc5; BYTE $0xc1               // vmulsd       (%rcx,%rax,8), %xmm0, %xmm0
	LONG $0x000016b8; BYTE $0x00               // movl         $22, %eax
	LONG $0x0000bde9; BYTE $0x00               // jmp          LBB9_77, $189(%rip)

LBB9_68:
	LONG $0xa0458b48                           // movq         $-96(%rbp), %rax
	WORD $0x894c; BYTE $0x38                   // movq         %r15, (%rax)
	LONG $0xff02c748; WORD $0xffff; BYTE $0xff // movq         $-1, (%rdx)
	LONG $0x000811e9; BYTE $0x00               // jmp          LBB9_165, $2065(%rip)

LBB9_69:
	LONG $0x01b845c7; WORD $0x0000; BYTE $0x00 // movl         $1, $-72(%rbp)
	WORD $0x8945; BYTE $0xf1                   // movl         %r14d, %r9d
	WORD $0x8445; BYTE $0xdb                   // testb        %r11b, %r11b
	LONG $0xc87d8b48                           // movq         $-56(%rbp), %rdi
	LONG $0xff10850f; WORD $0xffff             // jne          LBB9_58, $-240(%rip)
	LONG $0xffff40e9; BYTE $0xff               // jmp          LBB9_62, $-192(%rip)

LBB9_70:
	LONG $0xeaf98341                           // cmpl         $-22, %r9d
	LONG $0x001a820f; WORD $0x0000             // jb           LBB9_72, $26(%rip)
	WORD $0xf741; BYTE $0xd9                   // negl         %r9d
	LONG $0xd9058d48; WORD $0x00ec; BYTE $0x00 // leaq         $60633(%rip), %rax  /* _P10_TAB(%rip) */
	LONG $0x5e7ba1c4; WORD $0xc804             // vdivsd       (%rax,%r9,8), %xmm0, %xmm0
	LONG $0x7ef9e1c4; BYTE $0xc7               // vmovq        %xmm0, %rdi
	LONG $0x000798e9; BYTE $0x00               // jmp          LBB9_161, $1944(%rip)

LBB9_72:
	LONG $0x98758948                           // movq         %rsi, $-104(%rbp)
	LONG $0x5c818d41; WORD $0x0001; BYTE $0x00 // leal         $348(%r9), %eax
	LONG $0x0002b73d; BYTE $0x00               // cmpl         $695, %eax
	LONG $0x01a8870f; WORD $0x0000             // ja           LBB9_90, $424(%rip)
	WORD $0x854d; BYTE $0xc0                   // testq        %r8, %r8
	LONG $0x0097840f; WORD $0x0000             // je           LBB9_81, $151(%rip)

LBB9_74:
	LONG $0xc8bd0f49             // bsrq         %r8, %rcx
	LONG $0x3ff18348             // xorq         $63, %rcx
	LONG $0x00008fe9; BYTE $0x00 // jmp          LBB9_82, $143(%rip)

LBB9_75:
	LONG $0x6ef9c1c4; BYTE $0xc0   // vmovq        %r8, %xmm0
	LONG $0xc1af0f4c               // imulq        %rcx, %r8
	QUAD $0xfffffafc0562f9c5       // vpunpckldq   $-1284(%rip), %xmm0, %xmm0  /* LCPI9_0(%rip) */
	QUAD $0xfffffb04055cf9c5       // vsubpd       $-1276(%rip), %xmm0, %xmm0  /* LCPI9_1(%rip) */
	LONG $0x1042894c               // movq         %r8, $16(%rdx)
	LONG $0x0579e3c4; WORD $0x01c8 // vpermilpd    $1, %xmm0, %xmm1
	LONG $0xc058f3c5               // vaddsd       %xmm0, %xmm1, %xmm0
	WORD $0x2148; BYTE $0xc8       // andq         %rcx, %rax
	LONG $0x7ef9e1c4; BYTE $0xc1   // vmovq        %xmm0, %rcx
	WORD $0x0948; BYTE $0xc1       // orq          %rax, %rcx
	LONG $0x084a8948               // movq         %rcx, $8(%rdx)
	LONG $0x000763e9; BYTE $0x00   // jmp          LBB9_164, $1891(%rip)

LBB9_76:
	WORD $0x8944; BYTE $0xc8 // movl         %r9d, %eax

LBB9_77:
	QUAD $0xfffffae7052ef9c5                   // vucomisd     $-1305(%rip), %xmm0  /* LCPI9_2(%rip) */
	LONG $0x002a870f; WORD $0x0000             // ja           LBB9_80, $42(%rip)
	QUAD $0xfffffae10d10fbc5                   // vmovsd       $-1311(%rip), %xmm1  /* LCPI9_3(%rip) */
	LONG $0xc82ef9c5                           // vucomisd     %xmm0, %xmm1
	LONG $0x0018870f; WORD $0x0000             // ja           LBB9_80, $24(%rip)
	WORD $0xc089                               // movl         %eax, %eax
	LONG $0x360d8d48; WORD $0x00ec; BYTE $0x00 // leaq         $60470(%rip), %rcx  /* _P10_TAB(%rip) */
	LONG $0x0459fbc5; BYTE $0xc1               // vmulsd       (%rcx,%rax,8), %xmm0, %xmm0
	LONG $0x7ef9e1c4; BYTE $0xc7               // vmovq        %xmm0, %rdi
	LONG $0x0006f6e9; BYTE $0x00               // jmp          LBB9_161, $1782(%rip)

LBB9_80:
	LONG $0x98758948                           // movq         %rsi, $-104(%rbp)
	LONG $0x5c818d41; WORD $0x0001; BYTE $0x00 // leal         $348(%r9), %eax
	WORD $0x854d; BYTE $0xc0                   // testq        %r8, %r8
	LONG $0xff69850f; WORD $0xffff             // jne          LBB9_74, $-151(%rip)

LBB9_81:
	LONG $0x000040b9; BYTE $0x00 // movl         $64, %ecx

LBB9_82:
	WORD $0x894c; BYTE $0xc3                   // movq         %r8, %rbx
	LONG $0xc84d8948                           // movq         %rcx, $-56(%rbp)
	WORD $0xd348; BYTE $0xe3                   // shlq         %cl, %rbx
	WORD $0xc089                               // movl         %eax, %eax
	LONG $0x04e0c148                           // shlq         $4, %rax
	LONG $0xb70d8d48; WORD $0x00ec; BYTE $0x00 // leaq         $60599(%rip), %rcx  /* _POW10_M128_TAB(%rip) */
	LONG $0xc0458948                           // movq         %rax, $-64(%rbp)
	LONG $0x087c8b48; BYTE $0x08               // movq         $8(%rax,%rcx), %rdi
	WORD $0x8948; BYTE $0xf8                   // movq         %rdi, %rax
	WORD $0xf748; BYTE $0xe3                   // mulq         %rbx
	WORD $0x8949; BYTE $0xc6                   // movq         %rax, %r14
	WORD $0x8949; BYTE $0xd3                   // movq         %rdx, %r11
	LONG $0x01ffe281; WORD $0x0000             // andl         $511, %edx
	WORD $0x8948; BYTE $0xd9                   // movq         %rbx, %rcx
	WORD $0xf748; BYTE $0xd1                   // notq         %rcx
	WORD $0x3948; BYTE $0xc8                   // cmpq         %rcx, %rax
	LONG $0x004d860f; WORD $0x0000             // jbe          LBB9_87, $77(%rip)
	LONG $0x01fffa81; WORD $0x0000             // cmpl         $511, %edx
	LONG $0x0041850f; WORD $0x0000             // jne          LBB9_87, $65(%rip)
	WORD $0x8948; BYTE $0xd8                   // movq         %rbx, %rax
	LONG $0x77158d48; WORD $0x00ec; BYTE $0x00 // leaq         $60535(%rip), %rdx  /* _POW10_M128_TAB(%rip) */
	LONG $0xc0758b48                           // movq         $-64(%rbp), %rsi
	LONG $0x1624f748                           // mulq         (%rsi,%rdx)
	WORD $0x0149; BYTE $0xd6                   // addq         %rdx, %r14
	LONG $0x00d38349                           // adcq         $0, %r11
	WORD $0x8944; BYTE $0xda                   // movl         %r11d, %edx
	LONG $0x01ffe281; WORD $0x0000             // andl         $511, %edx
	WORD $0x3948; BYTE $0xc8                   // cmpq         %rcx, %rax
	LONG $0x0016860f; WORD $0x0000             // jbe          LBB9_87, $22(%rip)
	LONG $0xfffe8349                           // cmpq         $-1, %r14
	LONG $0x000c850f; WORD $0x0000             // jne          LBB9_87, $12(%rip)
	LONG $0x01fffa81; WORD $0x0000             // cmpl         $511, %edx
	LONG $0x0075840f; WORD $0x0000             // je           LBB9_90, $117(%rip)

LBB9_87:
	WORD $0x894c; BYTE $0xd8       // movq         %r11, %rax
	LONG $0x3fe8c148               // shrq         $63, %rax
	WORD $0x488d; BYTE $0x09       // leal         $9(%rax), %ecx
	WORD $0xd349; BYTE $0xeb       // shrq         %cl, %r11
	WORD $0x094c; BYTE $0xf2       // orq          %r14, %rdx
	LONG $0x000f850f; WORD $0x0000 // jne          LBB9_89, $15(%rip)
	WORD $0x8944; BYTE $0xd9       // movl         %r11d, %ecx
	WORD $0xe183; BYTE $0x03       // andl         $3, %ecx
	WORD $0xf983; BYTE $0x01       // cmpl         $1, %ecx
	LONG $0x0050840f; WORD $0x0000 // je           LBB9_90, $80(%rip)

LBB9_89:
	LONG $0x6ac96941; WORD $0x0352; BYTE $0x00 // imull        $217706, %r9d, %ecx
	WORD $0xf9c1; BYTE $0x10                   // sarl         $16, %ecx
	LONG $0x043fc181; WORD $0x0000             // addl         $1087, %ecx
	WORD $0x8948; BYTE $0xfe                   // movq         %rdi, %rsi
	WORD $0x6348; BYTE $0xf9                   // movslq       %ecx, %rdi
	QUAD $0x000000000000bb48; WORD $0x01c0     // movabsq      $126100789566373888, %rbx
	WORD $0x8944; BYTE $0xda                   // movl         %r11d, %edx
	WORD $0xe283; BYTE $0x01                   // andl         $1, %edx
	WORD $0x014c; BYTE $0xda                   // addq         %r11, %rdx
	WORD $0x8948; BYTE $0xd1                   // movq         %rdx, %rcx
	WORD $0x2148; BYTE $0xd9                   // andq         %rbx, %rcx
	LONG $0xb07d8948                           // movq         %rdi, $-80(%rbp)
	LONG $0xc87d2b48                           // subq         $-56(%rbp), %rdi
	LONG $0x07448d48; BYTE $0xfe               // leaq         $-2(%rdi,%rax), %rax
	LONG $0x01f98348                           // cmpq         $1, %rcx
	LONG $0xffd88348                           // sbbq         $-1, %rax
	LONG $0x07fd3d48; WORD $0x0000             // cmpq         $2045, %rax
	LONG $0x0071860f; WORD $0x0000             // jbe          LBB9_95, $113(%rip)

LBB9_90:
	LONG $0xa0458b48                           // movq         $-96(%rbp), %rax
	WORD $0x8b48; BYTE $0x00                   // movq         (%rax), %rax
	LONG $0x02348d4d                           // leaq         (%r10,%rax), %r14
	WORD $0x894c; BYTE $0xf9                   // movq         %r15, %rcx
	LONG $0xc8458948                           // movq         %rax, $-56(%rbp)
	WORD $0x2948; BYTE $0xc1                   // subq         %rax, %rcx
	WORD $0x854d; BYTE $0xed                   // testq        %r13, %r13
	LONG $0x02ce840f; WORD $0x0000             // je           LBB9_119, $718(%rip)
	LONG $0x2404c641; BYTE $0x00               // movb         $0, (%r12)
	LONG $0x01fd8349                           // cmpq         $1, %r13
	LONG $0x02bf840f; WORD $0x0000             // je           LBB9_119, $703(%rip)
	LONG $0xff4d8d4d                           // leaq         $-1(%r13), %r9
	LONG $0x000001be; BYTE $0x00               // movl         $1, %esi
	LONG $0x80f98149; WORD $0x0000; BYTE $0x00 // cmpq         $128, %r9
	LONG $0x0298820f; WORD $0x0000             // jb           LBB9_118, $664(%rip)
	WORD $0x894c; BYTE $0xce                   // movq         %r9, %rsi
	LONG $0x80e68348                           // andq         $-128, %rsi
	LONG $0x80568d48                           // leaq         $-128(%rsi), %rdx
	WORD $0x8948; BYTE $0xd0                   // movq         %rdx, %rax
	LONG $0x07e8c148                           // shrq         $7, %rax
	WORD $0xff48; BYTE $0xc0                   // incq         %rax
	WORD $0xc389                               // movl         %eax, %ebx
	WORD $0xe383; BYTE $0x03                   // andl         $3, %ebx
	LONG $0x80fa8148; WORD $0x0001; BYTE $0x00 // cmpq         $384, %rdx
	LONG $0x0167830f; WORD $0x0000             // jae          LBB9_111, $359(%rip)
	WORD $0xff31                               // xorl         %edi, %edi
	LONG $0x000212e9; BYTE $0x00               // jmp          LBB9_113, $530(%rip)

LBB9_95:
	WORD $0xff48; BYTE $0xc0               // incq         %rax
	LONG $0x01f98348                       // cmpq         $1, %rcx
	WORD $0x02b1                           // movb         $2, %cl
	WORD $0xd980; BYTE $0x00               // sbbb         $0, %cl
	WORD $0xd348; BYTE $0xea               // shrq         %cl, %rdx
	LONG $0x34e0c148                       // shlq         $52, %rax
	QUAD $0xffffffffffffb948; WORD $0x000f // movabsq      $4503599627370495, %rcx
	WORD $0x2148; BYTE $0xca               // andq         %rcx, %rdx
	WORD $0x0948; BYTE $0xc2               // orq          %rax, %rdx
	WORD $0x8948; BYTE $0xd1               // movq         %rdx, %rcx
	QUAD $0x000000000000b848; WORD $0x8000 // movabsq      $-9223372036854775808, %rax
	WORD $0x0948; BYTE $0xc1               // orq          %rax, %rcx
	LONG $0x00a87d80                       // cmpb         $0, $-88(%rbp)
	LONG $0xca440f48                       // cmoveq       %rdx, %rcx
	LONG $0x00b87d83                       // cmpl         $0, $-72(%rbp)
	LONG $0x037f840f; WORD $0x0000         // je           LBB9_142, $895(%rip)
	WORD $0x8948; BYTE $0xf7               // movq         %rsi, %rdi
	WORD $0x8948; BYTE $0xcb               // movq         %rcx, %rbx
	LONG $0x0040bb41; WORD $0x0000         // movl         $64, %r11d
	WORD $0xff49; BYTE $0xc0               // incq         %r8
	LONG $0x0008840f; WORD $0x0000         // je           LBB9_98, $8(%rip)
	LONG $0xd8bd0f4d                       // bsrq         %r8, %r11
	LONG $0x3ff38349                       // xorq         $63, %r11

LBB9_98:
	WORD $0x8944; BYTE $0xd9                   // movl         %r11d, %ecx
	WORD $0xd349; BYTE $0xe0                   // shlq         %cl, %r8
	WORD $0x8948; BYTE $0xf8                   // movq         %rdi, %rax
	WORD $0xf749; BYTE $0xe0                   // mulq         %r8
	WORD $0x8949; BYTE $0xc6                   // movq         %rax, %r14
	WORD $0x8949; BYTE $0xd1                   // movq         %rdx, %r9
	LONG $0x01ffe281; WORD $0x0000             // andl         $511, %edx
	WORD $0x894c; BYTE $0xc1                   // movq         %r8, %rcx
	WORD $0xf748; BYTE $0xd1                   // notq         %rcx
	WORD $0x3948; BYTE $0xc8                   // cmpq         %rcx, %rax
	LONG $0x0343860f; WORD $0x0000             // jbe          LBB9_424, $835(%rip)
	LONG $0x01fffa81; WORD $0x0000             // cmpl         $511, %edx
	WORD $0x8948; BYTE $0xdf                   // movq         %rbx, %rdi
	LONG $0x0337850f; WORD $0x0000             // jne          LBB9_425, $823(%rip)
	WORD $0x894c; BYTE $0xc0                   // movq         %r8, %rax
	LONG $0xb8158d48; WORD $0x00ea; BYTE $0x00 // leaq         $60088(%rip), %rdx  /* _POW10_M128_TAB(%rip) */
	LONG $0xc0758b48                           // movq         $-64(%rbp), %rsi
	LONG $0x1624f748                           // mulq         (%rsi,%rdx)
	WORD $0x0149; BYTE $0xd6                   // addq         %rdx, %r14
	LONG $0x00d18349                           // adcq         $0, %r9
	WORD $0x8944; BYTE $0xca                   // movl         %r9d, %edx
	LONG $0x01ffe281; WORD $0x0000             // andl         $511, %edx
	WORD $0x3948; BYTE $0xc8                   // cmpq         %rcx, %rax
	LONG $0x0309860f; WORD $0x0000             // jbe          LBB9_424, $777(%rip)
	LONG $0xfffe8349                           // cmpq         $-1, %r14
	LONG $0x02ff850f; WORD $0x0000             // jne          LBB9_424, $767(%rip)
	LONG $0x01fffa81; WORD $0x0000             // cmpl         $511, %edx
	WORD $0x8948; BYTE $0xdf                   // movq         %rbx, %rdi
	LONG $0xfeb3840f; WORD $0xffff             // je           LBB9_90, $-333(%rip)
	LONG $0x0002eee9; BYTE $0x00               // jmp          LBB9_425, $750(%rip)

LBB9_103:
	WORD $0x8948; BYTE $0xd8 // movq         %rbx, %rax

LBB9_104:
	WORD $0x5e8d; BYTE $0xd0       // leal         $-48(%rsi), %ebx
	WORD $0xfb80; BYTE $0x09       // cmpb         $9, %bl
	LONG $0x0013860f; WORD $0x0000 // jbe          LBB9_106, $19(%rip)

LBB9_105:
	LONG $0xa04d8b48                           // movq         $-96(%rbp), %rcx
	WORD $0x8948; BYTE $0x01                   // movq         %rax, (%rcx)
	LONG $0xfe02c748; WORD $0xffff; BYTE $0xff // movq         $-2, (%rdx)
	LONG $0x00049fe9; BYTE $0x00               // jmp          LBB9_165, $1183(%rip)

LBB9_106:
	LONG $0xb84d8944               // movl         %r9d, $-72(%rbp)
	WORD $0x3145; BYTE $0xc9       // xorl         %r9d, %r9d
	WORD $0x394c; BYTE $0xf8       // cmpq         %r15, %rax
	LONG $0x0378830f; WORD $0x0000 // jae          LBB9_144, $888(%rip)
	WORD $0xfb80; BYTE $0x09       // cmpb         $9, %bl
	LONG $0x036f870f; WORD $0x0000 // ja           LBB9_144, $879(%rip)
	LONG $0xff5f8d49               // leaq         $-1(%r15), %rbx
	WORD $0x3145; BYTE $0xc9       // xorl         %r9d, %r9d

LBB9_109:
	WORD $0x8944; BYTE $0xcf                   // movl         %r9d, %edi
	LONG $0x10f98141; WORD $0x0027; BYTE $0x00 // cmpl         $10000, %r9d
	WORD $0x0c8d; BYTE $0xbf                   // leal         (%rdi,%rdi,4), %ecx
	LONG $0xf6b60f40                           // movzbl       %sil, %esi
	LONG $0x4e4c8d44; BYTE $0xd0               // leal         $-48(%rsi,%rcx,2), %r9d
	LONG $0xcf4d0f44                           // cmovgel      %edi, %r9d
	WORD $0x3948; BYTE $0xc3                   // cmpq         %rax, %rbx
	LONG $0x0342840f; WORD $0x0000             // je           LBB9_143, $834(%rip)
	LONG $0x74b60f41; WORD $0x0102             // movzbl       $1(%r10,%rax), %esi
	WORD $0xff48; BYTE $0xc0                   // incq         %rax
	WORD $0x4e8d; BYTE $0xd0                   // leal         $-48(%rsi), %ecx
	WORD $0xf980; BYTE $0x0a                   // cmpb         $10, %cl
	LONG $0xffc8820f; WORD $0xffff             // jb           LBB9_109, $-56(%rip)
	LONG $0x00032be9; BYTE $0x00               // jmp          LBB9_144, $811(%rip)

LBB9_111:
	LONG $0xfce08348         // andq         $-4, %rax
	WORD $0xf748; BYTE $0xd8 // negq         %rax
	WORD $0xff31             // xorl         %edi, %edi
	LONG $0xc0eff9c5         // vpxor        %xmm0, %xmm0, %xmm0

LBB9_112:
	LONG $0x7f7ec1c4; WORD $0x3c44; BYTE $0x01 // vmovdqu      %ymm0, $1(%r12,%rdi)
	LONG $0x7f7ec1c4; WORD $0x3c44; BYTE $0x21 // vmovdqu      %ymm0, $33(%r12,%rdi)
	LONG $0x7f7ec1c4; WORD $0x3c44; BYTE $0x41 // vmovdqu      %ymm0, $65(%r12,%rdi)
	LONG $0x7f7ec1c4; WORD $0x3c44; BYTE $0x61 // vmovdqu      %ymm0, $97(%r12,%rdi)
	QUAD $0x00813c847f7ec1c4; WORD $0x0000     // vmovdqu      %ymm0, $129(%r12,%rdi)
	QUAD $0x00a13c847f7ec1c4; WORD $0x0000     // vmovdqu      %ymm0, $161(%r12,%rdi)
	QUAD $0x00c13c847f7ec1c4; WORD $0x0000     // vmovdqu      %ymm0, $193(%r12,%rdi)
	QUAD $0x00e13c847f7ec1c4; WORD $0x0000     // vmovdqu      %ymm0, $225(%r12,%rdi)
	QUAD $0x01013c847f7ec1c4; WORD $0x0000     // vmovdqu      %ymm0, $257(%r12,%rdi)
	QUAD $0x01213c847f7ec1c4; WORD $0x0000     // vmovdqu      %ymm0, $289(%r12,%rdi)
	QUAD $0x01413c847f7ec1c4; WORD $0x0000     // vmovdqu      %ymm0, $321(%r12,%rdi)
	QUAD $0x01613c847f7ec1c4; WORD $0x0000     // vmovdqu      %ymm0, $353(%r12,%rdi)
	QUAD $0x01813c847f7ec1c4; WORD $0x0000     // vmovdqu      %ymm0, $385(%r12,%rdi)
	QUAD $0x01a13c847f7ec1c4; WORD $0x0000     // vmovdqu      %ymm0, $417(%r12,%rdi)
	QUAD $0x01c13c847f7ec1c4; WORD $0x0000     // vmovdqu      %ymm0, $449(%r12,%rdi)
	QUAD $0x01e13c847f7ec1c4; WORD $0x0000     // vmovdqu      %ymm0, $481(%r12,%rdi)
	LONG $0x00c78148; WORD $0x0002; BYTE $0x00 // addq         $512, %rdi
	LONG $0x04c08348                           // addq         $4, %rax
	LONG $0xff5b850f; WORD $0xffff             // jne          LBB9_112, $-165(%rip)

LBB9_113:
	WORD $0x8548; BYTE $0xdb       // testq        %rbx, %rbx
	LONG $0x0036840f; WORD $0x0000 // je           LBB9_116, $54(%rip)
	WORD $0xf748; BYTE $0xdb       // negq         %rbx
	LONG $0xc0eff9c5               // vpxor        %xmm0, %xmm0, %xmm0

LBB9_115:
	WORD $0x8948; BYTE $0xf8                   // movq         %rdi, %rax
	LONG $0x01c88348                           // orq          $1, %rax
	LONG $0x7f7ec1c4; WORD $0x0404             // vmovdqu      %ymm0, (%r12,%rax)
	LONG $0x7f7ec1c4; WORD $0x0444; BYTE $0x20 // vmovdqu      %ymm0, $32(%r12,%rax)
	LONG $0x7f7ec1c4; WORD $0x0444; BYTE $0x40 // vmovdqu      %ymm0, $64(%r12,%rax)
	LONG $0x7f7ec1c4; WORD $0x0444; BYTE $0x60 // vmovdqu      %ymm0, $96(%r12,%rax)
	LONG $0x80ef8348                           // subq         $-128, %rdi
	WORD $0xff48; BYTE $0xc3                   // incq         %rbx
	LONG $0xffd1850f; WORD $0xffff             // jne          LBB9_115, $-47(%rip)

LBB9_116:
	WORD $0x3949; BYTE $0xf1                   // cmpq         %rsi, %r9
	LONG $0x0021840f; WORD $0x0000             // je           LBB9_119, $33(%rip)
	LONG $0x01ce8348                           // orq          $1, %rsi
	QUAD $0x9090909090909090; LONG $0x90909090 // .p2align 4, 0x90

LBB9_118:
	LONG $0x3404c641; BYTE $0x00   // movb         $0, (%r12,%rsi)
	WORD $0xff48; BYTE $0xc6       // incq         %rsi
	WORD $0x3949; BYTE $0xf5       // cmpq         %rsi, %r13
	LONG $0xffef850f; WORD $0xffff // jne          LBB9_118, $-17(%rip)

LBB9_119:
	WORD $0x8a41; BYTE $0x1e       // movb         (%r14), %bl
	WORD $0xf631                   // xorl         %esi, %esi
	WORD $0xfb80; BYTE $0x2d       // cmpb         $45, %bl
	LONG $0xc6940f40               // sete         %sil
	WORD $0xff31                   // xorl         %edi, %edi
	WORD $0x3948; BYTE $0xf1       // cmpq         %rsi, %rcx
	LONG $0x00b58e0f; WORD $0x0000 // jle          LBB9_134, $181(%rip)
	WORD $0x5d88; BYTE $0xd7       // movb         %bl, $-41(%rbp)
	LONG $0xc07d894c               // movq         %r15, $-64(%rbp)
	WORD $0x01b0                   // movb         $1, %al
	WORD $0x3145; BYTE $0xc9       // xorl         %r9d, %r9d
	WORD $0x3145; BYTE $0xdb       // xorl         %r11d, %r11d
	WORD $0xdb31                   // xorl         %ebx, %ebx
	WORD $0x3145; BYTE $0xff       // xorl         %r15d, %r15d
	LONG $0x000021e9; BYTE $0x00   // jmp          LBB9_124, $33(%rip)

LBB9_132:
	LONG $0x0001bb41; WORD $0x0000       // movl         $1, %r11d
	QUAD $0x9090909090909090; BYTE $0x90 // .p2align 4, 0x90

LBB9_123:
	WORD $0xff48; BYTE $0xc6       // incq         %rsi
	WORD $0x3948; BYTE $0xce       // cmpq         %rcx, %rsi
	WORD $0x9c0f; BYTE $0xc0       // setl         %al
	WORD $0x3948; BYTE $0xf1       // cmpq         %rsi, %rcx
	LONG $0x008e840f; WORD $0x0000 // je           LBB9_135, $142(%rip)

LBB9_124:
	WORD $0x8949; BYTE $0xf8       // movq         %rdi, %r8
	LONG $0x14b60f41; BYTE $0x36   // movzbl       (%r14,%rsi), %edx
	WORD $0x7a8d; BYTE $0xd0       // leal         $-48(%rdx), %edi
	LONG $0x09ff8040               // cmpb         $9, %dil
	LONG $0x0029870f; WORD $0x0000 // ja           LBB9_129, $41(%rip)
	WORD $0xfa80; BYTE $0x30       // cmpb         $48, %dl
	LONG $0x0036850f; WORD $0x0000 // jne          LBB9_131, $54(%rip)
	WORD $0xdb85                   // testl        %ebx, %ebx
	WORD $0x894c; BYTE $0xc7       // movq         %r8, %rdi
	LONG $0x0049840f; WORD $0x0000 // je           LBB9_133, $73(%rip)
	WORD $0x6349; BYTE $0xc1       // movslq       %r9d, %rax
	WORD $0x3949; BYTE $0xc5       // cmpq         %rax, %r13
	LONG $0x002e870f; WORD $0x0000 // ja           LBB9_121, $46(%rip)
	LONG $0x000030e9; BYTE $0x00   // jmp          LBB9_122, $48(%rip)
	LONG $0x90909090               // .p2align 4, 0x90

LBB9_129:
	WORD $0xfa80; BYTE $0x2e       // cmpb         $46, %dl
	LONG $0x0057850f; WORD $0x0000 // jne          LBB9_136, $87(%rip)
	WORD $0xdf89                   // movl         %ebx, %edi
	LONG $0x0001bf41; WORD $0x0000 // movl         $1, %r15d
	LONG $0xffff9ae9; BYTE $0xff   // jmp          LBB9_123, $-102(%rip)

LBB9_131:
	WORD $0x6348; BYTE $0xc3       // movslq       %ebx, %rax
	WORD $0x3949; BYTE $0xc5       // cmpq         %rax, %r13
	WORD $0x894c; BYTE $0xc7       // movq         %r8, %rdi
	LONG $0xff7c860f; WORD $0xffff // jbe          LBB9_132, $-132(%rip)

LBB9_121:
	LONG $0x04148841         // movb         %dl, (%r12,%rax)
	WORD $0xff41; BYTE $0xc1 // incl         %r9d

LBB9_122:
	WORD $0x8944; BYTE $0xcb     // movl         %r9d, %ebx
	LONG $0xffff7ce9; BYTE $0xff // jmp          LBB9_123, $-132(%rip)

LBB9_133:
	WORD $0xcfff                 // decl         %edi
	WORD $0xdb31                 // xorl         %ebx, %ebx
	LONG $0xffff73e9; BYTE $0xff // jmp          LBB9_123, $-141(%rip)

LBB9_134:
	WORD $0xc931                           // xorl         %ecx, %ecx
	WORD $0xf631                           // xorl         %esi, %esi
	QUAD $0xffffffffffffba48; WORD $0x000f // movabsq      $4503599627370495, %rdx
	LONG $0x0001f2e9; BYTE $0x00           // jmp          LBB9_160, $498(%rip)

LBB9_135:
	WORD $0x8545; BYTE $0xff     // testl        %r15d, %r15d
	LONG $0xf9440f41             // cmovel       %r9d, %edi
	LONG $0xc07d8b4c             // movq         $-64(%rbp), %r15
	LONG $0x000196e9; BYTE $0x00 // jmp          LBB9_153, $406(%rip)

LBB9_136:
	WORD $0x8545; BYTE $0xff       // testl        %r15d, %r15d
	WORD $0x894c; BYTE $0xc7       // movq         %r8, %rdi
	LONG $0xf9440f41               // cmovel       %r9d, %edi
	WORD $0x01a8                   // testb        $1, %al
	LONG $0x003f840f; WORD $0x0000 // je           LBB9_141, $63(%rip)
	WORD $0xca80; BYTE $0x20       // orb          $32, %dl
	WORD $0xfa80; BYTE $0x65       // cmpb         $101, %dl
	LONG $0xc07d8b4c               // movq         $-64(%rbp), %r15
	LONG $0x0174850f; WORD $0x0000 // jne          LBB9_153, $372(%rip)
	LONG $0x01468d48               // leaq         $1(%rsi), %rax
	WORD $0xc289                   // movl         %eax, %edx
	LONG $0x16148a41               // movb         (%r14,%rdx), %dl
	WORD $0xfa80; BYTE $0x2b       // cmpb         $43, %dl
	LONG $0x00ff840f; WORD $0x0000 // je           LBB9_145, $255(%rip)
	WORD $0xfa80; BYTE $0x2d       // cmpb         $45, %dl
	LONG $0xc85d8b48               // movq         $-56(%rbp), %rbx
	LONG $0x0105850f; WORD $0x0000 // jne          LBB9_146, $261(%rip)
	WORD $0xc683; BYTE $0x02       // addl         $2, %esi
	LONG $0xffffffba; BYTE $0xff   // movl         $-1, %edx
	WORD $0xf089                   // movl         %esi, %eax
	LONG $0x0000fbe9; BYTE $0x00   // jmp          LBB9_147, $251(%rip)

LBB9_141:
	LONG $0xc07d8b4c             // movq         $-64(%rbp), %r15
	LONG $0x00013ce9; BYTE $0x00 // jmp          LBB9_153, $316(%rip)

LBB9_142:
	WORD $0x8948; BYTE $0xcf     // movq         %rcx, %rdi
	LONG $0x00019de9; BYTE $0x00 // jmp          LBB9_161, $413(%rip)

LBB9_424:
	WORD $0x8948; BYTE $0xdf // movq         %rbx, %rdi

LBB9_425:
	WORD $0x894c; BYTE $0xce       // movq         %r9, %rsi
	LONG $0x3feec148               // shrq         $63, %rsi
	WORD $0x4e8d; BYTE $0x09       // leal         $9(%rsi), %ecx
	WORD $0xd349; BYTE $0xe9       // shrq         %cl, %r9
	WORD $0x094c; BYTE $0xf2       // orq          %r14, %rdx
	LONG $0x000f850f; WORD $0x0000 // jne          LBB9_427, $15(%rip)
	WORD $0x8944; BYTE $0xc8       // movl         %r9d, %eax
	WORD $0xe083; BYTE $0x03       // andl         $3, %eax
	WORD $0xf883; BYTE $0x01       // cmpl         $1, %eax
	LONG $0xfb9b840f; WORD $0xffff // je           LBB9_90, $-1125(%rip)

LBB9_427:
	WORD $0x8944; BYTE $0xc8                   // movl         %r9d, %eax
	WORD $0xe083; BYTE $0x01                   // andl         $1, %eax
	WORD $0x014c; BYTE $0xc8                   // addq         %r9, %rax
	QUAD $0x000000000000b948; WORD $0x01c0     // movabsq      $126100789566373888, %rcx
	WORD $0x2148; BYTE $0xc1                   // andq         %rax, %rcx
	LONG $0xb0558b48                           // movq         $-80(%rbp), %rdx
	WORD $0x294c; BYTE $0xda                   // subq         %r11, %rdx
	LONG $0x32548d48; BYTE $0xfe               // leaq         $-2(%rdx,%rsi), %rdx
	LONG $0x01f98348                           // cmpq         $1, %rcx
	LONG $0xffda8348                           // sbbq         $-1, %rdx
	LONG $0xfdfa8148; WORD $0x0007; BYTE $0x00 // cmpq         $2045, %rdx
	LONG $0xfb64870f; WORD $0xffff             // ja           LBB9_90, $-1180(%rip)
	WORD $0x8948; BYTE $0xce                   // movq         %rcx, %rsi
	WORD $0xff48; BYTE $0xc2                   // incq         %rdx
	LONG $0x01f98348                           // cmpq         $1, %rcx
	WORD $0x02b1                               // movb         $2, %cl
	WORD $0xd980; BYTE $0x00                   // sbbb         $0, %cl
	WORD $0xd348; BYTE $0xe8                   // shrq         %cl, %rax
	LONG $0x34e2c148                           // shlq         $52, %rdx
	QUAD $0xffffffffffffb948; WORD $0x000f     // movabsq      $4503599627370495, %rcx
	WORD $0x2148; BYTE $0xc8                   // andq         %rcx, %rax
	WORD $0x0948; BYTE $0xd0                   // orq          %rdx, %rax
	WORD $0x8948; BYTE $0xc1                   // movq         %rax, %rcx
	QUAD $0x000000000000ba48; WORD $0x8000     // movabsq      $-9223372036854775808, %rdx
	WORD $0x0948; BYTE $0xd1                   // orq          %rdx, %rcx
	LONG $0x00a87d80                           // cmpb         $0, $-88(%rbp)
	LONG $0xc8440f48                           // cmoveq       %rax, %rcx
	LONG $0x6ef9e1c4; BYTE $0xc7               // vmovq        %rdi, %xmm0
	LONG $0x6ef9e1c4; BYTE $0xc9               // vmovq        %rcx, %xmm1
	LONG $0xc12ef9c5                           // vucomisd     %xmm1, %xmm0
	LONG $0xfb12850f; WORD $0xffff             // jne          LBB9_90, $-1262(%rip)
	LONG $0x00e68b0f; WORD $0x0000             // jnp          LBB9_161, $230(%rip)
	LONG $0xfffb07e9; BYTE $0xff               // jmp          LBB9_90, $-1273(%rip)

LBB9_143:
	WORD $0x894c; BYTE $0xf8 // movq         %r15, %rax

LBB9_144:
	LONG $0xcbaf0f45             // imull        %r11d, %r9d
	WORD $0x0145; BYTE $0xf1     // addl         %r14d, %r9d
	WORD $0x8949; BYTE $0xc7     // movq         %rax, %r15
	LONG $0xc87d8b48             // movq         $-56(%rbp), %rdi
	LONG $0xfff84fe9; BYTE $0xff // jmp          LBB9_62, $-1969(%rip)

LBB9_145:
	WORD $0xc683; BYTE $0x02     // addl         $2, %esi
	LONG $0x000001ba; BYTE $0x00 // movl         $1, %edx
	WORD $0xf089                 // movl         %esi, %eax
	LONG $0xc85d8b48             // movq         $-56(%rbp), %rbx
	LONG $0x000005e9; BYTE $0x00 // jmp          LBB9_147, $5(%rip)

LBB9_146:
	LONG $0x000001ba; BYTE $0x00 // movl         $1, %edx

LBB9_147:
	WORD $0x6348; BYTE $0xf0       // movslq       %eax, %rsi
	WORD $0xc031                   // xorl         %eax, %eax
	WORD $0x3948; BYTE $0xf1       // cmpq         %rsi, %rcx
	LONG $0x00358e0f; WORD $0x0000 // jle          LBB9_152, $53(%rip)
	WORD $0x0148; BYTE $0xf3       // addq         %rsi, %rbx
	WORD $0xc031                   // xorl         %eax, %eax

LBB9_149:
	LONG $0x00270f3d; BYTE $0x00   // cmpl         $9999, %eax
	LONG $0x00258f0f; WORD $0x0000 // jg           LBB9_152, $37(%rip)
	LONG $0x0cb60f41; BYTE $0x1a   // movzbl       (%r10,%rbx), %ecx
	WORD $0x718d; BYTE $0xd0       // leal         $-48(%rcx), %esi
	LONG $0x09fe8040               // cmpb         $9, %sil
	LONG $0x0013870f; WORD $0x0000 // ja           LBB9_152, $19(%rip)
	WORD $0x048d; BYTE $0x80       // leal         (%rax,%rax,4), %eax
	LONG $0xd041448d               // leal         $-48(%rcx,%rax,2), %eax
	WORD $0xff48; BYTE $0xc3       // incq         %rbx
	WORD $0x3949; BYTE $0xdf       // cmpq         %rbx, %r15
	LONG $0xffd0850f; WORD $0xffff // jne          LBB9_149, $-48(%rip)

LBB9_152:
	WORD $0xaf0f; BYTE $0xc2 // imull        %edx, %eax
	WORD $0xf801             // addl         %edi, %eax
	WORD $0xc789             // movl         %eax, %edi

LBB9_153:
	WORD $0x8545; BYTE $0xc9       // testl        %r9d, %r9d
	LONG $0x001d840f; WORD $0x0000 // je           LBB9_156, $29(%rip)
	LONG $0x0136ff81; WORD $0x0000 // cmpl         $310, %edi
	LONG $0x001a8e0f; WORD $0x0000 // jle          LBB9_157, $26(%rip)

LBB9_155:
	WORD $0xf631                           // xorl         %esi, %esi
	QUAD $0x000000000000b948; WORD $0x7ff0 // movabsq      $9218868437227405312, %rcx
	LONG $0x000019e9; BYTE $0x00           // jmp          LBB9_159, $25(%rip)

LBB9_156:
	WORD $0xc931                 // xorl         %ecx, %ecx
	WORD $0xf631                 // xorl         %esi, %esi
	LONG $0x000010e9; BYTE $0x00 // jmp          LBB9_159, $16(%rip)

LBB9_157:
	WORD $0xf631                   // xorl         %esi, %esi
	LONG $0xfeb6ff81; WORD $0xffff // cmpl         $-330, %edi
	LONG $0x00778d0f; WORD $0x0000 // jge          LBB9_166, $119(%rip)
	WORD $0xc931                   // xorl         %ecx, %ecx

LBB9_159:
	QUAD $0xffffffffffffba48; WORD $0x000f // movabsq      $4503599627370495, %rdx
	WORD $0x5d8a; BYTE $0xd7               // movb         $-41(%rbp), %bl

LBB9_160:
	WORD $0x2148; BYTE $0xd6               // andq         %rdx, %rsi
	WORD $0x0948; BYTE $0xce               // orq          %rcx, %rsi
	WORD $0x8948; BYTE $0xf7               // movq         %rsi, %rdi
	QUAD $0x000000000000b848; WORD $0x8000 // movabsq      $-9223372036854775808, %rax
	WORD $0x0948; BYTE $0xc7               // orq          %rax, %rdi
	WORD $0xfb80; BYTE $0x2d               // cmpb         $45, %bl
	LONG $0xfe450f48                       // cmovneq      %rsi, %rdi

LBB9_161:
	QUAD $0x000000000000b848; WORD $0x8000     // movabsq      $-9223372036854775808, %rax
	WORD $0xff48; BYTE $0xc8                   // decq         %rax
	WORD $0x2148; BYTE $0xf8                   // andq         %rdi, %rax
	QUAD $0x000000000000b948; WORD $0x7ff0     // movabsq      $9218868437227405312, %rcx
	WORD $0x3948; BYTE $0xc8                   // cmpq         %rcx, %rax
	LONG $0x88458b48                           // movq         $-120(%rbp), %rax
	LONG $0x0007850f; WORD $0x0000             // jne          LBB9_163, $7(%rip)
	LONG $0xf800c748; WORD $0xffff; BYTE $0xff // movq         $-8, (%rax)

LBB9_163:
	LONG $0x08788948 // movq         %rdi, $8(%rax)

LBB9_164:
	LONG $0xa0458b48         // movq         $-96(%rbp), %rax
	WORD $0x894c; BYTE $0x38 // movq         %r15, (%rax)

LBB9_165:
	LONG $0x50c48348         // addq         $80, %rsp
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

LBB9_166:
	WORD $0xff85                   // testl        %edi, %edi
	LONG $0x01fd8e0f; WORD $0x0000 // jle          LBB9_201, $509(%rip)
	WORD $0x3145; BYTE $0xc0       // xorl         %r8d, %r8d
	WORD $0x8944; BYTE $0xc8       // movl         %r9d, %eax
	LONG $0x000019e9; BYTE $0x00   // jmp          LBB9_171, $25(%rip)

LBB9_168:
	WORD $0x3145; BYTE $0xc9 // xorl         %r9d, %r9d

LBB9_169:
	WORD $0xd231 // xorl         %edx, %edx

LBB9_170:
	LONG $0xb84d8b48               // movq         $-72(%rbp), %rcx
	WORD $0x0144; BYTE $0xc1       // addl         %r8d, %ecx
	WORD $0xd089                   // movl         %edx, %eax
	WORD $0x8941; BYTE $0xc8       // movl         %ecx, %r8d
	WORD $0xff85                   // testl        %edi, %edi
	LONG $0x01de8e0f; WORD $0x0000 // jle          LBB9_202, $478(%rip)

LBB9_171:
	WORD $0xff83; BYTE $0x08       // cmpl         $8, %edi
	LONG $0x000a8e0f; WORD $0x0000 // jle          LBB9_173, $10(%rip)
	LONG $0x00001bb9; BYTE $0x00   // movl         $27, %ecx
	LONG $0x00000ce9; BYTE $0x00   // jmp          LBB9_174, $12(%rip)

LBB9_173:
	WORD $0xf989                               // movl         %edi, %ecx
	LONG $0xee158d48; WORD $0x0110; BYTE $0x00 // leaq         $69870(%rip), %rdx  /* _POW_TAB(%rip) */
	WORD $0x0c8b; BYTE $0x8a                   // movl         (%rdx,%rcx,4), %ecx

LBB9_174:
	LONG $0xb84d8948               // movq         %rcx, $-72(%rbp)
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0xffbf840f; WORD $0xffff // je           LBB9_169, $-65(%rip)
	WORD $0x8949; BYTE $0xfe       // movq         %rdi, %r14
	WORD $0x4d8b; BYTE $0xb8       // movl         $-72(%rbp), %ecx
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x0000ba41; WORD $0x0000 // movl         $0, %r10d
	LONG $0xd0490f44               // cmovnsl      %eax, %r10d
	WORD $0xd231                   // xorl         %edx, %edx
	WORD $0xdb31                   // xorl         %ebx, %ebx

LBB9_176:
	WORD $0x3949; BYTE $0xd2       // cmpq         %rdx, %r10
	LONG $0x009b840f; WORD $0x0000 // je           LBB9_184, $155(%rip)
	LONG $0x9b348d48               // leaq         (%rbx,%rbx,4), %rsi
	LONG $0x3cbe0f49; BYTE $0x14   // movsbq       (%r12,%rdx), %rdi
	LONG $0x775c8d48; BYTE $0xd0   // leaq         $-48(%rdi,%rsi,2), %rbx
	WORD $0xff48; BYTE $0xc2       // incq         %rdx
	WORD $0x8948; BYTE $0xde       // movq         %rbx, %rsi
	WORD $0xd348; BYTE $0xee       // shrq         %cl, %rsi
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0xffd7840f; WORD $0xffff // je           LBB9_176, $-41(%rip)
	WORD $0x8941; BYTE $0xd2       // movl         %edx, %r10d
	WORD $0x894c; BYTE $0xf7       // movq         %r14, %rdi

LBB9_179:
	LONG $0xffc6c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rsi
	WORD $0xd348; BYTE $0xe6                   // shlq         %cl, %rsi
	WORD $0x2944; BYTE $0xd7                   // subl         %r10d, %edi
	WORD $0xf748; BYTE $0xd6                   // notq         %rsi
	WORD $0xd231                               // xorl         %edx, %edx
	WORD $0x3941; BYTE $0xc2                   // cmpl         %eax, %r10d
	LONG $0x00448d0f; WORD $0x0000             // jge          LBB9_183, $68(%rip)
	WORD $0x8949; BYTE $0xfe                   // movq         %rdi, %r14
	WORD $0x634d; BYTE $0xd2                   // movslq       %r10d, %r10
	WORD $0x634d; BYTE $0xc9                   // movslq       %r9d, %r9
	LONG $0x143c8d4f                           // leaq         (%r12,%r10), %r15
	WORD $0xd231                               // xorl         %edx, %edx

LBB9_181:
	WORD $0x8948; BYTE $0xd8       // movq         %rbx, %rax
	WORD $0xd348; BYTE $0xe8       // shrq         %cl, %rax
	WORD $0x2148; BYTE $0xf3       // andq         %rsi, %rbx
	WORD $0x3004                   // addb         $48, %al
	LONG $0x14048841               // movb         %al, (%r12,%rdx)
	LONG $0x04be0f49; BYTE $0x17   // movsbq       (%r15,%rdx), %rax
	LONG $0x127c8d49; BYTE $0x01   // leaq         $1(%r10,%rdx), %rdi
	WORD $0xff48; BYTE $0xc2       // incq         %rdx
	LONG $0x9b1c8d48               // leaq         (%rbx,%rbx,4), %rbx
	LONG $0x585c8d48; BYTE $0xd0   // leaq         $-48(%rax,%rbx,2), %rbx
	WORD $0x394c; BYTE $0xcf       // cmpq         %r9, %rdi
	LONG $0xffd28c0f; WORD $0xffff // jl           LBB9_181, $-46(%rip)
	LONG $0xc07d8b4c               // movq         $-64(%rbp), %r15
	WORD $0x894c; BYTE $0xf7       // movq         %r14, %rdi

LBB9_183:
	WORD $0xc7ff                   // incl         %edi
	WORD $0x8548; BYTE $0xdb       // testq        %rbx, %rbx
	LONG $0x0001ba41; WORD $0x0000 // movl         $1, %r10d
	LONG $0x003a850f; WORD $0x0000 // jne          LBB9_187, $58(%rip)
	LONG $0x000086e9; BYTE $0x00   // jmp          LBB9_192, $134(%rip)

LBB9_184:
	WORD $0x8548; BYTE $0xdb                   // testq        %rbx, %rbx
	WORD $0x894c; BYTE $0xf7                   // movq         %r14, %rdi
	LONG $0xfef6840f; WORD $0xffff             // je           LBB9_168, $-266(%rip)
	WORD $0x8948; BYTE $0xda                   // movq         %rbx, %rdx
	WORD $0xd348; BYTE $0xea                   // shrq         %cl, %rdx
	WORD $0x8548; BYTE $0xd2                   // testq        %rdx, %rdx
	LONG $0x009a840f; WORD $0x0000             // je           LBB9_196, $154(%rip)
	LONG $0xffc6c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rsi
	WORD $0xd348; BYTE $0xe6                   // shlq         %cl, %rsi
	WORD $0x2944; BYTE $0xd7                   // subl         %r10d, %edi
	WORD $0xc7ff                               // incl         %edi
	WORD $0xf748; BYTE $0xd6                   // notq         %rsi
	WORD $0xd231                               // xorl         %edx, %edx
	LONG $0x0001ba41; WORD $0x0000             // movl         $1, %r10d

LBB9_187:
	WORD $0x8949; BYTE $0xf9     // movq         %rdi, %r9
	LONG $0x000017e9; BYTE $0x00 // jmp          LBB9_189, $23(%rip)

LBB9_188:
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0xda450f45               // cmovnel      %r10d, %r11d
	WORD $0x0148; BYTE $0xdb       // addq         %rbx, %rbx
	LONG $0x9b1c8d48               // leaq         (%rbx,%rbx,4), %rbx
	WORD $0x8548; BYTE $0xdb       // testq        %rbx, %rbx
	LONG $0x002f840f; WORD $0x0000 // je           LBB9_191, $47(%rip)

LBB9_189:
	WORD $0x8948; BYTE $0xd8       // movq         %rbx, %rax
	WORD $0xd348; BYTE $0xe8       // shrq         %cl, %rax
	WORD $0x2148; BYTE $0xf3       // andq         %rsi, %rbx
	WORD $0x6348; BYTE $0xfa       // movslq       %edx, %rdi
	WORD $0x3949; BYTE $0xfd       // cmpq         %rdi, %r13
	LONG $0xffd4860f; WORD $0xffff // jbe          LBB9_188, $-44(%rip)
	WORD $0x3004                   // addb         $48, %al
	LONG $0x3c048841               // movb         %al, (%r12,%rdi)
	WORD $0xc7ff                   // incl         %edi
	WORD $0xfa89                   // movl         %edi, %edx
	WORD $0x0148; BYTE $0xdb       // addq         %rbx, %rbx
	LONG $0x9b1c8d48               // leaq         (%rbx,%rbx,4), %rbx
	WORD $0x8548; BYTE $0xdb       // testq        %rbx, %rbx
	LONG $0xffd1850f; WORD $0xffff // jne          LBB9_189, $-47(%rip)

LBB9_191:
	WORD $0x894c; BYTE $0xcf // movq         %r9, %rdi

LBB9_192:
	WORD $0xd285                   // testl        %edx, %edx
	LONG $0x00458e0f; WORD $0x0000 // jle          LBB9_197, $69(%rip)
	WORD $0xd089                   // movl         %edx, %eax
	WORD $0xff48; BYTE $0xc0       // incq         %rax

LBB9_194:
	WORD $0x4a8d; BYTE $0xff       // leal         $-1(%rdx), %ecx
	LONG $0x0c3c8041; BYTE $0x30   // cmpb         $48, (%r12,%rcx)
	LONG $0x0038850f; WORD $0x0000 // jne          LBB9_199, $56(%rip)
	WORD $0xff48; BYTE $0xc8       // decq         %rax
	WORD $0xca89                   // movl         %ecx, %edx
	LONG $0x01f88348               // cmpq         $1, %rax
	LONG $0xffe38f0f; WORD $0xffff // jg           LBB9_194, $-29(%rip)
	LONG $0x00002ce9; BYTE $0x00   // jmp          LBB9_200, $44(%rip)

LBB9_196:
	WORD $0x0148; BYTE $0xdb       // addq         %rbx, %rbx
	LONG $0x9b1c8d48               // leaq         (%rbx,%rbx,4), %rbx
	WORD $0xff41; BYTE $0xc2       // incl         %r10d
	WORD $0x8948; BYTE $0xda       // movq         %rbx, %rdx
	WORD $0xd348; BYTE $0xea       // shrq         %cl, %rdx
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0xffe7840f; WORD $0xffff // je           LBB9_196, $-25(%rip)
	LONG $0xfffeb8e9; BYTE $0xff   // jmp          LBB9_179, $-328(%rip)

LBB9_197:
	LONG $0x0008840f; WORD $0x0000 // je           LBB9_200, $8(%rip)

LBB9_199:
	WORD $0x8941; BYTE $0xd1     // movl         %edx, %r9d
	LONG $0xfffe26e9; BYTE $0xff // jmp          LBB9_170, $-474(%rip)

LBB9_200:
	LONG $0xb84d8b48             // movq         $-72(%rbp), %rcx
	WORD $0x0144; BYTE $0xc1     // addl         %r8d, %ecx
	WORD $0xff31                 // xorl         %edi, %edi
	WORD $0x3145; BYTE $0xc9     // xorl         %r9d, %r9d
	WORD $0xd231                 // xorl         %edx, %edx
	LONG $0x000005e9; BYTE $0x00 // jmp          LBB9_202, $5(%rip)

LBB9_201:
	WORD $0x8944; BYTE $0xca // movl         %r9d, %edx
	WORD $0xc931             // xorl         %ecx, %ecx

LBB9_202:
	QUAD $0xffffffffffffba49; WORD $0x0fff // movabsq      $1152921504606846975, %r10
	LONG $0x24448d49; BYTE $0x01           // leaq         $1(%r12), %rax
	LONG $0x90458948                       // movq         %rax, $-112(%rbp)
	LONG $0x0001be41; WORD $0x0000         // movl         $1, %r14d
	WORD $0xd389                           // movl         %edx, %ebx
	WORD $0x8949; BYTE $0xc8               // movq         %rcx, %r8
	LONG $0x000005e9; BYTE $0x00           // jmp          LBB9_204, $5(%rip)

LBB9_203:
	WORD $0xdb31             // xorl         %ebx, %ebx
	WORD $0x2941; BYTE $0xc8 // subl         %ecx, %r8d

LBB9_204:
	WORD $0xff85                   // testl        %edi, %edi
	LONG $0x0016880f; WORD $0x0000 // js           LBB9_207, $22(%rip)
	LONG $0x06f9850f; WORD $0x0000 // jne          LBB9_304, $1785(%rip)
	LONG $0x243c8041; BYTE $0x35   // cmpb         $53, (%r12)
	LONG $0x00268c0f; WORD $0x0000 // jl           LBB9_210, $38(%rip)
	LONG $0x0006e9e9; BYTE $0x00   // jmp          LBB9_304, $1769(%rip)

LBB9_207:
	WORD $0xff83; BYTE $0xf8       // cmpl         $-8, %edi
	LONG $0x00188d0f; WORD $0x0000 // jge          LBB9_210, $24(%rip)
	LONG $0x00001bb9; BYTE $0x00   // movl         $27, %ecx
	WORD $0xd285                   // testl        %edx, %edx
	LONG $0x054a840f; WORD $0x0000 // je           LBB9_281, $1354(%rip)
	LONG $0xc87d8948               // movq         %rdi, $-56(%rbp)
	WORD $0xd389                   // movl         %edx, %ebx
	LONG $0x00001ce9; BYTE $0x00   // jmp          LBB9_212, $28(%rip)

LBB9_210:
	WORD $0xf889                               // movl         %edi, %eax
	WORD $0xd8f7                               // negl         %eax
	WORD $0x9848                               // cltq
	LONG $0xb80d8d48; WORD $0x010e; BYTE $0x00 // leaq         $69304(%rip), %rcx  /* _POW_TAB(%rip) */
	WORD $0x0c8b; BYTE $0x81                   // movl         (%rcx,%rax,4), %ecx
	WORD $0xdb85                               // testl        %ebx, %ebx
	LONG $0xffa4840f; WORD $0xffff             // je           LBB9_203, $-92(%rip)
	LONG $0xc87d8948                           // movq         %rdi, $-56(%rbp)

LBB9_212:
	WORD $0x4d89; BYTE $0xb0                   // movl         %ecx, $-80(%rbp)
	WORD $0xc989                               // movl         %ecx, %ecx
	LONG $0x68c16b48                           // imulq        $104, %rcx, %rax
	LONG $0xc93d8d48; WORD $0x010e; BYTE $0x00 // leaq         $69321(%rip), %rdi  /* _LSHIFT_TAB(%rip) */
	WORD $0x148b; BYTE $0x38                   // movl         (%rax,%rdi), %edx
	WORD $0x5589; BYTE $0xa8                   // movl         %edx, $-88(%rbp)
	WORD $0x6348; BYTE $0xf3                   // movslq       %ebx, %rsi
	LONG $0x0438548a                           // movb         $4(%rax,%rdi), %dl
	LONG $0x38448d48; BYTE $0x05               // leaq         $5(%rax,%rdi), %rax
	WORD $0xff31                               // xorl         %edi, %edi
	LONG $0x90909090; BYTE $0x90               // .p2align 4, 0x90

LBB9_213:
	WORD $0xd284                   // testb        %dl, %dl
	LONG $0x0025840f; WORD $0x0000 // je           LBB9_218, $37(%rip)
	LONG $0x3c143841               // cmpb         %dl, (%r12,%rdi)
	LONG $0x037b850f; WORD $0x0000 // jne          LBB9_227, $891(%rip)
	LONG $0x3814b60f               // movzbl       (%rax,%rdi), %edx
	WORD $0xff48; BYTE $0xc7       // incq         %rdi
	WORD $0x3948; BYTE $0xfe       // cmpq         %rdi, %rsi
	LONG $0xffde850f; WORD $0xffff // jne          LBB9_213, $-34(%rip)
	WORD $0xd284                   // testb        %dl, %dl
	LONG $0x0003840f; WORD $0x0000 // je           LBB9_218, $3(%rip)

LBB9_217:
	WORD $0x4dff; BYTE $0xa8 // decl         $-88(%rbp)

LBB9_218:
	WORD $0xdb85                                           // testl        %ebx, %ebx
	LONG $0xb845894c                                       // movq         %r8, $-72(%rbp)
	LONG $0x00aa8e0f; WORD $0x0000                         // jle          LBB9_226, $170(%rip)
	WORD $0x5d03; BYTE $0xa8                               // addl         $-88(%rbp), %ebx
	WORD $0x6348; BYTE $0xc3                               // movslq       %ebx, %rax
	WORD $0x8949; BYTE $0xc7                               // movq         %rax, %r15
	LONG $0x20e7c149                                       // shlq         $32, %r15
	WORD $0xff48; BYTE $0xc8                               // decq         %rax
	WORD $0xff48; BYTE $0xc6                               // incq         %rsi
	WORD $0xff31                                           // xorl         %edi, %edi
	LONG $0x000032e9; BYTE $0x00                           // jmp          LBB9_222, $50(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

LBB9_220:
	WORD $0x8548; BYTE $0xc0 // testq        %rax, %rax
	LONG $0xde450f45         // cmovnel      %r14d, %r11d

LBB9_221:
	QUAD $0xffff00000000b848; WORD $0xffff // movabsq      $-4294967296, %rax
	WORD $0x0149; BYTE $0xc7               // addq         %rax, %r15
	LONG $0xff408d49                       // leaq         $-1(%r8), %rax
	WORD $0xff48; BYTE $0xce               // decq         %rsi
	LONG $0x01fe8348                       // cmpq         $1, %rsi
	LONG $0x004c8e0f; WORD $0x0000         // jle          LBB9_224, $76(%rip)

LBB9_222:
	WORD $0x8949; BYTE $0xc0               // movq         %rax, %r8
	LONG $0x5cbe0f49; WORD $0xfe34         // movsbq       $-2(%r12,%rsi), %rbx
	LONG $0xd0c38348                       // addq         $-48, %rbx
	WORD $0xd348; BYTE $0xe3               // shlq         %cl, %rbx
	WORD $0x0148; BYTE $0xfb               // addq         %rdi, %rbx
	WORD $0x8948; BYTE $0xd8               // movq         %rbx, %rax
	QUAD $0xcccccccccccdba48; WORD $0xcccc // movabsq      $-3689348814741910323, %rdx
	WORD $0xf748; BYTE $0xe2               // mulq         %rdx
	WORD $0x8948; BYTE $0xd7               // movq         %rdx, %rdi
	LONG $0x03efc148                       // shrq         $3, %rdi
	LONG $0x3f048d48                       // leaq         (%rdi,%rdi), %rax
	LONG $0x80148d48                       // leaq         (%rax,%rax,4), %rdx
	WORD $0x8948; BYTE $0xd8               // movq         %rbx, %rax
	WORD $0x2948; BYTE $0xd0               // subq         %rdx, %rax
	WORD $0x394d; BYTE $0xe8               // cmpq         %r13, %r8
	LONG $0xff9a830f; WORD $0xffff         // jae          LBB9_220, $-102(%rip)
	WORD $0x3004                           // addb         $48, %al
	LONG $0x04048843                       // movb         %al, (%r12,%r8)
	LONG $0xffff96e9; BYTE $0xff           // jmp          LBB9_221, $-106(%rip)

LBB9_224:
	LONG $0x0afb8348               // cmpq         $10, %rbx
	LONG $0x02bd830f; WORD $0x0000 // jae          LBB9_228, $701(%rip)
	LONG $0xc07d8b4c               // movq         $-64(%rbp), %r15
	LONG $0xb8458b4c               // movq         $-72(%rbp), %r8

LBB9_226:
	LONG $0x000001bb; BYTE $0x00 // movl         $1, %ebx

LBB9_232:
	WORD $0x458b; BYTE $0xa8       // movl         $-88(%rbp), %eax
	WORD $0x0141; BYTE $0xc1       // addl         %eax, %r9d
	WORD $0x634d; BYTE $0xc9       // movslq       %r9d, %r9
	WORD $0x394d; BYTE $0xcd       // cmpq         %r9, %r13
	LONG $0xcd460f45               // cmovbel      %r13d, %r9d
	LONG $0xc87d8b48               // movq         $-56(%rbp), %rdi
	WORD $0xc701                   // addl         %eax, %edi
	WORD $0x8545; BYTE $0xc9       // testl        %r9d, %r9d
	LONG $0x003d8e0f; WORD $0x0000 // jle          LBB9_237, $61(%rip)
	LONG $0xff418d41               // leal         $-1(%r9), %eax
	LONG $0x043c8041; BYTE $0x30   // cmpb         $48, (%r12,%rax)
	WORD $0x4d8b; BYTE $0xb0       // movl         $-80(%rbp), %ecx
	LONG $0x0039850f; WORD $0x0000 // jne          LBB9_239, $57(%rip)
	WORD $0x8944; BYTE $0xc8       // movl         %r9d, %eax
	LONG $0x90909090               // .p2align 4, 0x90

LBB9_235:
	LONG $0x01f88348               // cmpq         $1, %rax
	LONG $0x00238e0f; WORD $0x0000 // jle          LBB9_238, $35(%rip)
	LONG $0xff488d4c               // leaq         $-1(%rax), %r9
	WORD $0xc083; BYTE $0xfe       // addl         $-2, %eax
	LONG $0x043c8041; BYTE $0x30   // cmpb         $48, (%r12,%rax)
	WORD $0x894c; BYTE $0xc8       // movq         %r9, %rax
	LONG $0xffe1840f; WORD $0xffff // je           LBB9_235, $-31(%rip)
	LONG $0x00000ee9; BYTE $0x00   // jmp          LBB9_239, $14(%rip)

LBB9_237:
	WORD $0x4d8b; BYTE $0xb0       // movl         $-80(%rbp), %ecx
	LONG $0x0005850f; WORD $0x0000 // jne          LBB9_239, $5(%rip)

LBB9_238:
	WORD $0xff31             // xorl         %edi, %edi
	WORD $0x3145; BYTE $0xc9 // xorl         %r9d, %r9d

LBB9_239:
	WORD $0xc985                   // testl        %ecx, %ecx
	LONG $0x0014880f; WORD $0x0000 // js           LBB9_241, $20(%rip)
	LONG $0x0001be41; WORD $0x0000 // movl         $1, %r14d
	WORD $0x8944; BYTE $0xca       // movl         %r9d, %edx
	WORD $0x8944; BYTE $0xcb       // movl         %r9d, %ebx
	WORD $0x2941; BYTE $0xc8       // subl         %ecx, %r8d
	LONG $0xfffe0ee9; BYTE $0xff   // jmp          LBB9_204, $-498(%rip)

LBB9_241:
	WORD $0xf983; BYTE $0xc3       // cmpl         $-61, %ecx
	LONG $0x02968f0f; WORD $0x0000 // jg           LBB9_269, $662(%rip)
	WORD $0x8941; BYTE $0xc8       // movl         %ecx, %r8d
	LONG $0x000018e9; BYTE $0x00   // jmp          LBB9_246, $24(%rip)

LBB9_243:
	WORD $0xff31 // xorl         %edi, %edi

LBB9_244:
	WORD $0xc031 // xorl         %eax, %eax

LBB9_245:
	LONG $0x3c488d41               // leal         $60(%r8), %ecx
	WORD $0x8941; BYTE $0xc1       // movl         %eax, %r9d
	LONG $0x88f88341               // cmpl         $-120, %r8d
	WORD $0x8941; BYTE $0xc8       // movl         %ecx, %r8d
	LONG $0x02798d0f; WORD $0x0000 // jge          LBB9_270, $633(%rip)

LBB9_246:
	WORD $0x8545; BYTE $0xc9             // testl        %r9d, %r9d
	LONG $0x000000be; BYTE $0x00         // movl         $0, %esi
	LONG $0xf1490f41                     // cmovnsl      %r9d, %esi
	WORD $0xc031                         // xorl         %eax, %eax
	WORD $0xc931                         // xorl         %ecx, %ecx
	QUAD $0x9090909090909090; BYTE $0x90 // .p2align 4, 0x90

LBB9_247:
	WORD $0x3948; BYTE $0xc6       // cmpq         %rax, %rsi
	LONG $0x0025840f; WORD $0x0000 // je           LBB9_250, $37(%rip)
	LONG $0x890c8d48               // leaq         (%rcx,%rcx,4), %rcx
	LONG $0x14be0f49; BYTE $0x04   // movsbq       (%r12,%rax), %rdx
	LONG $0x4a4c8d48; BYTE $0xd0   // leaq         $-48(%rdx,%rcx,2), %rcx
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	LONG $0x01528d49               // leaq         $1(%r10), %rdx
	WORD $0x3948; BYTE $0xd1       // cmpq         %rdx, %rcx
	LONG $0xffd9820f; WORD $0xffff // jb           LBB9_247, $-39(%rip)
	WORD $0xc689                   // movl         %eax, %esi
	LONG $0x000028e9; BYTE $0x00   // jmp          LBB9_252, $40(%rip)

LBB9_250:
	WORD $0x8548; BYTE $0xc9             // testq        %rcx, %rcx
	LONG $0xff9a840f; WORD $0xffff       // je           LBB9_244, $-102(%rip)
	QUAD $0x9090909090909090; BYTE $0x90 // .p2align 4, 0x90

LBB9_251:
	WORD $0x0148; BYTE $0xc9       // addq         %rcx, %rcx
	LONG $0x890c8d48               // leaq         (%rcx,%rcx,4), %rcx
	WORD $0xc6ff                   // incl         %esi
	LONG $0x01428d49               // leaq         $1(%r10), %rax
	WORD $0x3948; BYTE $0xc1       // cmpq         %rax, %rcx
	LONG $0xffea820f; WORD $0xffff // jb           LBB9_251, $-22(%rip)

LBB9_252:
	WORD $0xf729                   // subl         %esi, %edi
	WORD $0x8944; BYTE $0xc8       // movl         %r9d, %eax
	WORD $0xf029                   // subl         %esi, %eax
	LONG $0x00328e0f; WORD $0x0000 // jle          LBB9_255, $50(%rip)
	WORD $0x8949; BYTE $0xfe       // movq         %rdi, %r14
	WORD $0x6348; BYTE $0xf6       // movslq       %esi, %rsi
	WORD $0x6349; BYTE $0xd1       // movslq       %r9d, %rdx
	WORD $0x8949; BYTE $0xd1       // movq         %rdx, %r9
	WORD $0x2949; BYTE $0xf1       // subq         %rsi, %r9
	WORD $0x8948; BYTE $0xf7       // movq         %rsi, %rdi
	WORD $0xf748; BYTE $0xd7       // notq         %rdi
	WORD $0x0148; BYTE $0xd7       // addq         %rdx, %rdi
	LONG $0x001b850f; WORD $0x0000 // jne          LBB9_256, $27(%rip)
	WORD $0xdb31                   // xorl         %ebx, %ebx
	LONG $0x01c1f641               // testb        $1, %r9b
	WORD $0x894c; BYTE $0xf7       // movq         %r14, %rdi
	LONG $0x0088850f; WORD $0x0000 // jne          LBB9_259, $136(%rip)
	LONG $0x0000a2e9; BYTE $0x00   // jmp          LBB9_260, $162(%rip)

LBB9_255:
	WORD $0xc031                 // xorl         %eax, %eax
	LONG $0x0000cbe9; BYTE $0x00 // jmp          LBB9_262, $203(%rip)

LBB9_256:
	WORD $0x894d; BYTE $0xcf // movq         %r9, %r15
	LONG $0xfee78349         // andq         $-2, %r15
	WORD $0xf749; BYTE $0xdf // negq         %r15
	WORD $0xdb31             // xorl         %ebx, %ebx
	LONG $0x90558b48         // movq         $-112(%rbp), %rdx
	LONG $0x90909090         // .p2align 4, 0x90

LBB9_257:
	WORD $0x8948; BYTE $0xcf       // movq         %rcx, %rdi
	LONG $0x3cefc148               // shrq         $60, %rdi
	WORD $0x214c; BYTE $0xd1       // andq         %r10, %rcx
	LONG $0x30cf8040               // orb          $48, %dil
	LONG $0xff7a8840               // movb         %dil, $-1(%rdx)
	LONG $0x890c8d48               // leaq         (%rcx,%rcx,4), %rcx
	LONG $0x7cbe0f48; WORD $0xff32 // movsbq       $-1(%rdx,%rsi), %rdi
	LONG $0x4f4c8d48; BYTE $0xd0   // leaq         $-48(%rdi,%rcx,2), %rcx
	WORD $0x8948; BYTE $0xcf       // movq         %rcx, %rdi
	LONG $0x3cefc148               // shrq         $60, %rdi
	WORD $0x214c; BYTE $0xd1       // andq         %r10, %rcx
	LONG $0x30cf8040               // orb          $48, %dil
	WORD $0x8840; BYTE $0x3a       // movb         %dil, (%rdx)
	LONG $0x890c8d48               // leaq         (%rcx,%rcx,4), %rcx
	LONG $0x3cbe0f48; BYTE $0x32   // movsbq       (%rdx,%rsi), %rdi
	LONG $0x4f4c8d48; BYTE $0xd0   // leaq         $-48(%rdi,%rcx,2), %rcx
	LONG $0x02c28348               // addq         $2, %rdx
	LONG $0xfec38348               // addq         $-2, %rbx
	WORD $0x3949; BYTE $0xdf       // cmpq         %rbx, %r15
	LONG $0xffaf850f; WORD $0xffff // jne          LBB9_257, $-81(%rip)
	WORD $0x2948; BYTE $0xde       // subq         %rbx, %rsi
	WORD $0xf748; BYTE $0xdb       // negq         %rbx
	LONG $0xc07d8b4c               // movq         $-64(%rbp), %r15
	LONG $0x01c1f641               // testb        $1, %r9b
	WORD $0x894c; BYTE $0xf7       // movq         %r14, %rdi
	LONG $0x001f840f; WORD $0x0000 // je           LBB9_260, $31(%rip)

LBB9_259:
	WORD $0x8948; BYTE $0xca     // movq         %rcx, %rdx
	LONG $0x3ceac148             // shrq         $60, %rdx
	WORD $0xca80; BYTE $0x30     // orb          $48, %dl
	LONG $0x1c148841             // movb         %dl, (%r12,%rbx)
	WORD $0x214c; BYTE $0xd1     // andq         %r10, %rcx
	LONG $0x890c8d48             // leaq         (%rcx,%rcx,4), %rcx
	LONG $0x14be0f49; BYTE $0x34 // movsbq       (%r12,%rsi), %rdx
	LONG $0x4a4c8d48; BYTE $0xd0 // leaq         $-48(%rdx,%rcx,2), %rcx

LBB9_260:
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0x000001bb; BYTE $0x00   // movl         $1, %ebx
	LONG $0x0022850f; WORD $0x0000 // jne          LBB9_262, $34(%rip)
	LONG $0x00004ee9; BYTE $0x00   // jmp          LBB9_264, $78(%rip)
	LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB9_261:
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0xdb450f44               // cmovnel      %ebx, %r11d
	WORD $0x0148; BYTE $0xc9       // addq         %rcx, %rcx
	LONG $0x890c8d48               // leaq         (%rcx,%rcx,4), %rcx
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0x0031840f; WORD $0x0000 // je           LBB9_264, $49(%rip)

LBB9_262:
	WORD $0x8948; BYTE $0xca       // movq         %rcx, %rdx
	LONG $0x3ceac148               // shrq         $60, %rdx
	WORD $0x214c; BYTE $0xd1       // andq         %r10, %rcx
	WORD $0x6348; BYTE $0xf0       // movslq       %eax, %rsi
	WORD $0x3949; BYTE $0xf5       // cmpq         %rsi, %r13
	LONG $0xffd3860f; WORD $0xffff // jbe          LBB9_261, $-45(%rip)
	WORD $0xca80; BYTE $0x30       // orb          $48, %dl
	LONG $0x34148841               // movb         %dl, (%r12,%rsi)
	WORD $0xc6ff                   // incl         %esi
	WORD $0xf089                   // movl         %esi, %eax
	WORD $0x0148; BYTE $0xc9       // addq         %rcx, %rcx
	LONG $0x890c8d48               // leaq         (%rcx,%rcx,4), %rcx
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0xffcf850f; WORD $0xffff // jne          LBB9_262, $-49(%rip)

LBB9_264:
	WORD $0xc7ff                         // incl         %edi
	WORD $0xc085                         // testl        %eax, %eax
	LONG $0x00308e0f; WORD $0x0000       // jle          LBB9_268, $48(%rip)
	WORD $0xc189                         // movl         %eax, %ecx
	WORD $0xff48; BYTE $0xc1             // incq         %rcx
	QUAD $0x9090909090909090; BYTE $0x90 // .p2align 4, 0x90

LBB9_266:
	WORD $0x508d; BYTE $0xff       // leal         $-1(%rax), %edx
	LONG $0x143c8041; BYTE $0x30   // cmpb         $48, (%r12,%rdx)
	LONG $0xfe15850f; WORD $0xffff // jne          LBB9_245, $-491(%rip)
	WORD $0xff48; BYTE $0xc9       // decq         %rcx
	WORD $0xd089                   // movl         %edx, %eax
	LONG $0x01f98348               // cmpq         $1, %rcx
	LONG $0xffe38f0f; WORD $0xffff // jg           LBB9_266, $-29(%rip)
	LONG $0xfffdfde9; BYTE $0xff   // jmp          LBB9_243, $-515(%rip)

LBB9_268:
	LONG $0xfdfb850f; WORD $0xffff // jne          LBB9_245, $-517(%rip)
	LONG $0xfffdf2e9; BYTE $0xff   // jmp          LBB9_243, $-526(%rip)

LBB9_227:
	LONG $0xfc978c0f; WORD $0xffff // jl           LBB9_217, $-873(%rip)
	LONG $0xfffc95e9; BYTE $0xff   // jmp          LBB9_218, $-875(%rip)

LBB9_228:
	WORD $0x6349; BYTE $0xc8     // movslq       %r8d, %rcx
	WORD $0xff48; BYTE $0xc9     // decq         %rcx
	LONG $0xc07d8b4c             // movq         $-64(%rbp), %r15
	LONG $0xb8458b4c             // movq         $-72(%rbp), %r8
	LONG $0x000001bb; BYTE $0x00 // movl         $1, %ebx
	LONG $0x000017e9; BYTE $0x00 // jmp          LBB9_230, $23(%rip)

	// .p2align 4, 0x90
LBB9_229:
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0xdb450f44               // cmovnel      %ebx, %r11d
	WORD $0xff48; BYTE $0xc9       // decq         %rcx
	LONG $0x09ff8348               // cmpq         $9, %rdi
	WORD $0x8948; BYTE $0xd7       // movq         %rdx, %rdi
	LONG $0xfd21860f; WORD $0xffff // jbe          LBB9_232, $-735(%rip)

LBB9_230:
	WORD $0x8948; BYTE $0xf8               // movq         %rdi, %rax
	QUAD $0xcccccccccccdba48; WORD $0xcccc // movabsq      $-3689348814741910323, %rdx
	WORD $0xf748; BYTE $0xe2               // mulq         %rdx
	LONG $0x03eac148                       // shrq         $3, %rdx
	LONG $0x12048d48                       // leaq         (%rdx,%rdx), %rax
	LONG $0x80348d48                       // leaq         (%rax,%rax,4), %rsi
	WORD $0x8948; BYTE $0xf8               // movq         %rdi, %rax
	WORD $0x2948; BYTE $0xf0               // subq         %rsi, %rax
	WORD $0x394c; BYTE $0xe9               // cmpq         %r13, %rcx
	LONG $0xffbe830f; WORD $0xffff         // jae          LBB9_229, $-66(%rip)
	WORD $0x3004                           // addb         $48, %al
	LONG $0x0c048841                       // movb         %al, (%r12,%rcx)
	WORD $0xff48; BYTE $0xc9               // decq         %rcx
	LONG $0x09ff8348                       // cmpq         $9, %rdi
	WORD $0x8948; BYTE $0xd7               // movq         %rdx, %rdi
	LONG $0xffbf870f; WORD $0xffff         // ja           LBB9_230, $-65(%rip)
	LONG $0xfffcdbe9; BYTE $0xff           // jmp          LBB9_232, $-805(%rip)

LBB9_269:
	WORD $0x8944; BYTE $0xc8 // movl         %r9d, %eax

LBB9_270:
	LONG $0xc87d8948                                   // movq         %rdi, $-56(%rbp)
	WORD $0xd9f7                                       // negl         %ecx
	WORD $0xc085                                       // testl        %eax, %eax
	LONG $0x000000be; BYTE $0x00                       // movl         $0, %esi
	WORD $0x490f; BYTE $0xf0                           // cmovnsl      %eax, %esi
	WORD $0xff31                                       // xorl         %edi, %edi
	WORD $0x3145; BYTE $0xc0                           // xorl         %r8d, %r8d
	QUAD $0x9090909090909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB9_271:
	WORD $0x3948; BYTE $0xfe       // cmpq         %rdi, %rsi
	LONG $0x006b840f; WORD $0x0000 // je           LBB9_277, $107(%rip)
	LONG $0x80148d4b               // leaq         (%r8,%r8,4), %rdx
	LONG $0x1cbe0f49; BYTE $0x3c   // movsbq       (%r12,%rdi), %rbx
	LONG $0x53448d4c; BYTE $0xd0   // leaq         $-48(%rbx,%rdx,2), %r8
	LONG $0x000001bb; BYTE $0x00   // movl         $1, %ebx
	WORD $0xff48; BYTE $0xc7       // incq         %rdi
	WORD $0x894c; BYTE $0xc2       // movq         %r8, %rdx
	WORD $0xd348; BYTE $0xea       // shrq         %cl, %rdx
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0xffd2840f; WORD $0xffff // je           LBB9_271, $-46(%rip)
	WORD $0xfe89                   // movl         %edi, %esi

LBB9_274:
	LONG $0xffc7c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rdi
	WORD $0xd348; BYTE $0xe7                   // shlq         %cl, %rdi
	LONG $0xc8558b48                           // movq         $-56(%rbp), %rdx
	WORD $0xf229                               // subl         %esi, %edx
	LONG $0xc8558948                           // movq         %rdx, $-56(%rbp)
	WORD $0xf748; BYTE $0xd7                   // notq         %rdi
	WORD $0x8941; BYTE $0xc1                   // movl         %eax, %r9d
	WORD $0x2941; BYTE $0xf1                   // subl         %esi, %r9d
	LONG $0x00838e0f; WORD $0x0000             // jle          LBB9_282, $131(%rip)
	WORD $0x634c; BYTE $0xfe                   // movslq       %esi, %r15
	WORD $0x9848                               // cltq
	WORD $0x8949; BYTE $0xc6                   // movq         %rax, %r14
	WORD $0x294d; BYTE $0xfe                   // subq         %r15, %r14
	WORD $0x894c; BYTE $0xfb                   // movq         %r15, %rbx
	WORD $0xf748; BYTE $0xd3                   // notq         %rbx
	WORD $0x0148; BYTE $0xc3                   // addq         %rax, %rbx
	LONG $0x008b850f; WORD $0x0000             // jne          LBB9_284, $139(%rip)
	WORD $0xdb31                               // xorl         %ebx, %ebx
	LONG $0x0000ece9; BYTE $0x00               // jmp          LBB9_287, $236(%rip)

LBB9_277:
	WORD $0x854d; BYTE $0xc0                   // testq        %r8, %r8
	LONG $0x0061840f; WORD $0x0000             // je           LBB9_283, $97(%rip)
	WORD $0x894c; BYTE $0xc7                   // movq         %r8, %rdi
	WORD $0xd348; BYTE $0xef                   // shrq         %cl, %rdi
	WORD $0x8548; BYTE $0xff                   // testq        %rdi, %rdi
	LONG $0x0021840f; WORD $0x0000             // je           LBB9_280, $33(%rip)
	LONG $0xffc7c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rdi
	WORD $0xd348; BYTE $0xe7                   // shlq         %cl, %rdi
	LONG $0xc8458b48                           // movq         $-56(%rbp), %rax
	WORD $0xf029                               // subl         %esi, %eax
	WORD $0xc0ff                               // incl         %eax
	LONG $0xc8458948                           // movq         %rax, $-56(%rbp)
	WORD $0xf748; BYTE $0xd7                   // notq         %rdi
	WORD $0x3145; BYTE $0xc9                   // xorl         %r9d, %r9d
	LONG $0x0000f3e9; BYTE $0x00               // jmp          LBB9_291, $243(%rip)

LBB9_280:
	WORD $0x014d; BYTE $0xc0       // addq         %r8, %r8
	LONG $0x80048d4f               // leaq         (%r8,%r8,4), %r8
	WORD $0xc6ff                   // incl         %esi
	WORD $0x894c; BYTE $0xc7       // movq         %r8, %rdi
	WORD $0xd348; BYTE $0xef       // shrq         %cl, %rdi
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0xffe8840f; WORD $0xffff // je           LBB9_280, $-24(%rip)
	LONG $0xffff66e9; BYTE $0xff   // jmp          LBB9_274, $-154(%rip)

LBB9_281:
	WORD $0xd231                 // xorl         %edx, %edx
	WORD $0xdb31                 // xorl         %ebx, %ebx
	WORD $0x2941; BYTE $0xc8     // subl         %ecx, %r8d
	LONG $0xfffa76e9; BYTE $0xff // jmp          LBB9_204, $-1418(%rip)

LBB9_282:
	WORD $0x3145; BYTE $0xc9     // xorl         %r9d, %r9d
	LONG $0x0000b2e9; BYTE $0x00 // jmp          LBB9_290, $178(%rip)

LBB9_283:
	LONG $0x0001be41; WORD $0x0000 // movl         $1, %r14d
	WORD $0x3145; BYTE $0xc9       // xorl         %r9d, %r9d
	WORD $0xd231                   // xorl         %edx, %edx
	WORD $0xdb31                   // xorl         %ebx, %ebx
	LONG $0xc87d8b48               // movq         $-56(%rbp), %rdi
	LONG $0xb8458b4c               // movq         $-72(%rbp), %r8
	LONG $0x000150e9; BYTE $0x00   // jmp          LBB9_303, $336(%rip)

LBB9_284:
	LONG $0xa875894c         // movq         %r14, $-88(%rbp)
	LONG $0xfee68349         // andq         $-2, %r14
	WORD $0xf749; BYTE $0xde // negq         %r14
	WORD $0xdb31             // xorl         %ebx, %ebx
	LONG $0x90458b48         // movq         $-112(%rbp), %rax

LBB9_285:
	WORD $0x894c; BYTE $0xc2       // movq         %r8, %rdx
	WORD $0xd348; BYTE $0xea       // shrq         %cl, %rdx
	WORD $0x2149; BYTE $0xf8       // andq         %rdi, %r8
	WORD $0xc280; BYTE $0x30       // addb         $48, %dl
	WORD $0x5088; BYTE $0xff       // movb         %dl, $-1(%rax)
	LONG $0x80148d4b               // leaq         (%r8,%r8,4), %rdx
	LONG $0x74be0f4a; WORD $0xff38 // movsbq       $-1(%rax,%r15), %rsi
	LONG $0x56548d48; BYTE $0xd0   // leaq         $-48(%rsi,%rdx,2), %rdx
	WORD $0x8948; BYTE $0xd6       // movq         %rdx, %rsi
	WORD $0xd348; BYTE $0xee       // shrq         %cl, %rsi
	WORD $0x2148; BYTE $0xfa       // andq         %rdi, %rdx
	LONG $0x30c68040               // addb         $48, %sil
	WORD $0x8840; BYTE $0x30       // movb         %sil, (%rax)
	LONG $0x92148d48               // leaq         (%rdx,%rdx,4), %rdx
	LONG $0x34be0f4a; BYTE $0x38   // movsbq       (%rax,%r15), %rsi
	LONG $0x56448d4c; BYTE $0xd0   // leaq         $-48(%rsi,%rdx,2), %r8
	LONG $0x02c08348               // addq         $2, %rax
	LONG $0xfec38348               // addq         $-2, %rbx
	WORD $0x3949; BYTE $0xde       // cmpq         %rbx, %r14
	LONG $0xffb3850f; WORD $0xffff // jne          LBB9_285, $-77(%rip)
	WORD $0x2949; BYTE $0xdf       // subq         %rbx, %r15
	WORD $0xf748; BYTE $0xdb       // negq         %rbx
	LONG $0xa8758b4c               // movq         $-88(%rbp), %r14

LBB9_287:
	LONG $0x01c6f641               // testb        $1, %r14b
	LONG $0x001d840f; WORD $0x0000 // je           LBB9_289, $29(%rip)
	WORD $0x894c; BYTE $0xc0       // movq         %r8, %rax
	WORD $0xd348; BYTE $0xe8       // shrq         %cl, %rax
	WORD $0x3004                   // addb         $48, %al
	LONG $0x1c048841               // movb         %al, (%r12,%rbx)
	WORD $0x2149; BYTE $0xf8       // andq         %rdi, %r8
	LONG $0x80048d4b               // leaq         (%r8,%r8,4), %rax
	LONG $0x14be0f4b; BYTE $0x3c   // movsbq       (%r12,%r15), %rdx
	LONG $0x42448d4c; BYTE $0xd0   // leaq         $-48(%rdx,%rax,2), %r8

LBB9_289:
	LONG $0xc07d8b4c             // movq         $-64(%rbp), %r15
	LONG $0x000001bb; BYTE $0x00 // movl         $1, %ebx

LBB9_290:
	LONG $0xc8458b48             // movq         $-56(%rbp), %rax
	WORD $0xc0ff                 // incl         %eax
	LONG $0xc8458948             // movq         %rax, $-56(%rbp)
	LONG $0x00003fe9; BYTE $0x00 // jmp          LBB9_295, $63(%rip)
	BYTE $0x90                   // .p2align 4, 0x90

LBB9_291:
	WORD $0x894c; BYTE $0xc0                           // movq         %r8, %rax
	WORD $0xd348; BYTE $0xe8                           // shrq         %cl, %rax
	WORD $0x2149; BYTE $0xf8                           // andq         %rdi, %r8
	WORD $0x6349; BYTE $0xf1                           // movslq       %r9d, %rsi
	WORD $0x3949; BYTE $0xf5                           // cmpq         %rsi, %r13
	LONG $0x001b860f; WORD $0x0000                     // jbe          LBB9_293, $27(%rip)
	WORD $0x3004                                       // addb         $48, %al
	LONG $0x34048841                                   // movb         %al, (%r12,%rsi)
	WORD $0xc6ff                                       // incl         %esi
	WORD $0x8941; BYTE $0xf1                           // movl         %esi, %r9d
	LONG $0x000012e9; BYTE $0x00                       // jmp          LBB9_294, $18(%rip)
	QUAD $0x9090909090909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB9_293:
	WORD $0x8548; BYTE $0xc0 // testq        %rax, %rax
	LONG $0xdb450f44         // cmovnel      %ebx, %r11d

LBB9_294:
	WORD $0x014d; BYTE $0xc0 // addq         %r8, %r8
	LONG $0x80048d4f         // leaq         (%r8,%r8,4), %r8

LBB9_295:
	WORD $0x854d; BYTE $0xc0       // testq        %r8, %r8
	LONG $0xffb9850f; WORD $0xffff // jne          LBB9_291, $-71(%rip)
	WORD $0x8545; BYTE $0xc9       // testl        %r9d, %r9d
	LONG $0xc87d8b48               // movq         $-56(%rbp), %rdi
	LONG $0xb8458b4c               // movq         $-72(%rbp), %r8
	LONG $0x002a8e0f; WORD $0x0000 // jle          LBB9_300, $42(%rip)
	WORD $0x8944; BYTE $0xc8       // movl         %r9d, %eax
	WORD $0xff48; BYTE $0xc0       // incq         %rax

LBB9_298:
	LONG $0xff498d41               // leal         $-1(%r9), %ecx
	LONG $0x0c3c8041; BYTE $0x30   // cmpb         $48, (%r12,%rcx)
	LONG $0x001b850f; WORD $0x0000 // jne          LBB9_301, $27(%rip)
	WORD $0xff48; BYTE $0xc8       // decq         %rax
	WORD $0x8941; BYTE $0xc9       // movl         %ecx, %r9d
	LONG $0x01f88348               // cmpq         $1, %rax
	LONG $0xffe18f0f; WORD $0xffff // jg           LBB9_298, $-31(%rip)
	LONG $0x000017e9; BYTE $0x00   // jmp          LBB9_302, $23(%rip)

LBB9_300:
	LONG $0x0011840f; WORD $0x0000 // je           LBB9_302, $17(%rip)

LBB9_301:
	LONG $0x0001be41; WORD $0x0000 // movl         $1, %r14d
	WORD $0x8944; BYTE $0xca       // movl         %r9d, %edx
	WORD $0x8944; BYTE $0xcb       // movl         %r9d, %ebx
	LONG $0x00000fe9; BYTE $0x00   // jmp          LBB9_303, $15(%rip)

LBB9_302:
	LONG $0x0001be41; WORD $0x0000 // movl         $1, %r14d
	WORD $0xff31                   // xorl         %edi, %edi
	WORD $0x3145; BYTE $0xc9       // xorl         %r9d, %r9d
	WORD $0xd231                   // xorl         %edx, %edx
	WORD $0xdb31                   // xorl         %ebx, %ebx

LBB9_303:
	WORD $0x4d8b; BYTE $0xb0     // movl         $-80(%rbp), %ecx
	WORD $0x2941; BYTE $0xc8     // subl         %ecx, %r8d
	LONG $0xfff8f9e9; BYTE $0xff // jmp          LBB9_204, $-1799(%rip)

LBB9_304:
	LONG $0x02f88141; WORD $0xfffc; BYTE $0xff // cmpl         $-1022, %r8d
	LONG $0x01b18f0f; WORD $0x0000             // jg           LBB9_332, $433(%rip)
	LONG $0xfffc02b9; BYTE $0xff               // movl         $-1022, %ecx
	WORD $0xdb85                               // testl        %ebx, %ebx
	LONG $0x03e5840f; WORD $0x0000             // je           LBB9_370, $997(%rip)
	WORD $0x894c; BYTE $0xc0                   // movq         %r8, %rax
	LONG $0xfdc08141; WORD $0x0003; BYTE $0x00 // addl         $1021, %r8d
	LONG $0xfffbc63d; BYTE $0xff               // cmpl         $-1082, %eax
	LONG $0x01a78f0f; WORD $0x0000             // jg           LBB9_335, $423(%rip)
	LONG $0x017a8d4d                           // leaq         $1(%r10), %r15
	LONG $0x0001be41; WORD $0x0000             // movl         $1, %r14d
	LONG $0x00001ce9; BYTE $0x00               // jmp          LBB9_311, $28(%rip)

LBB9_308:
	WORD $0xff31 // xorl         %edi, %edi

LBB9_309:
	WORD $0x3145; BYTE $0xc9 // xorl         %r9d, %r9d

LBB9_310:
	LONG $0x3c488d41               // leal         $60(%r8), %ecx
	WORD $0x8944; BYTE $0xcb       // movl         %r9d, %ebx
	WORD $0x8944; BYTE $0xce       // movl         %r9d, %esi
	LONG $0x88f88341               // cmpl         $-120, %r8d
	WORD $0x8941; BYTE $0xc8       // movl         %ecx, %r8d
	LONG $0x01818d0f; WORD $0x0000 // jge          LBB9_336, $385(%rip)

LBB9_311:
	WORD $0xdb85                 // testl        %ebx, %ebx
	LONG $0x000000be; BYTE $0x00 // movl         $0, %esi
	WORD $0x490f; BYTE $0xf3     // cmovnsl      %ebx, %esi
	WORD $0xc031                 // xorl         %eax, %eax
	WORD $0xc931                 // xorl         %ecx, %ecx
	LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

LBB9_312:
	WORD $0x3948; BYTE $0xc6       // cmpq         %rax, %rsi
	LONG $0x0027840f; WORD $0x0000 // je           LBB9_315, $39(%rip)
	LONG $0x890c8d48               // leaq         (%rcx,%rcx,4), %rcx
	WORD $0x8948; BYTE $0xfa       // movq         %rdi, %rdx
	LONG $0x3cbe0f49; BYTE $0x04   // movsbq       (%r12,%rax), %rdi
	LONG $0x4f4c8d48; BYTE $0xd0   // leaq         $-48(%rdi,%rcx,2), %rcx
	WORD $0x8948; BYTE $0xd7       // movq         %rdx, %rdi
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	WORD $0x394c; BYTE $0xf9       // cmpq         %r15, %rcx
	LONG $0xffd7820f; WORD $0xffff // jb           LBB9_312, $-41(%rip)
	WORD $0xc689                   // movl         %eax, %esi
	LONG $0x00001be9; BYTE $0x00   // jmp          LBB9_317, $27(%rip)

LBB9_315:
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0xff9a840f; WORD $0xffff // je           LBB9_309, $-102(%rip)

LBB9_316:
	WORD $0x0148; BYTE $0xc9       // addq         %rcx, %rcx
	LONG $0x890c8d48               // leaq         (%rcx,%rcx,4), %rcx
	WORD $0xc6ff                   // incl         %esi
	WORD $0x394c; BYTE $0xf9       // cmpq         %r15, %rcx
	LONG $0xffee820f; WORD $0xffff // jb           LBB9_316, $-18(%rip)

LBB9_317:
	WORD $0xf729                   // subl         %esi, %edi
	WORD $0xc031                   // xorl         %eax, %eax
	WORD $0xde39                   // cmpl         %ebx, %esi
	LONG $0x005a8d0f; WORD $0x0000 // jge          LBB9_322, $90(%rip)
	LONG $0xc87d8948               // movq         %rdi, $-56(%rbp)
	WORD $0x6348; BYTE $0xf6       // movslq       %esi, %rsi
	WORD $0x6349; BYTE $0xd9       // movslq       %r9d, %rbx
	LONG $0x34048d49               // leaq         (%r12,%rsi), %rax
	WORD $0x3145; BYTE $0xc9       // xorl         %r9d, %r9d
	QUAD $0x9090909090909090       // .p2align 4, 0x90

LBB9_319:
	WORD $0x8948; BYTE $0xcf       // movq         %rcx, %rdi
	LONG $0x3cefc148               // shrq         $60, %rdi
	WORD $0x214c; BYTE $0xd1       // andq         %r10, %rcx
	LONG $0x30cf8040               // orb          $48, %dil
	LONG $0x0c3c8843               // movb         %dil, (%r12,%r9)
	LONG $0x3cbe0f4a; BYTE $0x08   // movsbq       (%rax,%r9), %rdi
	LONG $0x0e548d4a; BYTE $0x01   // leaq         $1(%rsi,%r9), %rdx
	WORD $0xff49; BYTE $0xc1       // incq         %r9
	LONG $0x890c8d48               // leaq         (%rcx,%rcx,4), %rcx
	LONG $0x4f4c8d48; BYTE $0xd0   // leaq         $-48(%rdi,%rcx,2), %rcx
	WORD $0x3948; BYTE $0xda       // cmpq         %rbx, %rdx
	LONG $0xffcf8c0f; WORD $0xffff // jl           LBB9_319, $-49(%rip)
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0x0063840f; WORD $0x0000 // je           LBB9_326, $99(%rip)
	WORD $0x8944; BYTE $0xc8       // movl         %r9d, %eax
	LONG $0xc87d8b48               // movq         $-56(%rbp), %rdi

LBB9_322:
	WORD $0x8941; BYTE $0xc1                   // movl         %eax, %r9d
	LONG $0x00001ee9; BYTE $0x00               // jmp          LBB9_324, $30(%rip)
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB9_323:
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0xde450f45               // cmovnel      %r14d, %r11d
	WORD $0x0148; BYTE $0xc9       // addq         %rcx, %rcx
	LONG $0x890c8d48               // leaq         (%rcx,%rcx,4), %rcx
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0x003a840f; WORD $0x0000 // je           LBB9_327, $58(%rip)

LBB9_324:
	WORD $0x8948; BYTE $0xc8       // movq         %rcx, %rax
	LONG $0x3ce8c148               // shrq         $60, %rax
	WORD $0x214c; BYTE $0xd1       // andq         %r10, %rcx
	WORD $0x6349; BYTE $0xf1       // movslq       %r9d, %rsi
	WORD $0x3949; BYTE $0xf5       // cmpq         %rsi, %r13
	LONG $0xffd3860f; WORD $0xffff // jbe          LBB9_323, $-45(%rip)
	WORD $0x300c                   // orb          $48, %al
	LONG $0x34048841               // movb         %al, (%r12,%rsi)
	WORD $0xc6ff                   // incl         %esi
	WORD $0x8941; BYTE $0xf1       // movl         %esi, %r9d
	WORD $0x0148; BYTE $0xc9       // addq         %rcx, %rcx
	LONG $0x890c8d48               // leaq         (%rcx,%rcx,4), %rcx
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0xffcf850f; WORD $0xffff // jne          LBB9_324, $-49(%rip)
	LONG $0x000004e9; BYTE $0x00   // jmp          LBB9_327, $4(%rip)

LBB9_326:
	LONG $0xc87d8b48 // movq         $-56(%rbp), %rdi

LBB9_327:
	WORD $0xc7ff                   // incl         %edi
	WORD $0x8545; BYTE $0xc9       // testl        %r9d, %r9d
	LONG $0x002a8e0f; WORD $0x0000 // jle          LBB9_331, $42(%rip)
	WORD $0x8944; BYTE $0xc8       // movl         %r9d, %eax
	WORD $0xff48; BYTE $0xc0       // incq         %rax

LBB9_329:
	LONG $0xff498d41               // leal         $-1(%r9), %ecx
	LONG $0x0c3c8041; BYTE $0x30   // cmpb         $48, (%r12,%rcx)
	LONG $0xfea5850f; WORD $0xffff // jne          LBB9_310, $-347(%rip)
	WORD $0xff48; BYTE $0xc8       // decq         %rax
	WORD $0x8941; BYTE $0xc9       // movl         %ecx, %r9d
	LONG $0x01f88348               // cmpq         $1, %rax
	LONG $0xffe18f0f; WORD $0xffff // jg           LBB9_329, $-31(%rip)
	LONG $0xfffe8be9; BYTE $0xff   // jmp          LBB9_308, $-373(%rip)

LBB9_331:
	LONG $0xfe8a850f; WORD $0xffff // jne          LBB9_310, $-374(%rip)
	LONG $0xfffe80e9; BYTE $0xff   // jmp          LBB9_308, $-384(%rip)

LBB9_332:
	LONG $0x00f88141; WORD $0x0004; BYTE $0x00 // cmpl         $1024, %r8d
	LONG $0xf45d8f0f; WORD $0xffff             // jg           LBB9_155, $-2979(%rip)
	WORD $0xff41; BYTE $0xc8                   // decl         %r8d
	WORD $0x8944; BYTE $0xc1                   // movl         %r8d, %ecx
	LONG $0x0001d1e9; BYTE $0x00               // jmp          LBB9_363, $465(%rip)

LBB9_335:
	WORD $0xde89             // movl         %ebx, %esi
	WORD $0x8944; BYTE $0xc1 // movl         %r8d, %ecx

LBB9_336:
	LONG $0xc87d8948             // movq         %rdi, $-56(%rbp)
	WORD $0xd9f7                 // negl         %ecx
	WORD $0xd231                 // xorl         %edx, %edx
	WORD $0xf685                 // testl        %esi, %esi
	LONG $0x000000bf; BYTE $0x00 // movl         $0, %edi
	WORD $0x490f; BYTE $0xfe     // cmovnsl      %esi, %edi
	WORD $0xc031                 // xorl         %eax, %eax
	LONG $0xc07d8b4c             // movq         $-64(%rbp), %r15

LBB9_337:
	WORD $0x3948; BYTE $0xd7       // cmpq         %rdx, %rdi
	LONG $0x0027840f; WORD $0x0000 // je           LBB9_340, $39(%rip)
	LONG $0x80048d48               // leaq         (%rax,%rax,4), %rax
	LONG $0x1cbe0f49; BYTE $0x14   // movsbq       (%r12,%rdx), %rbx
	LONG $0x43448d48; BYTE $0xd0   // leaq         $-48(%rbx,%rax,2), %rax
	WORD $0xff48; BYTE $0xc2       // incq         %rdx
	WORD $0x8948; BYTE $0xc3       // movq         %rax, %rbx
	WORD $0xd348; BYTE $0xeb       // shrq         %cl, %rbx
	WORD $0x8548; BYTE $0xdb       // testq        %rbx, %rbx
	LONG $0xffd7840f; WORD $0xffff // je           LBB9_337, $-41(%rip)
	WORD $0xd789                   // movl         %edx, %edi
	LONG $0x00004fe9; BYTE $0x00   // jmp          LBB9_344, $79(%rip)

LBB9_340:
	WORD $0x8548; BYTE $0xc0                   // testq        %rax, %rax
	LONG $0x0365840f; WORD $0x0000             // je           LBB9_393, $869(%rip)
	WORD $0x8948; BYTE $0xc2                   // movq         %rax, %rdx
	WORD $0xd348; BYTE $0xea                   // shrq         %cl, %rdx
	WORD $0x8548; BYTE $0xd2                   // testq        %rdx, %rdx
	LONG $0x001f840f; WORD $0x0000             // je           LBB9_343, $31(%rip)
	LONG $0xffc2c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rdx
	WORD $0xd348; BYTE $0xe2                   // shlq         %cl, %rdx
	LONG $0xc8758b48                           // movq         $-56(%rbp), %rsi
	WORD $0xfe29                               // subl         %edi, %esi
	WORD $0x8948; BYTE $0xf7                   // movq         %rsi, %rdi
	WORD $0xc7ff                               // incl         %edi
	WORD $0xf748; BYTE $0xd2                   // notq         %rdx
	WORD $0xdb31                               // xorl         %ebx, %ebx
	LONG $0x000084e9; BYTE $0x00               // jmp          LBB9_348, $132(%rip)

LBB9_343:
	WORD $0x0148; BYTE $0xc0       // addq         %rax, %rax
	LONG $0x80048d48               // leaq         (%rax,%rax,4), %rax
	WORD $0xc7ff                   // incl         %edi
	WORD $0x8948; BYTE $0xc2       // movq         %rax, %rdx
	WORD $0xd348; BYTE $0xea       // shrq         %cl, %rdx
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0xffe8840f; WORD $0xffff // je           LBB9_343, $-24(%rip)

LBB9_344:
	LONG $0xffc2c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rdx
	WORD $0xd348; BYTE $0xe2                   // shlq         %cl, %rdx
	LONG $0xc85d8b48                           // movq         $-56(%rbp), %rbx
	WORD $0xfb29                               // subl         %edi, %ebx
	LONG $0xc85d8948                           // movq         %rbx, $-56(%rbp)
	WORD $0xf748; BYTE $0xd2                   // notq         %rdx
	WORD $0xdb31                               // xorl         %ebx, %ebx
	WORD $0xf739                               // cmpl         %esi, %edi
	LONG $0x003c8d0f; WORD $0x0000             // jge          LBB9_347, $60(%rip)
	WORD $0x634c; BYTE $0xd7                   // movslq       %edi, %r10
	WORD $0x634d; BYTE $0xc1                   // movslq       %r9d, %r8
	LONG $0x140c8d4f                           // leaq         (%r12,%r10), %r9
	WORD $0xdb31                               // xorl         %ebx, %ebx

LBB9_346:
	WORD $0x8948; BYTE $0xc6       // movq         %rax, %rsi
	WORD $0xd348; BYTE $0xee       // shrq         %cl, %rsi
	WORD $0x2148; BYTE $0xd0       // andq         %rdx, %rax
	LONG $0x30c68040               // addb         $48, %sil
	LONG $0x1c348841               // movb         %sil, (%r12,%rbx)
	LONG $0x34be0f49; BYTE $0x19   // movsbq       (%r9,%rbx), %rsi
	LONG $0x1a7c8d49; BYTE $0x01   // leaq         $1(%r10,%rbx), %rdi
	WORD $0xff48; BYTE $0xc3       // incq         %rbx
	LONG $0x80048d48               // leaq         (%rax,%rax,4), %rax
	LONG $0x46448d48; BYTE $0xd0   // leaq         $-48(%rsi,%rax,2), %rax
	WORD $0x394c; BYTE $0xc7       // cmpq         %r8, %rdi
	LONG $0xffd08c0f; WORD $0xffff // jl           LBB9_346, $-48(%rip)

LBB9_347:
	LONG $0xc87d8b48               // movq         $-56(%rbp), %rdi
	WORD $0xc7ff                   // incl         %edi
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x0061840f; WORD $0x0000 // je           LBB9_354, $97(%rip)

LBB9_348:
	WORD $0x8949; BYTE $0xf8     // movq         %rdi, %r8
	LONG $0x000001be; BYTE $0x00 // movl         $1, %esi
	WORD $0x8941; BYTE $0xd9     // movl         %ebx, %r9d
	LONG $0x000017e9; BYTE $0x00 // jmp          LBB9_350, $23(%rip)

LBB9_349:
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0xde450f44               // cmovnel      %esi, %r11d
	WORD $0x0148; BYTE $0xc0       // addq         %rax, %rax
	LONG $0x80048d48               // leaq         (%rax,%rax,4), %rax
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x0032840f; WORD $0x0000 // je           LBB9_352, $50(%rip)

LBB9_350:
	WORD $0x8948; BYTE $0xc7       // movq         %rax, %rdi
	WORD $0xd348; BYTE $0xef       // shrq         %cl, %rdi
	WORD $0x2148; BYTE $0xd0       // andq         %rdx, %rax
	WORD $0x6349; BYTE $0xd9       // movslq       %r9d, %rbx
	WORD $0x3949; BYTE $0xdd       // cmpq         %rbx, %r13
	LONG $0xffd4860f; WORD $0xffff // jbe          LBB9_349, $-44(%rip)
	LONG $0x30c78040               // addb         $48, %dil
	LONG $0x1c3c8841               // movb         %dil, (%r12,%rbx)
	WORD $0xc3ff                   // incl         %ebx
	WORD $0x8941; BYTE $0xd9       // movl         %ebx, %r9d
	WORD $0x0148; BYTE $0xc0       // addq         %rax, %rax
	LONG $0x80048d48               // leaq         (%rax,%rax,4), %rax
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0xffce850f; WORD $0xffff // jne          LBB9_350, $-50(%rip)

LBB9_352:
	WORD $0x894c; BYTE $0xc7     // movq         %r8, %rdi
	LONG $0x000003e9; BYTE $0x00 // jmp          LBB9_355, $3(%rip)

LBB9_354:
	WORD $0x8941; BYTE $0xd9 // movl         %ebx, %r9d

LBB9_355:
	WORD $0x8545; BYTE $0xc9       // testl        %r9d, %r9d
	LONG $0x98758b4c               // movq         $-104(%rbp), %r14
	LONG $0x00318e0f; WORD $0x0000 // jle          LBB9_360, $49(%rip)
	WORD $0x8944; BYTE $0xc8       // movl         %r9d, %eax
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	WORD $0xf631                   // xorl         %esi, %esi

LBB9_357:
	LONG $0xff498d41               // leal         $-1(%r9), %ecx
	LONG $0x0c3c8041; BYTE $0x30   // cmpb         $48, (%r12,%rcx)
	LONG $0x0039850f; WORD $0x0000 // jne          LBB9_362, $57(%rip)
	WORD $0xff48; BYTE $0xc8       // decq         %rax
	WORD $0x8941; BYTE $0xc9       // movl         %ecx, %r9d
	LONG $0x01f88348               // cmpq         $1, %rax
	LONG $0xffe18f0f; WORD $0xffff // jg           LBB9_357, $-31(%rip)
	LONG $0xfffc02b9; BYTE $0xff   // movl         $-1022, %ecx
	LONG $0x000230e9; BYTE $0x00   // jmp          LBB9_395, $560(%rip)

LBB9_360:
	LONG $0xfffc02b9; BYTE $0xff   // movl         $-1022, %ecx
	WORD $0x8545; BYTE $0xc9       // testl        %r9d, %r9d
	LONG $0x03c8840f; WORD $0x0000 // je           LBB9_429, $968(%rip)
	LONG $0xfffc02b8; BYTE $0xff   // movl         $-1022, %eax
	LONG $0xc8458948               // movq         %rax, $-56(%rbp)
	WORD $0x8944; BYTE $0xcb       // movl         %r9d, %ebx
	LONG $0x000014e9; BYTE $0x00   // jmp          LBB9_365, $20(%rip)

LBB9_362:
	LONG $0xfffc02b9; BYTE $0xff // movl         $-1022, %ecx
	WORD $0x8944; BYTE $0xcb     // movl         %r9d, %ebx

LBB9_363:
	WORD $0xdb85                   // testl        %ebx, %ebx
	LONG $0x0050840f; WORD $0x0000 // je           LBB9_370, $80(%rip)
	LONG $0xc84d8948               // movq         %rcx, $-56(%rbp)

LBB9_365:
	WORD $0x6348; BYTE $0xf3       // movslq       %ebx, %rsi
	WORD $0x31b1                   // movb         $49, %cl
	WORD $0xc031                   // xorl         %eax, %eax
	LONG $0x0010ba41; WORD $0x0000 // movl         $16, %r10d

LBB9_366:
	LONG $0x26f88348                           // cmpq         $38, %rax
	LONG $0x0040840f; WORD $0x0000             // je           LBB9_371, $64(%rip)
	LONG $0x040c3841                           // cmpb         %cl, (%r12,%rax)
	LONG $0x003e850f; WORD $0x0000             // jne          LBB9_372, $62(%rip)
	LONG $0x520d8d48; WORD $0x0104; BYTE $0x00 // leaq         $66642(%rip), %rcx  /* _LSHIFT_TAB(%rip) */
	QUAD $0x0000158d088cb60f                   // movzbl       $5517(%rax,%rcx), %ecx
	WORD $0xff48; BYTE $0xc0                   // incq         %rax
	WORD $0x3948; BYTE $0xc6                   // cmpq         %rax, %rsi
	LONG $0xffd1850f; WORD $0xffff             // jne          LBB9_366, $-47(%rip)
	WORD $0x8949; BYTE $0xf8                   // movq         %rdi, %r8
	WORD $0xc984                               // testb        %cl, %cl
	LONG $0x0021850f; WORD $0x0000             // jne          LBB9_373, $33(%rip)
	LONG $0x000022e9; BYTE $0x00               // jmp          LBB9_374, $34(%rip)

LBB9_370:
	WORD $0xc031                 // xorl         %eax, %eax
	LONG $0x98758b4c             // movq         $-104(%rbp), %r14
	LONG $0x000196e9; BYTE $0x00 // jmp          LBB9_394, $406(%rip)

LBB9_371:
	WORD $0x8949; BYTE $0xf8     // movq         %rdi, %r8
	LONG $0x00000fe9; BYTE $0x00 // jmp          LBB9_374, $15(%rip)

LBB9_372:
	WORD $0x8949; BYTE $0xf8       // movq         %rdi, %r8
	LONG $0x00068d0f; WORD $0x0000 // jge          LBB9_374, $6(%rip)

LBB9_373:
	LONG $0x000fba41; WORD $0x0000 // movl         $15, %r10d

LBB9_374:
	WORD $0xdb85                           // testl        %ebx, %ebx
	LONG $0x01048e0f; WORD $0x0000         // jle          LBB9_386, $260(%rip)
	WORD $0x0144; BYTE $0xd3               // addl         %r10d, %ebx
	WORD $0x634c; BYTE $0xf3               // movslq       %ebx, %r14
	WORD $0xff49; BYTE $0xce               // decq         %r14
	WORD $0xff48; BYTE $0xc6               // incq         %rsi
	WORD $0xc931                           // xorl         %ecx, %ecx
	QUAD $0x000000000000bf49; WORD $0xfa00 // movabsq      $-432345564227567616, %r15
	LONG $0x00001ee9; BYTE $0x00           // jmp          LBB9_378, $30(%rip)

LBB9_376:
	WORD $0x8548; BYTE $0xc0     // testq        %rax, %rax
	LONG $0x000001b8; BYTE $0x00 // movl         $1, %eax
	LONG $0xd8450f44             // cmovnel      %eax, %r11d

LBB9_377:
	WORD $0xcbff                   // decl         %ebx
	WORD $0xff49; BYTE $0xce       // decq         %r14
	WORD $0xff48; BYTE $0xce       // decq         %rsi
	LONG $0x01fe8348               // cmpq         $1, %rsi
	LONG $0x00498e0f; WORD $0x0000 // jle          LBB9_380, $73(%rip)

LBB9_378:
	LONG $0x7cbe0f49; WORD $0xfe34         // movsbq       $-2(%r12,%rsi), %rdi
	LONG $0x35e7c148                       // shlq         $53, %rdi
	WORD $0x0148; BYTE $0xcf               // addq         %rcx, %rdi
	WORD $0x014c; BYTE $0xff               // addq         %r15, %rdi
	WORD $0x8948; BYTE $0xf8               // movq         %rdi, %rax
	QUAD $0xcccccccccccdb948; WORD $0xcccc // movabsq      $-3689348814741910323, %rcx
	WORD $0xf748; BYTE $0xe1               // mulq         %rcx
	WORD $0x8948; BYTE $0xd1               // movq         %rdx, %rcx
	LONG $0x03e9c148                       // shrq         $3, %rcx
	LONG $0x09048d48                       // leaq         (%rcx,%rcx), %rax
	LONG $0x80148d48                       // leaq         (%rax,%rax,4), %rdx
	WORD $0x8948; BYTE $0xf8               // movq         %rdi, %rax
	WORD $0x2948; BYTE $0xd0               // subq         %rdx, %rax
	WORD $0x394d; BYTE $0xee               // cmpq         %r13, %r14
	LONG $0xffa4830f; WORD $0xffff         // jae          LBB9_376, $-92(%rip)
	WORD $0x3004                           // addb         $48, %al
	LONG $0x34048843                       // movb         %al, (%r12,%r14)
	LONG $0xffffa5e9; BYTE $0xff           // jmp          LBB9_377, $-91(%rip)

LBB9_380:
	LONG $0x0aff8348               // cmpq         $10, %rdi
	LONG $0x0009830f; WORD $0x0000 // jae          LBB9_382, $9(%rip)
	LONG $0xc07d8b4c               // movq         $-64(%rbp), %r15
	LONG $0x00006de9; BYTE $0x00   // jmp          LBB9_386, $109(%rip)

LBB9_382:
	WORD $0x6348; BYTE $0xf3               // movslq       %ebx, %rsi
	WORD $0xff48; BYTE $0xce               // decq         %rsi
	LONG $0x0001be41; WORD $0x0000         // movl         $1, %r14d
	LONG $0xc07d8b4c                       // movq         $-64(%rbp), %r15
	QUAD $0xcccccccccccdbf48; WORD $0xcccc // movabsq      $-3689348814741910323, %rdi
	LONG $0x000017e9; BYTE $0x00           // jmp          LBB9_384, $23(%rip)

LBB9_383:
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0xde450f45               // cmovnel      %r14d, %r11d
	WORD $0xff48; BYTE $0xce       // decq         %rsi
	LONG $0x09f98348               // cmpq         $9, %rcx
	WORD $0x8948; BYTE $0xd1       // movq         %rdx, %rcx
	LONG $0x0037860f; WORD $0x0000 // jbe          LBB9_386, $55(%rip)

LBB9_384:
	WORD $0x8948; BYTE $0xc8       // movq         %rcx, %rax
	WORD $0xf748; BYTE $0xe7       // mulq         %rdi
	LONG $0x03eac148               // shrq         $3, %rdx
	LONG $0x12048d48               // leaq         (%rdx,%rdx), %rax
	LONG $0x801c8d48               // leaq         (%rax,%rax,4), %rbx
	WORD $0x8948; BYTE $0xc8       // movq         %rcx, %rax
	WORD $0x2948; BYTE $0xd8       // subq         %rbx, %rax
	WORD $0x394c; BYTE $0xee       // cmpq         %r13, %rsi
	LONG $0xffc8830f; WORD $0xffff // jae          LBB9_383, $-56(%rip)
	WORD $0x3004                   // addb         $48, %al
	LONG $0x34048841               // movb         %al, (%r12,%rsi)
	WORD $0xff48; BYTE $0xce       // decq         %rsi
	LONG $0x09f98348               // cmpq         $9, %rcx
	WORD $0x8948; BYTE $0xd1       // movq         %rdx, %rcx
	LONG $0xffc9870f; WORD $0xffff // ja           LBB9_384, $-55(%rip)

LBB9_386:
	WORD $0x0145; BYTE $0xd1       // addl         %r10d, %r9d
	WORD $0x6349; BYTE $0xc1       // movslq       %r9d, %rax
	WORD $0x3949; BYTE $0xc5       // cmpq         %rax, %r13
	LONG $0xc5460f41               // cmovbel      %r13d, %eax
	WORD $0x894c; BYTE $0xc7       // movq         %r8, %rdi
	WORD $0x0144; BYTE $0xd7       // addl         %r10d, %edi
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x002b8e0f; WORD $0x0000 // jle          LBB9_390, $43(%rip)
	WORD $0xc189                   // movl         %eax, %ecx
	WORD $0xff48; BYTE $0xc1       // incq         %rcx
	LONG $0x98758b4c               // movq         $-104(%rbp), %r14

LBB9_388:
	WORD $0x508d; BYTE $0xff       // leal         $-1(%rax), %edx
	LONG $0x143c8041; BYTE $0x30   // cmpb         $48, (%r12,%rdx)
	LONG $0x0020850f; WORD $0x0000 // jne          LBB9_391, $32(%rip)
	WORD $0xff48; BYTE $0xc9       // decq         %rcx
	WORD $0xd089                   // movl         %edx, %eax
	LONG $0x01f98348               // cmpq         $1, %rcx
	LONG $0xffe38f0f; WORD $0xffff // jg           LBB9_388, $-29(%rip)
	LONG $0x000015e9; BYTE $0x00   // jmp          LBB9_392, $21(%rip)

LBB9_390:
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x98758b4c               // movq         $-104(%rbp), %r14
	LONG $0x0009840f; WORD $0x0000 // je           LBB9_392, $9(%rip)

LBB9_391:
	LONG $0xc84d8b48             // movq         $-56(%rbp), %rcx
	LONG $0x000018e9; BYTE $0x00 // jmp          LBB9_394, $24(%rip)

LBB9_392:
	WORD $0xc931                 // xorl         %ecx, %ecx
	WORD $0xff31                 // xorl         %edi, %edi
	LONG $0x000150e9; BYTE $0x00 // jmp          LBB9_418, $336(%rip)

LBB9_393:
	WORD $0xc031                 // xorl         %eax, %eax
	LONG $0x98758b4c             // movq         $-104(%rbp), %r14
	LONG $0xc87d8b48             // movq         $-56(%rbp), %rdi
	LONG $0xfffc02b9; BYTE $0xff // movl         $-1022, %ecx

LBB9_394:
	LONG $0xffc6c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rsi
	WORD $0xff83; BYTE $0x14                   // cmpl         $20, %edi
	LONG $0x00128e0f; WORD $0x0000             // jle          LBB9_396, $18(%rip)

LBB9_395:
	QUAD $0xffffffffffffba48; WORD $0x000f // movabsq      $4503599627370495, %rdx
	WORD $0x5d8a; BYTE $0xd7               // movb         $-41(%rbp), %bl
	LONG $0x000175e9; BYTE $0x00           // jmp          LBB9_423, $373(%rip)

LBB9_396:
	LONG $0xc84d8948               // movq         %rcx, $-56(%rbp)
	WORD $0xfa89                   // movl         %edi, %edx
	WORD $0xff85                   // testl        %edi, %edi
	WORD $0x8949; BYTE $0xfd       // movq         %rdi, %r13
	LONG $0x004e8e0f; WORD $0x0000 // jle          LBB9_401, $78(%rip)
	WORD $0xf631                   // xorl         %esi, %esi
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x000000bb; BYTE $0x00   // movl         $0, %ebx
	WORD $0x490f; BYTE $0xd8       // cmovnsl      %eax, %ebx
	LONG $0xff528d4c               // leaq         $-1(%rdx), %r10
	WORD $0x3949; BYTE $0xda       // cmpq         %rbx, %r10
	LONG $0xd3430f44               // cmovael      %ebx, %r10d
	LONG $0x014a8d45               // leal         $1(%r10), %r9d
	WORD $0xc931                   // xorl         %ecx, %ecx

LBB9_398:
	WORD $0x3948; BYTE $0xf3       // cmpq         %rsi, %rbx
	LONG $0x0035840f; WORD $0x0000 // je           LBB9_402, $53(%rip)
	LONG $0x890c8d48               // leaq         (%rcx,%rcx,4), %rcx
	LONG $0x3cbe0f49; BYTE $0x34   // movsbq       (%r12,%rsi), %rdi
	LONG $0x4f4c8d48; BYTE $0xd0   // leaq         $-48(%rdi,%rcx,2), %rcx
	WORD $0x894c; BYTE $0xef       // movq         %r13, %rdi
	WORD $0xff48; BYTE $0xc6       // incq         %rsi
	WORD $0x3948; BYTE $0xf2       // cmpq         %rsi, %rdx
	LONG $0xffda850f; WORD $0xffff // jne          LBB9_398, $-38(%rip)
	WORD $0x3145; BYTE $0xc0       // xorl         %r8d, %r8d
	WORD $0x8945; BYTE $0xca       // movl         %r9d, %r10d
	LONG $0x000010e9; BYTE $0x00   // jmp          LBB9_403, $16(%rip)

LBB9_401:
	WORD $0x3145; BYTE $0xd2     // xorl         %r10d, %r10d
	WORD $0xb041; BYTE $0x01     // movb         $1, %r8b
	WORD $0xc931                 // xorl         %ecx, %ecx
	LONG $0x000003e9; BYTE $0x00 // jmp          LBB9_403, $3(%rip)

LBB9_402:
	WORD $0x3145; BYTE $0xc0 // xorl         %r8d, %r8d

LBB9_403:
	WORD $0xfe89                   // movl         %edi, %esi
	WORD $0x2944; BYTE $0xd6       // subl         %r10d, %esi
	LONG $0x00528e0f; WORD $0x0000 // jle          LBB9_411, $82(%rip)
	WORD $0x8945; BYTE $0xd1       // movl         %r10d, %r9d
	WORD $0xf741; BYTE $0xd1       // notl         %r9d
	WORD $0x0141; BYTE $0xf9       // addl         %edi, %r9d
	WORD $0xe683; BYTE $0x07       // andl         $7, %esi
	LONG $0x0021840f; WORD $0x0000 // je           LBB9_408, $33(%rip)
	WORD $0x894c; BYTE $0xf7       // movq         %r14, %rdi
	WORD $0xdef7                   // negl         %esi
	WORD $0xdb31                   // xorl         %ebx, %ebx

LBB9_406:
	WORD $0x0148; BYTE $0xc9       // addq         %rcx, %rcx
	LONG $0x890c8d48               // leaq         (%rcx,%rcx,4), %rcx
	WORD $0xcbff                   // decl         %ebx
	WORD $0xde39                   // cmpl         %ebx, %esi
	LONG $0xffef850f; WORD $0xffff // jne          LBB9_406, $-17(%rip)
	WORD $0x2941; BYTE $0xda       // subl         %ebx, %r10d
	WORD $0x8949; BYTE $0xfe       // movq         %rdi, %r14
	WORD $0x894c; BYTE $0xef       // movq         %r13, %rdi

LBB9_408:
	LONG $0x07f98341               // cmpl         $7, %r9d
	LONG $0x0015820f; WORD $0x0000 // jb           LBB9_411, $21(%rip)
	WORD $0xfe89                   // movl         %edi, %esi
	WORD $0x2944; BYTE $0xd6       // subl         %r10d, %esi

LBB9_410:
	LONG $0x00c96948; WORD $0xf5e1; BYTE $0x05 // imulq        $100000000, %rcx, %rcx
	WORD $0xc683; BYTE $0xf8                   // addl         $-8, %esi
	LONG $0xfff0850f; WORD $0xffff             // jne          LBB9_410, $-16(%rip)

LBB9_411:
	WORD $0x8948; BYTE $0xfe       // movq         %rdi, %rsi
	WORD $0xff31                   // xorl         %edi, %edi
	WORD $0xf685                   // testl        %esi, %esi
	LONG $0x0046880f; WORD $0x0000 // js           LBB9_418, $70(%rip)
	WORD $0xf039                   // cmpl         %esi, %eax
	LONG $0x003e8e0f; WORD $0x0000 // jle          LBB9_418, $62(%rip)
	LONG $0x14148a41               // movb         (%r12,%rdx), %dl
	WORD $0xc6ff                   // incl         %esi
	WORD $0xc639                   // cmpl         %eax, %esi
	LONG $0x0029850f; WORD $0x0000 // jne          LBB9_417, $41(%rip)
	WORD $0xfa80; BYTE $0x35       // cmpb         $53, %dl
	LONG $0x0020850f; WORD $0x0000 // jne          LBB9_417, $32(%rip)
	WORD $0x8545; BYTE $0xdb       // testl        %r11d, %r11d
	LONG $0xc7950f40               // setne        %dil
	WORD $0x0841; BYTE $0xf8       // orb          %dil, %r8b
	LONG $0x0017850f; WORD $0x0000 // jne          LBB9_418, $23(%rip)
	WORD $0xff41; BYTE $0xcd       // decl         %r13d
	LONG $0x2c3c8a43               // movb         (%r12,%r13), %dil
	LONG $0x01e78040               // andb         $1, %dil
	LONG $0x000007e9; BYTE $0x00   // jmp          LBB9_418, $7(%rip)

LBB9_417:
	WORD $0xfa80; BYTE $0x34 // cmpb         $52, %dl
	LONG $0xc79f0f40         // setg         %dil

LBB9_418:
	QUAD $0xffffffffffffba48; WORD $0x000f // movabsq      $4503599627370495, %rdx
	WORD $0x5d8a; BYTE $0xd7               // movb         $-41(%rbp), %bl
	LONG $0xf7b60f40                       // movzbl       %dil, %esi
	WORD $0x0148; BYTE $0xce               // addq         %rcx, %rsi
	QUAD $0x000000000000b848; WORD $0x0020 // movabsq      $9007199254740992, %rax
	WORD $0x3948; BYTE $0xc6               // cmpq         %rax, %rsi
	LONG $0x0021850f; WORD $0x0000         // jne          LBB9_421, $33(%rip)
	LONG $0xc84d8b48                       // movq         $-56(%rbp), %rcx
	LONG $0x03fef981; WORD $0x0000         // cmpl         $1022, %ecx
	LONG $0x001a8e0f; WORD $0x0000         // jle          LBB9_422, $26(%rip)
	WORD $0xf631                           // xorl         %esi, %esi
	QUAD $0x000000000000b948; WORD $0x7ff0 // movabsq      $9218868437227405312, %rcx
	LONG $0xffef36e9; BYTE $0xff           // jmp          LBB9_160, $-4298(%rip)

LBB9_421:
	LONG $0xc84d8b48             // movq         $-56(%rbp), %rcx
	LONG $0x000005e9; BYTE $0x00 // jmp          LBB9_423, $5(%rip)

LBB9_422:
	WORD $0xc1ff             // incl         %ecx
	WORD $0x894c; BYTE $0xf6 // movq         %r14, %rsi

LBB9_423:
	WORD $0x2149; BYTE $0xf6       // andq         %rsi, %r14
	LONG $0x03ffc181; WORD $0x0000 // addl         $1023, %ecx
	LONG $0x07ffe181; WORD $0x0000 // andl         $2047, %ecx
	LONG $0x34e1c148               // shlq         $52, %rcx
	WORD $0x854d; BYTE $0xf6       // testq        %r14, %r14
	LONG $0xce440f49               // cmoveq       %r14, %rcx
	LONG $0xffef09e9; BYTE $0xff   // jmp          LBB9_160, $-4343(%rip)

LBB9_429:
	WORD $0xf631                 // xorl         %esi, %esi
	LONG $0xfffe53e9; BYTE $0xff // jmp          LBB9_395, $-429(%rip)

	// .p2align 4, 0x90
_vsigned:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	BYTE $0x53                                 // pushq        %rbx
	WORD $0x8b48; BYTE $0x06                   // movq         (%rsi), %rax
	WORD $0x8b4c; BYTE $0x0f                   // movq         (%rdi), %r9
	LONG $0x085f8b4c                           // movq         $8(%rdi), %r11
	LONG $0x0902c748; WORD $0x0000; BYTE $0x00 // movq         $9, (%rdx)
	LONG $0xc057f8c5                           // vxorps       %xmm0, %xmm0, %xmm0
	LONG $0x4211f8c5; BYTE $0x08               // vmovups      %xmm0, $8(%rdx)
	WORD $0x8b48; BYTE $0x0e                   // movq         (%rsi), %rcx
	LONG $0x184a8948                           // movq         %rcx, $24(%rdx)
	WORD $0x394c; BYTE $0xd8                   // cmpq         %r11, %rax
	LONG $0x0044830f; WORD $0x0000             // jae          LBB10_1, $68(%rip)
	LONG $0x010c8a41                           // movb         (%r9,%rax), %cl
	LONG $0x0001b841; WORD $0x0000             // movl         $1, %r8d
	WORD $0xf980; BYTE $0x2d                   // cmpb         $45, %cl
	LONG $0x0017850f; WORD $0x0000             // jne          LBB10_5, $23(%rip)
	WORD $0xff48; BYTE $0xc0                   // incq         %rax
	WORD $0x394c; BYTE $0xd8                   // cmpq         %r11, %rax
	LONG $0x0025830f; WORD $0x0000             // jae          LBB10_1, $37(%rip)
	LONG $0x010c8a41                           // movb         (%r9,%rax), %cl
	LONG $0xffc0c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r8

LBB10_5:
	WORD $0x798d; BYTE $0xd0                   // leal         $-48(%rcx), %edi
	LONG $0x0aff8040                           // cmpb         $10, %dil
	LONG $0x001a820f; WORD $0x0000             // jb           LBB10_7, $26(%rip)
	WORD $0x8948; BYTE $0x06                   // movq         %rax, (%rsi)
	LONG $0xfe02c748; WORD $0xffff; BYTE $0xff // movq         $-2, (%rdx)
	BYTE $0x5b                                 // popq         %rbx
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq

LBB10_1:
	WORD $0x894c; BYTE $0x1e                   // movq         %r11, (%rsi)
	LONG $0xff02c748; WORD $0xffff; BYTE $0xff // movq         $-1, (%rdx)
	BYTE $0x5b                                 // popq         %rbx
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq

LBB10_7:
	WORD $0xf980; BYTE $0x30               // cmpb         $48, %cl
	LONG $0x0035850f; WORD $0x0000         // jne          LBB10_12, $53(%rip)
	LONG $0x01788d48                       // leaq         $1(%rax), %rdi
	WORD $0x394c; BYTE $0xd8               // cmpq         %r11, %rax
	LONG $0x0081830f; WORD $0x0000         // jae          LBB10_11, $129(%rip)
	LONG $0x390c8a41                       // movb         (%r9,%rdi), %cl
	WORD $0xc180; BYTE $0xd2               // addb         $-46, %cl
	WORD $0xf980; BYTE $0x37               // cmpb         $55, %cl
	LONG $0x0071870f; WORD $0x0000         // ja           LBB10_11, $113(%rip)
	LONG $0xd1b60f44                       // movzbl       %cl, %r10d
	QUAD $0x000000800001b948; WORD $0x0080 // movabsq      $36028797027352577, %rcx
	LONG $0xd1a30f4c                       // btq          %r10, %rcx
	LONG $0x0059830f; WORD $0x0000         // jae          LBB10_11, $89(%rip)

LBB10_12:
	WORD $0x394c; BYTE $0xd8       // cmpq         %r11, %rax
	WORD $0x894d; BYTE $0xda       // movq         %r11, %r10
	LONG $0xd0470f4c               // cmovaq       %rax, %r10
	WORD $0xc931                   // xorl         %ecx, %ecx
	LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB10_13:
	WORD $0x3949; BYTE $0xc2       // cmpq         %rax, %r10
	LONG $0x007f840f; WORD $0x0000 // je           LBB10_23, $127(%rip)
	LONG $0x3cbe0f49; BYTE $0x01   // movsbq       (%r9,%rax), %rdi
	WORD $0x5f8d; BYTE $0xd0       // leal         $-48(%rdi), %ebx
	WORD $0xfb80; BYTE $0x09       // cmpb         $9, %bl
	LONG $0x0033870f; WORD $0x0000 // ja           LBB10_18, $51(%rip)
	LONG $0x0ac96b48               // imulq        $10, %rcx, %rcx
	LONG $0x0013800f; WORD $0x0000 // jo           LBB10_17, $19(%rip)
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	WORD $0xc783; BYTE $0xd0       // addl         $-48, %edi
	LONG $0xf8af0f49               // imulq        %r8, %rdi
	WORD $0x0148; BYTE $0xf9       // addq         %rdi, %rcx
	LONG $0xffc9810f; WORD $0xffff // jno          LBB10_13, $-55(%rip)

LBB10_17:
	WORD $0xff48; BYTE $0xc8                   // decq         %rax
	WORD $0x8948; BYTE $0x06                   // movq         %rax, (%rsi)
	LONG $0xfb02c748; WORD $0xffff; BYTE $0xff // movq         $-5, (%rdx)
	BYTE $0x5b                                 // popq         %rbx
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq

LBB10_11:
	WORD $0x8948; BYTE $0x3e // movq         %rdi, (%rsi)
	BYTE $0x5b               // popq         %rbx
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

LBB10_18:
	WORD $0x394c; BYTE $0xd8       // cmpq         %r11, %rax
	LONG $0x002f830f; WORD $0x0000 // jae          LBB10_22, $47(%rip)
	LONG $0x013c8a41               // movb         (%r9,%rax), %dil
	LONG $0x2eff8040               // cmpb         $46, %dil
	LONG $0x0014840f; WORD $0x0000 // je           LBB10_25, $20(%rip)
	LONG $0x45ff8040               // cmpb         $69, %dil
	LONG $0x000a840f; WORD $0x0000 // je           LBB10_25, $10(%rip)
	LONG $0x65ff8040               // cmpb         $101, %dil
	LONG $0x000d850f; WORD $0x0000 // jne          LBB10_22, $13(%rip)

LBB10_25:
	WORD $0x8948; BYTE $0x06                   // movq         %rax, (%rsi)
	LONG $0xfa02c748; WORD $0xffff; BYTE $0xff // movq         $-6, (%rdx)
	BYTE $0x5b                                 // popq         %rbx
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq

LBB10_22:
	WORD $0x8949; BYTE $0xc2 // movq         %rax, %r10

LBB10_23:
	WORD $0x894c; BYTE $0x16                                 // movq         %r10, (%rsi)
	LONG $0x104a8948                                         // movq         %rcx, $16(%rdx)
	BYTE $0x5b                                               // popq         %rbx
	BYTE $0x5d                                               // popq         %rbp
	BYTE $0xc3                                               // retq
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

_vunsigned:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	BYTE $0x53                                 // pushq        %rbx
	WORD $0x8949; BYTE $0xd0                   // movq         %rdx, %r8
	WORD $0x8b48; BYTE $0x0e                   // movq         (%rsi), %rcx
	WORD $0x8b4c; BYTE $0x0f                   // movq         (%rdi), %r9
	LONG $0x085f8b4c                           // movq         $8(%rdi), %r11
	LONG $0x0902c748; WORD $0x0000; BYTE $0x00 // movq         $9, (%rdx)
	LONG $0xc057f8c5                           // vxorps       %xmm0, %xmm0, %xmm0
	LONG $0x4211f8c5; BYTE $0x08               // vmovups      %xmm0, $8(%rdx)
	WORD $0x8b48; BYTE $0x06                   // movq         (%rsi), %rax
	LONG $0x18428948                           // movq         %rax, $24(%rdx)
	WORD $0x394c; BYTE $0xd9                   // cmpq         %r11, %rcx
	LONG $0x0019830f; WORD $0x0000             // jae          LBB11_1, $25(%rip)
	LONG $0x09048a41                           // movb         (%r9,%rcx), %al
	WORD $0x2d3c                               // cmpb         $45, %al
	LONG $0x001a850f; WORD $0x0000             // jne          LBB11_4, $26(%rip)

LBB11_3:
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0xfa00c749; WORD $0xffff; BYTE $0xff // movq         $-6, (%r8)
	BYTE $0x5b                                 // popq         %rbx
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq

LBB11_1:
	WORD $0x894c; BYTE $0x1e                   // movq         %r11, (%rsi)
	LONG $0xff00c749; WORD $0xffff; BYTE $0xff // movq         $-1, (%r8)
	BYTE $0x5b                                 // popq         %rbx
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq

LBB11_4:
	WORD $0x508d; BYTE $0xd0                   // leal         $-48(%rax), %edx
	WORD $0xfa80; BYTE $0x0a                   // cmpb         $10, %dl
	LONG $0x000d820f; WORD $0x0000             // jb           LBB11_6, $13(%rip)
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0xfe00c749; WORD $0xffff; BYTE $0xff // movq         $-2, (%r8)
	BYTE $0x5b                                 // popq         %rbx
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq

LBB11_6:
	WORD $0x303c                           // cmpb         $48, %al
	LONG $0x0026850f; WORD $0x0000         // jne          LBB11_7, $38(%rip)
	LONG $0x09448a41; BYTE $0x01           // movb         $1(%r9,%rcx), %al
	WORD $0xd204                           // addb         $-46, %al
	WORD $0x373c                           // cmpb         $55, %al
	LONG $0x00b6870f; WORD $0x0000         // ja           LBB11_16, $182(%rip)
	WORD $0xb60f; BYTE $0xc0               // movzbl       %al, %eax
	QUAD $0x000000800001ba48; WORD $0x0080 // movabsq      $36028797027352577, %rdx
	LONG $0xc2a30f48                       // btq          %rax, %rdx
	LONG $0x009f830f; WORD $0x0000         // jae          LBB11_16, $159(%rip)

LBB11_7:
	WORD $0xc031                         // xorl         %eax, %eax
	LONG $0x000aba41; WORD $0x0000       // movl         $10, %r10d
	QUAD $0x9090909090909090; BYTE $0x90 // .p2align 4, 0x90

LBB11_8:
	WORD $0x3949; BYTE $0xcb       // cmpq         %rcx, %r11
	LONG $0x007b840f; WORD $0x0000 // je           LBB11_22, $123(%rip)
	LONG $0x3cbe0f41; BYTE $0x09   // movsbl       (%r9,%rcx), %edi
	WORD $0x578d; BYTE $0xd0       // leal         $-48(%rdi), %edx
	WORD $0xfa80; BYTE $0x09       // cmpb         $9, %dl
	LONG $0x003f870f; WORD $0x0000 // ja           LBB11_17, $63(%rip)
	WORD $0xf749; BYTE $0xe2       // mulq         %r10
	LONG $0x0026800f; WORD $0x0000 // jo           LBB11_13, $38(%rip)
	WORD $0xff48; BYTE $0xc1       // incq         %rcx
	WORD $0xc783; BYTE $0xd0       // addl         $-48, %edi
	WORD $0xdb31                   // xorl         %ebx, %ebx
	WORD $0x0148; BYTE $0xf8       // addq         %rdi, %rax
	WORD $0x920f; BYTE $0xc3       // setb         %bl
	WORD $0x8948; BYTE $0xda       // movq         %rbx, %rdx
	WORD $0xf748; BYTE $0xda       // negq         %rdx
	WORD $0x3148; BYTE $0xd3       // xorq         %rdx, %rbx
	LONG $0x0009850f; WORD $0x0000 // jne          LBB11_13, $9(%rip)
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0xffb7890f; WORD $0xffff // jns          LBB11_8, $-73(%rip)

LBB11_13:
	WORD $0xff48; BYTE $0xc9                   // decq         %rcx
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0xfb00c749; WORD $0xffff; BYTE $0xff // movq         $-5, (%r8)
	BYTE $0x5b                                 // popq         %rbx
	BYTE $0x5d                                 // popq         %rbp
	BYTE $0xc3                                 // retq

LBB11_17:
	WORD $0x394c; BYTE $0xd9       // cmpq         %r11, %rcx
	LONG $0x001f830f; WORD $0x0000 // jae          LBB11_21, $31(%rip)
	LONG $0x09148a41               // movb         (%r9,%rcx), %dl
	WORD $0xfa80; BYTE $0x2e       // cmpb         $46, %dl
	LONG $0xff1f840f; WORD $0xffff // je           LBB11_3, $-225(%rip)
	WORD $0xfa80; BYTE $0x45       // cmpb         $69, %dl
	LONG $0xff16840f; WORD $0xffff // je           LBB11_3, $-234(%rip)
	WORD $0xfa80; BYTE $0x65       // cmpb         $101, %dl
	LONG $0xff0d840f; WORD $0xffff // je           LBB11_3, $-243(%rip)

LBB11_21:
	WORD $0x8949; BYTE $0xcb // movq         %rcx, %r11

LBB11_22:
	WORD $0x894c; BYTE $0x1e // movq         %r11, (%rsi)
	LONG $0x10408949         // movq         %rax, $16(%r8)
	BYTE $0x5b               // popq         %rbx
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

LBB11_16:
	WORD $0xff48; BYTE $0xc1             // incq         %rcx
	WORD $0x8948; BYTE $0x0e             // movq         %rcx, (%rsi)
	BYTE $0x5b                           // popq         %rbx
	BYTE $0x5d                           // popq         %rbp
	BYTE $0xc3                           // retq
	QUAD $0x0000000000000000; BYTE $0x00 // .p2align 4, 0x00

LCPI12_0:
	QUAD $0x0000000000000001 // .quad 1
	QUAD $0x0000000000000005 // .quad 5

LCPI12_1:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI12_2:
	QUAD $0x0909090909090909; QUAD $0x0909090909090909 // .space 16, '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'

LCPI12_3:
	QUAD $0x0a0a0a0a0a0a0a0a; QUAD $0x0a0a0a0a0a0a0a0a // .space 16, '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'

LCPI12_4:
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'

	// .p2align 4, 0x90
_skip_array:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	LONG $0x18ec8348                           // subq         $24, %rsp
	LONG $0xc84d8948                           // movq         %rcx, $-56(%rbp)
	WORD $0x8949; BYTE $0xd7                   // movq         %rdx, %r15
	WORD $0x8949; BYTE $0xfc                   // movq         %rdi, %r12
	QUAD $0xffffff8d056ff9c5                   // vmovdqa      $-115(%rip), %xmm0  /* LCPI12_0(%rip) */
	LONG $0x027ffac5                           // vmovdqu      %xmm0, (%rdx)
	LONG $0xffc6c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r14
	QUAD $0x000100002600bd49; WORD $0x0000     // movabsq      $4294977024, %r13
	QUAD $0xffffff801d6ff9c5                   // vmovdqa      $-128(%rip), %xmm3  /* LCPI12_1(%rip) */
	QUAD $0xffffff88256ff9c5                   // vmovdqa      $-120(%rip), %xmm4  /* LCPI12_2(%rip) */
	QUAD $0xffffff902d6ff9c5                   // vmovdqa      $-112(%rip), %xmm5  /* LCPI12_3(%rip) */
	QUAD $0xffffff98356ff9c5                   // vmovdqa      $-104(%rip), %xmm6  /* LCPI12_4(%rip) */
	LONG $0xd0758948                           // movq         %rsi, $-48(%rbp)
	LONG $0x000044e9; BYTE $0x00               // jmp          LBB12_5, $68(%rip)

LBB12_1:
	WORD $0x894c; BYTE $0xe7     // movq         %r12, %rdi
	LONG $0x002017e8; BYTE $0x00 // callq        _skip_positive, $8215(%rip)

LBB12_2:
	QUAD $0xffffff7f356ff9c5       // vmovdqa      $-129(%rip), %xmm6  /* LCPI12_4(%rip) */
	QUAD $0xffffff672d6ff9c5       // vmovdqa      $-153(%rip), %xmm5  /* LCPI12_3(%rip) */
	QUAD $0xffffff4f256ff9c5       // vmovdqa      $-177(%rip), %xmm4  /* LCPI12_2(%rip) */
	QUAD $0xffffff371d6ff9c5       // vmovdqa      $-201(%rip), %xmm3  /* LCPI12_1(%rip) */
	LONG $0xd0758b48               // movq         $-48(%rbp), %rsi
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x0525880f; WORD $0x0000 // js           LBB12_91, $1317(%rip)

LBB12_3:
	WORD $0x8b4d; BYTE $0x17       // movq         (%r15), %r10
	WORD $0x894c; BYTE $0xf0       // movq         %r14, %rax
	WORD $0x854d; BYTE $0xd2       // testq        %r10, %r10
	LONG $0x0516840f; WORD $0x0000 // je           LBB12_91, $1302(%rip)

LBB12_5:
	WORD $0x894d; BYTE $0xf0             // movq         %r14, %r8
	LONG $0x240c8b4d                     // movq         (%r12), %r9
	LONG $0x24548b4d; BYTE $0x08         // movq         $8(%r12), %r10
	WORD $0x8b48; BYTE $0x06             // movq         (%rsi), %rax
	WORD $0x394c; BYTE $0xd0             // cmpq         %r10, %rax
	LONG $0x0033830f; WORD $0x0000       // jae          LBB12_10, $51(%rip)
	LONG $0x010c8a41                     // movb         (%r9,%rax), %cl
	WORD $0xf980; BYTE $0x0d             // cmpb         $13, %cl
	LONG $0x0026840f; WORD $0x0000       // je           LBB12_10, $38(%rip)
	WORD $0xf980; BYTE $0x20             // cmpb         $32, %cl
	LONG $0x001d840f; WORD $0x0000       // je           LBB12_10, $29(%rip)
	WORD $0xc180; BYTE $0xf7             // addb         $-9, %cl
	WORD $0xf980; BYTE $0x01             // cmpb         $1, %cl
	LONG $0x0011860f; WORD $0x0000       // jbe          LBB12_10, $17(%rip)
	WORD $0x8949; BYTE $0xc6             // movq         %rax, %r14
	LONG $0x000209e9; BYTE $0x00         // jmp          LBB12_43, $521(%rip)
	QUAD $0x9090909090909090; BYTE $0x90 // .p2align 4, 0x90

LBB12_10:
	LONG $0x01708d4c               // leaq         $1(%rax), %r14
	WORD $0x394d; BYTE $0xd6       // cmpq         %r10, %r14
	LONG $0x0023830f; WORD $0x0000 // jae          LBB12_14, $35(%rip)
	LONG $0x310c8a43               // movb         (%r9,%r14), %cl
	WORD $0xf980; BYTE $0x0d       // cmpb         $13, %cl
	LONG $0x0016840f; WORD $0x0000 // je           LBB12_14, $22(%rip)
	WORD $0xf980; BYTE $0x20       // cmpb         $32, %cl
	LONG $0x000d840f; WORD $0x0000 // je           LBB12_14, $13(%rip)
	WORD $0xc180; BYTE $0xf7       // addb         $-9, %cl
	WORD $0xf980; BYTE $0x01       // cmpb         $1, %cl
	LONG $0x01d1870f; WORD $0x0000 // ja           LBB12_43, $465(%rip)
	BYTE $0x90                     // .p2align 4, 0x90

LBB12_14:
	LONG $0x02708d4c               // leaq         $2(%rax), %r14
	WORD $0x394d; BYTE $0xd6       // cmpq         %r10, %r14
	LONG $0x0023830f; WORD $0x0000 // jae          LBB12_18, $35(%rip)
	LONG $0x310c8a43               // movb         (%r9,%r14), %cl
	WORD $0xf980; BYTE $0x0d       // cmpb         $13, %cl
	LONG $0x0016840f; WORD $0x0000 // je           LBB12_18, $22(%rip)
	WORD $0xf980; BYTE $0x20       // cmpb         $32, %cl
	LONG $0x000d840f; WORD $0x0000 // je           LBB12_18, $13(%rip)
	WORD $0xc180; BYTE $0xf7       // addb         $-9, %cl
	WORD $0xf980; BYTE $0x01       // cmpb         $1, %cl
	LONG $0x01a1870f; WORD $0x0000 // ja           LBB12_43, $417(%rip)
	BYTE $0x90                     // .p2align 4, 0x90

LBB12_18:
	LONG $0x03708d4c               // leaq         $3(%rax), %r14
	WORD $0x394d; BYTE $0xd6       // cmpq         %r10, %r14
	LONG $0x0023830f; WORD $0x0000 // jae          LBB12_22, $35(%rip)
	LONG $0x310c8a43               // movb         (%r9,%r14), %cl
	WORD $0xf980; BYTE $0x0d       // cmpb         $13, %cl
	LONG $0x0016840f; WORD $0x0000 // je           LBB12_22, $22(%rip)
	WORD $0xf980; BYTE $0x20       // cmpb         $32, %cl
	LONG $0x000d840f; WORD $0x0000 // je           LBB12_22, $13(%rip)
	WORD $0xc180; BYTE $0xf7       // addb         $-9, %cl
	WORD $0xf980; BYTE $0x01       // cmpb         $1, %cl
	LONG $0x0171870f; WORD $0x0000 // ja           LBB12_43, $369(%rip)
	BYTE $0x90                     // .p2align 4, 0x90

LBB12_22:
	LONG $0x04488d48               // leaq         $4(%rax), %rcx
	WORD $0x3949; BYTE $0xca       // cmpq         %rcx, %r10
	LONG $0x0424860f; WORD $0x0000 // jbe          LBB12_89, $1060(%rip)
	LONG $0x09348d4d               // leaq         (%r9,%rcx), %r14
	WORD $0x894c; BYTE $0xd7       // movq         %r10, %rdi
	WORD $0x2948; BYTE $0xcf       // subq         %rcx, %rdi
	LONG $0x0068840f; WORD $0x0000 // je           LBB12_31, $104(%rip)
	WORD $0x8944; BYTE $0xf1       // movl         %r14d, %ecx
	WORD $0xe183; BYTE $0x0f       // andl         $15, %ecx
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0x0059840f; WORD $0x0000 // je           LBB12_31, $89(%rip)
	LONG $0x011c8d49               // leaq         (%r9,%rax), %rbx
	WORD $0x894c; BYTE $0xd7       // movq         %r10, %rdi
	WORD $0x2948; BYTE $0xc7       // subq         %rax, %rdi
	LONG $0xfb5f8d4c               // leaq         $-5(%rdi), %r11
	WORD $0xd231                   // xorl         %edx, %edx
	LONG $0x90909090               // .p2align 4, 0x90

LBB12_26:
	LONG $0x134cbe0f; BYTE $0x04   // movsbl       $4(%rbx,%rdx), %ecx
	WORD $0xf983; BYTE $0x20       // cmpl         $32, %ecx
	LONG $0x00fe870f; WORD $0x0000 // ja           LBB12_42, $254(%rip)
	LONG $0xcda30f49               // btq          %rcx, %r13
	LONG $0x00f4830f; WORD $0x0000 // jae          LBB12_42, $244(%rip)
	LONG $0x014a8d48               // leaq         $1(%rdx), %rcx
	WORD $0x3949; BYTE $0xd3       // cmpq         %rdx, %r11
	LONG $0x0014840f; WORD $0x0000 // je           LBB12_30, $20(%rip)
	LONG $0x13448d48; BYTE $0x05   // leaq         $5(%rbx,%rdx), %rax
	WORD $0xe083; BYTE $0x0f       // andl         $15, %eax
	WORD $0x8948; BYTE $0xca       // movq         %rcx, %rdx
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0xffc7850f; WORD $0xffff // jne          LBB12_26, $-57(%rip)

LBB12_30:
	LONG $0x19748d4c; BYTE $0x04 // leaq         $4(%rcx,%rbx), %r14
	WORD $0x2948; BYTE $0xcf     // subq         %rcx, %rdi
	LONG $0xfcc78348             // addq         $-4, %rdi

LBB12_31:
	LONG $0x10ff8348               // cmpq         $16, %rdi
	LONG $0x0042820f; WORD $0x0000 // jb           LBB12_34, $66(%rip)
	BYTE $0x90                     // .p2align 4, 0x90

LBB12_32:
	LONG $0x6f79c1c4; BYTE $0x06   // vmovdqa      (%r14), %xmm0
	LONG $0xcb74f9c5               // vpcmpeqb     %xmm3, %xmm0, %xmm1
	LONG $0xd474f9c5               // vpcmpeqb     %xmm4, %xmm0, %xmm2
	LONG $0xcaebf1c5               // vpor         %xmm2, %xmm1, %xmm1
	LONG $0xd574f9c5               // vpcmpeqb     %xmm5, %xmm0, %xmm2
	LONG $0xc674f9c5               // vpcmpeqb     %xmm6, %xmm0, %xmm0
	LONG $0xc2ebf9c5               // vpor         %xmm2, %xmm0, %xmm0
	LONG $0xc1ebf9c5               // vpor         %xmm1, %xmm0, %xmm0
	LONG $0xc8d7f9c5               // vpmovmskb    %xmm0, %ecx
	LONG $0xfff98366               // cmpw         $-1, %cx
	LONG $0x0071850f; WORD $0x0000 // jne          LBB12_41, $113(%rip)
	LONG $0x10c68349               // addq         $16, %r14
	LONG $0xf0c78348               // addq         $-16, %rdi
	LONG $0x0fff8348               // cmpq         $15, %rdi
	LONG $0xffbf870f; WORD $0xffff // ja           LBB12_32, $-65(%rip)

LBB12_34:
	WORD $0x8548; BYTE $0xff                                             // testq        %rdi, %rdi
	LONG $0x0040840f; WORD $0x0000                                       // je           LBB12_40, $64(%rip)
	LONG $0x3e048d49                                                     // leaq         (%r14,%rdi), %rax
	WORD $0xff49; BYTE $0xc6                                             // incq         %r14
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB12_36:
	LONG $0x4ebe0f41; BYTE $0xff   // movsbl       $-1(%r14), %ecx
	WORD $0xf983; BYTE $0x20       // cmpl         $32, %ecx
	LONG $0x0310870f; WORD $0x0000 // ja           LBB12_86, $784(%rip)
	LONG $0xcda30f49               // btq          %rcx, %r13
	LONG $0x0306830f; WORD $0x0000 // jae          LBB12_86, $774(%rip)
	WORD $0xff48; BYTE $0xcf       // decq         %rdi
	WORD $0xff49; BYTE $0xc6       // incq         %r14
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0xffd9850f; WORD $0xffff // jne          LBB12_36, $-39(%rip)
	WORD $0x8949; BYTE $0xc6       // movq         %rax, %r14

LBB12_40:
	WORD $0x294d; BYTE $0xce       // subq         %r9, %r14
	WORD $0x394d; BYTE $0xd6       // cmpq         %r10, %r14
	LONG $0x004a820f; WORD $0x0000 // jb           LBB12_43, $74(%rip)
	LONG $0x000309e9; BYTE $0x00   // jmp          LBB12_90, $777(%rip)
	LONG $0x90909090; BYTE $0x90   // .p2align 4, 0x90

LBB12_41:
	WORD $0xb70f; BYTE $0xc1       // movzwl       %cx, %eax
	WORD $0x294d; BYTE $0xce       // subq         %r9, %r14
	WORD $0xd0f7                   // notl         %eax
	WORD $0xbc0f; BYTE $0xc0       // bsfl         %eax, %eax
	WORD $0x0149; BYTE $0xc6       // addq         %rax, %r14
	WORD $0x394d; BYTE $0xd6       // cmpq         %r10, %r14
	LONG $0x0029820f; WORD $0x0000 // jb           LBB12_43, $41(%rip)
	LONG $0x0002e8e9; BYTE $0x00   // jmp          LBB12_90, $744(%rip)

LBB12_42:
	WORD $0x0148; BYTE $0xd3                               // addq         %rdx, %rbx
	WORD $0x894c; BYTE $0xc9                               // movq         %r9, %rcx
	WORD $0xf748; BYTE $0xd1                               // notq         %rcx
	LONG $0x19748d4c; BYTE $0x05                           // leaq         $5(%rcx,%rbx), %r14
	WORD $0x394d; BYTE $0xd6                               // cmpq         %r10, %r14
	LONG $0x02d1830f; WORD $0x0000                         // jae          LBB12_90, $721(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

LBB12_43:
	LONG $0x01468d49                           // leaq         $1(%r14), %rax
	WORD $0x8948; BYTE $0x06                   // movq         %rax, (%rsi)
	LONG $0x1cbe0f43; BYTE $0x31               // movsbl       (%r9,%r14), %ebx
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	WORD $0xdb85                               // testl        %ebx, %ebx
	LONG $0x02b0840f; WORD $0x0000             // je           LBB12_91, $688(%rip)
	WORD $0x8b49; BYTE $0x3f                   // movq         (%r15), %rdi
	LONG $0xff578d4c                           // leaq         $-1(%rdi), %r10
	LONG $0xff0c8b41                           // movl         (%r15,%rdi,8), %ecx
	LONG $0xfff88349                           // cmpq         $-1, %r8
	LONG $0xf0450f4d                           // cmovneq      %r8, %r14
	WORD $0xc9ff                               // decl         %ecx
	WORD $0xf983; BYTE $0x05                   // cmpl         $5, %ecx
	LONG $0x0027870f; WORD $0x0000             // ja           LBB12_87, $39(%rip)
	LONG $0xbc158d48; WORD $0x0003; BYTE $0x00 // leaq         $956(%rip), %rdx  /* LJTI12_0(%rip) */
	LONG $0x8a0c6348                           // movslq       (%rdx,%rcx,4), %rcx
	WORD $0x0148; BYTE $0xd1                   // addq         %rdx, %rcx
	JMP  CX

LBB12_46:
	WORD $0xfb83; BYTE $0x2c       // cmpl         $44, %ebx
	LONG $0x00e1840f; WORD $0x0000 // je           LBB12_62, $225(%rip)
	WORD $0xfb83; BYTE $0x5d       // cmpl         $93, %ebx
	LONG $0x00c4840f; WORD $0x0000 // je           LBB12_48, $196(%rip)
	LONG $0x000255e9; BYTE $0x00   // jmp          LBB12_88, $597(%rip)

LBB12_87:
	WORD $0x894d; BYTE $0x17       // movq         %r10, (%r15)
	WORD $0xfb83; BYTE $0x7b       // cmpl         $123, %ebx
	LONG $0x0082860f; WORD $0x0000 // jbe          LBB12_58, $130(%rip)
	LONG $0x000244e9; BYTE $0x00   // jmp          LBB12_88, $580(%rip)

LBB12_49:
	WORD $0xfb83; BYTE $0x2c                   // cmpl         $44, %ebx
	LONG $0x009c850f; WORD $0x0000             // jne          LBB12_50, $156(%rip)
	LONG $0xffff8148; WORD $0x000f; BYTE $0x00 // cmpq         $4095, %rdi
	LONG $0x02538f0f; WORD $0x0000             // jg           LBB12_93, $595(%rip)
	LONG $0x01478d48                           // leaq         $1(%rdi), %rax
	WORD $0x8949; BYTE $0x07                   // movq         %rax, (%r15)
	QUAD $0x00000308ff44c749; BYTE $0x00       // movq         $3, $8(%r15,%rdi,8)
	LONG $0xfffd0ae9; BYTE $0xff               // jmp          LBB12_3, $-758(%rip)

LBB12_51:
	WORD $0xfb80; BYTE $0x22       // cmpb         $34, %bl
	LONG $0x0210850f; WORD $0x0000 // jne          LBB12_88, $528(%rip)
	QUAD $0x00000004ff04c749       // movq         $4, (%r15,%rdi,8)

LBB12_53:
	WORD $0x894c; BYTE $0xe7     // movq         %r12, %rdi
	LONG $0xc8558b48             // movq         $-56(%rbp), %rdx
	LONG $0x000ed7e8; BYTE $0x00 // callq        _skip_string, $3799(%rip)
	LONG $0xfffcbbe9; BYTE $0xff // jmp          LBB12_2, $-837(%rip)

LBB12_54:
	WORD $0xfb80; BYTE $0x3a       // cmpb         $58, %bl
	LONG $0x01ee850f; WORD $0x0000 // jne          LBB12_88, $494(%rip)
	QUAD $0x00000000ff04c749       // movq         $0, (%r15,%rdi,8)
	LONG $0xfffcd2e9; BYTE $0xff   // jmp          LBB12_3, $-814(%rip)

LBB12_56:
	WORD $0xfb80; BYTE $0x5d       // cmpb         $93, %bl
	LONG $0x0042840f; WORD $0x0000 // je           LBB12_48, $66(%rip)
	QUAD $0x00000001ff04c749       // movq         $1, (%r15,%rdi,8)
	WORD $0xfb83; BYTE $0x7b       // cmpl         $123, %ebx
	LONG $0x01c7870f; WORD $0x0000 // ja           LBB12_88, $455(%rip)

LBB12_58:
	WORD $0xd989                               // movl         %ebx, %ecx
	LONG $0x1d158d48; WORD $0x0003; BYTE $0x00 // leaq         $797(%rip), %rdx  /* LJTI12_1(%rip) */
	LONG $0x8a0c6348                           // movslq       (%rdx,%rcx,4), %rcx
	WORD $0x0148; BYTE $0xd1                   // addq         %rdx, %rcx
	JMP  CX

LBB12_61:
	WORD $0x894c; BYTE $0xe7     // movq         %r12, %rdi
	LONG $0x001778e8; BYTE $0x00 // callq        _skip_negative, $6008(%rip)
	LONG $0xfffc6ce9; BYTE $0xff // jmp          LBB12_2, $-916(%rip)

LBB12_59:
	WORD $0xfb83; BYTE $0x22       // cmpl         $34, %ebx
	LONG $0x003f840f; WORD $0x0000 // je           LBB12_66, $63(%rip)

LBB12_50:
	WORD $0xfb83; BYTE $0x7d       // cmpl         $125, %ebx
	LONG $0x0196850f; WORD $0x0000 // jne          LBB12_88, $406(%rip)

LBB12_48:
	WORD $0x894d; BYTE $0x17       // movq         %r10, (%r15)
	WORD $0x894c; BYTE $0xf0       // movq         %r14, %rax
	WORD $0x854d; BYTE $0xd2       // testq        %r10, %r10
	LONG $0xfc87850f; WORD $0xffff // jne          LBB12_5, $-889(%rip)
	LONG $0x000198e9; BYTE $0x00   // jmp          LBB12_91, $408(%rip)

LBB12_62:
	LONG $0xffff8148; WORD $0x000f; BYTE $0x00 // cmpq         $4095, %rdi
	LONG $0x019a8f0f; WORD $0x0000             // jg           LBB12_93, $410(%rip)
	LONG $0x01478d48                           // leaq         $1(%rdi), %rax
	WORD $0x8949; BYTE $0x07                   // movq         %rax, (%r15)
	QUAD $0x00000008ff44c749; BYTE $0x00       // movq         $0, $8(%r15,%rdi,8)
	LONG $0xfffc51e9; BYTE $0xff               // jmp          LBB12_3, $-943(%rip)

LBB12_66:
	QUAD $0x00000002ff04c749             // movq         $2, (%r15,%rdi,8)
	WORD $0x894c; BYTE $0xe7             // movq         %r12, %rdi
	LONG $0xc8558b48                     // movq         $-56(%rbp), %rdx
	LONG $0x000e27e8; BYTE $0x00         // callq        _skip_string, $3623(%rip)
	WORD $0x8548; BYTE $0xc0             // testq        %rax, %rax
	LONG $0x0159880f; WORD $0x0000       // js           LBB12_91, $345(%rip)
	WORD $0x8b49; BYTE $0x07             // movq         (%r15), %rax
	LONG $0x0fff3d48; WORD $0x0000       // cmpq         $4095, %rax
	QUAD $0xfffffb4d1d6ff9c5             // vmovdqa      $-1203(%rip), %xmm3  /* LCPI12_1(%rip) */
	QUAD $0xfffffb55256ff9c5             // vmovdqa      $-1195(%rip), %xmm4  /* LCPI12_2(%rip) */
	QUAD $0xfffffb5d2d6ff9c5             // vmovdqa      $-1187(%rip), %xmm5  /* LCPI12_3(%rip) */
	QUAD $0xfffffb65356ff9c5             // vmovdqa      $-1179(%rip), %xmm6  /* LCPI12_4(%rip) */
	LONG $0x01398f0f; WORD $0x0000       // jg           LBB12_93, $313(%rip)
	LONG $0x01488d48                     // leaq         $1(%rax), %rcx
	WORD $0x8949; BYTE $0x0f             // movq         %rcx, (%r15)
	QUAD $0x00000408c744c749; BYTE $0x00 // movq         $4, $8(%r15,%rax,8)
	LONG $0xd0758b48                     // movq         $-48(%rbp), %rsi
	LONG $0xfffbece9; BYTE $0xff         // jmp          LBB12_3, $-1044(%rip)

LBB12_69:
	WORD $0x8b49; BYTE $0x07             // movq         (%r15), %rax
	LONG $0x0fff3d48; WORD $0x0000       // cmpq         $4095, %rax
	LONG $0x01118f0f; WORD $0x0000       // jg           LBB12_93, $273(%rip)
	LONG $0x01488d48                     // leaq         $1(%rax), %rcx
	WORD $0x8949; BYTE $0x0f             // movq         %rcx, (%r15)
	QUAD $0x00000508c744c749; BYTE $0x00 // movq         $5, $8(%r15,%rax,8)
	LONG $0xfffbc8e9; BYTE $0xff         // jmp          LBB12_3, $-1080(%rip)

LBB12_71:
	WORD $0x8b48; BYTE $0x16       // movq         (%rsi), %rdx
	LONG $0x244c8b49; BYTE $0x08   // movq         $8(%r12), %rcx
	LONG $0xfc798d48               // leaq         $-4(%rcx), %rdi
	WORD $0x3948; BYTE $0xfa       // cmpq         %rdi, %rdx
	LONG $0x00f3870f; WORD $0x0000 // ja           LBB12_92, $243(%rip)
	LONG $0x110c8b41               // movl         (%r9,%rdx), %ecx
	LONG $0x6c61f981; WORD $0x6573 // cmpl         $1702063201, %ecx
	LONG $0x0149850f; WORD $0x0000 // jne          LBB12_94, $329(%rip)
	LONG $0x04428d48               // leaq         $4(%rdx), %rax
	WORD $0x8948; BYTE $0x06       // movq         %rax, (%rsi)
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0xfb938f0f; WORD $0xffff // jg           LBB12_3, $-1133(%rip)
	LONG $0x0000d6e9; BYTE $0x00   // jmp          LBB12_83, $214(%rip)

LBB12_74:
	WORD $0x8b48; BYTE $0x16             // movq         (%rsi), %rdx
	LONG $0x244c8b49; BYTE $0x08         // movq         $8(%r12), %rcx
	LONG $0xfd798d48                     // leaq         $-3(%rcx), %rdi
	WORD $0x3948; BYTE $0xfa             // cmpq         %rdi, %rdx
	LONG $0x00b9870f; WORD $0x0000       // ja           LBB12_92, $185(%rip)
	QUAD $0x6c756eff117c8141; BYTE $0x6c // cmpl         $1819047278, $-1(%r9,%rdx)
	LONG $0x0029840f; WORD $0x0000       // je           LBB12_82, $41(%rip)
	LONG $0x0000b8e9; BYTE $0x00         // jmp          LBB12_76, $184(%rip)

LBB12_80:
	WORD $0x8b48; BYTE $0x16             // movq         (%rsi), %rdx
	LONG $0x244c8b49; BYTE $0x08         // movq         $8(%r12), %rcx
	LONG $0xfd798d48                     // leaq         $-3(%rcx), %rdi
	WORD $0x3948; BYTE $0xfa             // cmpq         %rdi, %rdx
	LONG $0x0090870f; WORD $0x0000       // ja           LBB12_92, $144(%rip)
	QUAD $0x757274ff117c8141; BYTE $0x65 // cmpl         $1702195828, $-1(%r9,%rdx)
	LONG $0x013c850f; WORD $0x0000       // jne          LBB12_99, $316(%rip)

LBB12_82:
	LONG $0x03428d48               // leaq         $3(%rdx), %rax
	WORD $0x8948; BYTE $0x06       // movq         %rax, (%rsi)
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0xfb318f0f; WORD $0xffff // jg           LBB12_3, $-1231(%rip)
	LONG $0x000074e9; BYTE $0x00   // jmp          LBB12_83, $116(%rip)

LBB12_84:
	WORD $0x8b49; BYTE $0x07             // movq         (%r15), %rax
	LONG $0x0fff3d48; WORD $0x0000       // cmpq         $4095, %rax
	LONG $0x00518f0f; WORD $0x0000       // jg           LBB12_93, $81(%rip)
	LONG $0x01488d48                     // leaq         $1(%rax), %rcx
	WORD $0x8949; BYTE $0x0f             // movq         %rcx, (%r15)
	QUAD $0x00000608c744c749; BYTE $0x00 // movq         $6, $8(%r15,%rax,8)
	LONG $0xfffb08e9; BYTE $0xff         // jmp          LBB12_3, $-1272(%rip)

LBB12_86:
	WORD $0x894c; BYTE $0xc8       // movq         %r9, %rax
	WORD $0xf748; BYTE $0xd0       // notq         %rax
	WORD $0x0149; BYTE $0xc6       // addq         %rax, %r14
	WORD $0x394d; BYTE $0xd6       // cmpq         %r10, %r14
	LONG $0xfd50820f; WORD $0xffff // jb           LBB12_43, $-688(%rip)
	LONG $0x00000fe9; BYTE $0x00   // jmp          LBB12_90, $15(%rip)

LBB12_88:
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x00000ae9; BYTE $0x00               // jmp          LBB12_91, $10(%rip)

LBB12_89:
	WORD $0x8948; BYTE $0x0e // movq         %rcx, (%rsi)

LBB12_90:
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax

LBB12_91:
	LONG $0x18c48348 // addq         $24, %rsp
	BYTE $0x5b       // popq         %rbx
	WORD $0x5c41     // popq         %r12
	WORD $0x5d41     // popq         %r13
	WORD $0x5e41     // popq         %r14
	WORD $0x5f41     // popq         %r15
	BYTE $0x5d       // popq         %rbp
	BYTE $0xc3       // retq

LBB12_93:
	LONG $0xf9c0c748; WORD $0xffff; BYTE $0xff // movq         $-7, %rax
	LONG $0xffffe5e9; BYTE $0xff               // jmp          LBB12_91, $-27(%rip)

LBB12_92:
	WORD $0x8948; BYTE $0x0e     // movq         %rcx, (%rsi)
	LONG $0xffffdde9; BYTE $0xff // jmp          LBB12_91, $-35(%rip)

LBB12_83:
	WORD $0xff48; BYTE $0xca     // decq         %rdx
	WORD $0x8948; BYTE $0xd0     // movq         %rdx, %rax
	LONG $0xffffd2e9; BYTE $0xff // jmp          LBB12_91, $-46(%rip)

LBB12_76:
	LONG $0xff428d48                           // leaq         $-1(%rdx), %rax
	WORD $0x8948; BYTE $0x06                   // movq         %rax, (%rsi)
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x117c8041; WORD $0x6eff             // cmpb         $110, $-1(%r9,%rdx)
	LONG $0xffb8850f; WORD $0xffff             // jne          LBB12_91, $-72(%rip)
	WORD $0x8948; BYTE $0x16                   // movq         %rdx, (%rsi)
	LONG $0x113c8041; BYTE $0x75               // cmpb         $117, (%r9,%rdx)
	LONG $0xffaa850f; WORD $0xffff             // jne          LBB12_91, $-86(%rip)
	LONG $0x014a8d48                           // leaq         $1(%rdx), %rcx
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0x117c8041; WORD $0x6c01             // cmpb         $108, $1(%r9,%rdx)
	LONG $0xff97850f; WORD $0xffff             // jne          LBB12_91, $-105(%rip)
	LONG $0x024a8d48                           // leaq         $2(%rdx), %rcx
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0x117c8041; WORD $0x6c02             // cmpb         $108, $2(%r9,%rdx)
	LONG $0xff84850f; WORD $0xffff             // jne          LBB12_91, $-124(%rip)
	LONG $0x0000a3e9; BYTE $0x00               // jmp          LBB12_103, $163(%rip)

LBB12_94:
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	WORD $0xf980; BYTE $0x61                   // cmpb         $97, %cl
	LONG $0xff6f850f; WORD $0xffff             // jne          LBB12_91, $-145(%rip)
	LONG $0x014a8d48                           // leaq         $1(%rdx), %rcx
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0x117c8041; WORD $0x6c01             // cmpb         $108, $1(%r9,%rdx)
	LONG $0xff5c850f; WORD $0xffff             // jne          LBB12_91, $-164(%rip)
	LONG $0x024a8d48                           // leaq         $2(%rdx), %rcx
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0x117c8041; WORD $0x7302             // cmpb         $115, $2(%r9,%rdx)
	LONG $0xff49850f; WORD $0xffff             // jne          LBB12_91, $-183(%rip)
	LONG $0x034a8d48                           // leaq         $3(%rdx), %rcx
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0x117c8041; WORD $0x6503             // cmpb         $101, $3(%r9,%rdx)
	LONG $0xff36850f; WORD $0xffff             // jne          LBB12_91, $-202(%rip)
	LONG $0x04c28348                           // addq         $4, %rdx
	WORD $0x8948; BYTE $0x16                   // movq         %rdx, (%rsi)
	LONG $0xffff2ae9; BYTE $0xff               // jmp          LBB12_91, $-214(%rip)

LBB12_99:
	LONG $0xff428d48                           // leaq         $-1(%rdx), %rax
	WORD $0x8948; BYTE $0x06                   // movq         %rax, (%rsi)
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x117c8041; WORD $0x74ff             // cmpb         $116, $-1(%r9,%rdx)
	LONG $0xff10850f; WORD $0xffff             // jne          LBB12_91, $-240(%rip)
	WORD $0x8948; BYTE $0x16                   // movq         %rdx, (%rsi)
	LONG $0x113c8041; BYTE $0x72               // cmpb         $114, (%r9,%rdx)
	LONG $0xff02850f; WORD $0xffff             // jne          LBB12_91, $-254(%rip)
	LONG $0x014a8d48                           // leaq         $1(%rdx), %rcx
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0x117c8041; WORD $0x7501             // cmpb         $117, $1(%r9,%rdx)
	LONG $0xfeef850f; WORD $0xffff             // jne          LBB12_91, $-273(%rip)
	LONG $0x024a8d48                           // leaq         $2(%rdx), %rcx
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0x117c8041; WORD $0x6502             // cmpb         $101, $2(%r9,%rdx)
	LONG $0xfedc850f; WORD $0xffff             // jne          LBB12_91, $-292(%rip)

LBB12_103:
	LONG $0x03c28348             // addq         $3, %rdx
	WORD $0x8948; BYTE $0x16     // movq         %rdx, (%rsi)
	LONG $0xfffed0e9; BYTE $0xff // jmp          LBB12_91, $-304(%rip)
	BYTE $0x90                   // .p2align 2, 0x90

	// .set L12_0_set_46, LBB12_46-LJTI12_0
	// .set L12_0_set_49, LBB12_49-LJTI12_0
	// .set L12_0_set_51, LBB12_51-LJTI12_0
	// .set L12_0_set_54, LBB12_54-LJTI12_0
	// .set L12_0_set_56, LBB12_56-LJTI12_0
	// .set L12_0_set_59, LBB12_59-LJTI12_0
LJTI12_0:
	LONG $0xfffffc4d // .long L12_0_set_46
	LONG $0xfffffc75 // .long L12_0_set_49
	LONG $0xfffffca0 // .long L12_0_set_51
	LONG $0xfffffcc2 // .long L12_0_set_54
	LONG $0xfffffcd8 // .long L12_0_set_56
	LONG $0xfffffd11 // .long L12_0_set_59

	// .set L12_1_set_91, LBB12_91-LJTI12_1
	// .set L12_1_set_88, LBB12_88-LJTI12_1
	// .set L12_1_set_53, LBB12_53-LJTI12_1
	// .set L12_1_set_61, LBB12_61-LJTI12_1
	// .set L12_1_set_1, LBB12_1-LJTI12_1
	// .set L12_1_set_69, LBB12_69-LJTI12_1
	// .set L12_1_set_71, LBB12_71-LJTI12_1
	// .set L12_1_set_74, LBB12_74-LJTI12_1
	// .set L12_1_set_80, LBB12_80-LJTI12_1
	// .set L12_1_set_84, LBB12_84-LJTI12_1
LJTI12_1:
	LONG $0xfffffeb7                           // .long L12_1_set_91
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffc99                           // .long L12_1_set_53
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffcec                           // .long L12_1_set_61
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffff95d                           // .long L12_1_set_1
	LONG $0xfffff95d                           // .long L12_1_set_1
	LONG $0xfffff95d                           // .long L12_1_set_1
	LONG $0xfffff95d                           // .long L12_1_set_1
	LONG $0xfffff95d                           // .long L12_1_set_1
	LONG $0xfffff95d                           // .long L12_1_set_1
	LONG $0xfffff95d                           // .long L12_1_set_1
	LONG $0xfffff95d                           // .long L12_1_set_1
	LONG $0xfffff95d                           // .long L12_1_set_1
	LONG $0xfffff95d                           // .long L12_1_set_1
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffda6                           // .long L12_1_set_69
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffdca                           // .long L12_1_set_71
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffe04                           // .long L12_1_set_74
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffe2d                           // .long L12_1_set_80
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffea1                           // .long L12_1_set_88
	LONG $0xfffffe66                           // .long L12_1_set_84
	QUAD $0x0000000000000000; LONG $0x00000000 // .p2align 4, 0x00

LCPI13_0:
	QUAD $0x0000000000000001 // .quad 1
	QUAD $0x0000000000000006 // .quad 6

LCPI13_1:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI13_2:
	QUAD $0x0909090909090909; QUAD $0x0909090909090909 // .space 16, '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'

LCPI13_3:
	QUAD $0x0a0a0a0a0a0a0a0a; QUAD $0x0a0a0a0a0a0a0a0a // .space 16, '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'

LCPI13_4:
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'

	// .p2align 4, 0x90
_skip_object:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	LONG $0x18ec8348                           // subq         $24, %rsp
	LONG $0xc84d8948                           // movq         %rcx, $-56(%rbp)
	WORD $0x8949; BYTE $0xd7                   // movq         %rdx, %r15
	WORD $0x8949; BYTE $0xfc                   // movq         %rdi, %r12
	QUAD $0xffffff8d056ff9c5                   // vmovdqa      $-115(%rip), %xmm0  /* LCPI13_0(%rip) */
	LONG $0x027ffac5                           // vmovdqu      %xmm0, (%rdx)
	LONG $0xffc6c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r14
	QUAD $0x000100002600bd49; WORD $0x0000     // movabsq      $4294977024, %r13
	QUAD $0xffffff801d6ff9c5                   // vmovdqa      $-128(%rip), %xmm3  /* LCPI13_1(%rip) */
	QUAD $0xffffff88256ff9c5                   // vmovdqa      $-120(%rip), %xmm4  /* LCPI13_2(%rip) */
	QUAD $0xffffff902d6ff9c5                   // vmovdqa      $-112(%rip), %xmm5  /* LCPI13_3(%rip) */
	QUAD $0xffffff98356ff9c5                   // vmovdqa      $-104(%rip), %xmm6  /* LCPI13_4(%rip) */
	LONG $0xd0758948                           // movq         %rsi, $-48(%rbp)
	LONG $0x000044e9; BYTE $0x00               // jmp          LBB13_5, $68(%rip)

LBB13_1:
	WORD $0x894c; BYTE $0xe7     // movq         %r12, %rdi
	LONG $0x0016c7e8; BYTE $0x00 // callq        _skip_positive, $5831(%rip)

LBB13_2:
	QUAD $0xffffff7f356ff9c5       // vmovdqa      $-129(%rip), %xmm6  /* LCPI13_4(%rip) */
	QUAD $0xffffff672d6ff9c5       // vmovdqa      $-153(%rip), %xmm5  /* LCPI13_3(%rip) */
	QUAD $0xffffff4f256ff9c5       // vmovdqa      $-177(%rip), %xmm4  /* LCPI13_2(%rip) */
	QUAD $0xffffff371d6ff9c5       // vmovdqa      $-201(%rip), %xmm3  /* LCPI13_1(%rip) */
	LONG $0xd0758b48               // movq         $-48(%rbp), %rsi
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x0525880f; WORD $0x0000 // js           LBB13_91, $1317(%rip)

LBB13_3:
	WORD $0x8b4d; BYTE $0x17       // movq         (%r15), %r10
	WORD $0x894c; BYTE $0xf0       // movq         %r14, %rax
	WORD $0x854d; BYTE $0xd2       // testq        %r10, %r10
	LONG $0x0516840f; WORD $0x0000 // je           LBB13_91, $1302(%rip)

LBB13_5:
	WORD $0x894d; BYTE $0xf0             // movq         %r14, %r8
	LONG $0x240c8b4d                     // movq         (%r12), %r9
	LONG $0x24548b4d; BYTE $0x08         // movq         $8(%r12), %r10
	WORD $0x8b48; BYTE $0x06             // movq         (%rsi), %rax
	WORD $0x394c; BYTE $0xd0             // cmpq         %r10, %rax
	LONG $0x0033830f; WORD $0x0000       // jae          LBB13_10, $51(%rip)
	LONG $0x010c8a41                     // movb         (%r9,%rax), %cl
	WORD $0xf980; BYTE $0x0d             // cmpb         $13, %cl
	LONG $0x0026840f; WORD $0x0000       // je           LBB13_10, $38(%rip)
	WORD $0xf980; BYTE $0x20             // cmpb         $32, %cl
	LONG $0x001d840f; WORD $0x0000       // je           LBB13_10, $29(%rip)
	WORD $0xc180; BYTE $0xf7             // addb         $-9, %cl
	WORD $0xf980; BYTE $0x01             // cmpb         $1, %cl
	LONG $0x0011860f; WORD $0x0000       // jbe          LBB13_10, $17(%rip)
	WORD $0x8949; BYTE $0xc6             // movq         %rax, %r14
	LONG $0x000209e9; BYTE $0x00         // jmp          LBB13_43, $521(%rip)
	QUAD $0x9090909090909090; BYTE $0x90 // .p2align 4, 0x90

LBB13_10:
	LONG $0x01708d4c               // leaq         $1(%rax), %r14
	WORD $0x394d; BYTE $0xd6       // cmpq         %r10, %r14
	LONG $0x0023830f; WORD $0x0000 // jae          LBB13_14, $35(%rip)
	LONG $0x310c8a43               // movb         (%r9,%r14), %cl
	WORD $0xf980; BYTE $0x0d       // cmpb         $13, %cl
	LONG $0x0016840f; WORD $0x0000 // je           LBB13_14, $22(%rip)
	WORD $0xf980; BYTE $0x20       // cmpb         $32, %cl
	LONG $0x000d840f; WORD $0x0000 // je           LBB13_14, $13(%rip)
	WORD $0xc180; BYTE $0xf7       // addb         $-9, %cl
	WORD $0xf980; BYTE $0x01       // cmpb         $1, %cl
	LONG $0x01d1870f; WORD $0x0000 // ja           LBB13_43, $465(%rip)
	BYTE $0x90                     // .p2align 4, 0x90

LBB13_14:
	LONG $0x02708d4c               // leaq         $2(%rax), %r14
	WORD $0x394d; BYTE $0xd6       // cmpq         %r10, %r14
	LONG $0x0023830f; WORD $0x0000 // jae          LBB13_18, $35(%rip)
	LONG $0x310c8a43               // movb         (%r9,%r14), %cl
	WORD $0xf980; BYTE $0x0d       // cmpb         $13, %cl
	LONG $0x0016840f; WORD $0x0000 // je           LBB13_18, $22(%rip)
	WORD $0xf980; BYTE $0x20       // cmpb         $32, %cl
	LONG $0x000d840f; WORD $0x0000 // je           LBB13_18, $13(%rip)
	WORD $0xc180; BYTE $0xf7       // addb         $-9, %cl
	WORD $0xf980; BYTE $0x01       // cmpb         $1, %cl
	LONG $0x01a1870f; WORD $0x0000 // ja           LBB13_43, $417(%rip)
	BYTE $0x90                     // .p2align 4, 0x90

LBB13_18:
	LONG $0x03708d4c               // leaq         $3(%rax), %r14
	WORD $0x394d; BYTE $0xd6       // cmpq         %r10, %r14
	LONG $0x0023830f; WORD $0x0000 // jae          LBB13_22, $35(%rip)
	LONG $0x310c8a43               // movb         (%r9,%r14), %cl
	WORD $0xf980; BYTE $0x0d       // cmpb         $13, %cl
	LONG $0x0016840f; WORD $0x0000 // je           LBB13_22, $22(%rip)
	WORD $0xf980; BYTE $0x20       // cmpb         $32, %cl
	LONG $0x000d840f; WORD $0x0000 // je           LBB13_22, $13(%rip)
	WORD $0xc180; BYTE $0xf7       // addb         $-9, %cl
	WORD $0xf980; BYTE $0x01       // cmpb         $1, %cl
	LONG $0x0171870f; WORD $0x0000 // ja           LBB13_43, $369(%rip)
	BYTE $0x90                     // .p2align 4, 0x90

LBB13_22:
	LONG $0x04488d48               // leaq         $4(%rax), %rcx
	WORD $0x3949; BYTE $0xca       // cmpq         %rcx, %r10
	LONG $0x0424860f; WORD $0x0000 // jbe          LBB13_89, $1060(%rip)
	LONG $0x09348d4d               // leaq         (%r9,%rcx), %r14
	WORD $0x894c; BYTE $0xd7       // movq         %r10, %rdi
	WORD $0x2948; BYTE $0xcf       // subq         %rcx, %rdi
	LONG $0x0068840f; WORD $0x0000 // je           LBB13_31, $104(%rip)
	WORD $0x8944; BYTE $0xf1       // movl         %r14d, %ecx
	WORD $0xe183; BYTE $0x0f       // andl         $15, %ecx
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0x0059840f; WORD $0x0000 // je           LBB13_31, $89(%rip)
	LONG $0x011c8d49               // leaq         (%r9,%rax), %rbx
	WORD $0x894c; BYTE $0xd7       // movq         %r10, %rdi
	WORD $0x2948; BYTE $0xc7       // subq         %rax, %rdi
	LONG $0xfb5f8d4c               // leaq         $-5(%rdi), %r11
	WORD $0xd231                   // xorl         %edx, %edx
	LONG $0x90909090               // .p2align 4, 0x90

LBB13_26:
	LONG $0x134cbe0f; BYTE $0x04   // movsbl       $4(%rbx,%rdx), %ecx
	WORD $0xf983; BYTE $0x20       // cmpl         $32, %ecx
	LONG $0x00fe870f; WORD $0x0000 // ja           LBB13_42, $254(%rip)
	LONG $0xcda30f49               // btq          %rcx, %r13
	LONG $0x00f4830f; WORD $0x0000 // jae          LBB13_42, $244(%rip)
	LONG $0x014a8d48               // leaq         $1(%rdx), %rcx
	WORD $0x3949; BYTE $0xd3       // cmpq         %rdx, %r11
	LONG $0x0014840f; WORD $0x0000 // je           LBB13_30, $20(%rip)
	LONG $0x13448d48; BYTE $0x05   // leaq         $5(%rbx,%rdx), %rax
	WORD $0xe083; BYTE $0x0f       // andl         $15, %eax
	WORD $0x8948; BYTE $0xca       // movq         %rcx, %rdx
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0xffc7850f; WORD $0xffff // jne          LBB13_26, $-57(%rip)

LBB13_30:
	LONG $0x19748d4c; BYTE $0x04 // leaq         $4(%rcx,%rbx), %r14
	WORD $0x2948; BYTE $0xcf     // subq         %rcx, %rdi
	LONG $0xfcc78348             // addq         $-4, %rdi

LBB13_31:
	LONG $0x10ff8348               // cmpq         $16, %rdi
	LONG $0x0042820f; WORD $0x0000 // jb           LBB13_34, $66(%rip)
	BYTE $0x90                     // .p2align 4, 0x90

LBB13_32:
	LONG $0x6f79c1c4; BYTE $0x06   // vmovdqa      (%r14), %xmm0
	LONG $0xcb74f9c5               // vpcmpeqb     %xmm3, %xmm0, %xmm1
	LONG $0xd474f9c5               // vpcmpeqb     %xmm4, %xmm0, %xmm2
	LONG $0xcaebf1c5               // vpor         %xmm2, %xmm1, %xmm1
	LONG $0xd574f9c5               // vpcmpeqb     %xmm5, %xmm0, %xmm2
	LONG $0xc674f9c5               // vpcmpeqb     %xmm6, %xmm0, %xmm0
	LONG $0xc2ebf9c5               // vpor         %xmm2, %xmm0, %xmm0
	LONG $0xc1ebf9c5               // vpor         %xmm1, %xmm0, %xmm0
	LONG $0xc8d7f9c5               // vpmovmskb    %xmm0, %ecx
	LONG $0xfff98366               // cmpw         $-1, %cx
	LONG $0x0071850f; WORD $0x0000 // jne          LBB13_41, $113(%rip)
	LONG $0x10c68349               // addq         $16, %r14
	LONG $0xf0c78348               // addq         $-16, %rdi
	LONG $0x0fff8348               // cmpq         $15, %rdi
	LONG $0xffbf870f; WORD $0xffff // ja           LBB13_32, $-65(%rip)

LBB13_34:
	WORD $0x8548; BYTE $0xff                                             // testq        %rdi, %rdi
	LONG $0x0040840f; WORD $0x0000                                       // je           LBB13_40, $64(%rip)
	LONG $0x3e048d49                                                     // leaq         (%r14,%rdi), %rax
	WORD $0xff49; BYTE $0xc6                                             // incq         %r14
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB13_36:
	LONG $0x4ebe0f41; BYTE $0xff   // movsbl       $-1(%r14), %ecx
	WORD $0xf983; BYTE $0x20       // cmpl         $32, %ecx
	LONG $0x0310870f; WORD $0x0000 // ja           LBB13_86, $784(%rip)
	LONG $0xcda30f49               // btq          %rcx, %r13
	LONG $0x0306830f; WORD $0x0000 // jae          LBB13_86, $774(%rip)
	WORD $0xff48; BYTE $0xcf       // decq         %rdi
	WORD $0xff49; BYTE $0xc6       // incq         %r14
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0xffd9850f; WORD $0xffff // jne          LBB13_36, $-39(%rip)
	WORD $0x8949; BYTE $0xc6       // movq         %rax, %r14

LBB13_40:
	WORD $0x294d; BYTE $0xce       // subq         %r9, %r14
	WORD $0x394d; BYTE $0xd6       // cmpq         %r10, %r14
	LONG $0x004a820f; WORD $0x0000 // jb           LBB13_43, $74(%rip)
	LONG $0x000309e9; BYTE $0x00   // jmp          LBB13_90, $777(%rip)
	LONG $0x90909090; BYTE $0x90   // .p2align 4, 0x90

LBB13_41:
	WORD $0xb70f; BYTE $0xc1       // movzwl       %cx, %eax
	WORD $0x294d; BYTE $0xce       // subq         %r9, %r14
	WORD $0xd0f7                   // notl         %eax
	WORD $0xbc0f; BYTE $0xc0       // bsfl         %eax, %eax
	WORD $0x0149; BYTE $0xc6       // addq         %rax, %r14
	WORD $0x394d; BYTE $0xd6       // cmpq         %r10, %r14
	LONG $0x0029820f; WORD $0x0000 // jb           LBB13_43, $41(%rip)
	LONG $0x0002e8e9; BYTE $0x00   // jmp          LBB13_90, $744(%rip)

LBB13_42:
	WORD $0x0148; BYTE $0xd3                               // addq         %rdx, %rbx
	WORD $0x894c; BYTE $0xc9                               // movq         %r9, %rcx
	WORD $0xf748; BYTE $0xd1                               // notq         %rcx
	LONG $0x19748d4c; BYTE $0x05                           // leaq         $5(%rcx,%rbx), %r14
	WORD $0x394d; BYTE $0xd6                               // cmpq         %r10, %r14
	LONG $0x02d1830f; WORD $0x0000                         // jae          LBB13_90, $721(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

LBB13_43:
	LONG $0x01468d49                           // leaq         $1(%r14), %rax
	WORD $0x8948; BYTE $0x06                   // movq         %rax, (%rsi)
	LONG $0x1cbe0f43; BYTE $0x31               // movsbl       (%r9,%r14), %ebx
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	WORD $0xdb85                               // testl        %ebx, %ebx
	LONG $0x02b0840f; WORD $0x0000             // je           LBB13_91, $688(%rip)
	WORD $0x8b49; BYTE $0x3f                   // movq         (%r15), %rdi
	LONG $0xff578d4c                           // leaq         $-1(%rdi), %r10
	LONG $0xff0c8b41                           // movl         (%r15,%rdi,8), %ecx
	LONG $0xfff88349                           // cmpq         $-1, %r8
	LONG $0xf0450f4d                           // cmovneq      %r8, %r14
	WORD $0xc9ff                               // decl         %ecx
	WORD $0xf983; BYTE $0x05                   // cmpl         $5, %ecx
	LONG $0x0027870f; WORD $0x0000             // ja           LBB13_87, $39(%rip)
	LONG $0xbc158d48; WORD $0x0003; BYTE $0x00 // leaq         $956(%rip), %rdx  /* LJTI13_0(%rip) */
	LONG $0x8a0c6348                           // movslq       (%rdx,%rcx,4), %rcx
	WORD $0x0148; BYTE $0xd1                   // addq         %rdx, %rcx
	JMP  CX

LBB13_46:
	WORD $0xfb83; BYTE $0x2c       // cmpl         $44, %ebx
	LONG $0x00e1840f; WORD $0x0000 // je           LBB13_62, $225(%rip)
	WORD $0xfb83; BYTE $0x5d       // cmpl         $93, %ebx
	LONG $0x00c4840f; WORD $0x0000 // je           LBB13_48, $196(%rip)
	LONG $0x000255e9; BYTE $0x00   // jmp          LBB13_88, $597(%rip)

LBB13_87:
	WORD $0x894d; BYTE $0x17       // movq         %r10, (%r15)
	WORD $0xfb83; BYTE $0x7b       // cmpl         $123, %ebx
	LONG $0x0082860f; WORD $0x0000 // jbe          LBB13_58, $130(%rip)
	LONG $0x000244e9; BYTE $0x00   // jmp          LBB13_88, $580(%rip)

LBB13_49:
	WORD $0xfb83; BYTE $0x2c                   // cmpl         $44, %ebx
	LONG $0x009c850f; WORD $0x0000             // jne          LBB13_50, $156(%rip)
	LONG $0xffff8148; WORD $0x000f; BYTE $0x00 // cmpq         $4095, %rdi
	LONG $0x02538f0f; WORD $0x0000             // jg           LBB13_93, $595(%rip)
	LONG $0x01478d48                           // leaq         $1(%rdi), %rax
	WORD $0x8949; BYTE $0x07                   // movq         %rax, (%r15)
	QUAD $0x00000308ff44c749; BYTE $0x00       // movq         $3, $8(%r15,%rdi,8)
	LONG $0xfffd0ae9; BYTE $0xff               // jmp          LBB13_3, $-758(%rip)

LBB13_51:
	WORD $0xfb80; BYTE $0x22       // cmpb         $34, %bl
	LONG $0x0210850f; WORD $0x0000 // jne          LBB13_88, $528(%rip)
	QUAD $0x00000004ff04c749       // movq         $4, (%r15,%rdi,8)

LBB13_53:
	WORD $0x894c; BYTE $0xe7     // movq         %r12, %rdi
	LONG $0xc8558b48             // movq         $-56(%rbp), %rdx
	LONG $0x000587e8; BYTE $0x00 // callq        _skip_string, $1415(%rip)
	LONG $0xfffcbbe9; BYTE $0xff // jmp          LBB13_2, $-837(%rip)

LBB13_54:
	WORD $0xfb80; BYTE $0x3a       // cmpb         $58, %bl
	LONG $0x01ee850f; WORD $0x0000 // jne          LBB13_88, $494(%rip)
	QUAD $0x00000000ff04c749       // movq         $0, (%r15,%rdi,8)
	LONG $0xfffcd2e9; BYTE $0xff   // jmp          LBB13_3, $-814(%rip)

LBB13_56:
	WORD $0xfb80; BYTE $0x5d       // cmpb         $93, %bl
	LONG $0x0042840f; WORD $0x0000 // je           LBB13_48, $66(%rip)
	QUAD $0x00000001ff04c749       // movq         $1, (%r15,%rdi,8)
	WORD $0xfb83; BYTE $0x7b       // cmpl         $123, %ebx
	LONG $0x01c7870f; WORD $0x0000 // ja           LBB13_88, $455(%rip)

LBB13_58:
	WORD $0xd989                               // movl         %ebx, %ecx
	LONG $0x1d158d48; WORD $0x0003; BYTE $0x00 // leaq         $797(%rip), %rdx  /* LJTI13_1(%rip) */
	LONG $0x8a0c6348                           // movslq       (%rdx,%rcx,4), %rcx
	WORD $0x0148; BYTE $0xd1                   // addq         %rdx, %rcx
	JMP  CX

LBB13_61:
	WORD $0x894c; BYTE $0xe7     // movq         %r12, %rdi
	LONG $0x000e28e8; BYTE $0x00 // callq        _skip_negative, $3624(%rip)
	LONG $0xfffc6ce9; BYTE $0xff // jmp          LBB13_2, $-916(%rip)

LBB13_59:
	WORD $0xfb83; BYTE $0x22       // cmpl         $34, %ebx
	LONG $0x003f840f; WORD $0x0000 // je           LBB13_66, $63(%rip)

LBB13_50:
	WORD $0xfb83; BYTE $0x7d       // cmpl         $125, %ebx
	LONG $0x0196850f; WORD $0x0000 // jne          LBB13_88, $406(%rip)

LBB13_48:
	WORD $0x894d; BYTE $0x17       // movq         %r10, (%r15)
	WORD $0x894c; BYTE $0xf0       // movq         %r14, %rax
	WORD $0x854d; BYTE $0xd2       // testq        %r10, %r10
	LONG $0xfc87850f; WORD $0xffff // jne          LBB13_5, $-889(%rip)
	LONG $0x000198e9; BYTE $0x00   // jmp          LBB13_91, $408(%rip)

LBB13_62:
	LONG $0xffff8148; WORD $0x000f; BYTE $0x00 // cmpq         $4095, %rdi
	LONG $0x019a8f0f; WORD $0x0000             // jg           LBB13_93, $410(%rip)
	LONG $0x01478d48                           // leaq         $1(%rdi), %rax
	WORD $0x8949; BYTE $0x07                   // movq         %rax, (%r15)
	QUAD $0x00000008ff44c749; BYTE $0x00       // movq         $0, $8(%r15,%rdi,8)
	LONG $0xfffc51e9; BYTE $0xff               // jmp          LBB13_3, $-943(%rip)

LBB13_66:
	QUAD $0x00000002ff04c749             // movq         $2, (%r15,%rdi,8)
	WORD $0x894c; BYTE $0xe7             // movq         %r12, %rdi
	LONG $0xc8558b48                     // movq         $-56(%rbp), %rdx
	LONG $0x0004d7e8; BYTE $0x00         // callq        _skip_string, $1239(%rip)
	WORD $0x8548; BYTE $0xc0             // testq        %rax, %rax
	LONG $0x0159880f; WORD $0x0000       // js           LBB13_91, $345(%rip)
	WORD $0x8b49; BYTE $0x07             // movq         (%r15), %rax
	LONG $0x0fff3d48; WORD $0x0000       // cmpq         $4095, %rax
	QUAD $0xfffffb4d1d6ff9c5             // vmovdqa      $-1203(%rip), %xmm3  /* LCPI13_1(%rip) */
	QUAD $0xfffffb55256ff9c5             // vmovdqa      $-1195(%rip), %xmm4  /* LCPI13_2(%rip) */
	QUAD $0xfffffb5d2d6ff9c5             // vmovdqa      $-1187(%rip), %xmm5  /* LCPI13_3(%rip) */
	QUAD $0xfffffb65356ff9c5             // vmovdqa      $-1179(%rip), %xmm6  /* LCPI13_4(%rip) */
	LONG $0x01398f0f; WORD $0x0000       // jg           LBB13_93, $313(%rip)
	LONG $0x01488d48                     // leaq         $1(%rax), %rcx
	WORD $0x8949; BYTE $0x0f             // movq         %rcx, (%r15)
	QUAD $0x00000408c744c749; BYTE $0x00 // movq         $4, $8(%r15,%rax,8)
	LONG $0xd0758b48                     // movq         $-48(%rbp), %rsi
	LONG $0xfffbece9; BYTE $0xff         // jmp          LBB13_3, $-1044(%rip)

LBB13_69:
	WORD $0x8b49; BYTE $0x07             // movq         (%r15), %rax
	LONG $0x0fff3d48; WORD $0x0000       // cmpq         $4095, %rax
	LONG $0x01118f0f; WORD $0x0000       // jg           LBB13_93, $273(%rip)
	LONG $0x01488d48                     // leaq         $1(%rax), %rcx
	WORD $0x8949; BYTE $0x0f             // movq         %rcx, (%r15)
	QUAD $0x00000508c744c749; BYTE $0x00 // movq         $5, $8(%r15,%rax,8)
	LONG $0xfffbc8e9; BYTE $0xff         // jmp          LBB13_3, $-1080(%rip)

LBB13_71:
	WORD $0x8b48; BYTE $0x16       // movq         (%rsi), %rdx
	LONG $0x244c8b49; BYTE $0x08   // movq         $8(%r12), %rcx
	LONG $0xfc798d48               // leaq         $-4(%rcx), %rdi
	WORD $0x3948; BYTE $0xfa       // cmpq         %rdi, %rdx
	LONG $0x00f3870f; WORD $0x0000 // ja           LBB13_92, $243(%rip)
	LONG $0x110c8b41               // movl         (%r9,%rdx), %ecx
	LONG $0x6c61f981; WORD $0x6573 // cmpl         $1702063201, %ecx
	LONG $0x0149850f; WORD $0x0000 // jne          LBB13_94, $329(%rip)
	LONG $0x04428d48               // leaq         $4(%rdx), %rax
	WORD $0x8948; BYTE $0x06       // movq         %rax, (%rsi)
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0xfb938f0f; WORD $0xffff // jg           LBB13_3, $-1133(%rip)
	LONG $0x0000d6e9; BYTE $0x00   // jmp          LBB13_83, $214(%rip)

LBB13_74:
	WORD $0x8b48; BYTE $0x16             // movq         (%rsi), %rdx
	LONG $0x244c8b49; BYTE $0x08         // movq         $8(%r12), %rcx
	LONG $0xfd798d48                     // leaq         $-3(%rcx), %rdi
	WORD $0x3948; BYTE $0xfa             // cmpq         %rdi, %rdx
	LONG $0x00b9870f; WORD $0x0000       // ja           LBB13_92, $185(%rip)
	QUAD $0x6c756eff117c8141; BYTE $0x6c // cmpl         $1819047278, $-1(%r9,%rdx)
	LONG $0x0029840f; WORD $0x0000       // je           LBB13_82, $41(%rip)
	LONG $0x0000b8e9; BYTE $0x00         // jmp          LBB13_76, $184(%rip)

LBB13_80:
	WORD $0x8b48; BYTE $0x16             // movq         (%rsi), %rdx
	LONG $0x244c8b49; BYTE $0x08         // movq         $8(%r12), %rcx
	LONG $0xfd798d48                     // leaq         $-3(%rcx), %rdi
	WORD $0x3948; BYTE $0xfa             // cmpq         %rdi, %rdx
	LONG $0x0090870f; WORD $0x0000       // ja           LBB13_92, $144(%rip)
	QUAD $0x757274ff117c8141; BYTE $0x65 // cmpl         $1702195828, $-1(%r9,%rdx)
	LONG $0x013c850f; WORD $0x0000       // jne          LBB13_99, $316(%rip)

LBB13_82:
	LONG $0x03428d48               // leaq         $3(%rdx), %rax
	WORD $0x8948; BYTE $0x06       // movq         %rax, (%rsi)
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0xfb318f0f; WORD $0xffff // jg           LBB13_3, $-1231(%rip)
	LONG $0x000074e9; BYTE $0x00   // jmp          LBB13_83, $116(%rip)

LBB13_84:
	WORD $0x8b49; BYTE $0x07             // movq         (%r15), %rax
	LONG $0x0fff3d48; WORD $0x0000       // cmpq         $4095, %rax
	LONG $0x00518f0f; WORD $0x0000       // jg           LBB13_93, $81(%rip)
	LONG $0x01488d48                     // leaq         $1(%rax), %rcx
	WORD $0x8949; BYTE $0x0f             // movq         %rcx, (%r15)
	QUAD $0x00000608c744c749; BYTE $0x00 // movq         $6, $8(%r15,%rax,8)
	LONG $0xfffb08e9; BYTE $0xff         // jmp          LBB13_3, $-1272(%rip)

LBB13_86:
	WORD $0x894c; BYTE $0xc8       // movq         %r9, %rax
	WORD $0xf748; BYTE $0xd0       // notq         %rax
	WORD $0x0149; BYTE $0xc6       // addq         %rax, %r14
	WORD $0x394d; BYTE $0xd6       // cmpq         %r10, %r14
	LONG $0xfd50820f; WORD $0xffff // jb           LBB13_43, $-688(%rip)
	LONG $0x00000fe9; BYTE $0x00   // jmp          LBB13_90, $15(%rip)

LBB13_88:
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x00000ae9; BYTE $0x00               // jmp          LBB13_91, $10(%rip)

LBB13_89:
	WORD $0x8948; BYTE $0x0e // movq         %rcx, (%rsi)

LBB13_90:
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax

LBB13_91:
	LONG $0x18c48348 // addq         $24, %rsp
	BYTE $0x5b       // popq         %rbx
	WORD $0x5c41     // popq         %r12
	WORD $0x5d41     // popq         %r13
	WORD $0x5e41     // popq         %r14
	WORD $0x5f41     // popq         %r15
	BYTE $0x5d       // popq         %rbp
	BYTE $0xc3       // retq

LBB13_93:
	LONG $0xf9c0c748; WORD $0xffff; BYTE $0xff // movq         $-7, %rax
	LONG $0xffffe5e9; BYTE $0xff               // jmp          LBB13_91, $-27(%rip)

LBB13_92:
	WORD $0x8948; BYTE $0x0e     // movq         %rcx, (%rsi)
	LONG $0xffffdde9; BYTE $0xff // jmp          LBB13_91, $-35(%rip)

LBB13_83:
	WORD $0xff48; BYTE $0xca     // decq         %rdx
	WORD $0x8948; BYTE $0xd0     // movq         %rdx, %rax
	LONG $0xffffd2e9; BYTE $0xff // jmp          LBB13_91, $-46(%rip)

LBB13_76:
	LONG $0xff428d48                           // leaq         $-1(%rdx), %rax
	WORD $0x8948; BYTE $0x06                   // movq         %rax, (%rsi)
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x117c8041; WORD $0x6eff             // cmpb         $110, $-1(%r9,%rdx)
	LONG $0xffb8850f; WORD $0xffff             // jne          LBB13_91, $-72(%rip)
	WORD $0x8948; BYTE $0x16                   // movq         %rdx, (%rsi)
	LONG $0x113c8041; BYTE $0x75               // cmpb         $117, (%r9,%rdx)
	LONG $0xffaa850f; WORD $0xffff             // jne          LBB13_91, $-86(%rip)
	LONG $0x014a8d48                           // leaq         $1(%rdx), %rcx
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0x117c8041; WORD $0x6c01             // cmpb         $108, $1(%r9,%rdx)
	LONG $0xff97850f; WORD $0xffff             // jne          LBB13_91, $-105(%rip)
	LONG $0x024a8d48                           // leaq         $2(%rdx), %rcx
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0x117c8041; WORD $0x6c02             // cmpb         $108, $2(%r9,%rdx)
	LONG $0xff84850f; WORD $0xffff             // jne          LBB13_91, $-124(%rip)
	LONG $0x0000a3e9; BYTE $0x00               // jmp          LBB13_103, $163(%rip)

LBB13_94:
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	WORD $0xf980; BYTE $0x61                   // cmpb         $97, %cl
	LONG $0xff6f850f; WORD $0xffff             // jne          LBB13_91, $-145(%rip)
	LONG $0x014a8d48                           // leaq         $1(%rdx), %rcx
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0x117c8041; WORD $0x6c01             // cmpb         $108, $1(%r9,%rdx)
	LONG $0xff5c850f; WORD $0xffff             // jne          LBB13_91, $-164(%rip)
	LONG $0x024a8d48                           // leaq         $2(%rdx), %rcx
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0x117c8041; WORD $0x7302             // cmpb         $115, $2(%r9,%rdx)
	LONG $0xff49850f; WORD $0xffff             // jne          LBB13_91, $-183(%rip)
	LONG $0x034a8d48                           // leaq         $3(%rdx), %rcx
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0x117c8041; WORD $0x6503             // cmpb         $101, $3(%r9,%rdx)
	LONG $0xff36850f; WORD $0xffff             // jne          LBB13_91, $-202(%rip)
	LONG $0x04c28348                           // addq         $4, %rdx
	WORD $0x8948; BYTE $0x16                   // movq         %rdx, (%rsi)
	LONG $0xffff2ae9; BYTE $0xff               // jmp          LBB13_91, $-214(%rip)

LBB13_99:
	LONG $0xff428d48                           // leaq         $-1(%rdx), %rax
	WORD $0x8948; BYTE $0x06                   // movq         %rax, (%rsi)
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x117c8041; WORD $0x74ff             // cmpb         $116, $-1(%r9,%rdx)
	LONG $0xff10850f; WORD $0xffff             // jne          LBB13_91, $-240(%rip)
	WORD $0x8948; BYTE $0x16                   // movq         %rdx, (%rsi)
	LONG $0x113c8041; BYTE $0x72               // cmpb         $114, (%r9,%rdx)
	LONG $0xff02850f; WORD $0xffff             // jne          LBB13_91, $-254(%rip)
	LONG $0x014a8d48                           // leaq         $1(%rdx), %rcx
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0x117c8041; WORD $0x7501             // cmpb         $117, $1(%r9,%rdx)
	LONG $0xfeef850f; WORD $0xffff             // jne          LBB13_91, $-273(%rip)
	LONG $0x024a8d48                           // leaq         $2(%rdx), %rcx
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0x117c8041; WORD $0x6502             // cmpb         $101, $2(%r9,%rdx)
	LONG $0xfedc850f; WORD $0xffff             // jne          LBB13_91, $-292(%rip)

LBB13_103:
	LONG $0x03c28348             // addq         $3, %rdx
	WORD $0x8948; BYTE $0x16     // movq         %rdx, (%rsi)
	LONG $0xfffed0e9; BYTE $0xff // jmp          LBB13_91, $-304(%rip)
	BYTE $0x90                   // .p2align 2, 0x90

	// .set L13_0_set_46, LBB13_46-LJTI13_0
	// .set L13_0_set_49, LBB13_49-LJTI13_0
	// .set L13_0_set_51, LBB13_51-LJTI13_0
	// .set L13_0_set_54, LBB13_54-LJTI13_0
	// .set L13_0_set_56, LBB13_56-LJTI13_0
	// .set L13_0_set_59, LBB13_59-LJTI13_0
LJTI13_0:
	LONG $0xfffffc4d // .long L13_0_set_46
	LONG $0xfffffc75 // .long L13_0_set_49
	LONG $0xfffffca0 // .long L13_0_set_51
	LONG $0xfffffcc2 // .long L13_0_set_54
	LONG $0xfffffcd8 // .long L13_0_set_56
	LONG $0xfffffd11 // .long L13_0_set_59

	// .set L13_1_set_91, LBB13_91-LJTI13_1
	// .set L13_1_set_88, LBB13_88-LJTI13_1
	// .set L13_1_set_53, LBB13_53-LJTI13_1
	// .set L13_1_set_61, LBB13_61-LJTI13_1
	// .set L13_1_set_1, LBB13_1-LJTI13_1
	// .set L13_1_set_69, LBB13_69-LJTI13_1
	// .set L13_1_set_71, LBB13_71-LJTI13_1
	// .set L13_1_set_74, LBB13_74-LJTI13_1
	// .set L13_1_set_80, LBB13_80-LJTI13_1
	// .set L13_1_set_84, LBB13_84-LJTI13_1
LJTI13_1:
	LONG $0xfffffeb7                           // .long L13_1_set_91
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffc99                           // .long L13_1_set_53
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffcec                           // .long L13_1_set_61
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffff95d                           // .long L13_1_set_1
	LONG $0xfffff95d                           // .long L13_1_set_1
	LONG $0xfffff95d                           // .long L13_1_set_1
	LONG $0xfffff95d                           // .long L13_1_set_1
	LONG $0xfffff95d                           // .long L13_1_set_1
	LONG $0xfffff95d                           // .long L13_1_set_1
	LONG $0xfffff95d                           // .long L13_1_set_1
	LONG $0xfffff95d                           // .long L13_1_set_1
	LONG $0xfffff95d                           // .long L13_1_set_1
	LONG $0xfffff95d                           // .long L13_1_set_1
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffda6                           // .long L13_1_set_69
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffdca                           // .long L13_1_set_71
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffe04                           // .long L13_1_set_74
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffe2d                           // .long L13_1_set_80
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffea1                           // .long L13_1_set_88
	LONG $0xfffffe66                           // .long L13_1_set_84
	QUAD $0x0000000000000000; LONG $0x00000000 // .p2align 4, 0x00

LCPI14_0:
	QUAD $0x2222222222222222; QUAD $0x2222222222222222 // .space 16, '""""""""""""""""'

LCPI14_1:
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'

LCPI14_2:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

	// .p2align 4, 0x90
_skip_string:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0x5741                   // pushq        %r15
	WORD $0x5641                   // pushq        %r14
	WORD $0x5541                   // pushq        %r13
	WORD $0x5441                   // pushq        %r12
	BYTE $0x53                     // pushq        %rbx
	LONG $0x28ec8348               // subq         $40, %rsp
	WORD $0x8b48; BYTE $0x06       // movq         (%rsi), %rax
	WORD $0xc2f6; BYTE $0x20       // testb        $32, %dl
	LONG $0x017f850f; WORD $0x0000 // jne          LBB14_1, $383(%rip)
	LONG $0x087f8b4c               // movq         $8(%rdi), %r15
	WORD $0x2949; BYTE $0xc7       // subq         %rax, %r15
	LONG $0x03ef840f; WORD $0x0000 // je           LBB14_2, $1007(%rip)
	WORD $0x8949; BYTE $0xf2       // movq         %rsi, %r10
	WORD $0x8b4c; BYTE $0x07       // movq         (%rdi), %r8
	WORD $0x8949; BYTE $0xc3       // movq         %rax, %r11
	LONG $0x00248d4d               // leaq         (%r8,%rax), %r12
	LONG $0x40ff8349               // cmpq         $64, %r15
	LONG $0x03e4820f; WORD $0x0000 // jb           LBB14_60, $996(%rip)
	QUAD $0xffffffffd045c748       // movq         $-1, $-48(%rbp)
	WORD $0x3145; BYTE $0xf6       // xorl         %r14d, %r14d
	QUAD $0xffffff7c056ff9c5       // vmovdqa      $-132(%rip), %xmm0  /* LCPI14_0(%rip) */
	QUAD $0xffffff840d6ff9c5       // vmovdqa      $-124(%rip), %xmm1  /* LCPI14_1(%rip) */
	LONG $0x90909090               // .p2align 4, 0x90

LBB14_62:
	LONG $0x6f7ac1c4; WORD $0x2414             // vmovdqu      (%r12), %xmm2
	LONG $0x6f7ac1c4; WORD $0x245c; BYTE $0x10 // vmovdqu      $16(%r12), %xmm3
	LONG $0x6f7ac1c4; WORD $0x2464; BYTE $0x20 // vmovdqu      $32(%r12), %xmm4
	LONG $0x6f7ac1c4; WORD $0x246c; BYTE $0x30 // vmovdqu      $48(%r12), %xmm5
	LONG $0xf074e9c5                           // vpcmpeqb     %xmm0, %xmm2, %xmm6
	LONG $0xced779c5                           // vpmovmskb    %xmm6, %r9d
	LONG $0xf074e1c5                           // vpcmpeqb     %xmm0, %xmm3, %xmm6
	LONG $0xc6d7f9c5                           // vpmovmskb    %xmm6, %eax
	LONG $0xf074d9c5                           // vpcmpeqb     %xmm0, %xmm4, %xmm6
	LONG $0xf6d7f9c5                           // vpmovmskb    %xmm6, %esi
	LONG $0xf074d1c5                           // vpcmpeqb     %xmm0, %xmm5, %xmm6
	LONG $0xced7f9c5                           // vpmovmskb    %xmm6, %ecx
	LONG $0xd174e9c5                           // vpcmpeqb     %xmm1, %xmm2, %xmm2
	LONG $0xead779c5                           // vpmovmskb    %xmm2, %r13d
	LONG $0xd174e1c5                           // vpcmpeqb     %xmm1, %xmm3, %xmm2
	LONG $0xd2d7f9c5                           // vpmovmskb    %xmm2, %edx
	LONG $0xd174d9c5                           // vpcmpeqb     %xmm1, %xmm4, %xmm2
	LONG $0xdad7f9c5                           // vpmovmskb    %xmm2, %ebx
	LONG $0xd174d1c5                           // vpcmpeqb     %xmm1, %xmm5, %xmm2
	LONG $0xfad7f9c5                           // vpmovmskb    %xmm2, %edi
	LONG $0x30e1c148                           // shlq         $48, %rcx
	LONG $0x20e6c148                           // shlq         $32, %rsi
	LONG $0x10e0c148                           // shlq         $16, %rax
	WORD $0x0949; BYTE $0xc1                   // orq          %rax, %r9
	WORD $0x0949; BYTE $0xf1                   // orq          %rsi, %r9
	WORD $0x0949; BYTE $0xc9                   // orq          %rcx, %r9
	LONG $0x30e7c148                           // shlq         $48, %rdi
	LONG $0x20e3c148                           // shlq         $32, %rbx
	LONG $0x10e2c148                           // shlq         $16, %rdx
	WORD $0x0949; BYTE $0xd5                   // orq          %rdx, %r13
	WORD $0x0949; BYTE $0xdd                   // orq          %rbx, %r13
	WORD $0x0949; BYTE $0xfd                   // orq          %rdi, %r13
	LONG $0x002c850f; WORD $0x0000             // jne          LBB14_63, $44(%rip)
	WORD $0x854d; BYTE $0xf6                   // testq        %r14, %r14
	LONG $0x003f850f; WORD $0x0000             // jne          LBB14_65, $63(%rip)
	WORD $0x3145; BYTE $0xf6                   // xorl         %r14d, %r14d
	WORD $0x854d; BYTE $0xc9                   // testq        %r9, %r9
	LONG $0x0085850f; WORD $0x0000             // jne          LBB14_69, $133(%rip)

LBB14_71:
	LONG $0x40c48349               // addq         $64, %r12
	LONG $0xc0c78349               // addq         $-64, %r15
	LONG $0x3fff8349               // cmpq         $63, %r15
	LONG $0xff4e870f; WORD $0xffff // ja           LBB14_62, $-178(%rip)
	LONG $0x000319e9; BYTE $0x00   // jmp          LBB14_72, $793(%rip)

LBB14_63:
	LONG $0xd07d8348; BYTE $0xff   // cmpq         $-1, $-48(%rbp)
	LONG $0x0011850f; WORD $0x0000 // jne          LBB14_65, $17(%rip)
	WORD $0x894c; BYTE $0xe0       // movq         %r12, %rax
	WORD $0x294c; BYTE $0xc0       // subq         %r8, %rax
	LONG $0xcdbc0f49               // bsfq         %r13, %rcx
	WORD $0x0148; BYTE $0xc1       // addq         %rax, %rcx
	LONG $0xd04d8948               // movq         %rcx, $-48(%rbp)

LBB14_65:
	WORD $0x894c; BYTE $0xf0               // movq         %r14, %rax
	WORD $0xf748; BYTE $0xd0               // notq         %rax
	WORD $0x214c; BYTE $0xe8               // andq         %r13, %rax
	LONG $0x000c8d48                       // leaq         (%rax,%rax), %rcx
	WORD $0x094c; BYTE $0xf1               // orq          %r14, %rcx
	WORD $0x8948; BYTE $0xca               // movq         %rcx, %rdx
	WORD $0xf748; BYTE $0xd2               // notq         %rdx
	WORD $0x214c; BYTE $0xea               // andq         %r13, %rdx
	QUAD $0xaaaaaaaaaaaabe48; WORD $0xaaaa // movabsq      $-6148914691236517206, %rsi
	WORD $0x2148; BYTE $0xf2               // andq         %rsi, %rdx
	WORD $0x3145; BYTE $0xf6               // xorl         %r14d, %r14d
	WORD $0x0148; BYTE $0xc2               // addq         %rax, %rdx
	LONG $0xc6920f41                       // setb         %r14b
	WORD $0x0148; BYTE $0xd2               // addq         %rdx, %rdx
	QUAD $0x555555555555b848; WORD $0x5555 // movabsq      $6148914691236517205, %rax
	WORD $0x3148; BYTE $0xc2               // xorq         %rax, %rdx
	WORD $0x2148; BYTE $0xca               // andq         %rcx, %rdx
	WORD $0xf748; BYTE $0xd2               // notq         %rdx
	WORD $0x2149; BYTE $0xd1               // andq         %rdx, %r9
	WORD $0x854d; BYTE $0xc9               // testq        %r9, %r9
	LONG $0xff7b840f; WORD $0xffff         // je           LBB14_71, $-133(%rip)

LBB14_69:
	LONG $0xc1bc0f49 // bsfq         %r9, %rax

LBB14_70:
	WORD $0x294d; BYTE $0xc4     // subq         %r8, %r12
	LONG $0x04748d4d; BYTE $0x01 // leaq         $1(%r12,%rax), %r14

LBB14_96:
	WORD $0x894c; BYTE $0xd6     // movq         %r10, %rsi
	WORD $0x894c; BYTE $0xd8     // movq         %r11, %rax
	LONG $0x00020ee9; BYTE $0x00 // jmp          LBB14_97, $526(%rip)

LBB14_1:
	LONG $0x085f8b48               // movq         $8(%rdi), %rbx
	WORD $0x2948; BYTE $0xc3       // subq         %rax, %rbx
	LONG $0x0270840f; WORD $0x0000 // je           LBB14_2, $624(%rip)
	LONG $0xc0758948               // movq         %rsi, $-64(%rbp)
	WORD $0x8b48; BYTE $0x0f       // movq         (%rdi), %rcx
	LONG $0xc8458948               // movq         %rax, $-56(%rbp)
	LONG $0xb84d8948               // movq         %rcx, $-72(%rbp)
	LONG $0x01248d4c               // leaq         (%rcx,%rax), %r12
	LONG $0x40fb8348               // cmpq         $64, %rbx
	LONG $0x02e3820f; WORD $0x0000 // jb           LBB14_4, $739(%rip)
	QUAD $0xffffffffd045c748       // movq         $-1, $-48(%rbp)
	WORD $0x3145; BYTE $0xff       // xorl         %r15d, %r15d
	QUAD $0xfffffdf7056f79c5       // vmovdqa      $-521(%rip), %xmm8  /* LCPI14_0(%rip) */
	QUAD $0xfffffdff0d6ff9c5       // vmovdqa      $-513(%rip), %xmm1  /* LCPI14_1(%rip) */
	QUAD $0xfffffe07156ff9c5       // vmovdqa      $-505(%rip), %xmm2  /* LCPI14_2(%rip) */
	LONG $0xdb76e1c5               // vpcmpeqd     %xmm3, %xmm3, %xmm3
	WORD $0x9090; BYTE $0x90       // .p2align 4, 0x90

LBB14_6:
	LONG $0xb05d8948                           // movq         %rbx, $-80(%rbp)
	LONG $0x6f7ac1c4; WORD $0x2424             // vmovdqu      (%r12), %xmm4
	LONG $0x6f7ac1c4; WORD $0x246c; BYTE $0x10 // vmovdqu      $16(%r12), %xmm5
	LONG $0x6f7ac1c4; WORD $0x2474; BYTE $0x20 // vmovdqu      $32(%r12), %xmm6
	LONG $0x6f7ac1c4; WORD $0x247c; BYTE $0x30 // vmovdqu      $48(%r12), %xmm7
	LONG $0xc474b9c5                           // vpcmpeqb     %xmm4, %xmm8, %xmm0
	LONG $0xd8d7f9c5                           // vpmovmskb    %xmm0, %ebx
	LONG $0xc574b9c5                           // vpcmpeqb     %xmm5, %xmm8, %xmm0
	LONG $0xc0d7f9c5                           // vpmovmskb    %xmm0, %eax
	LONG $0xc674b9c5                           // vpcmpeqb     %xmm6, %xmm8, %xmm0
	LONG $0xf0d779c5                           // vpmovmskb    %xmm0, %r14d
	LONG $0xc774b9c5                           // vpcmpeqb     %xmm7, %xmm8, %xmm0
	LONG $0xc8d779c5                           // vpmovmskb    %xmm0, %r9d
	LONG $0xc174d9c5                           // vpcmpeqb     %xmm1, %xmm4, %xmm0
	LONG $0xd0d7f9c5                           // vpmovmskb    %xmm0, %edx
	LONG $0xc174d1c5                           // vpcmpeqb     %xmm1, %xmm5, %xmm0
	LONG $0xc0d779c5                           // vpmovmskb    %xmm0, %r8d
	LONG $0xc174c9c5                           // vpcmpeqb     %xmm1, %xmm6, %xmm0
	LONG $0xd8d779c5                           // vpmovmskb    %xmm0, %r11d
	LONG $0xc174c1c5                           // vpcmpeqb     %xmm1, %xmm7, %xmm0
	LONG $0xc8d7f9c5                           // vpmovmskb    %xmm0, %ecx
	LONG $0xc464e9c5                           // vpcmpgtb     %xmm4, %xmm2, %xmm0
	LONG $0xe364d9c5                           // vpcmpgtb     %xmm3, %xmm4, %xmm4
	LONG $0xc4dbf9c5                           // vpand        %xmm4, %xmm0, %xmm0
	LONG $0xf8d7f9c5                           // vpmovmskb    %xmm0, %edi
	LONG $0xc564e9c5                           // vpcmpgtb     %xmm5, %xmm2, %xmm0
	LONG $0xe364d1c5                           // vpcmpgtb     %xmm3, %xmm5, %xmm4
	LONG $0xc4dbf9c5                           // vpand        %xmm4, %xmm0, %xmm0
	LONG $0xd0d779c5                           // vpmovmskb    %xmm0, %r10d
	LONG $0xc664e9c5                           // vpcmpgtb     %xmm6, %xmm2, %xmm0
	LONG $0xe364c9c5                           // vpcmpgtb     %xmm3, %xmm6, %xmm4
	LONG $0xc4dbf9c5                           // vpand        %xmm4, %xmm0, %xmm0
	LONG $0xf0d7f9c5                           // vpmovmskb    %xmm0, %esi
	LONG $0xc764e9c5                           // vpcmpgtb     %xmm7, %xmm2, %xmm0
	LONG $0xe364c1c5                           // vpcmpgtb     %xmm3, %xmm7, %xmm4
	LONG $0xc4dbf9c5                           // vpand        %xmm4, %xmm0, %xmm0
	LONG $0xe8d779c5                           // vpmovmskb    %xmm0, %r13d
	LONG $0x30e1c149                           // shlq         $48, %r9
	LONG $0x20e6c149                           // shlq         $32, %r14
	LONG $0x10e0c148                           // shlq         $16, %rax
	WORD $0x0948; BYTE $0xc3                   // orq          %rax, %rbx
	WORD $0x094c; BYTE $0xf3                   // orq          %r14, %rbx
	WORD $0x094c; BYTE $0xcb                   // orq          %r9, %rbx
	LONG $0x30e1c148                           // shlq         $48, %rcx
	LONG $0x20e3c149                           // shlq         $32, %r11
	LONG $0x10e0c149                           // shlq         $16, %r8
	WORD $0x094c; BYTE $0xc2                   // orq          %r8, %rdx
	WORD $0x094c; BYTE $0xda                   // orq          %r11, %rdx
	LONG $0x30e5c149                           // shlq         $48, %r13
	LONG $0x20e6c148                           // shlq         $32, %rsi
	LONG $0x10e2c149                           // shlq         $16, %r10
	WORD $0x094c; BYTE $0xd7                   // orq          %r10, %rdi
	WORD $0x0948; BYTE $0xf7                   // orq          %rsi, %rdi
	WORD $0x0948; BYTE $0xca                   // orq          %rcx, %rdx
	LONG $0x003c850f; WORD $0x0000             // jne          LBB14_7, $60(%rip)
	WORD $0x854d; BYTE $0xff                   // testq        %r15, %r15
	LONG $0x0050850f; WORD $0x0000             // jne          LBB14_9, $80(%rip)
	WORD $0x3145; BYTE $0xff                   // xorl         %r15d, %r15d
	WORD $0x094c; BYTE $0xef                   // orq          %r13, %rdi
	WORD $0x8548; BYTE $0xdb                   // testq        %rbx, %rbx
	LONG $0x0096850f; WORD $0x0000             // jne          LBB14_13, $150(%rip)

LBB14_19:
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0x0101850f; WORD $0x0000 // jne          LBB14_20, $257(%rip)
	LONG $0x40c48349               // addq         $64, %r12
	LONG $0xb05d8b48               // movq         $-80(%rbp), %rbx
	LONG $0xc0c38348               // addq         $-64, %rbx
	LONG $0x3ffb8348               // cmpq         $63, %rbx
	LONG $0xfee8870f; WORD $0xffff // ja           LBB14_6, $-280(%rip)
	LONG $0x0001a7e9; BYTE $0x00   // jmp          LBB14_23, $423(%rip)

LBB14_7:
	LONG $0xd07d8348; BYTE $0xff   // cmpq         $-1, $-48(%rbp)
	LONG $0x0012850f; WORD $0x0000 // jne          LBB14_9, $18(%rip)
	WORD $0x894c; BYTE $0xe0       // movq         %r12, %rax
	LONG $0xb8452b48               // subq         $-72(%rbp), %rax
	LONG $0xcabc0f48               // bsfq         %rdx, %rcx
	WORD $0x0148; BYTE $0xc1       // addq         %rax, %rcx
	LONG $0xd04d8948               // movq         %rcx, $-48(%rbp)

LBB14_9:
	WORD $0x894c; BYTE $0xf8               // movq         %r15, %rax
	WORD $0xf748; BYTE $0xd0               // notq         %rax
	WORD $0x2148; BYTE $0xd0               // andq         %rdx, %rax
	LONG $0x000c8d48                       // leaq         (%rax,%rax), %rcx
	WORD $0x094c; BYTE $0xf9               // orq          %r15, %rcx
	WORD $0x8948; BYTE $0xce               // movq         %rcx, %rsi
	WORD $0xf748; BYTE $0xd6               // notq         %rsi
	WORD $0x2148; BYTE $0xd6               // andq         %rdx, %rsi
	QUAD $0xaaaaaaaaaaaaba48; WORD $0xaaaa // movabsq      $-6148914691236517206, %rdx
	WORD $0x2148; BYTE $0xd6               // andq         %rdx, %rsi
	WORD $0x3145; BYTE $0xff               // xorl         %r15d, %r15d
	WORD $0x0148; BYTE $0xc6               // addq         %rax, %rsi
	LONG $0xc7920f41                       // setb         %r15b
	WORD $0x0148; BYTE $0xf6               // addq         %rsi, %rsi
	QUAD $0x555555555555b848; WORD $0x5555 // movabsq      $6148914691236517205, %rax
	WORD $0x3148; BYTE $0xc6               // xorq         %rax, %rsi
	WORD $0x2148; BYTE $0xce               // andq         %rcx, %rsi
	WORD $0xf748; BYTE $0xd6               // notq         %rsi
	WORD $0x2148; BYTE $0xf3               // andq         %rsi, %rbx
	WORD $0x094c; BYTE $0xef               // orq          %r13, %rdi
	WORD $0x8548; BYTE $0xdb               // testq        %rbx, %rbx
	LONG $0xff6a840f; WORD $0xffff         // je           LBB14_19, $-150(%rip)

LBB14_13:
	LONG $0xc3bc0f48               // bsfq         %rbx, %rax
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0x0042840f; WORD $0x0000 // je           LBB14_14, $66(%rip)
	LONG $0xcfbc0f48               // bsfq         %rdi, %rcx
	LONG $0xb8652b4c               // subq         $-72(%rbp), %r12
	WORD $0x3948; BYTE $0xc1       // cmpq         %rax, %rcx
	LONG $0x0043820f; WORD $0x0000 // jb           LBB14_17, $67(%rip)

LBB14_18:
	LONG $0x04748d4d; BYTE $0x01 // leaq         $1(%r12,%rax), %r14

LBB14_47:
	LONG $0xc0758b48 // movq         $-64(%rbp), %rsi
	LONG $0xc8458b48 // movq         $-56(%rbp), %rax

LBB14_97:
	WORD $0xff48; BYTE $0xc8 // decq         %rax
	WORD $0x854d; BYTE $0xf6 // testq        %r14, %r14
	LONG $0xd04d8b48         // movq         $-48(%rbp), %rcx
	LONG $0xce490f49         // cmovnsq      %r14, %rcx
	LONG $0xc6480f49         // cmovsq       %r14, %rax
	WORD $0x8948; BYTE $0x0e // movq         %rcx, (%rsi)
	LONG $0x28c48348         // addq         $40, %rsp
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

LBB14_14:
	LONG $0x000040b9; BYTE $0x00   // movl         $64, %ecx
	LONG $0xb8652b4c               // subq         $-72(%rbp), %r12
	WORD $0x3948; BYTE $0xc1       // cmpq         %rax, %rcx
	LONG $0xffbd830f; WORD $0xffff // jae          LBB14_18, $-67(%rip)

LBB14_17:
	WORD $0x014c; BYTE $0xe1                   // addq         %r12, %rcx
	LONG $0xfec6c749; WORD $0xffff; BYTE $0xff // movq         $-2, %r14
	LONG $0xd04d8948                           // movq         %rcx, $-48(%rbp)
	LONG $0xffffafe9; BYTE $0xff               // jmp          LBB14_47, $-81(%rip)

LBB14_20:
	LONG $0xfec6c749; WORD $0xffff; BYTE $0xff // movq         $-2, %r14
	LONG $0xd07d8348; BYTE $0xff               // cmpq         $-1, $-48(%rbp)
	LONG $0xff9d850f; WORD $0xffff             // jne          LBB14_47, $-99(%rip)
	LONG $0xc7bc0f48                           // bsfq         %rdi, %rax
	LONG $0xb8652b4c                           // subq         $-72(%rbp), %r12
	WORD $0x0149; BYTE $0xc4                   // addq         %rax, %r12
	LONG $0xd065894c                           // movq         %r12, $-48(%rbp)
	LONG $0xffff89e9; BYTE $0xff               // jmp          LBB14_47, $-119(%rip)

LBB14_2:
	LONG $0xffc6c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r14
	LONG $0xffff85e9; BYTE $0xff               // jmp          LBB14_97, $-123(%rip)

LBB14_60:
	QUAD $0xffffffffd045c748 // movq         $-1, $-48(%rbp)
	WORD $0x3145; BYTE $0xf6 // xorl         %r14d, %r14d

LBB14_72:
	LONG $0x20ff8349                           // cmpq         $32, %r15
	LONG $0x0275820f; WORD $0x0000             // jb           LBB14_82, $629(%rip)
	LONG $0x6f7ac1c4; WORD $0x2404             // vmovdqu      (%r12), %xmm0
	LONG $0x6f7ac1c4; WORD $0x244c; BYTE $0x10 // vmovdqu      $16(%r12), %xmm1
	QUAD $0xfffffb81156ff9c5                   // vmovdqa      $-1151(%rip), %xmm2  /* LCPI14_0(%rip) */
	QUAD $0xfffffb891d6ff9c5                   // vmovdqa      $-1143(%rip), %xmm3  /* LCPI14_1(%rip) */
	LONG $0xe274f9c5                           // vpcmpeqb     %xmm2, %xmm0, %xmm4
	LONG $0xdcd7f9c5                           // vpmovmskb    %xmm4, %ebx
	LONG $0xd274f1c5                           // vpcmpeqb     %xmm2, %xmm1, %xmm2
	LONG $0xc2d7f9c5                           // vpmovmskb    %xmm2, %eax
	LONG $0xc374f9c5                           // vpcmpeqb     %xmm3, %xmm0, %xmm0
	LONG $0xf8d7f9c5                           // vpmovmskb    %xmm0, %edi
	LONG $0xc374f1c5                           // vpcmpeqb     %xmm3, %xmm1, %xmm0
	LONG $0xc8d7f9c5                           // vpmovmskb    %xmm0, %ecx
	LONG $0x10e0c148                           // shlq         $16, %rax
	WORD $0x0948; BYTE $0xc3                   // orq          %rax, %rbx
	LONG $0x10e1c148                           // shlq         $16, %rcx
	WORD $0x0948; BYTE $0xcf                   // orq          %rcx, %rdi
	LONG $0x01c3850f; WORD $0x0000             // jne          LBB14_74, $451(%rip)
	WORD $0x854d; BYTE $0xf6                   // testq        %r14, %r14
	LONG $0x01d6850f; WORD $0x0000             // jne          LBB14_76, $470(%rip)
	WORD $0x3145; BYTE $0xf6                   // xorl         %r14d, %r14d
	WORD $0x8548; BYTE $0xdb                   // testq        %rbx, %rbx
	LONG $0x0207840f; WORD $0x0000             // je           LBB14_81, $519(%rip)

LBB14_80:
	LONG $0xc3bc0f48             // bsfq         %rbx, %rax
	LONG $0xfffce0e9; BYTE $0xff // jmp          LBB14_70, $-800(%rip)

LBB14_4:
	QUAD $0xffffffffd045c748 // movq         $-1, $-48(%rbp)
	WORD $0x3145; BYTE $0xff // xorl         %r15d, %r15d

LBB14_23:
	LONG $0x20fb8348                           // cmpq         $32, %rbx
	LONG $0x00e5820f; WORD $0x0000             // jb           LBB14_41, $229(%rip)
	LONG $0x6f7ac1c4; WORD $0x2404             // vmovdqu      (%r12), %xmm0
	LONG $0x6f7ac1c4; WORD $0x244c; BYTE $0x10 // vmovdqu      $16(%r12), %xmm1
	QUAD $0xfffffafd156ff9c5                   // vmovdqa      $-1283(%rip), %xmm2  /* LCPI14_0(%rip) */
	LONG $0xda74f9c5                           // vpcmpeqb     %xmm2, %xmm0, %xmm3
	LONG $0xdbd779c5                           // vpmovmskb    %xmm3, %r11d
	LONG $0xd274f1c5                           // vpcmpeqb     %xmm2, %xmm1, %xmm2
	LONG $0xc2d7f9c5                           // vpmovmskb    %xmm2, %eax
	QUAD $0xfffffaf5156ff9c5                   // vmovdqa      $-1291(%rip), %xmm2  /* LCPI14_1(%rip) */
	LONG $0xda74f9c5                           // vpcmpeqb     %xmm2, %xmm0, %xmm3
	LONG $0xcbd7f9c5                           // vpmovmskb    %xmm3, %ecx
	LONG $0xd274f1c5                           // vpcmpeqb     %xmm2, %xmm1, %xmm2
	LONG $0xf2d7f9c5                           // vpmovmskb    %xmm2, %esi
	QUAD $0xfffffaed156ff9c5                   // vmovdqa      $-1299(%rip), %xmm2  /* LCPI14_2(%rip) */
	LONG $0xd864e9c5                           // vpcmpgtb     %xmm0, %xmm2, %xmm3
	LONG $0xe476d9c5                           // vpcmpeqd     %xmm4, %xmm4, %xmm4
	LONG $0xc464f9c5                           // vpcmpgtb     %xmm4, %xmm0, %xmm0
	LONG $0xc0dbe1c5                           // vpand        %xmm0, %xmm3, %xmm0
	LONG $0xd0d779c5                           // vpmovmskb    %xmm0, %r10d
	LONG $0xc164e9c5                           // vpcmpgtb     %xmm1, %xmm2, %xmm0
	LONG $0xcc64f1c5                           // vpcmpgtb     %xmm4, %xmm1, %xmm1
	LONG $0xc1dbf9c5                           // vpand        %xmm1, %xmm0, %xmm0
	LONG $0xf8d7f9c5                           // vpmovmskb    %xmm0, %edi
	LONG $0x10e0c148                           // shlq         $16, %rax
	WORD $0x0949; BYTE $0xc3                   // orq          %rax, %r11
	LONG $0x10e6c148                           // shlq         $16, %rsi
	LONG $0x10e7c148                           // shlq         $16, %rdi
	WORD $0x0948; BYTE $0xf1                   // orq          %rsi, %rcx
	LONG $0x0209850f; WORD $0x0000             // jne          LBB14_25, $521(%rip)
	WORD $0x854d; BYTE $0xff                   // testq        %r15, %r15
	LONG $0x021d850f; WORD $0x0000             // jne          LBB14_27, $541(%rip)
	WORD $0x3145; BYTE $0xff                   // xorl         %r15d, %r15d

LBB14_30:
	WORD $0x094c; BYTE $0xd7       // orq          %r10, %rdi
	LONG $0x000040b8; BYTE $0x00   // movl         $64, %eax
	LONG $0x000040b9; BYTE $0x00   // movl         $64, %ecx
	WORD $0x854d; BYTE $0xdb       // testq        %r11, %r11
	LONG $0x0004840f; WORD $0x0000 // je           LBB14_32, $4(%rip)
	LONG $0xcbbc0f49               // bsfq         %r11, %rcx

LBB14_32:
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0x0004840f; WORD $0x0000 // je           LBB14_34, $4(%rip)
	LONG $0xc7bc0f48               // bsfq         %rdi, %rax

LBB14_34:
	WORD $0x854d; BYTE $0xdb       // testq        %r11, %r11
	LONG $0x0017840f; WORD $0x0000 // je           LBB14_38, $23(%rip)
	LONG $0xb8652b4c               // subq         $-72(%rbp), %r12
	WORD $0x3948; BYTE $0xc8       // cmpq         %rcx, %rax
	LONG $0x021a820f; WORD $0x0000 // jb           LBB14_36, $538(%rip)
	LONG $0x0c748d4d; BYTE $0x01   // leaq         $1(%r12,%rcx), %r14
	LONG $0xfffe10e9; BYTE $0xff   // jmp          LBB14_47, $-496(%rip)

LBB14_38:
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0x021a850f; WORD $0x0000 // jne          LBB14_39, $538(%rip)
	LONG $0x20c48349               // addq         $32, %r12
	LONG $0xe0c38348               // addq         $-32, %rbx

LBB14_41:
	WORD $0x854d; BYTE $0xff                   // testq        %r15, %r15
	LONG $0x0215850f; WORD $0x0000             // jne          LBB14_43, $533(%rip)
	LONG $0xd04d8b48                           // movq         $-48(%rbp), %rcx
	LONG $0xffc6c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r14
	WORD $0x8548; BYTE $0xdb                   // testq        %rbx, %rbx
	LONG $0xfde2840f; WORD $0xffff             // je           LBB14_47, $-542(%rip)

LBB14_48:
	LONG $0x04b60f41; BYTE $0x24               // movzbl       (%r12), %eax
	WORD $0x223c                               // cmpb         $34, %al
	LONG $0x0072840f; WORD $0x0000             // je           LBB14_98, $114(%rip)
	WORD $0x5c3c                               // cmpb         $92, %al
	LONG $0x0025840f; WORD $0x0000             // je           LBB14_50, $37(%rip)
	WORD $0x1f3c                               // cmpb         $31, %al
	LONG $0x0270860f; WORD $0x0000             // jbe          LBB14_55, $624(%rip)
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	LONG $0x000001ba; BYTE $0x00               // movl         $1, %edx
	WORD $0x0149; BYTE $0xd4                   // addq         %rdx, %r12
	WORD $0x0148; BYTE $0xc3                   // addq         %rax, %rbx
	LONG $0xffcb850f; WORD $0xffff             // jne          LBB14_48, $-53(%rip)
	LONG $0xfffda8e9; BYTE $0xff               // jmp          LBB14_47, $-600(%rip)

LBB14_50:
	LONG $0x01fb8348                           // cmpq         $1, %rbx
	LONG $0xfd9e840f; WORD $0xffff             // je           LBB14_47, $-610(%rip)
	WORD $0x8948; BYTE $0xde                   // movq         %rbx, %rsi
	WORD $0x894c; BYTE $0xe0                   // movq         %r12, %rax
	LONG $0xb8452b48                           // subq         $-72(%rbp), %rax
	LONG $0xfff98348                           // cmpq         $-1, %rcx
	LONG $0xd0558b48                           // movq         $-48(%rbp), %rdx
	LONG $0xd0440f48                           // cmoveq       %rax, %rdx
	LONG $0xd0558948                           // movq         %rdx, $-48(%rbp)
	LONG $0xc8440f48                           // cmoveq       %rax, %rcx
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x000002ba; BYTE $0x00               // movl         $2, %edx
	WORD $0x0149; BYTE $0xd4                   // addq         %rdx, %r12
	WORD $0x0148; BYTE $0xc3                   // addq         %rax, %rbx
	LONG $0xff86850f; WORD $0xffff             // jne          LBB14_48, $-122(%rip)
	LONG $0xfffd63e9; BYTE $0xff               // jmp          LBB14_47, $-669(%rip)

LBB14_98:
	LONG $0xb8652b4c             // subq         $-72(%rbp), %r12
	WORD $0xff49; BYTE $0xc4     // incq         %r12
	WORD $0x894d; BYTE $0xe6     // movq         %r12, %r14
	LONG $0xfffd54e9; BYTE $0xff // jmp          LBB14_47, $-684(%rip)

LBB14_74:
	LONG $0xd07d8348; BYTE $0xff   // cmpq         $-1, $-48(%rbp)
	LONG $0x0011850f; WORD $0x0000 // jne          LBB14_76, $17(%rip)
	WORD $0x894c; BYTE $0xe0       // movq         %r12, %rax
	WORD $0x294c; BYTE $0xc0       // subq         %r8, %rax
	LONG $0xcfbc0f48               // bsfq         %rdi, %rcx
	WORD $0x0148; BYTE $0xc1       // addq         %rax, %rcx
	LONG $0xd04d8948               // movq         %rcx, $-48(%rbp)

LBB14_76:
	WORD $0x8944; BYTE $0xf0       // movl         %r14d, %eax
	WORD $0xd0f7                   // notl         %eax
	WORD $0xf821                   // andl         %edi, %eax
	LONG $0x460c8d41               // leal         (%r14,%rax,2), %ecx
	WORD $0x148d; BYTE $0x00       // leal         (%rax,%rax), %edx
	LONG $0xaaaaaabe; BYTE $0xaa   // movl         $2863311530, %esi
	WORD $0xd631                   // xorl         %edx, %esi
	WORD $0xfe21                   // andl         %edi, %esi
	LONG $0xaaaae681; WORD $0xaaaa // andl         $-1431655766, %esi
	WORD $0x3145; BYTE $0xf6       // xorl         %r14d, %r14d
	WORD $0xc601                   // addl         %eax, %esi
	LONG $0xc6920f41               // setb         %r14b
	WORD $0xf601                   // addl         %esi, %esi
	LONG $0x5555f681; WORD $0x5555 // xorl         $1431655765, %esi
	WORD $0xce21                   // andl         %ecx, %esi
	WORD $0xd6f7                   // notl         %esi
	WORD $0xf321                   // andl         %esi, %ebx
	WORD $0x8548; BYTE $0xdb       // testq        %rbx, %rbx
	LONG $0xfdf9850f; WORD $0xffff // jne          LBB14_80, $-519(%rip)

LBB14_81:
	LONG $0x20c48349 // addq         $32, %r12
	LONG $0xe0c78349 // addq         $-32, %r15

LBB14_82:
	WORD $0x854d; BYTE $0xf6                   // testq        %r14, %r14
	LONG $0x0151850f; WORD $0x0000             // jne          LBB14_84, $337(%rip)
	LONG $0xd04d8b48                           // movq         $-48(%rbp), %rcx
	LONG $0xffc6c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r14
	WORD $0x854d; BYTE $0xff                   // testq        %r15, %r15
	LONG $0xfac5840f; WORD $0xffff             // je           LBB14_96, $-1339(%rip)

LBB14_88:
	WORD $0x894d; BYTE $0xc1 // movq         %r8, %r9
	WORD $0xf749; BYTE $0xd1 // notq         %r9

LBB14_89:
	LONG $0x247c8d49; BYTE $0x01   // leaq         $1(%r12), %rdi
	LONG $0x04b60f41; BYTE $0x24   // movzbl       (%r12), %eax
	WORD $0x223c                   // cmpb         $34, %al
	LONG $0x0059840f; WORD $0x0000 // je           LBB14_95, $89(%rip)
	LONG $0xff778d49               // leaq         $-1(%r15), %rsi
	WORD $0x5c3c                   // cmpb         $92, %al
	LONG $0x0014840f; WORD $0x0000 // je           LBB14_92, $20(%rip)
	WORD $0x8949; BYTE $0xf7       // movq         %rsi, %r15
	WORD $0x8949; BYTE $0xfc       // movq         %rdi, %r12
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0xffd3850f; WORD $0xffff // jne          LBB14_89, $-45(%rip)
	LONG $0xfffa8de9; BYTE $0xff   // jmp          LBB14_96, $-1395(%rip)

LBB14_92:
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0xfa84840f; WORD $0xffff // je           LBB14_96, $-1404(%rip)
	WORD $0x014c; BYTE $0xcf       // addq         %r9, %rdi
	LONG $0xfff98348               // cmpq         $-1, %rcx
	LONG $0xd0458b48               // movq         $-48(%rbp), %rax
	LONG $0xc7440f48               // cmoveq       %rdi, %rax
	LONG $0xd0458948               // movq         %rax, $-48(%rbp)
	LONG $0xcf440f48               // cmoveq       %rdi, %rcx
	LONG $0x02c48349               // addq         $2, %r12
	LONG $0xfec78349               // addq         $-2, %r15
	WORD $0x894c; BYTE $0xfe       // movq         %r15, %rsi
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0xff9a850f; WORD $0xffff // jne          LBB14_89, $-102(%rip)
	LONG $0xfffa54e9; BYTE $0xff   // jmp          LBB14_96, $-1452(%rip)

LBB14_95:
	WORD $0x294c; BYTE $0xc7     // subq         %r8, %rdi
	WORD $0x8949; BYTE $0xfe     // movq         %rdi, %r14
	LONG $0xfffa49e9; BYTE $0xff // jmp          LBB14_96, $-1463(%rip)

LBB14_25:
	LONG $0xd07d8348; BYTE $0xff   // cmpq         $-1, $-48(%rbp)
	LONG $0x0012850f; WORD $0x0000 // jne          LBB14_27, $18(%rip)
	WORD $0x894c; BYTE $0xe0       // movq         %r12, %rax
	LONG $0xb8452b48               // subq         $-72(%rbp), %rax
	LONG $0xf1bc0f48               // bsfq         %rcx, %rsi
	WORD $0x0148; BYTE $0xc6       // addq         %rax, %rsi
	LONG $0xd0758948               // movq         %rsi, $-48(%rbp)

LBB14_27:
	WORD $0x8944; BYTE $0xf8       // movl         %r15d, %eax
	WORD $0xd0f7                   // notl         %eax
	WORD $0xc821                   // andl         %ecx, %eax
	LONG $0x47048d45               // leal         (%r15,%rax,2), %r8d
	LONG $0x000c8d44               // leal         (%rax,%rax), %r9d
	LONG $0xaaaaaabe; BYTE $0xaa   // movl         $2863311530, %esi
	WORD $0x3144; BYTE $0xce       // xorl         %r9d, %esi
	WORD $0xce21                   // andl         %ecx, %esi
	LONG $0xaaaae681; WORD $0xaaaa // andl         $-1431655766, %esi
	WORD $0x3145; BYTE $0xff       // xorl         %r15d, %r15d
	WORD $0xc601                   // addl         %eax, %esi
	LONG $0xc7920f41               // setb         %r15b
	WORD $0xf601                   // addl         %esi, %esi
	LONG $0x5555f681; WORD $0x5555 // xorl         $1431655765, %esi
	WORD $0x2144; BYTE $0xc6       // andl         %r8d, %esi
	WORD $0xd6f7                   // notl         %esi
	WORD $0x2141; BYTE $0xf3       // andl         %esi, %r11d
	LONG $0xfffda9e9; BYTE $0xff   // jmp          LBB14_30, $-599(%rip)

LBB14_36:
	WORD $0x014c; BYTE $0xe0                   // addq         %r12, %rax
	LONG $0xfec6c749; WORD $0xffff; BYTE $0xff // movq         $-2, %r14
	LONG $0xd0458948                           // movq         %rax, $-48(%rbp)
	LONG $0xfffbede9; BYTE $0xff               // jmp          LBB14_47, $-1043(%rip)

LBB14_39:
	LONG $0xb8652b4c             // subq         $-72(%rbp), %r12
	WORD $0x0149; BYTE $0xc4     // addq         %rax, %r12
	LONG $0x000090e9; BYTE $0x00 // jmp          LBB14_56, $144(%rip)

LBB14_43:
	WORD $0x8548; BYTE $0xdb                   // testq        %rbx, %rbx
	LONG $0x0097840f; WORD $0x0000             // je           LBB14_44, $151(%rip)
	WORD $0x8948; BYTE $0xde                   // movq         %rbx, %rsi
	LONG $0xb84d8b48                           // movq         $-72(%rbp), %rcx
	WORD $0xf748; BYTE $0xd1                   // notq         %rcx
	WORD $0x014c; BYTE $0xe1                   // addq         %r12, %rcx
	LONG $0xd0558b48                           // movq         $-48(%rbp), %rdx
	LONG $0xfffa8348                           // cmpq         $-1, %rdx
	WORD $0x8948; BYTE $0xd0                   // movq         %rdx, %rax
	LONG $0xc1440f48                           // cmoveq       %rcx, %rax
	LONG $0xca450f48                           // cmovneq      %rdx, %rcx
	WORD $0xff49; BYTE $0xc4                   // incq         %r12
	WORD $0xff48; BYTE $0xcb                   // decq         %rbx
	LONG $0xd0458948                           // movq         %rax, $-48(%rbp)
	LONG $0xffc6c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r14
	WORD $0x8548; BYTE $0xdb                   // testq        %rbx, %rbx
	LONG $0xfdbc850f; WORD $0xffff             // jne          LBB14_48, $-580(%rip)
	LONG $0xfffb99e9; BYTE $0xff               // jmp          LBB14_47, $-1127(%rip)

LBB14_84:
	WORD $0x854d; BYTE $0xff                   // testq        %r15, %r15
	LONG $0x005b840f; WORD $0x0000             // je           LBB14_85, $91(%rip)
	WORD $0x894c; BYTE $0xc1                   // movq         %r8, %rcx
	WORD $0xf748; BYTE $0xd1                   // notq         %rcx
	WORD $0x014c; BYTE $0xe1                   // addq         %r12, %rcx
	LONG $0xd0558b48                           // movq         $-48(%rbp), %rdx
	LONG $0xfffa8348                           // cmpq         $-1, %rdx
	WORD $0x8948; BYTE $0xd0                   // movq         %rdx, %rax
	LONG $0xc1440f48                           // cmoveq       %rcx, %rax
	LONG $0xca450f48                           // cmovneq      %rdx, %rcx
	WORD $0xff49; BYTE $0xc4                   // incq         %r12
	WORD $0xff49; BYTE $0xcf                   // decq         %r15
	LONG $0xd0458948                           // movq         %rax, $-48(%rbp)
	LONG $0xffc6c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r14
	WORD $0x854d; BYTE $0xff                   // testq        %r15, %r15
	LONG $0xfe84850f; WORD $0xffff             // jne          LBB14_88, $-380(%rip)
	LONG $0xfff944e9; BYTE $0xff               // jmp          LBB14_96, $-1724(%rip)

LBB14_55:
	LONG $0xb8652b4c // subq         $-72(%rbp), %r12

LBB14_56:
	LONG $0xfec6c749; WORD $0xffff; BYTE $0xff // movq         $-2, %r14
	LONG $0xd065894c                           // movq         %r12, $-48(%rbp)
	LONG $0xfffb41e9; BYTE $0xff               // jmp          LBB14_47, $-1215(%rip)

LBB14_44:
	LONG $0xffc6c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r14
	LONG $0xfffb35e9; BYTE $0xff               // jmp          LBB14_47, $-1227(%rip)

LBB14_85:
	LONG $0xffc6c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r14
	LONG $0xfff918e9; BYTE $0xff               // jmp          LBB14_96, $-1768(%rip)
	LONG $0x00000000; WORD $0x0000; BYTE $0x00 // .p2align 4, 0x00

LCPI15_0:
	QUAD $0x2f2f2f2f2f2f2f2f; QUAD $0x2f2f2f2f2f2f2f2f // .space 16, '////////////////'

LCPI15_1:
	QUAD $0x3a3a3a3a3a3a3a3a; QUAD $0x3a3a3a3a3a3a3a3a // .space 16, '::::::::::::::::'

LCPI15_2:
	QUAD $0x2b2b2b2b2b2b2b2b; QUAD $0x2b2b2b2b2b2b2b2b // .space 16, '++++++++++++++++'

LCPI15_3:
	QUAD $0x2d2d2d2d2d2d2d2d; QUAD $0x2d2d2d2d2d2d2d2d // .space 16, '----------------'

LCPI15_4:
	QUAD $0xdfdfdfdfdfdfdfdf; QUAD $0xdfdfdfdfdfdfdfdf // .space 16, '\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf'

LCPI15_5:
	QUAD $0x2e2e2e2e2e2e2e2e; QUAD $0x2e2e2e2e2e2e2e2e // .space 16, '................'

LCPI15_6:
	QUAD $0x4545454545454545; QUAD $0x4545454545454545 // .space 16, 'EEEEEEEEEEEEEEEE'

	// .p2align 4, 0x90
_skip_negative:
	BYTE $0x55                             // pushq        %rbp
	WORD $0x8948; BYTE $0xe5               // movq         %rsp, %rbp
	WORD $0x5741                           // pushq        %r15
	WORD $0x5641                           // pushq        %r14
	WORD $0x5541                           // pushq        %r13
	WORD $0x5441                           // pushq        %r12
	BYTE $0x53                             // pushq        %rbx
	WORD $0x8b48; BYTE $0x06               // movq         (%rsi), %rax
	LONG $0x087f8b4c                       // movq         $8(%rdi), %r15
	WORD $0x2949; BYTE $0xc7               // subq         %rax, %r15
	LONG $0x025f840f; WORD $0x0000         // je           LBB15_34, $607(%rip)
	WORD $0x8b4c; BYTE $0x1f               // movq         (%rdi), %r11
	WORD $0x0149; BYTE $0xc3               // addq         %rax, %r11
	LONG $0x303b8041                       // cmpb         $48, (%r11)
	LONG $0x0036850f; WORD $0x0000         // jne          LBB15_5, $54(%rip)
	LONG $0x000001bb; BYTE $0x00           // movl         $1, %ebx
	LONG $0x01ff8349                       // cmpq         $1, %r15
	LONG $0x02c4840f; WORD $0x0000         // je           LBB15_47, $708(%rip)
	LONG $0x014b8a41                       // movb         $1(%r11), %cl
	WORD $0xc180; BYTE $0xd2               // addb         $-46, %cl
	WORD $0xf980; BYTE $0x37               // cmpb         $55, %cl
	LONG $0x02b4870f; WORD $0x0000         // ja           LBB15_47, $692(%rip)
	WORD $0xb60f; BYTE $0xc9               // movzbl       %cl, %ecx
	QUAD $0x000000800001ba48; WORD $0x0080 // movabsq      $36028797027352577, %rdx
	LONG $0xcaa30f48                       // btq          %rcx, %rdx
	LONG $0x029d830f; WORD $0x0000         // jae          LBB15_47, $669(%rip)

LBB15_5:
	LONG $0x10ff8349                                       // cmpq         $16, %r15
	LONG $0x0328820f; WORD $0x0000                         // jb           LBB15_59, $808(%rip)
	LONG $0xffc1c749; WORD $0xffff; BYTE $0xff             // movq         $-1, %r9
	QUAD $0xffffff14056f79c5                               // vmovdqa      $-236(%rip), %xmm8  /* LCPI15_0(%rip) */
	QUAD $0xffffff1c0d6f79c5                               // vmovdqa      $-228(%rip), %xmm9  /* LCPI15_1(%rip) */
	QUAD $0xffffff24156f79c5                               // vmovdqa      $-220(%rip), %xmm10  /* LCPI15_2(%rip) */
	QUAD $0xffffff2c1d6f79c5                               // vmovdqa      $-212(%rip), %xmm11  /* LCPI15_3(%rip) */
	QUAD $0xffffff34256ff9c5                               // vmovdqa      $-204(%rip), %xmm4  /* LCPI15_4(%rip) */
	QUAD $0xffffff3c2d6ff9c5                               // vmovdqa      $-196(%rip), %xmm5  /* LCPI15_5(%rip) */
	QUAD $0xffffff44356ff9c5                               // vmovdqa      $-188(%rip), %xmm6  /* LCPI15_6(%rip) */
	LONG $0xffffbe41; WORD $0xffff                         // movl         $4294967295, %r14d
	LONG $0xffc2c749; WORD $0xffff; BYTE $0xff             // movq         $-1, %r10
	LONG $0xffc0c749; WORD $0xffff; BYTE $0xff             // movq         $-1, %r8
	WORD $0x894d; BYTE $0xdc                               // movq         %r11, %r12
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

LBB15_7:
	LONG $0x6f7ac1c4; WORD $0x243c // vmovdqu      (%r12), %xmm7
	LONG $0x6441c1c4; BYTE $0xc0   // vpcmpgtb     %xmm8, %xmm7, %xmm0
	LONG $0xcf64b1c5               // vpcmpgtb     %xmm7, %xmm9, %xmm1
	LONG $0xc1dbf9c5               // vpand        %xmm1, %xmm0, %xmm0
	LONG $0xcf74a9c5               // vpcmpeqb     %xmm7, %xmm10, %xmm1
	LONG $0xd774a1c5               // vpcmpeqb     %xmm7, %xmm11, %xmm2
	LONG $0xc9ebe9c5               // vpor         %xmm1, %xmm2, %xmm1
	LONG $0xd4dbc1c5               // vpand        %xmm4, %xmm7, %xmm2
	LONG $0xd674e9c5               // vpcmpeqb     %xmm6, %xmm2, %xmm2
	LONG $0xfd74c1c5               // vpcmpeqb     %xmm5, %xmm7, %xmm7
	LONG $0xdfebe9c5               // vpor         %xmm7, %xmm2, %xmm3
	LONG $0xc0ebf1c5               // vpor         %xmm0, %xmm1, %xmm0
	LONG $0xc0ebe1c5               // vpor         %xmm0, %xmm3, %xmm0
	LONG $0xdfd7f9c5               // vpmovmskb    %xmm7, %ebx
	LONG $0xfad7f9c5               // vpmovmskb    %xmm2, %edi
	LONG $0xe9d779c5               // vpmovmskb    %xmm1, %r13d
	LONG $0xc8d7f9c5               // vpmovmskb    %xmm0, %ecx
	WORD $0x314c; BYTE $0xf1       // xorq         %r14, %rcx
	LONG $0xc9bc0f48               // bsfq         %rcx, %rcx
	WORD $0xf983; BYTE $0x10       // cmpl         $16, %ecx
	LONG $0x0013840f; WORD $0x0000 // je           LBB15_9, $19(%rip)
	LONG $0xffffffba; BYTE $0xff   // movl         $-1, %edx
	WORD $0xe2d3                   // shll         %cl, %edx
	WORD $0xd2f7                   // notl         %edx
	WORD $0xd321                   // andl         %edx, %ebx
	WORD $0xd721                   // andl         %edx, %edi
	WORD $0x2144; BYTE $0xea       // andl         %r13d, %edx
	WORD $0x8941; BYTE $0xd5       // movl         %edx, %r13d

LBB15_9:
	WORD $0x538d; BYTE $0xff       // leal         $-1(%rbx), %edx
	WORD $0xda21                   // andl         %ebx, %edx
	LONG $0x0209850f; WORD $0x0000 // jne          LBB15_52, $521(%rip)
	WORD $0x578d; BYTE $0xff       // leal         $-1(%rdi), %edx
	WORD $0xfa21                   // andl         %edi, %edx
	LONG $0x01fe850f; WORD $0x0000 // jne          LBB15_52, $510(%rip)
	LONG $0xff558d41               // leal         $-1(%r13), %edx
	WORD $0x2144; BYTE $0xea       // andl         %r13d, %edx
	LONG $0x01f1850f; WORD $0x0000 // jne          LBB15_52, $497(%rip)
	WORD $0xdb85                   // testl        %ebx, %ebx
	LONG $0x0019840f; WORD $0x0000 // je           LBB15_15, $25(%rip)
	WORD $0x894c; BYTE $0xe2       // movq         %r12, %rdx
	WORD $0x294c; BYTE $0xda       // subq         %r11, %rdx
	WORD $0xbc0f; BYTE $0xdb       // bsfl         %ebx, %ebx
	WORD $0x0148; BYTE $0xd3       // addq         %rdx, %rbx
	LONG $0xfff88349               // cmpq         $-1, %r8
	LONG $0x01dc850f; WORD $0x0000 // jne          LBB15_53, $476(%rip)
	WORD $0x8949; BYTE $0xd8       // movq         %rbx, %r8

LBB15_15:
	WORD $0xff85                   // testl        %edi, %edi
	LONG $0x0019840f; WORD $0x0000 // je           LBB15_18, $25(%rip)
	WORD $0x894c; BYTE $0xe2       // movq         %r12, %rdx
	WORD $0x294c; BYTE $0xda       // subq         %r11, %rdx
	WORD $0xbc0f; BYTE $0xdf       // bsfl         %edi, %ebx
	WORD $0x0148; BYTE $0xd3       // addq         %rdx, %rbx
	LONG $0xfffa8349               // cmpq         $-1, %r10
	LONG $0x01bb850f; WORD $0x0000 // jne          LBB15_53, $443(%rip)
	WORD $0x8949; BYTE $0xda       // movq         %rbx, %r10

LBB15_18:
	WORD $0x8545; BYTE $0xed       // testl        %r13d, %r13d
	LONG $0x001a840f; WORD $0x0000 // je           LBB15_21, $26(%rip)
	WORD $0x894c; BYTE $0xe2       // movq         %r12, %rdx
	WORD $0x294c; BYTE $0xda       // subq         %r11, %rdx
	LONG $0xddbc0f41               // bsfl         %r13d, %ebx
	WORD $0x0148; BYTE $0xd3       // addq         %rdx, %rbx
	LONG $0xfff98349               // cmpq         $-1, %r9
	LONG $0x0198850f; WORD $0x0000 // jne          LBB15_53, $408(%rip)
	WORD $0x8949; BYTE $0xd9       // movq         %rbx, %r9

LBB15_21:
	WORD $0xf983; BYTE $0x10       // cmpl         $16, %ecx
	LONG $0x00bd850f; WORD $0x0000 // jne          LBB15_35, $189(%rip)
	LONG $0x10c48349               // addq         $16, %r12
	LONG $0xf0c78349               // addq         $-16, %r15
	LONG $0x0fff8349               // cmpq         $15, %r15
	LONG $0xfef3870f; WORD $0xffff // ja           LBB15_7, $-269(%rip)
	WORD $0x854d; BYTE $0xff       // testq        %r15, %r15
	LONG $0x00a5840f; WORD $0x0000 // je           LBB15_36, $165(%rip)

LBB15_24:
	LONG $0x3c0c8d4b                           // leaq         (%r12,%r15), %rcx
	LONG $0xc3158d48; WORD $0x0001; BYTE $0x00 // leaq         $451(%rip), %rdx  /* LJTI15_0(%rip) */
	LONG $0x000016e9; BYTE $0x00               // jmp          LBB15_26, $22(%rip)
	QUAD $0x9090909090909090; WORD $0x9090     // .p2align 4, 0x90

LBB15_25:
	WORD $0x8949; BYTE $0xfc       // movq         %rdi, %r12
	WORD $0xff49; BYTE $0xcf       // decq         %r15
	LONG $0x0153840f; WORD $0x0000 // je           LBB15_54, $339(%rip)

LBB15_26:
	LONG $0x1cbe0f41; BYTE $0x24   // movsbl       (%r12), %ebx
	WORD $0xc383; BYTE $0xd5       // addl         $-43, %ebx
	WORD $0xfb83; BYTE $0x3a       // cmpl         $58, %ebx
	LONG $0x006e870f; WORD $0x0000 // ja           LBB15_36, $110(%rip)
	LONG $0x247c8d49; BYTE $0x01   // leaq         $1(%r12), %rdi
	LONG $0x9a1c6348               // movslq       (%rdx,%rbx,4), %rbx
	WORD $0x0148; BYTE $0xd3       // addq         %rdx, %rbx
	JMP  BX

LBB15_28:
	WORD $0x8948; BYTE $0xfb       // movq         %rdi, %rbx
	WORD $0x294c; BYTE $0xdb       // subq         %r11, %rbx
	LONG $0xfff98349               // cmpq         $-1, %r9
	LONG $0x0152850f; WORD $0x0000 // jne          LBB15_60, $338(%rip)
	WORD $0xff48; BYTE $0xcb       // decq         %rbx
	WORD $0x8949; BYTE $0xd9       // movq         %rbx, %r9
	LONG $0xffffbae9; BYTE $0xff   // jmp          LBB15_25, $-70(%rip)

LBB15_30:
	WORD $0x8948; BYTE $0xfb       // movq         %rdi, %rbx
	WORD $0x294c; BYTE $0xdb       // subq         %r11, %rbx
	LONG $0xfffa8349               // cmpq         $-1, %r10
	LONG $0x0137850f; WORD $0x0000 // jne          LBB15_60, $311(%rip)
	WORD $0xff48; BYTE $0xcb       // decq         %rbx
	WORD $0x8949; BYTE $0xda       // movq         %rbx, %r10
	LONG $0xffff9fe9; BYTE $0xff   // jmp          LBB15_25, $-97(%rip)

LBB15_32:
	WORD $0x8948; BYTE $0xfb       // movq         %rdi, %rbx
	WORD $0x294c; BYTE $0xdb       // subq         %r11, %rbx
	LONG $0xfff88349               // cmpq         $-1, %r8
	LONG $0x011c850f; WORD $0x0000 // jne          LBB15_60, $284(%rip)
	WORD $0xff48; BYTE $0xcb       // decq         %rbx
	WORD $0x8949; BYTE $0xd8       // movq         %rbx, %r8
	LONG $0xffff84e9; BYTE $0xff   // jmp          LBB15_25, $-124(%rip)

LBB15_34:
	LONG $0xffc3c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rbx
	LONG $0x0000eae9; BYTE $0x00               // jmp          LBB15_55, $234(%rip)

LBB15_35:
	WORD $0x0149; BYTE $0xcc // addq         %rcx, %r12

LBB15_36:
	LONG $0xffc3c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rbx
	WORD $0x854d; BYTE $0xd2                   // testq        %r10, %r10
	LONG $0x00d7840f; WORD $0x0000             // je           LBB15_55, $215(%rip)

LBB15_37:
	WORD $0x854d; BYTE $0xc9       // testq        %r9, %r9
	LONG $0x00ce840f; WORD $0x0000 // je           LBB15_55, $206(%rip)
	WORD $0x854d; BYTE $0xc0       // testq        %r8, %r8
	LONG $0x00c5840f; WORD $0x0000 // je           LBB15_55, $197(%rip)
	WORD $0x294d; BYTE $0xdc       // subq         %r11, %r12
	LONG $0x244c8d49; BYTE $0xff   // leaq         $-1(%r12), %rcx
	WORD $0x3949; BYTE $0xca       // cmpq         %rcx, %r10
	LONG $0x0033840f; WORD $0x0000 // je           LBB15_45, $51(%rip)
	WORD $0x3949; BYTE $0xc8       // cmpq         %rcx, %r8
	LONG $0x002a840f; WORD $0x0000 // je           LBB15_45, $42(%rip)
	WORD $0x3949; BYTE $0xc9       // cmpq         %rcx, %r9
	LONG $0x0021840f; WORD $0x0000 // je           LBB15_45, $33(%rip)
	WORD $0x854d; BYTE $0xc9       // testq        %r9, %r9
	LONG $0x00358e0f; WORD $0x0000 // jle          LBB15_48, $53(%rip)
	LONG $0xff498d49               // leaq         $-1(%r9), %rcx
	WORD $0x3949; BYTE $0xca       // cmpq         %rcx, %r10
	LONG $0x0028840f; WORD $0x0000 // je           LBB15_48, $40(%rip)
	WORD $0xf749; BYTE $0xd1       // notq         %r9
	WORD $0x894c; BYTE $0xcb       // movq         %r9, %rbx
	LONG $0x000006e9; BYTE $0x00   // jmp          LBB15_46, $6(%rip)

LBB15_45:
	WORD $0xf749; BYTE $0xdc // negq         %r12
	WORD $0x894c; BYTE $0xe3 // movq         %r12, %rbx

LBB15_46:
	WORD $0x8548; BYTE $0xdb       // testq        %rbx, %rbx
	LONG $0x0072880f; WORD $0x0000 // js           LBB15_55, $114(%rip)

LBB15_47:
	WORD $0x0148; BYTE $0xc3     // addq         %rax, %rbx
	WORD $0x8948; BYTE $0x1e     // movq         %rbx, (%rsi)
	WORD $0xff48; BYTE $0xc8     // decq         %rax
	LONG $0x000074e9; BYTE $0x00 // jmp          LBB15_56, $116(%rip)

LBB15_48:
	WORD $0x894c; BYTE $0xc1       // movq         %r8, %rcx
	WORD $0x094c; BYTE $0xd1       // orq          %r10, %rcx
	WORD $0x394d; BYTE $0xd0       // cmpq         %r10, %r8
	LONG $0x00148c0f; WORD $0x0000 // jl           LBB15_51, $20(%rip)
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0x000b880f; WORD $0x0000 // js           LBB15_51, $11(%rip)
	WORD $0xf749; BYTE $0xd0       // notq         %r8
	WORD $0x894c; BYTE $0xc3       // movq         %r8, %rbx
	LONG $0xffffc6e9; BYTE $0xff   // jmp          LBB15_46, $-58(%rip)

LBB15_51:
	LONG $0xff528d49             // leaq         $-1(%r10), %rdx
	WORD $0x8548; BYTE $0xc9     // testq        %rcx, %rcx
	WORD $0xf749; BYTE $0xd2     // notq         %r10
	LONG $0xd4480f4d             // cmovsq       %r12, %r10
	WORD $0x3949; BYTE $0xd0     // cmpq         %rdx, %r8
	LONG $0xd4450f4d             // cmovneq      %r12, %r10
	WORD $0x894c; BYTE $0xd3     // movq         %r10, %rbx
	LONG $0xffffa9e9; BYTE $0xff // jmp          LBB15_46, $-87(%rip)

LBB15_52:
	WORD $0x294d; BYTE $0xdc // subq         %r11, %r12
	WORD $0xbc0f; BYTE $0xda // bsfl         %edx, %ebx
	WORD $0x014c; BYTE $0xe3 // addq         %r12, %rbx

LBB15_53:
	WORD $0xf748; BYTE $0xd3     // notq         %rbx
	LONG $0xffff98e9; BYTE $0xff // jmp          LBB15_46, $-104(%rip)

LBB15_54:
	WORD $0x8949; BYTE $0xcc                   // movq         %rcx, %r12
	LONG $0xffc3c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rbx
	WORD $0x854d; BYTE $0xd2                   // testq        %r10, %r10
	LONG $0xff29850f; WORD $0xffff             // jne          LBB15_37, $-215(%rip)

LBB15_55:
	WORD $0xf748; BYTE $0xd3                   // notq         %rbx
	WORD $0x0148; BYTE $0xd8                   // addq         %rbx, %rax
	WORD $0x8948; BYTE $0x06                   // movq         %rax, (%rsi)
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax

LBB15_56:
	BYTE $0x5b   // popq         %rbx
	WORD $0x5c41 // popq         %r12
	WORD $0x5d41 // popq         %r13
	WORD $0x5e41 // popq         %r14
	WORD $0x5f41 // popq         %r15
	BYTE $0x5d   // popq         %rbp
	BYTE $0xc3   // retq

LBB15_60:
	WORD $0xf748; BYTE $0xdb     // negq         %rbx
	LONG $0xffff62e9; BYTE $0xff // jmp          LBB15_46, $-158(%rip)

LBB15_59:
	LONG $0xffc0c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r8
	WORD $0x894d; BYTE $0xdc                   // movq         %r11, %r12
	LONG $0xffc2c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r10
	LONG $0xffc1c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r9
	LONG $0xfffe34e9; BYTE $0xff               // jmp          LBB15_24, $-460(%rip)
	WORD $0x9090                               // .p2align 2, 0x90

	// .set L15_0_set_28, LBB15_28-LJTI15_0
	// .set L15_0_set_36, LBB15_36-LJTI15_0
	// .set L15_0_set_32, LBB15_32-LJTI15_0
	// .set L15_0_set_25, LBB15_25-LJTI15_0
	// .set L15_0_set_30, LBB15_30-LJTI15_0
LJTI15_0:
	LONG $0xfffffe77 // .long L15_0_set_28
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffe77 // .long L15_0_set_28
	LONG $0xfffffead // .long L15_0_set_32
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffe4c // .long L15_0_set_25
	LONG $0xfffffe4c // .long L15_0_set_25
	LONG $0xfffffe4c // .long L15_0_set_25
	LONG $0xfffffe4c // .long L15_0_set_25
	LONG $0xfffffe4c // .long L15_0_set_25
	LONG $0xfffffe4c // .long L15_0_set_25
	LONG $0xfffffe4c // .long L15_0_set_25
	LONG $0xfffffe4c // .long L15_0_set_25
	LONG $0xfffffe4c // .long L15_0_set_25
	LONG $0xfffffe4c // .long L15_0_set_25
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffe92 // .long L15_0_set_30
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffed7 // .long L15_0_set_36
	LONG $0xfffffe92 // .long L15_0_set_30

	// .p2align 4, 0x00
LCPI16_0:
	QUAD $0x2f2f2f2f2f2f2f2f; QUAD $0x2f2f2f2f2f2f2f2f // .space 16, '////////////////'

LCPI16_1:
	QUAD $0x3a3a3a3a3a3a3a3a; QUAD $0x3a3a3a3a3a3a3a3a // .space 16, '::::::::::::::::'

LCPI16_2:
	QUAD $0x2b2b2b2b2b2b2b2b; QUAD $0x2b2b2b2b2b2b2b2b // .space 16, '++++++++++++++++'

LCPI16_3:
	QUAD $0x2d2d2d2d2d2d2d2d; QUAD $0x2d2d2d2d2d2d2d2d // .space 16, '----------------'

LCPI16_4:
	QUAD $0xdfdfdfdfdfdfdfdf; QUAD $0xdfdfdfdfdfdfdfdf // .space 16, '\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf'

LCPI16_5:
	QUAD $0x2e2e2e2e2e2e2e2e; QUAD $0x2e2e2e2e2e2e2e2e // .space 16, '................'

LCPI16_6:
	QUAD $0x4545454545454545; QUAD $0x4545454545454545 // .space 16, 'EEEEEEEEEEEEEEEE'

	// .p2align 4, 0x90
_skip_positive:
	BYTE $0x55                             // pushq        %rbp
	WORD $0x8948; BYTE $0xe5               // movq         %rsp, %rbp
	WORD $0x5741                           // pushq        %r15
	WORD $0x5641                           // pushq        %r14
	WORD $0x5541                           // pushq        %r13
	WORD $0x5441                           // pushq        %r12
	BYTE $0x53                             // pushq        %rbx
	LONG $0x28ec8348                       // subq         $40, %rsp
	WORD $0x8b48; BYTE $0x1e               // movq         (%rsi), %rbx
	LONG $0xff438d48                       // leaq         $-1(%rbx), %rax
	LONG $0x08578b48                       // movq         $8(%rdi), %rdx
	WORD $0x8949; BYTE $0xd5               // movq         %rdx, %r13
	WORD $0x2949; BYTE $0xc5               // subq         %rax, %r13
	LONG $0x0276840f; WORD $0x0000         // je           LBB16_1, $630(%rip)
	WORD $0x8b4c; BYTE $0x27               // movq         (%rdi), %r12
	LONG $0x1c7c8d4d; BYTE $0xff           // leaq         $-1(%r12,%rbx), %r15
	LONG $0x303f8041                       // cmpb         $48, (%r15)
	LONG $0x0037850f; WORD $0x0000         // jne          LBB16_6, $55(%rip)
	LONG $0x000001bf; BYTE $0x00           // movl         $1, %edi
	LONG $0x01fd8349                       // cmpq         $1, %r13
	LONG $0x037c840f; WORD $0x0000         // je           LBB16_57, $892(%rip)
	LONG $0x1c0c8a41                       // movb         (%r12,%rbx), %cl
	WORD $0xc180; BYTE $0xd2               // addb         $-46, %cl
	WORD $0xf980; BYTE $0x37               // cmpb         $55, %cl
	LONG $0x036c870f; WORD $0x0000         // ja           LBB16_57, $876(%rip)
	LONG $0xc1b60f44                       // movzbl       %cl, %r8d
	QUAD $0x000000800001b948; WORD $0x0080 // movabsq      $36028797027352577, %rcx
	LONG $0xc1a30f4c                       // btq          %r8, %rcx
	LONG $0x0354830f; WORD $0x0000         // jae          LBB16_57, $852(%rip)

LBB16_6:
	LONG $0x10fd8349                           // cmpq         $16, %r13
	LONG $0xd0458948                           // movq         %rax, $-48(%rbp)
	LONG $0x0399820f; WORD $0x0000             // jb           LBB16_7, $921(%rip)
	LONG $0xb0558948                           // movq         %rdx, $-80(%rbp)
	LONG $0xc85d8948                           // movq         %rbx, $-56(%rbp)
	LONG $0xc0758948                           // movq         %rsi, $-64(%rbp)
	LONG $0xffc3c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r11
	QUAD $0xfffffef6056f79c5                   // vmovdqa      $-266(%rip), %xmm8  /* LCPI16_0(%rip) */
	QUAD $0xfffffefe0d6f79c5                   // vmovdqa      $-258(%rip), %xmm9  /* LCPI16_1(%rip) */
	QUAD $0xffffff06156f79c5                   // vmovdqa      $-250(%rip), %xmm10  /* LCPI16_2(%rip) */
	QUAD $0xffffff0e1d6f79c5                   // vmovdqa      $-242(%rip), %xmm11  /* LCPI16_3(%rip) */
	QUAD $0xffffff16256ff9c5                   // vmovdqa      $-234(%rip), %xmm4  /* LCPI16_4(%rip) */
	QUAD $0xffffff1e2d6ff9c5                   // vmovdqa      $-226(%rip), %xmm5  /* LCPI16_5(%rip) */
	QUAD $0xffffff26356ff9c5                   // vmovdqa      $-218(%rip), %xmm6  /* LCPI16_6(%rip) */
	WORD $0x8948; BYTE $0xc2                   // movq         %rax, %rdx
	LONG $0xffc2c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r10
	QUAD $0xffffffffb845c748                   // movq         $-1, $-72(%rbp)
	LONG $0x90909090                           // .p2align 4, 0x90

LBB16_9:
	LONG $0x6f7ac1c4; WORD $0x143c // vmovdqu      (%r12,%rdx), %xmm7
	LONG $0x6441c1c4; BYTE $0xc0   // vpcmpgtb     %xmm8, %xmm7, %xmm0
	LONG $0xcf64b1c5               // vpcmpgtb     %xmm7, %xmm9, %xmm1
	LONG $0xc1dbf9c5               // vpand        %xmm1, %xmm0, %xmm0
	LONG $0xcf74a9c5               // vpcmpeqb     %xmm7, %xmm10, %xmm1
	LONG $0xd774a1c5               // vpcmpeqb     %xmm7, %xmm11, %xmm2
	LONG $0xc9ebe9c5               // vpor         %xmm1, %xmm2, %xmm1
	LONG $0xd4dbc1c5               // vpand        %xmm4, %xmm7, %xmm2
	LONG $0xd674e9c5               // vpcmpeqb     %xmm6, %xmm2, %xmm2
	LONG $0xfd74c1c5               // vpcmpeqb     %xmm5, %xmm7, %xmm7
	LONG $0xdfebe9c5               // vpor         %xmm7, %xmm2, %xmm3
	LONG $0xc0ebf1c5               // vpor         %xmm0, %xmm1, %xmm0
	LONG $0xc0ebe1c5               // vpor         %xmm0, %xmm3, %xmm0
	LONG $0xffd7f9c5               // vpmovmskb    %xmm7, %edi
	LONG $0xc2d7f9c5               // vpmovmskb    %xmm2, %eax
	LONG $0xf1d779c5               // vpmovmskb    %xmm1, %r14d
	LONG $0xc8d7f9c5               // vpmovmskb    %xmm0, %ecx
	LONG $0xffffffbe; BYTE $0xff   // movl         $4294967295, %esi
	WORD $0x3148; BYTE $0xf1       // xorq         %rsi, %rcx
	LONG $0xc9bc0f48               // bsfq         %rcx, %rcx
	WORD $0xf983; BYTE $0x10       // cmpl         $16, %ecx
	LONG $0x0013840f; WORD $0x0000 // je           LBB16_11, $19(%rip)
	LONG $0xffffffbe; BYTE $0xff   // movl         $-1, %esi
	WORD $0xe6d3                   // shll         %cl, %esi
	WORD $0xd6f7                   // notl         %esi
	WORD $0xf721                   // andl         %esi, %edi
	WORD $0xf021                   // andl         %esi, %eax
	WORD $0x2144; BYTE $0xf6       // andl         %r14d, %esi
	WORD $0x8941; BYTE $0xf6       // movl         %esi, %r14d

LBB16_11:
	LONG $0x140c8d4d               // leaq         (%r12,%rdx), %r9
	LONG $0xff478d44               // leal         $-1(%rdi), %r8d
	WORD $0x2141; BYTE $0xf8       // andl         %edi, %r8d
	LONG $0x0243850f; WORD $0x0000 // jne          LBB16_12, $579(%rip)
	WORD $0x588d; BYTE $0xff       // leal         $-1(%rax), %ebx
	WORD $0xc321                   // andl         %eax, %ebx
	LONG $0x022d850f; WORD $0x0000 // jne          LBB16_16, $557(%rip)
	LONG $0xff5e8d41               // leal         $-1(%r14), %ebx
	WORD $0x2144; BYTE $0xf3       // andl         %r14d, %ebx
	LONG $0x0220850f; WORD $0x0000 // jne          LBB16_16, $544(%rip)
	WORD $0xff85                   // testl        %edi, %edi
	LONG $0x001b840f; WORD $0x0000 // je           LBB16_21, $27(%rip)
	WORD $0x894c; BYTE $0xce       // movq         %r9, %rsi
	WORD $0x294c; BYTE $0xfe       // subq         %r15, %rsi
	WORD $0xbc0f; BYTE $0xff       // bsfl         %edi, %edi
	WORD $0x0148; BYTE $0xf7       // addq         %rsi, %rdi
	LONG $0xb87d8348; BYTE $0xff   // cmpq         $-1, $-72(%rbp)
	LONG $0x0216850f; WORD $0x0000 // jne          LBB16_14, $534(%rip)
	LONG $0xb87d8948               // movq         %rdi, $-72(%rbp)

LBB16_21:
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x0019840f; WORD $0x0000 // je           LBB16_24, $25(%rip)
	WORD $0x894c; BYTE $0xce       // movq         %r9, %rsi
	WORD $0x294c; BYTE $0xfe       // subq         %r15, %rsi
	WORD $0xbc0f; BYTE $0xf8       // bsfl         %eax, %edi
	WORD $0x0148; BYTE $0xf7       // addq         %rsi, %rdi
	LONG $0xfffa8349               // cmpq         $-1, %r10
	LONG $0x01f4850f; WORD $0x0000 // jne          LBB16_14, $500(%rip)
	WORD $0x8949; BYTE $0xfa       // movq         %rdi, %r10

LBB16_24:
	WORD $0x8545; BYTE $0xf6       // testl        %r14d, %r14d
	LONG $0x0017840f; WORD $0x0000 // je           LBB16_27, $23(%rip)
	WORD $0x294d; BYTE $0xf9       // subq         %r15, %r9
	LONG $0xfebc0f41               // bsfl         %r14d, %edi
	WORD $0x014c; BYTE $0xcf       // addq         %r9, %rdi
	LONG $0xfffb8349               // cmpq         $-1, %r11
	LONG $0x01d4850f; WORD $0x0000 // jne          LBB16_14, $468(%rip)
	WORD $0x8949; BYTE $0xfb       // movq         %rdi, %r11

LBB16_27:
	WORD $0xf983; BYTE $0x10       // cmpl         $16, %ecx
	LONG $0x00c5850f; WORD $0x0000 // jne          LBB16_59, $197(%rip)
	LONG $0xf0c58349               // addq         $-16, %r13
	LONG $0x10c28348               // addq         $16, %rdx
	LONG $0x0ffd8349               // cmpq         $15, %r13
	LONG $0xfee9870f; WORD $0xffff // ja           LBB16_9, $-279(%rip)
	WORD $0x0149; BYTE $0xd4       // addq         %rdx, %r12
	LONG $0xb0553b48               // cmpq         $-80(%rbp), %rdx
	LONG $0xc0758b48               // movq         $-64(%rbp), %rsi
	LONG $0xc85d8b48               // movq         $-56(%rbp), %rbx
	LONG $0x00ac840f; WORD $0x0000 // je           LBB16_41, $172(%rip)

LBB16_30:
	LONG $0x2c048d4b                           // leaq         (%r12,%r13), %rax
	LONG $0x210d8d48; WORD $0x0002; BYTE $0x00 // leaq         $545(%rip), %rcx  /* LJTI16_0(%rip) */
	LONG $0x000010e9; BYTE $0x00               // jmp          LBB16_31, $16(%rip)
	LONG $0x90909090                           // .p2align 4, 0x90

LBB16_39:
	WORD $0x8949; BYTE $0xd4       // movq         %rdx, %r12
	WORD $0xff49; BYTE $0xcd       // decq         %r13
	LONG $0x01a4840f; WORD $0x0000 // je           LBB16_40, $420(%rip)

LBB16_31:
	LONG $0x3cbe0f41; BYTE $0x24   // movsbl       (%r12), %edi
	WORD $0xc783; BYTE $0xd5       // addl         $-43, %edi
	WORD $0xff83; BYTE $0x3a       // cmpl         $58, %edi
	LONG $0x007b870f; WORD $0x0000 // ja           LBB16_41, $123(%rip)
	LONG $0x24548d49; BYTE $0x01   // leaq         $1(%r12), %rdx
	LONG $0xb93c6348               // movslq       (%rcx,%rdi,4), %rdi
	WORD $0x0148; BYTE $0xcf       // addq         %rcx, %rdi
	JMP  DI

LBB16_37:
	WORD $0x8948; BYTE $0xd7       // movq         %rdx, %rdi
	WORD $0x294c; BYTE $0xff       // subq         %r15, %rdi
	LONG $0xfffb8349               // cmpq         $-1, %r11
	LONG $0x018d850f; WORD $0x0000 // jne          LBB16_60, $397(%rip)
	WORD $0xff48; BYTE $0xcf       // decq         %rdi
	WORD $0x8949; BYTE $0xfb       // movq         %rdi, %r11
	LONG $0xffffbae9; BYTE $0xff   // jmp          LBB16_39, $-70(%rip)

LBB16_35:
	WORD $0x8948; BYTE $0xd7       // movq         %rdx, %rdi
	WORD $0x294c; BYTE $0xff       // subq         %r15, %rdi
	LONG $0xfffa8349               // cmpq         $-1, %r10
	LONG $0x0172850f; WORD $0x0000 // jne          LBB16_60, $370(%rip)
	WORD $0xff48; BYTE $0xcf       // decq         %rdi
	WORD $0x8949; BYTE $0xfa       // movq         %rdi, %r10
	LONG $0xffff9fe9; BYTE $0xff   // jmp          LBB16_39, $-97(%rip)

LBB16_33:
	WORD $0x8948; BYTE $0xd7       // movq         %rdx, %rdi
	WORD $0x294c; BYTE $0xff       // subq         %r15, %rdi
	LONG $0xb87d8348; BYTE $0xff   // cmpq         $-1, $-72(%rbp)
	LONG $0x0156850f; WORD $0x0000 // jne          LBB16_60, $342(%rip)
	WORD $0xff48; BYTE $0xcf       // decq         %rdi
	LONG $0xb87d8948               // movq         %rdi, $-72(%rbp)
	LONG $0xffff82e9; BYTE $0xff   // jmp          LBB16_39, $-126(%rip)

LBB16_1:
	LONG $0xffc7c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rdi
	LONG $0x00014ee9; BYTE $0x00               // jmp          LBB16_56, $334(%rip)

LBB16_59:
	WORD $0x0148; BYTE $0xd1 // addq         %rdx, %rcx
	WORD $0x0149; BYTE $0xcc // addq         %rcx, %r12
	LONG $0xc0758b48         // movq         $-64(%rbp), %rsi
	LONG $0xc85d8b48         // movq         $-56(%rbp), %rbx

LBB16_41:
	LONG $0xffc7c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rdi
	WORD $0x854d; BYTE $0xd2                   // testq        %r10, %r10
	LONG $0x0130840f; WORD $0x0000             // je           LBB16_56, $304(%rip)

LBB16_42:
	WORD $0x854d; BYTE $0xdb       // testq        %r11, %r11
	LONG $0x0127840f; WORD $0x0000 // je           LBB16_56, $295(%rip)
	WORD $0x894c; BYTE $0xda       // movq         %r11, %rdx
	LONG $0xb85d8b4c               // movq         $-72(%rbp), %r11
	WORD $0x854d; BYTE $0xdb       // testq        %r11, %r11
	LONG $0xd0458b48               // movq         $-48(%rbp), %rax
	LONG $0x0113840f; WORD $0x0000 // je           LBB16_56, $275(%rip)
	WORD $0x294d; BYTE $0xfc       // subq         %r15, %r12
	LONG $0x244c8d49; BYTE $0xff   // leaq         $-1(%r12), %rcx
	WORD $0x3949; BYTE $0xca       // cmpq         %rcx, %r10
	LONG $0x003c840f; WORD $0x0000 // je           LBB16_47, $60(%rip)
	WORD $0x3949; BYTE $0xcb       // cmpq         %rcx, %r11
	LONG $0x0033840f; WORD $0x0000 // je           LBB16_47, $51(%rip)
	WORD $0x3948; BYTE $0xca       // cmpq         %rcx, %rdx
	LONG $0x002a840f; WORD $0x0000 // je           LBB16_47, $42(%rip)
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0x00358e0f; WORD $0x0000 // jle          LBB16_51, $53(%rip)
	LONG $0xff4a8d48               // leaq         $-1(%rdx), %rcx
	WORD $0x3949; BYTE $0xca       // cmpq         %rcx, %r10
	LONG $0x0028840f; WORD $0x0000 // je           LBB16_51, $40(%rip)
	WORD $0xf748; BYTE $0xd2       // notq         %rdx
	WORD $0x8948; BYTE $0xd7       // movq         %rdx, %rdi
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0x0098890f; WORD $0x0000 // jns          LBB16_57, $152(%rip)
	LONG $0x0000c6e9; BYTE $0x00   // jmp          LBB16_56, $198(%rip)

LBB16_47:
	WORD $0xf749; BYTE $0xdc       // negq         %r12
	WORD $0x894c; BYTE $0xe7       // movq         %r12, %rdi
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0x0084890f; WORD $0x0000 // jns          LBB16_57, $132(%rip)
	LONG $0x0000b2e9; BYTE $0x00   // jmp          LBB16_56, $178(%rip)

LBB16_51:
	WORD $0x894c; BYTE $0xda       // movq         %r11, %rdx
	WORD $0x094c; BYTE $0xd2       // orq          %r10, %rdx
	WORD $0x394d; BYTE $0xd3       // cmpq         %r10, %r11
	LONG $0x001d8c0f; WORD $0x0000 // jl           LBB16_54, $29(%rip)
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0x0014880f; WORD $0x0000 // js           LBB16_54, $20(%rip)
	WORD $0xf749; BYTE $0xd3       // notq         %r11
	WORD $0x894c; BYTE $0xdf       // movq         %r11, %rdi
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0x0058890f; WORD $0x0000 // jns          LBB16_57, $88(%rip)
	LONG $0x000086e9; BYTE $0x00   // jmp          LBB16_56, $134(%rip)

LBB16_54:
	LONG $0xff4a8d49               // leaq         $-1(%r10), %rcx
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	WORD $0xf749; BYTE $0xd2       // notq         %r10
	LONG $0xd4480f4d               // cmovsq       %r12, %r10
	WORD $0x3949; BYTE $0xcb       // cmpq         %rcx, %r11
	LONG $0xd4450f4d               // cmovneq      %r12, %r10
	WORD $0x894c; BYTE $0xd7       // movq         %r10, %rdi
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0x0032890f; WORD $0x0000 // jns          LBB16_57, $50(%rip)
	LONG $0x000060e9; BYTE $0x00   // jmp          LBB16_56, $96(%rip)

LBB16_16:
	WORD $0x294d; BYTE $0xf9     // subq         %r15, %r9
	WORD $0xbc0f; BYTE $0xfb     // bsfl         %ebx, %edi
	LONG $0x000007e9; BYTE $0x00 // jmp          LBB16_13, $7(%rip)

LBB16_12:
	WORD $0x294d; BYTE $0xf9 // subq         %r15, %r9
	LONG $0xf8bc0f41         // bsfl         %r8d, %edi

LBB16_13:
	WORD $0x014c; BYTE $0xcf // addq         %r9, %rdi

LBB16_14:
	WORD $0xf748; BYTE $0xd7       // notq         %rdi
	LONG $0xc0758b48               // movq         $-64(%rbp), %rsi
	LONG $0xc85d8b48               // movq         $-56(%rbp), %rbx
	LONG $0xd0458b48               // movq         $-48(%rbp), %rax
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0x0033880f; WORD $0x0000 // js           LBB16_56, $51(%rip)

LBB16_57:
	WORD $0x0148; BYTE $0xc7     // addq         %rax, %rdi
	WORD $0x8948; BYTE $0xfb     // movq         %rdi, %rbx
	LONG $0x000036e9; BYTE $0x00 // jmp          LBB16_58, $54(%rip)

LBB16_40:
	WORD $0x8949; BYTE $0xc4                   // movq         %rax, %r12
	LONG $0xffc7c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rdi
	WORD $0x854d; BYTE $0xd2                   // testq        %r10, %r10
	LONG $0xfee5850f; WORD $0xffff             // jne          LBB16_42, $-283(%rip)
	LONG $0x000010e9; BYTE $0x00               // jmp          LBB16_56, $16(%rip)

LBB16_60:
	WORD $0xf748; BYTE $0xdf       // negq         %rdi
	LONG $0xd0458b48               // movq         $-48(%rbp), %rax
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0xffcd890f; WORD $0xffff // jns          LBB16_57, $-51(%rip)

LBB16_56:
	WORD $0x2948; BYTE $0xfb                   // subq         %rdi, %rbx
	LONG $0xfec38348                           // addq         $-2, %rbx
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax

LBB16_58:
	WORD $0x8948; BYTE $0x1e // movq         %rbx, (%rsi)
	LONG $0x28c48348         // addq         $40, %rsp
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

LBB16_7:
	QUAD $0xffffffffb845c748                   // movq         $-1, $-72(%rbp)
	WORD $0x894d; BYTE $0xfc                   // movq         %r15, %r12
	LONG $0xffc2c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r10
	LONG $0xffc3c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r11
	LONG $0xfffdd6e9; BYTE $0xff               // jmp          LBB16_30, $-554(%rip)
	WORD $0x9090                               // .p2align 2, 0x90

	// .set L16_0_set_37, LBB16_37-LJTI16_0
	// .set L16_0_set_41, LBB16_41-LJTI16_0
	// .set L16_0_set_33, LBB16_33-LJTI16_0
	// .set L16_0_set_39, LBB16_39-LJTI16_0
	// .set L16_0_set_35, LBB16_35-LJTI16_0
LJTI16_0:
	LONG $0xfffffe13                           // .long L16_0_set_37
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe13                           // .long L16_0_set_37
	LONG $0xfffffe49                           // .long L16_0_set_33
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffde8                           // .long L16_0_set_39
	LONG $0xfffffde8                           // .long L16_0_set_39
	LONG $0xfffffde8                           // .long L16_0_set_39
	LONG $0xfffffde8                           // .long L16_0_set_39
	LONG $0xfffffde8                           // .long L16_0_set_39
	LONG $0xfffffde8                           // .long L16_0_set_39
	LONG $0xfffffde8                           // .long L16_0_set_39
	LONG $0xfffffde8                           // .long L16_0_set_39
	LONG $0xfffffde8                           // .long L16_0_set_39
	LONG $0xfffffde8                           // .long L16_0_set_39
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe2e                           // .long L16_0_set_35
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe80                           // .long L16_0_set_41
	LONG $0xfffffe2e                           // .long L16_0_set_35
	QUAD $0x0000000000000000; LONG $0x00000000 // .p2align 4, 0x00

LCPI17_0:
	QUAD $0x2f2f2f2f2f2f2f2f; QUAD $0x2f2f2f2f2f2f2f2f // .space 16, '////////////////'

LCPI17_1:
	QUAD $0x3a3a3a3a3a3a3a3a; QUAD $0x3a3a3a3a3a3a3a3a // .space 16, '::::::::::::::::'

LCPI17_2:
	QUAD $0x2b2b2b2b2b2b2b2b; QUAD $0x2b2b2b2b2b2b2b2b // .space 16, '++++++++++++++++'

LCPI17_3:
	QUAD $0x2d2d2d2d2d2d2d2d; QUAD $0x2d2d2d2d2d2d2d2d // .space 16, '----------------'

LCPI17_4:
	QUAD $0xdfdfdfdfdfdfdfdf; QUAD $0xdfdfdfdfdfdfdfdf // .space 16, '\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf'

LCPI17_5:
	QUAD $0x2e2e2e2e2e2e2e2e; QUAD $0x2e2e2e2e2e2e2e2e // .space 16, '................'

LCPI17_6:
	QUAD $0x4545454545454545; QUAD $0x4545454545454545 // .space 16, 'EEEEEEEEEEEEEEEE'

	// .p2align 4, 0x90
_skip_number:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	BYTE $0x50                                 // pushq        %rax
	WORD $0x8b4c; BYTE $0x07                   // movq         (%rdi), %r8
	LONG $0x086f8b4c                           // movq         $8(%rdi), %r13
	WORD $0x8b4c; BYTE $0x26                   // movq         (%rsi), %r12
	WORD $0xc931                               // xorl         %ecx, %ecx
	LONG $0x203c8043; BYTE $0x2d               // cmpb         $45, (%r8,%r12)
	LONG $0x200c8d4f                           // leaq         (%r8,%r12), %r9
	WORD $0x940f; BYTE $0xc1                   // sete         %cl
	WORD $0x0149; BYTE $0xc9                   // addq         %rcx, %r9
	WORD $0x2949; BYTE $0xcd                   // subq         %rcx, %r13
	LONG $0x0396840f; WORD $0x0000             // je           LBB17_60, $918(%rip)
	WORD $0x8a41; BYTE $0x09                   // movb         (%r9), %cl
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	WORD $0x394d; BYTE $0xec                   // cmpq         %r13, %r12
	LONG $0x000c830f; WORD $0x0000             // jae          LBB17_3, $12(%rip)
	WORD $0x518d; BYTE $0xd0                   // leal         $-48(%rcx), %edx
	WORD $0xfa80; BYTE $0x09                   // cmpb         $9, %dl
	LONG $0x035a870f; WORD $0x0000             // ja           LBB17_57, $858(%rip)

LBB17_3:
	WORD $0xf980; BYTE $0x30               // cmpb         $48, %cl
	LONG $0x0036850f; WORD $0x0000         // jne          LBB17_7, $54(%rip)
	LONG $0x000001bf; BYTE $0x00           // movl         $1, %edi
	LONG $0x01fd8349                       // cmpq         $1, %r13
	LONG $0x02bf840f; WORD $0x0000         // je           LBB17_48, $703(%rip)
	LONG $0x01498a41                       // movb         $1(%r9), %cl
	WORD $0xc180; BYTE $0xd2               // addb         $-46, %cl
	WORD $0xf980; BYTE $0x37               // cmpb         $55, %cl
	LONG $0x02af870f; WORD $0x0000         // ja           LBB17_48, $687(%rip)
	WORD $0xb60f; BYTE $0xc9               // movzbl       %cl, %ecx
	QUAD $0x000000800001ba48; WORD $0x0080 // movabsq      $36028797027352577, %rdx
	LONG $0xcaa30f48                       // btq          %rcx, %rdx
	LONG $0x0298830f; WORD $0x0000         // jae          LBB17_48, $664(%rip)

LBB17_7:
	LONG $0x10fd8349                           // cmpq         $16, %r13
	LONG $0x033a820f; WORD $0x0000             // jb           LBB17_61, $826(%rip)
	WORD $0x894c; BYTE $0xe0                   // movq         %r12, %rax
	LONG $0xd045894c                           // movq         %r8, $-48(%rbp)
	LONG $0xffc6c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r14
	QUAD $0xfffffee0056f79c5                   // vmovdqa      $-288(%rip), %xmm8  /* LCPI17_0(%rip) */
	QUAD $0xfffffee80d6f79c5                   // vmovdqa      $-280(%rip), %xmm9  /* LCPI17_1(%rip) */
	QUAD $0xfffffef0156f79c5                   // vmovdqa      $-272(%rip), %xmm10  /* LCPI17_2(%rip) */
	QUAD $0xfffffef81d6f79c5                   // vmovdqa      $-264(%rip), %xmm11  /* LCPI17_3(%rip) */
	QUAD $0xffffff00256ff9c5                   // vmovdqa      $-256(%rip), %xmm4  /* LCPI17_4(%rip) */
	QUAD $0xffffff082d6ff9c5                   // vmovdqa      $-248(%rip), %xmm5  /* LCPI17_5(%rip) */
	QUAD $0xffffff10356ff9c5                   // vmovdqa      $-240(%rip), %xmm6  /* LCPI17_6(%rip) */
	LONG $0xffffbc41; WORD $0xffff             // movl         $4294967295, %r12d
	LONG $0xffc3c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r11
	LONG $0xffc2c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r10
	WORD $0x894d; BYTE $0xcf                   // movq         %r9, %r15
	QUAD $0x9090909090909090; BYTE $0x90       // .p2align 4, 0x90

LBB17_9:
	LONG $0x6f7ac1c4; BYTE $0x3f   // vmovdqu      (%r15), %xmm7
	LONG $0x6441c1c4; BYTE $0xc0   // vpcmpgtb     %xmm8, %xmm7, %xmm0
	LONG $0xcf64b1c5               // vpcmpgtb     %xmm7, %xmm9, %xmm1
	LONG $0xc1dbf9c5               // vpand        %xmm1, %xmm0, %xmm0
	LONG $0xcf74a9c5               // vpcmpeqb     %xmm7, %xmm10, %xmm1
	LONG $0xd774a1c5               // vpcmpeqb     %xmm7, %xmm11, %xmm2
	LONG $0xc9ebe9c5               // vpor         %xmm1, %xmm2, %xmm1
	LONG $0xd4dbc1c5               // vpand        %xmm4, %xmm7, %xmm2
	LONG $0xd674e9c5               // vpcmpeqb     %xmm6, %xmm2, %xmm2
	LONG $0xfd74c1c5               // vpcmpeqb     %xmm5, %xmm7, %xmm7
	LONG $0xdfebe9c5               // vpor         %xmm7, %xmm2, %xmm3
	LONG $0xc0ebf1c5               // vpor         %xmm0, %xmm1, %xmm0
	LONG $0xc0ebe1c5               // vpor         %xmm0, %xmm3, %xmm0
	LONG $0xffd7f9c5               // vpmovmskb    %xmm7, %edi
	LONG $0xc2d779c5               // vpmovmskb    %xmm2, %r8d
	LONG $0xd1d7f9c5               // vpmovmskb    %xmm1, %edx
	LONG $0xc8d7f9c5               // vpmovmskb    %xmm0, %ecx
	WORD $0x314c; BYTE $0xe1       // xorq         %r12, %rcx
	LONG $0xc9bc0f48               // bsfq         %rcx, %rcx
	WORD $0xf983; BYTE $0x10       // cmpl         $16, %ecx
	LONG $0x0012840f; WORD $0x0000 // je           LBB17_11, $18(%rip)
	LONG $0xffffffbb; BYTE $0xff   // movl         $-1, %ebx
	WORD $0xe3d3                   // shll         %cl, %ebx
	WORD $0xd3f7                   // notl         %ebx
	WORD $0xdf21                   // andl         %ebx, %edi
	WORD $0x2141; BYTE $0xd8       // andl         %ebx, %r8d
	WORD $0xd321                   // andl         %edx, %ebx
	WORD $0xda89                   // movl         %ebx, %edx

LBB17_11:
	WORD $0x5f8d; BYTE $0xff       // leal         $-1(%rdi), %ebx
	WORD $0xfb21                   // andl         %edi, %ebx
	LONG $0x0200850f; WORD $0x0000 // jne          LBB17_53, $512(%rip)
	LONG $0xff588d41               // leal         $-1(%r8), %ebx
	WORD $0x2144; BYTE $0xc3       // andl         %r8d, %ebx
	LONG $0x01f3850f; WORD $0x0000 // jne          LBB17_53, $499(%rip)
	WORD $0x5a8d; BYTE $0xff       // leal         $-1(%rdx), %ebx
	WORD $0xd321                   // andl         %edx, %ebx
	LONG $0x01e8850f; WORD $0x0000 // jne          LBB17_53, $488(%rip)
	WORD $0xff85                   // testl        %edi, %edi
	LONG $0x0019840f; WORD $0x0000 // je           LBB17_17, $25(%rip)
	WORD $0x894c; BYTE $0xfb       // movq         %r15, %rbx
	WORD $0x294c; BYTE $0xcb       // subq         %r9, %rbx
	WORD $0xbc0f; BYTE $0xff       // bsfl         %edi, %edi
	WORD $0x0148; BYTE $0xdf       // addq         %rbx, %rdi
	LONG $0xfffa8349               // cmpq         $-1, %r10
	LONG $0x01d3850f; WORD $0x0000 // jne          LBB17_54, $467(%rip)
	WORD $0x8949; BYTE $0xfa       // movq         %rdi, %r10

LBB17_17:
	WORD $0x8545; BYTE $0xc0       // testl        %r8d, %r8d
	LONG $0x001a840f; WORD $0x0000 // je           LBB17_20, $26(%rip)
	WORD $0x894c; BYTE $0xfb       // movq         %r15, %rbx
	WORD $0x294c; BYTE $0xcb       // subq         %r9, %rbx
	LONG $0xf8bc0f41               // bsfl         %r8d, %edi
	WORD $0x0148; BYTE $0xdf       // addq         %rbx, %rdi
	LONG $0xfffb8349               // cmpq         $-1, %r11
	LONG $0x01b0850f; WORD $0x0000 // jne          LBB17_54, $432(%rip)
	WORD $0x8949; BYTE $0xfb       // movq         %rdi, %r11

LBB17_20:
	WORD $0xd285                   // testl        %edx, %edx
	LONG $0x0019840f; WORD $0x0000 // je           LBB17_23, $25(%rip)
	WORD $0x894c; BYTE $0xfb       // movq         %r15, %rbx
	WORD $0x294c; BYTE $0xcb       // subq         %r9, %rbx
	WORD $0xbc0f; BYTE $0xfa       // bsfl         %edx, %edi
	WORD $0x0148; BYTE $0xdf       // addq         %rbx, %rdi
	LONG $0xfffe8349               // cmpq         $-1, %r14
	LONG $0x018f850f; WORD $0x0000 // jne          LBB17_54, $399(%rip)
	WORD $0x8949; BYTE $0xfe       // movq         %rdi, %r14

LBB17_23:
	WORD $0xf983; BYTE $0x10       // cmpl         $16, %ecx
	LONG $0x00b1850f; WORD $0x0000 // jne          LBB17_36, $177(%rip)
	LONG $0x10c78349               // addq         $16, %r15
	LONG $0xf0c58349               // addq         $-16, %r13
	LONG $0x0ffd8349               // cmpq         $15, %r13
	LONG $0xfef5870f; WORD $0xffff // ja           LBB17_9, $-267(%rip)
	WORD $0x854d; BYTE $0xed       // testq        %r13, %r13
	LONG $0xd0458b4c               // movq         $-48(%rbp), %r8
	WORD $0x8949; BYTE $0xc4       // movq         %rax, %r12
	LONG $0x0099840f; WORD $0x0000 // je           LBB17_37, $153(%rip)

LBB17_26:
	LONG $0x2f0c8d4b                           // leaq         (%r15,%r13), %rcx
	LONG $0xce158d48; WORD $0x0001; BYTE $0x00 // leaq         $462(%rip), %rdx  /* LJTI17_0(%rip) */
	LONG $0x000011e9; BYTE $0x00               // jmp          LBB17_28, $17(%rip)
	LONG $0x90909090; BYTE $0x90               // .p2align 4, 0x90

LBB17_27:
	WORD $0x8949; BYTE $0xdf       // movq         %rbx, %r15
	WORD $0xff49; BYTE $0xcd       // decq         %r13
	LONG $0x014f840f; WORD $0x0000 // je           LBB17_55, $335(%rip)

LBB17_28:
	LONG $0x3fbe0f41               // movsbl       (%r15), %edi
	WORD $0xc783; BYTE $0xd5       // addl         $-43, %edi
	WORD $0xff83; BYTE $0x3a       // cmpl         $58, %edi
	LONG $0x0068870f; WORD $0x0000 // ja           LBB17_37, $104(%rip)
	LONG $0x015f8d49               // leaq         $1(%r15), %rbx
	LONG $0xba3c6348               // movslq       (%rdx,%rdi,4), %rdi
	WORD $0x0148; BYTE $0xd7       // addq         %rdx, %rdi
	JMP  DI

LBB17_30:
	WORD $0x8948; BYTE $0xdf       // movq         %rbx, %rdi
	WORD $0x294c; BYTE $0xcf       // subq         %r9, %rdi
	LONG $0xfffe8349               // cmpq         $-1, %r14
	LONG $0x0157850f; WORD $0x0000 // jne          LBB17_62, $343(%rip)
	WORD $0xff48; BYTE $0xcf       // decq         %rdi
	WORD $0x8949; BYTE $0xfe       // movq         %rdi, %r14
	LONG $0xffffbce9; BYTE $0xff   // jmp          LBB17_27, $-68(%rip)

LBB17_32:
	WORD $0x8948; BYTE $0xdf       // movq         %rbx, %rdi
	WORD $0x294c; BYTE $0xcf       // subq         %r9, %rdi
	LONG $0xfffb8349               // cmpq         $-1, %r11
	LONG $0x013c850f; WORD $0x0000 // jne          LBB17_62, $316(%rip)
	WORD $0xff48; BYTE $0xcf       // decq         %rdi
	WORD $0x8949; BYTE $0xfb       // movq         %rdi, %r11
	LONG $0xffffa1e9; BYTE $0xff   // jmp          LBB17_27, $-95(%rip)

LBB17_34:
	WORD $0x8948; BYTE $0xdf       // movq         %rbx, %rdi
	WORD $0x294c; BYTE $0xcf       // subq         %r9, %rdi
	LONG $0xfffa8349               // cmpq         $-1, %r10
	LONG $0x0121850f; WORD $0x0000 // jne          LBB17_62, $289(%rip)
	WORD $0xff48; BYTE $0xcf       // decq         %rdi
	WORD $0x8949; BYTE $0xfa       // movq         %rdi, %r10
	LONG $0xffff86e9; BYTE $0xff   // jmp          LBB17_27, $-122(%rip)

LBB17_36:
	WORD $0x0149; BYTE $0xcf // addq         %rcx, %r15
	LONG $0xd0458b4c         // movq         $-48(%rbp), %r8
	WORD $0x8949; BYTE $0xc4 // movq         %rax, %r12

LBB17_37:
	LONG $0xffc7c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rdi
	WORD $0x854d; BYTE $0xdb                   // testq        %r11, %r11
	LONG $0x00da840f; WORD $0x0000             // je           LBB17_56, $218(%rip)

LBB17_38:
	WORD $0x854d; BYTE $0xf6       // testq        %r14, %r14
	LONG $0x00d1840f; WORD $0x0000 // je           LBB17_56, $209(%rip)
	WORD $0x854d; BYTE $0xd2       // testq        %r10, %r10
	LONG $0x00c8840f; WORD $0x0000 // je           LBB17_56, $200(%rip)
	WORD $0x294d; BYTE $0xcf       // subq         %r9, %r15
	LONG $0xff4f8d49               // leaq         $-1(%r15), %rcx
	WORD $0x3949; BYTE $0xcb       // cmpq         %rcx, %r11
	LONG $0x0033840f; WORD $0x0000 // je           LBB17_46, $51(%rip)
	WORD $0x3949; BYTE $0xca       // cmpq         %rcx, %r10
	LONG $0x002a840f; WORD $0x0000 // je           LBB17_46, $42(%rip)
	WORD $0x3949; BYTE $0xce       // cmpq         %rcx, %r14
	LONG $0x0021840f; WORD $0x0000 // je           LBB17_46, $33(%rip)
	WORD $0x854d; BYTE $0xf6       // testq        %r14, %r14
	LONG $0x00328e0f; WORD $0x0000 // jle          LBB17_49, $50(%rip)
	LONG $0xff4e8d49               // leaq         $-1(%r14), %rcx
	WORD $0x3949; BYTE $0xcb       // cmpq         %rcx, %r11
	LONG $0x0025840f; WORD $0x0000 // je           LBB17_49, $37(%rip)
	WORD $0xf749; BYTE $0xd6       // notq         %r14
	WORD $0x894c; BYTE $0xf7       // movq         %r14, %rdi
	LONG $0x000006e9; BYTE $0x00   // jmp          LBB17_47, $6(%rip)

LBB17_46:
	WORD $0xf749; BYTE $0xdf // negq         %r15
	WORD $0x894c; BYTE $0xff // movq         %r15, %rdi

LBB17_47:
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0x0076880f; WORD $0x0000 // js           LBB17_56, $118(%rip)

LBB17_48:
	WORD $0x0149; BYTE $0xf9     // addq         %rdi, %r9
	WORD $0x894c; BYTE $0xe0     // movq         %r12, %rax
	LONG $0x000078e9; BYTE $0x00 // jmp          LBB17_57, $120(%rip)

LBB17_49:
	WORD $0x894c; BYTE $0xd1       // movq         %r10, %rcx
	WORD $0x094c; BYTE $0xd9       // orq          %r11, %rcx
	WORD $0x394d; BYTE $0xda       // cmpq         %r11, %r10
	LONG $0x00148c0f; WORD $0x0000 // jl           LBB17_52, $20(%rip)
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0x000b880f; WORD $0x0000 // js           LBB17_52, $11(%rip)
	WORD $0xf749; BYTE $0xd2       // notq         %r10
	WORD $0x894c; BYTE $0xd7       // movq         %r10, %rdi
	LONG $0xffffc9e9; BYTE $0xff   // jmp          LBB17_47, $-55(%rip)

LBB17_52:
	LONG $0xff538d49             // leaq         $-1(%r11), %rdx
	WORD $0x8548; BYTE $0xc9     // testq        %rcx, %rcx
	WORD $0xf749; BYTE $0xd3     // notq         %r11
	LONG $0xdf480f4d             // cmovsq       %r15, %r11
	WORD $0x3949; BYTE $0xd2     // cmpq         %rdx, %r10
	LONG $0xdf450f4d             // cmovneq      %r15, %r11
	WORD $0x894c; BYTE $0xdf     // movq         %r11, %rdi
	LONG $0xfffface9; BYTE $0xff // jmp          LBB17_47, $-84(%rip)

LBB17_53:
	WORD $0x294d; BYTE $0xcf // subq         %r9, %r15
	WORD $0xbc0f; BYTE $0xfb // bsfl         %ebx, %edi
	WORD $0x014c; BYTE $0xff // addq         %r15, %rdi

LBB17_54:
	WORD $0xf748; BYTE $0xd7     // notq         %rdi
	LONG $0xd0458b4c             // movq         $-48(%rbp), %r8
	WORD $0x8949; BYTE $0xc4     // movq         %rax, %r12
	LONG $0xffff94e9; BYTE $0xff // jmp          LBB17_47, $-108(%rip)

LBB17_55:
	WORD $0x8949; BYTE $0xcf                   // movq         %rcx, %r15
	LONG $0xffc7c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rdi
	WORD $0x854d; BYTE $0xdb                   // testq        %r11, %r11
	LONG $0xff26850f; WORD $0xffff             // jne          LBB17_38, $-218(%rip)

LBB17_56:
	WORD $0xf748; BYTE $0xd7                   // notq         %rdi
	WORD $0x0149; BYTE $0xf9                   // addq         %rdi, %r9
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax

LBB17_57:
	WORD $0x294d; BYTE $0xc1 // subq         %r8, %r9
	WORD $0x894c; BYTE $0x0e // movq         %r9, (%rsi)
	LONG $0x08c48348         // addq         $8, %rsp
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

LBB17_62:
	WORD $0xf748; BYTE $0xdf     // negq         %rdi
	LONG $0xffff57e9; BYTE $0xff // jmp          LBB17_47, $-169(%rip)

LBB17_60:
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	LONG $0xffffd7e9; BYTE $0xff               // jmp          LBB17_57, $-41(%rip)

LBB17_61:
	LONG $0xffc2c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r10
	WORD $0x894d; BYTE $0xcf                   // movq         %r9, %r15
	LONG $0xffc3c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r11
	LONG $0xffc6c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r14
	LONG $0xfffe2ae9; BYTE $0xff               // jmp          LBB17_26, $-470(%rip)
	WORD $0x9090; BYTE $0x90                   // .p2align 2, 0x90

	// .set L17_0_set_30, LBB17_30-LJTI17_0
	// .set L17_0_set_37, LBB17_37-LJTI17_0
	// .set L17_0_set_34, LBB17_34-LJTI17_0
	// .set L17_0_set_27, LBB17_27-LJTI17_0
	// .set L17_0_set_32, LBB17_32-LJTI17_0
LJTI17_0:
	LONG $0xfffffe65 // .long L17_0_set_30
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffe65 // .long L17_0_set_30
	LONG $0xfffffe9b // .long L17_0_set_34
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffe3c // .long L17_0_set_27
	LONG $0xfffffe3c // .long L17_0_set_27
	LONG $0xfffffe3c // .long L17_0_set_27
	LONG $0xfffffe3c // .long L17_0_set_27
	LONG $0xfffffe3c // .long L17_0_set_27
	LONG $0xfffffe3c // .long L17_0_set_27
	LONG $0xfffffe3c // .long L17_0_set_27
	LONG $0xfffffe3c // .long L17_0_set_27
	LONG $0xfffffe3c // .long L17_0_set_27
	LONG $0xfffffe3c // .long L17_0_set_27
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffe80 // .long L17_0_set_32
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffec0 // .long L17_0_set_37
	LONG $0xfffffe80 // .long L17_0_set_32

	// .p2align 4, 0x00
LCPI18_0:
	LONG $0x00000001 // .long 1
	LONG $0x00000000 // .long 0
	LONG $0x00000000 // .long 0
	LONG $0x00000000 // .long 0

LCPI18_1:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI18_2:
	QUAD $0x0909090909090909; QUAD $0x0909090909090909 // .space 16, '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'

LCPI18_3:
	QUAD $0x0a0a0a0a0a0a0a0a; QUAD $0x0a0a0a0a0a0a0a0a // .space 16, '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'

LCPI18_4:
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'

	// .p2align 4, 0x90
_skip_one:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	LONG $0x18ec8348                           // subq         $24, %rsp
	LONG $0xc84d8948                           // movq         %rcx, $-56(%rbp)
	WORD $0x8949; BYTE $0xd7                   // movq         %rdx, %r15
	WORD $0x8949; BYTE $0xfc                   // movq         %rdi, %r12
	QUAD $0xffffff8d056ff9c5                   // vmovdqa      $-115(%rip), %xmm0  /* LCPI18_0(%rip) */
	LONG $0x027ffac5                           // vmovdqu      %xmm0, (%rdx)
	LONG $0xffc6c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r14
	QUAD $0x000100002600bd49; WORD $0x0000     // movabsq      $4294977024, %r13
	QUAD $0xffffff801d6ff9c5                   // vmovdqa      $-128(%rip), %xmm3  /* LCPI18_1(%rip) */
	QUAD $0xffffff88256ff9c5                   // vmovdqa      $-120(%rip), %xmm4  /* LCPI18_2(%rip) */
	QUAD $0xffffff902d6ff9c5                   // vmovdqa      $-112(%rip), %xmm5  /* LCPI18_3(%rip) */
	QUAD $0xffffff98356ff9c5                   // vmovdqa      $-104(%rip), %xmm6  /* LCPI18_4(%rip) */
	LONG $0xd0758948                           // movq         %rsi, $-48(%rbp)
	LONG $0x000044e9; BYTE $0x00               // jmp          LBB18_5, $68(%rip)

LBB18_1:
	WORD $0x894c; BYTE $0xe7     // movq         %r12, %rdi
	LONG $0xfff4c7e8; BYTE $0xff // callq        _skip_positive, $-2873(%rip)

LBB18_2:
	QUAD $0xffffff7f356ff9c5       // vmovdqa      $-129(%rip), %xmm6  /* LCPI18_4(%rip) */
	QUAD $0xffffff672d6ff9c5       // vmovdqa      $-153(%rip), %xmm5  /* LCPI18_3(%rip) */
	QUAD $0xffffff4f256ff9c5       // vmovdqa      $-177(%rip), %xmm4  /* LCPI18_2(%rip) */
	QUAD $0xffffff371d6ff9c5       // vmovdqa      $-201(%rip), %xmm3  /* LCPI18_1(%rip) */
	LONG $0xd0758b48               // movq         $-48(%rbp), %rsi
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x0525880f; WORD $0x0000 // js           LBB18_91, $1317(%rip)

LBB18_3:
	WORD $0x8b4d; BYTE $0x17       // movq         (%r15), %r10
	WORD $0x894c; BYTE $0xf0       // movq         %r14, %rax
	WORD $0x854d; BYTE $0xd2       // testq        %r10, %r10
	LONG $0x0516840f; WORD $0x0000 // je           LBB18_91, $1302(%rip)

LBB18_5:
	WORD $0x894d; BYTE $0xf0             // movq         %r14, %r8
	LONG $0x240c8b4d                     // movq         (%r12), %r9
	LONG $0x24548b4d; BYTE $0x08         // movq         $8(%r12), %r10
	WORD $0x8b48; BYTE $0x06             // movq         (%rsi), %rax
	WORD $0x394c; BYTE $0xd0             // cmpq         %r10, %rax
	LONG $0x0033830f; WORD $0x0000       // jae          LBB18_10, $51(%rip)
	LONG $0x010c8a41                     // movb         (%r9,%rax), %cl
	WORD $0xf980; BYTE $0x0d             // cmpb         $13, %cl
	LONG $0x0026840f; WORD $0x0000       // je           LBB18_10, $38(%rip)
	WORD $0xf980; BYTE $0x20             // cmpb         $32, %cl
	LONG $0x001d840f; WORD $0x0000       // je           LBB18_10, $29(%rip)
	WORD $0xc180; BYTE $0xf7             // addb         $-9, %cl
	WORD $0xf980; BYTE $0x01             // cmpb         $1, %cl
	LONG $0x0011860f; WORD $0x0000       // jbe          LBB18_10, $17(%rip)
	WORD $0x8949; BYTE $0xc6             // movq         %rax, %r14
	LONG $0x000209e9; BYTE $0x00         // jmp          LBB18_43, $521(%rip)
	QUAD $0x9090909090909090; BYTE $0x90 // .p2align 4, 0x90

LBB18_10:
	LONG $0x01708d4c               // leaq         $1(%rax), %r14
	WORD $0x394d; BYTE $0xd6       // cmpq         %r10, %r14
	LONG $0x0023830f; WORD $0x0000 // jae          LBB18_14, $35(%rip)
	LONG $0x310c8a43               // movb         (%r9,%r14), %cl
	WORD $0xf980; BYTE $0x0d       // cmpb         $13, %cl
	LONG $0x0016840f; WORD $0x0000 // je           LBB18_14, $22(%rip)
	WORD $0xf980; BYTE $0x20       // cmpb         $32, %cl
	LONG $0x000d840f; WORD $0x0000 // je           LBB18_14, $13(%rip)
	WORD $0xc180; BYTE $0xf7       // addb         $-9, %cl
	WORD $0xf980; BYTE $0x01       // cmpb         $1, %cl
	LONG $0x01d1870f; WORD $0x0000 // ja           LBB18_43, $465(%rip)
	BYTE $0x90                     // .p2align 4, 0x90

LBB18_14:
	LONG $0x02708d4c               // leaq         $2(%rax), %r14
	WORD $0x394d; BYTE $0xd6       // cmpq         %r10, %r14
	LONG $0x0023830f; WORD $0x0000 // jae          LBB18_18, $35(%rip)
	LONG $0x310c8a43               // movb         (%r9,%r14), %cl
	WORD $0xf980; BYTE $0x0d       // cmpb         $13, %cl
	LONG $0x0016840f; WORD $0x0000 // je           LBB18_18, $22(%rip)
	WORD $0xf980; BYTE $0x20       // cmpb         $32, %cl
	LONG $0x000d840f; WORD $0x0000 // je           LBB18_18, $13(%rip)
	WORD $0xc180; BYTE $0xf7       // addb         $-9, %cl
	WORD $0xf980; BYTE $0x01       // cmpb         $1, %cl
	LONG $0x01a1870f; WORD $0x0000 // ja           LBB18_43, $417(%rip)
	BYTE $0x90                     // .p2align 4, 0x90

LBB18_18:
	LONG $0x03708d4c               // leaq         $3(%rax), %r14
	WORD $0x394d; BYTE $0xd6       // cmpq         %r10, %r14
	LONG $0x0023830f; WORD $0x0000 // jae          LBB18_22, $35(%rip)
	LONG $0x310c8a43               // movb         (%r9,%r14), %cl
	WORD $0xf980; BYTE $0x0d       // cmpb         $13, %cl
	LONG $0x0016840f; WORD $0x0000 // je           LBB18_22, $22(%rip)
	WORD $0xf980; BYTE $0x20       // cmpb         $32, %cl
	LONG $0x000d840f; WORD $0x0000 // je           LBB18_22, $13(%rip)
	WORD $0xc180; BYTE $0xf7       // addb         $-9, %cl
	WORD $0xf980; BYTE $0x01       // cmpb         $1, %cl
	LONG $0x0171870f; WORD $0x0000 // ja           LBB18_43, $369(%rip)
	BYTE $0x90                     // .p2align 4, 0x90

LBB18_22:
	LONG $0x04488d48               // leaq         $4(%rax), %rcx
	WORD $0x3949; BYTE $0xca       // cmpq         %rcx, %r10
	LONG $0x0424860f; WORD $0x0000 // jbe          LBB18_89, $1060(%rip)
	LONG $0x09348d4d               // leaq         (%r9,%rcx), %r14
	WORD $0x894c; BYTE $0xd7       // movq         %r10, %rdi
	WORD $0x2948; BYTE $0xcf       // subq         %rcx, %rdi
	LONG $0x0068840f; WORD $0x0000 // je           LBB18_31, $104(%rip)
	WORD $0x8944; BYTE $0xf1       // movl         %r14d, %ecx
	WORD $0xe183; BYTE $0x0f       // andl         $15, %ecx
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0x0059840f; WORD $0x0000 // je           LBB18_31, $89(%rip)
	LONG $0x011c8d49               // leaq         (%r9,%rax), %rbx
	WORD $0x894c; BYTE $0xd7       // movq         %r10, %rdi
	WORD $0x2948; BYTE $0xc7       // subq         %rax, %rdi
	LONG $0xfb5f8d4c               // leaq         $-5(%rdi), %r11
	WORD $0xd231                   // xorl         %edx, %edx
	LONG $0x90909090               // .p2align 4, 0x90

LBB18_26:
	LONG $0x134cbe0f; BYTE $0x04   // movsbl       $4(%rbx,%rdx), %ecx
	WORD $0xf983; BYTE $0x20       // cmpl         $32, %ecx
	LONG $0x00fe870f; WORD $0x0000 // ja           LBB18_42, $254(%rip)
	LONG $0xcda30f49               // btq          %rcx, %r13
	LONG $0x00f4830f; WORD $0x0000 // jae          LBB18_42, $244(%rip)
	LONG $0x014a8d48               // leaq         $1(%rdx), %rcx
	WORD $0x3949; BYTE $0xd3       // cmpq         %rdx, %r11
	LONG $0x0014840f; WORD $0x0000 // je           LBB18_30, $20(%rip)
	LONG $0x13448d48; BYTE $0x05   // leaq         $5(%rbx,%rdx), %rax
	WORD $0xe083; BYTE $0x0f       // andl         $15, %eax
	WORD $0x8948; BYTE $0xca       // movq         %rcx, %rdx
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0xffc7850f; WORD $0xffff // jne          LBB18_26, $-57(%rip)

LBB18_30:
	LONG $0x19748d4c; BYTE $0x04 // leaq         $4(%rcx,%rbx), %r14
	WORD $0x2948; BYTE $0xcf     // subq         %rcx, %rdi
	LONG $0xfcc78348             // addq         $-4, %rdi

LBB18_31:
	LONG $0x10ff8348               // cmpq         $16, %rdi
	LONG $0x0042820f; WORD $0x0000 // jb           LBB18_34, $66(%rip)
	BYTE $0x90                     // .p2align 4, 0x90

LBB18_32:
	LONG $0x6f79c1c4; BYTE $0x06   // vmovdqa      (%r14), %xmm0
	LONG $0xcb74f9c5               // vpcmpeqb     %xmm3, %xmm0, %xmm1
	LONG $0xd474f9c5               // vpcmpeqb     %xmm4, %xmm0, %xmm2
	LONG $0xcaebf1c5               // vpor         %xmm2, %xmm1, %xmm1
	LONG $0xd574f9c5               // vpcmpeqb     %xmm5, %xmm0, %xmm2
	LONG $0xc674f9c5               // vpcmpeqb     %xmm6, %xmm0, %xmm0
	LONG $0xc2ebf9c5               // vpor         %xmm2, %xmm0, %xmm0
	LONG $0xc1ebf9c5               // vpor         %xmm1, %xmm0, %xmm0
	LONG $0xc8d7f9c5               // vpmovmskb    %xmm0, %ecx
	LONG $0xfff98366               // cmpw         $-1, %cx
	LONG $0x0071850f; WORD $0x0000 // jne          LBB18_41, $113(%rip)
	LONG $0x10c68349               // addq         $16, %r14
	LONG $0xf0c78348               // addq         $-16, %rdi
	LONG $0x0fff8348               // cmpq         $15, %rdi
	LONG $0xffbf870f; WORD $0xffff // ja           LBB18_32, $-65(%rip)

LBB18_34:
	WORD $0x8548; BYTE $0xff                                             // testq        %rdi, %rdi
	LONG $0x0040840f; WORD $0x0000                                       // je           LBB18_40, $64(%rip)
	LONG $0x3e048d49                                                     // leaq         (%r14,%rdi), %rax
	WORD $0xff49; BYTE $0xc6                                             // incq         %r14
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB18_36:
	LONG $0x4ebe0f41; BYTE $0xff   // movsbl       $-1(%r14), %ecx
	WORD $0xf983; BYTE $0x20       // cmpl         $32, %ecx
	LONG $0x0310870f; WORD $0x0000 // ja           LBB18_86, $784(%rip)
	LONG $0xcda30f49               // btq          %rcx, %r13
	LONG $0x0306830f; WORD $0x0000 // jae          LBB18_86, $774(%rip)
	WORD $0xff48; BYTE $0xcf       // decq         %rdi
	WORD $0xff49; BYTE $0xc6       // incq         %r14
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0xffd9850f; WORD $0xffff // jne          LBB18_36, $-39(%rip)
	WORD $0x8949; BYTE $0xc6       // movq         %rax, %r14

LBB18_40:
	WORD $0x294d; BYTE $0xce       // subq         %r9, %r14
	WORD $0x394d; BYTE $0xd6       // cmpq         %r10, %r14
	LONG $0x004a820f; WORD $0x0000 // jb           LBB18_43, $74(%rip)
	LONG $0x000309e9; BYTE $0x00   // jmp          LBB18_90, $777(%rip)
	LONG $0x90909090; BYTE $0x90   // .p2align 4, 0x90

LBB18_41:
	WORD $0xb70f; BYTE $0xc1       // movzwl       %cx, %eax
	WORD $0x294d; BYTE $0xce       // subq         %r9, %r14
	WORD $0xd0f7                   // notl         %eax
	WORD $0xbc0f; BYTE $0xc0       // bsfl         %eax, %eax
	WORD $0x0149; BYTE $0xc6       // addq         %rax, %r14
	WORD $0x394d; BYTE $0xd6       // cmpq         %r10, %r14
	LONG $0x0029820f; WORD $0x0000 // jb           LBB18_43, $41(%rip)
	LONG $0x0002e8e9; BYTE $0x00   // jmp          LBB18_90, $744(%rip)

LBB18_42:
	WORD $0x0148; BYTE $0xd3                               // addq         %rdx, %rbx
	WORD $0x894c; BYTE $0xc9                               // movq         %r9, %rcx
	WORD $0xf748; BYTE $0xd1                               // notq         %rcx
	LONG $0x19748d4c; BYTE $0x05                           // leaq         $5(%rcx,%rbx), %r14
	WORD $0x394d; BYTE $0xd6                               // cmpq         %r10, %r14
	LONG $0x02d1830f; WORD $0x0000                         // jae          LBB18_90, $721(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

LBB18_43:
	LONG $0x01468d49                           // leaq         $1(%r14), %rax
	WORD $0x8948; BYTE $0x06                   // movq         %rax, (%rsi)
	LONG $0x1cbe0f43; BYTE $0x31               // movsbl       (%r9,%r14), %ebx
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	WORD $0xdb85                               // testl        %ebx, %ebx
	LONG $0x02b0840f; WORD $0x0000             // je           LBB18_91, $688(%rip)
	WORD $0x8b49; BYTE $0x3f                   // movq         (%r15), %rdi
	LONG $0xff578d4c                           // leaq         $-1(%rdi), %r10
	LONG $0xff0c8b41                           // movl         (%r15,%rdi,8), %ecx
	LONG $0xfff88349                           // cmpq         $-1, %r8
	LONG $0xf0450f4d                           // cmovneq      %r8, %r14
	WORD $0xc9ff                               // decl         %ecx
	WORD $0xf983; BYTE $0x05                   // cmpl         $5, %ecx
	LONG $0x0027870f; WORD $0x0000             // ja           LBB18_87, $39(%rip)
	LONG $0xbc158d48; WORD $0x0003; BYTE $0x00 // leaq         $956(%rip), %rdx  /* LJTI18_0(%rip) */
	LONG $0x8a0c6348                           // movslq       (%rdx,%rcx,4), %rcx
	WORD $0x0148; BYTE $0xd1                   // addq         %rdx, %rcx
	JMP  CX

LBB18_46:
	WORD $0xfb83; BYTE $0x2c       // cmpl         $44, %ebx
	LONG $0x00e1840f; WORD $0x0000 // je           LBB18_62, $225(%rip)
	WORD $0xfb83; BYTE $0x5d       // cmpl         $93, %ebx
	LONG $0x00c4840f; WORD $0x0000 // je           LBB18_48, $196(%rip)
	LONG $0x000255e9; BYTE $0x00   // jmp          LBB18_88, $597(%rip)

LBB18_87:
	WORD $0x894d; BYTE $0x17       // movq         %r10, (%r15)
	WORD $0xfb83; BYTE $0x7b       // cmpl         $123, %ebx
	LONG $0x0082860f; WORD $0x0000 // jbe          LBB18_58, $130(%rip)
	LONG $0x000244e9; BYTE $0x00   // jmp          LBB18_88, $580(%rip)

LBB18_49:
	WORD $0xfb83; BYTE $0x2c                   // cmpl         $44, %ebx
	LONG $0x009c850f; WORD $0x0000             // jne          LBB18_50, $156(%rip)
	LONG $0xffff8148; WORD $0x000f; BYTE $0x00 // cmpq         $4095, %rdi
	LONG $0x02538f0f; WORD $0x0000             // jg           LBB18_93, $595(%rip)
	LONG $0x01478d48                           // leaq         $1(%rdi), %rax
	WORD $0x8949; BYTE $0x07                   // movq         %rax, (%r15)
	QUAD $0x00000308ff44c749; BYTE $0x00       // movq         $3, $8(%r15,%rdi,8)
	LONG $0xfffd0ae9; BYTE $0xff               // jmp          LBB18_3, $-758(%rip)

LBB18_51:
	WORD $0xfb80; BYTE $0x22       // cmpb         $34, %bl
	LONG $0x0210850f; WORD $0x0000 // jne          LBB18_88, $528(%rip)
	QUAD $0x00000004ff04c749       // movq         $4, (%r15,%rdi,8)

LBB18_53:
	WORD $0x894c; BYTE $0xe7     // movq         %r12, %rdi
	LONG $0xc8558b48             // movq         $-56(%rbp), %rdx
	LONG $0xffe387e8; BYTE $0xff // callq        _skip_string, $-7289(%rip)
	LONG $0xfffcbbe9; BYTE $0xff // jmp          LBB18_2, $-837(%rip)

LBB18_54:
	WORD $0xfb80; BYTE $0x3a       // cmpb         $58, %bl
	LONG $0x01ee850f; WORD $0x0000 // jne          LBB18_88, $494(%rip)
	QUAD $0x00000000ff04c749       // movq         $0, (%r15,%rdi,8)
	LONG $0xfffcd2e9; BYTE $0xff   // jmp          LBB18_3, $-814(%rip)

LBB18_56:
	WORD $0xfb80; BYTE $0x5d       // cmpb         $93, %bl
	LONG $0x0042840f; WORD $0x0000 // je           LBB18_48, $66(%rip)
	QUAD $0x00000001ff04c749       // movq         $1, (%r15,%rdi,8)
	WORD $0xfb83; BYTE $0x7b       // cmpl         $123, %ebx
	LONG $0x01c7870f; WORD $0x0000 // ja           LBB18_88, $455(%rip)

LBB18_58:
	WORD $0xd989                               // movl         %ebx, %ecx
	LONG $0x1d158d48; WORD $0x0003; BYTE $0x00 // leaq         $797(%rip), %rdx  /* LJTI18_1(%rip) */
	LONG $0x8a0c6348                           // movslq       (%rdx,%rcx,4), %rcx
	WORD $0x0148; BYTE $0xd1                   // addq         %rdx, %rcx
	JMP  CX

LBB18_61:
	WORD $0x894c; BYTE $0xe7     // movq         %r12, %rdi
	LONG $0xffec28e8; BYTE $0xff // callq        _skip_negative, $-5080(%rip)
	LONG $0xfffc6ce9; BYTE $0xff // jmp          LBB18_2, $-916(%rip)

LBB18_59:
	WORD $0xfb83; BYTE $0x22       // cmpl         $34, %ebx
	LONG $0x003f840f; WORD $0x0000 // je           LBB18_66, $63(%rip)

LBB18_50:
	WORD $0xfb83; BYTE $0x7d       // cmpl         $125, %ebx
	LONG $0x0196850f; WORD $0x0000 // jne          LBB18_88, $406(%rip)

LBB18_48:
	WORD $0x894d; BYTE $0x17       // movq         %r10, (%r15)
	WORD $0x894c; BYTE $0xf0       // movq         %r14, %rax
	WORD $0x854d; BYTE $0xd2       // testq        %r10, %r10
	LONG $0xfc87850f; WORD $0xffff // jne          LBB18_5, $-889(%rip)
	LONG $0x000198e9; BYTE $0x00   // jmp          LBB18_91, $408(%rip)

LBB18_62:
	LONG $0xffff8148; WORD $0x000f; BYTE $0x00 // cmpq         $4095, %rdi
	LONG $0x019a8f0f; WORD $0x0000             // jg           LBB18_93, $410(%rip)
	LONG $0x01478d48                           // leaq         $1(%rdi), %rax
	WORD $0x8949; BYTE $0x07                   // movq         %rax, (%r15)
	QUAD $0x00000008ff44c749; BYTE $0x00       // movq         $0, $8(%r15,%rdi,8)
	LONG $0xfffc51e9; BYTE $0xff               // jmp          LBB18_3, $-943(%rip)

LBB18_66:
	QUAD $0x00000002ff04c749             // movq         $2, (%r15,%rdi,8)
	WORD $0x894c; BYTE $0xe7             // movq         %r12, %rdi
	LONG $0xc8558b48                     // movq         $-56(%rbp), %rdx
	LONG $0xffe2d7e8; BYTE $0xff         // callq        _skip_string, $-7465(%rip)
	WORD $0x8548; BYTE $0xc0             // testq        %rax, %rax
	LONG $0x0159880f; WORD $0x0000       // js           LBB18_91, $345(%rip)
	WORD $0x8b49; BYTE $0x07             // movq         (%r15), %rax
	LONG $0x0fff3d48; WORD $0x0000       // cmpq         $4095, %rax
	QUAD $0xfffffb4d1d6ff9c5             // vmovdqa      $-1203(%rip), %xmm3  /* LCPI18_1(%rip) */
	QUAD $0xfffffb55256ff9c5             // vmovdqa      $-1195(%rip), %xmm4  /* LCPI18_2(%rip) */
	QUAD $0xfffffb5d2d6ff9c5             // vmovdqa      $-1187(%rip), %xmm5  /* LCPI18_3(%rip) */
	QUAD $0xfffffb65356ff9c5             // vmovdqa      $-1179(%rip), %xmm6  /* LCPI18_4(%rip) */
	LONG $0x01398f0f; WORD $0x0000       // jg           LBB18_93, $313(%rip)
	LONG $0x01488d48                     // leaq         $1(%rax), %rcx
	WORD $0x8949; BYTE $0x0f             // movq         %rcx, (%r15)
	QUAD $0x00000408c744c749; BYTE $0x00 // movq         $4, $8(%r15,%rax,8)
	LONG $0xd0758b48                     // movq         $-48(%rbp), %rsi
	LONG $0xfffbece9; BYTE $0xff         // jmp          LBB18_3, $-1044(%rip)

LBB18_69:
	WORD $0x8b49; BYTE $0x07             // movq         (%r15), %rax
	LONG $0x0fff3d48; WORD $0x0000       // cmpq         $4095, %rax
	LONG $0x01118f0f; WORD $0x0000       // jg           LBB18_93, $273(%rip)
	LONG $0x01488d48                     // leaq         $1(%rax), %rcx
	WORD $0x8949; BYTE $0x0f             // movq         %rcx, (%r15)
	QUAD $0x00000508c744c749; BYTE $0x00 // movq         $5, $8(%r15,%rax,8)
	LONG $0xfffbc8e9; BYTE $0xff         // jmp          LBB18_3, $-1080(%rip)

LBB18_71:
	WORD $0x8b48; BYTE $0x16       // movq         (%rsi), %rdx
	LONG $0x244c8b49; BYTE $0x08   // movq         $8(%r12), %rcx
	LONG $0xfc798d48               // leaq         $-4(%rcx), %rdi
	WORD $0x3948; BYTE $0xfa       // cmpq         %rdi, %rdx
	LONG $0x00f3870f; WORD $0x0000 // ja           LBB18_92, $243(%rip)
	LONG $0x110c8b41               // movl         (%r9,%rdx), %ecx
	LONG $0x6c61f981; WORD $0x6573 // cmpl         $1702063201, %ecx
	LONG $0x0149850f; WORD $0x0000 // jne          LBB18_94, $329(%rip)
	LONG $0x04428d48               // leaq         $4(%rdx), %rax
	WORD $0x8948; BYTE $0x06       // movq         %rax, (%rsi)
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0xfb938f0f; WORD $0xffff // jg           LBB18_3, $-1133(%rip)
	LONG $0x0000d6e9; BYTE $0x00   // jmp          LBB18_83, $214(%rip)

LBB18_74:
	WORD $0x8b48; BYTE $0x16             // movq         (%rsi), %rdx
	LONG $0x244c8b49; BYTE $0x08         // movq         $8(%r12), %rcx
	LONG $0xfd798d48                     // leaq         $-3(%rcx), %rdi
	WORD $0x3948; BYTE $0xfa             // cmpq         %rdi, %rdx
	LONG $0x00b9870f; WORD $0x0000       // ja           LBB18_92, $185(%rip)
	QUAD $0x6c756eff117c8141; BYTE $0x6c // cmpl         $1819047278, $-1(%r9,%rdx)
	LONG $0x0029840f; WORD $0x0000       // je           LBB18_82, $41(%rip)
	LONG $0x0000b8e9; BYTE $0x00         // jmp          LBB18_76, $184(%rip)

LBB18_80:
	WORD $0x8b48; BYTE $0x16             // movq         (%rsi), %rdx
	LONG $0x244c8b49; BYTE $0x08         // movq         $8(%r12), %rcx
	LONG $0xfd798d48                     // leaq         $-3(%rcx), %rdi
	WORD $0x3948; BYTE $0xfa             // cmpq         %rdi, %rdx
	LONG $0x0090870f; WORD $0x0000       // ja           LBB18_92, $144(%rip)
	QUAD $0x757274ff117c8141; BYTE $0x65 // cmpl         $1702195828, $-1(%r9,%rdx)
	LONG $0x013c850f; WORD $0x0000       // jne          LBB18_99, $316(%rip)

LBB18_82:
	LONG $0x03428d48               // leaq         $3(%rdx), %rax
	WORD $0x8948; BYTE $0x06       // movq         %rax, (%rsi)
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0xfb318f0f; WORD $0xffff // jg           LBB18_3, $-1231(%rip)
	LONG $0x000074e9; BYTE $0x00   // jmp          LBB18_83, $116(%rip)

LBB18_84:
	WORD $0x8b49; BYTE $0x07             // movq         (%r15), %rax
	LONG $0x0fff3d48; WORD $0x0000       // cmpq         $4095, %rax
	LONG $0x00518f0f; WORD $0x0000       // jg           LBB18_93, $81(%rip)
	LONG $0x01488d48                     // leaq         $1(%rax), %rcx
	WORD $0x8949; BYTE $0x0f             // movq         %rcx, (%r15)
	QUAD $0x00000608c744c749; BYTE $0x00 // movq         $6, $8(%r15,%rax,8)
	LONG $0xfffb08e9; BYTE $0xff         // jmp          LBB18_3, $-1272(%rip)

LBB18_86:
	WORD $0x894c; BYTE $0xc8       // movq         %r9, %rax
	WORD $0xf748; BYTE $0xd0       // notq         %rax
	WORD $0x0149; BYTE $0xc6       // addq         %rax, %r14
	WORD $0x394d; BYTE $0xd6       // cmpq         %r10, %r14
	LONG $0xfd50820f; WORD $0xffff // jb           LBB18_43, $-688(%rip)
	LONG $0x00000fe9; BYTE $0x00   // jmp          LBB18_90, $15(%rip)

LBB18_88:
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x00000ae9; BYTE $0x00               // jmp          LBB18_91, $10(%rip)

LBB18_89:
	WORD $0x8948; BYTE $0x0e // movq         %rcx, (%rsi)

LBB18_90:
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax

LBB18_91:
	LONG $0x18c48348 // addq         $24, %rsp
	BYTE $0x5b       // popq         %rbx
	WORD $0x5c41     // popq         %r12
	WORD $0x5d41     // popq         %r13
	WORD $0x5e41     // popq         %r14
	WORD $0x5f41     // popq         %r15
	BYTE $0x5d       // popq         %rbp
	BYTE $0xc3       // retq

LBB18_93:
	LONG $0xf9c0c748; WORD $0xffff; BYTE $0xff // movq         $-7, %rax
	LONG $0xffffe5e9; BYTE $0xff               // jmp          LBB18_91, $-27(%rip)

LBB18_92:
	WORD $0x8948; BYTE $0x0e     // movq         %rcx, (%rsi)
	LONG $0xffffdde9; BYTE $0xff // jmp          LBB18_91, $-35(%rip)

LBB18_83:
	WORD $0xff48; BYTE $0xca     // decq         %rdx
	WORD $0x8948; BYTE $0xd0     // movq         %rdx, %rax
	LONG $0xffffd2e9; BYTE $0xff // jmp          LBB18_91, $-46(%rip)

LBB18_76:
	LONG $0xff428d48                           // leaq         $-1(%rdx), %rax
	WORD $0x8948; BYTE $0x06                   // movq         %rax, (%rsi)
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x117c8041; WORD $0x6eff             // cmpb         $110, $-1(%r9,%rdx)
	LONG $0xffb8850f; WORD $0xffff             // jne          LBB18_91, $-72(%rip)
	WORD $0x8948; BYTE $0x16                   // movq         %rdx, (%rsi)
	LONG $0x113c8041; BYTE $0x75               // cmpb         $117, (%r9,%rdx)
	LONG $0xffaa850f; WORD $0xffff             // jne          LBB18_91, $-86(%rip)
	LONG $0x014a8d48                           // leaq         $1(%rdx), %rcx
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0x117c8041; WORD $0x6c01             // cmpb         $108, $1(%r9,%rdx)
	LONG $0xff97850f; WORD $0xffff             // jne          LBB18_91, $-105(%rip)
	LONG $0x024a8d48                           // leaq         $2(%rdx), %rcx
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0x117c8041; WORD $0x6c02             // cmpb         $108, $2(%r9,%rdx)
	LONG $0xff84850f; WORD $0xffff             // jne          LBB18_91, $-124(%rip)
	LONG $0x0000a3e9; BYTE $0x00               // jmp          LBB18_103, $163(%rip)

LBB18_94:
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	WORD $0xf980; BYTE $0x61                   // cmpb         $97, %cl
	LONG $0xff6f850f; WORD $0xffff             // jne          LBB18_91, $-145(%rip)
	LONG $0x014a8d48                           // leaq         $1(%rdx), %rcx
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0x117c8041; WORD $0x6c01             // cmpb         $108, $1(%r9,%rdx)
	LONG $0xff5c850f; WORD $0xffff             // jne          LBB18_91, $-164(%rip)
	LONG $0x024a8d48                           // leaq         $2(%rdx), %rcx
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0x117c8041; WORD $0x7302             // cmpb         $115, $2(%r9,%rdx)
	LONG $0xff49850f; WORD $0xffff             // jne          LBB18_91, $-183(%rip)
	LONG $0x034a8d48                           // leaq         $3(%rdx), %rcx
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0x117c8041; WORD $0x6503             // cmpb         $101, $3(%r9,%rdx)
	LONG $0xff36850f; WORD $0xffff             // jne          LBB18_91, $-202(%rip)
	LONG $0x04c28348                           // addq         $4, %rdx
	WORD $0x8948; BYTE $0x16                   // movq         %rdx, (%rsi)
	LONG $0xffff2ae9; BYTE $0xff               // jmp          LBB18_91, $-214(%rip)

LBB18_99:
	LONG $0xff428d48                           // leaq         $-1(%rdx), %rax
	WORD $0x8948; BYTE $0x06                   // movq         %rax, (%rsi)
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x117c8041; WORD $0x74ff             // cmpb         $116, $-1(%r9,%rdx)
	LONG $0xff10850f; WORD $0xffff             // jne          LBB18_91, $-240(%rip)
	WORD $0x8948; BYTE $0x16                   // movq         %rdx, (%rsi)
	LONG $0x113c8041; BYTE $0x72               // cmpb         $114, (%r9,%rdx)
	LONG $0xff02850f; WORD $0xffff             // jne          LBB18_91, $-254(%rip)
	LONG $0x014a8d48                           // leaq         $1(%rdx), %rcx
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0x117c8041; WORD $0x7501             // cmpb         $117, $1(%r9,%rdx)
	LONG $0xfeef850f; WORD $0xffff             // jne          LBB18_91, $-273(%rip)
	LONG $0x024a8d48                           // leaq         $2(%rdx), %rcx
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0x117c8041; WORD $0x6502             // cmpb         $101, $2(%r9,%rdx)
	LONG $0xfedc850f; WORD $0xffff             // jne          LBB18_91, $-292(%rip)

LBB18_103:
	LONG $0x03c28348             // addq         $3, %rdx
	WORD $0x8948; BYTE $0x16     // movq         %rdx, (%rsi)
	LONG $0xfffed0e9; BYTE $0xff // jmp          LBB18_91, $-304(%rip)
	BYTE $0x90                   // .p2align 2, 0x90

	// .set L18_0_set_46, LBB18_46-LJTI18_0
	// .set L18_0_set_49, LBB18_49-LJTI18_0
	// .set L18_0_set_51, LBB18_51-LJTI18_0
	// .set L18_0_set_54, LBB18_54-LJTI18_0
	// .set L18_0_set_56, LBB18_56-LJTI18_0
	// .set L18_0_set_59, LBB18_59-LJTI18_0
LJTI18_0:
	LONG $0xfffffc4d // .long L18_0_set_46
	LONG $0xfffffc75 // .long L18_0_set_49
	LONG $0xfffffca0 // .long L18_0_set_51
	LONG $0xfffffcc2 // .long L18_0_set_54
	LONG $0xfffffcd8 // .long L18_0_set_56
	LONG $0xfffffd11 // .long L18_0_set_59

	// .set L18_1_set_91, LBB18_91-LJTI18_1
	// .set L18_1_set_88, LBB18_88-LJTI18_1
	// .set L18_1_set_53, LBB18_53-LJTI18_1
	// .set L18_1_set_61, LBB18_61-LJTI18_1
	// .set L18_1_set_1, LBB18_1-LJTI18_1
	// .set L18_1_set_69, LBB18_69-LJTI18_1
	// .set L18_1_set_71, LBB18_71-LJTI18_1
	// .set L18_1_set_74, LBB18_74-LJTI18_1
	// .set L18_1_set_80, LBB18_80-LJTI18_1
	// .set L18_1_set_84, LBB18_84-LJTI18_1
LJTI18_1:
	LONG $0xfffffeb7                           // .long L18_1_set_91
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffc99                           // .long L18_1_set_53
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffcec                           // .long L18_1_set_61
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffff95d                           // .long L18_1_set_1
	LONG $0xfffff95d                           // .long L18_1_set_1
	LONG $0xfffff95d                           // .long L18_1_set_1
	LONG $0xfffff95d                           // .long L18_1_set_1
	LONG $0xfffff95d                           // .long L18_1_set_1
	LONG $0xfffff95d                           // .long L18_1_set_1
	LONG $0xfffff95d                           // .long L18_1_set_1
	LONG $0xfffff95d                           // .long L18_1_set_1
	LONG $0xfffff95d                           // .long L18_1_set_1
	LONG $0xfffff95d                           // .long L18_1_set_1
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffda6                           // .long L18_1_set_69
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffdca                           // .long L18_1_set_71
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffe04                           // .long L18_1_set_74
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffe2d                           // .long L18_1_set_80
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffea1                           // .long L18_1_set_88
	LONG $0xfffffe66                           // .long L18_1_set_84
	QUAD $0x0000000000000000; LONG $0x00000000 // .p2align 4, 0x00

LCPI19_0:
	LONG $0x00000001 // .long 1
	LONG $0x00000000 // .long 0
	LONG $0x00000000 // .long 0
	LONG $0x00000000 // .long 0

LCPI19_1:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI19_2:
	QUAD $0x0909090909090909; QUAD $0x0909090909090909 // .space 16, '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'

LCPI19_3:
	QUAD $0x0a0a0a0a0a0a0a0a; QUAD $0x0a0a0a0a0a0a0a0a // .space 16, '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'

LCPI19_4:
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'

	// .p2align 4, 0x90
_validate_one:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	BYTE $0x50                                 // pushq        %rax
	WORD $0x8949; BYTE $0xd6                   // movq         %rdx, %r14
	WORD $0x8949; BYTE $0xff                   // movq         %rdi, %r15
	QUAD $0xffffff94056ff9c5                   // vmovdqa      $-108(%rip), %xmm0  /* LCPI19_0(%rip) */
	LONG $0x027ffac5                           // vmovdqu      %xmm0, (%rdx)
	LONG $0xffc5c749; WORD $0xffff; BYTE $0xff // movq         $-1, %r13
	QUAD $0x000100002600bc49; WORD $0x0000     // movabsq      $4294977024, %r12
	QUAD $0xffffff871d6ff9c5                   // vmovdqa      $-121(%rip), %xmm3  /* LCPI19_1(%rip) */
	QUAD $0xffffff8f256ff9c5                   // vmovdqa      $-113(%rip), %xmm4  /* LCPI19_2(%rip) */
	QUAD $0xffffff972d6ff9c5                   // vmovdqa      $-105(%rip), %xmm5  /* LCPI19_3(%rip) */
	QUAD $0xffffff9f356ff9c5                   // vmovdqa      $-97(%rip), %xmm6  /* LCPI19_4(%rip) */
	LONG $0xd0758948                           // movq         %rsi, $-48(%rbp)
	LONG $0x000044e9; BYTE $0x00               // jmp          LBB19_5, $68(%rip)

LBB19_1:
	WORD $0x894c; BYTE $0xff     // movq         %r15, %rdi
	LONG $0xffeb7ee8; BYTE $0xff // callq        _skip_positive, $-5250(%rip)

LBB19_2:
	QUAD $0xffffff86356ff9c5       // vmovdqa      $-122(%rip), %xmm6  /* LCPI19_4(%rip) */
	QUAD $0xffffff6e2d6ff9c5       // vmovdqa      $-146(%rip), %xmm5  /* LCPI19_3(%rip) */
	QUAD $0xffffff56256ff9c5       // vmovdqa      $-170(%rip), %xmm4  /* LCPI19_2(%rip) */
	QUAD $0xffffff3e1d6ff9c5       // vmovdqa      $-194(%rip), %xmm3  /* LCPI19_1(%rip) */
	LONG $0xd0758b48               // movq         $-48(%rbp), %rsi
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x051b880f; WORD $0x0000 // js           LBB19_91, $1307(%rip)

LBB19_3:
	WORD $0x8b4d; BYTE $0x16       // movq         (%r14), %r10
	WORD $0x894c; BYTE $0xe8       // movq         %r13, %rax
	WORD $0x854d; BYTE $0xd2       // testq        %r10, %r10
	LONG $0x050c840f; WORD $0x0000 // je           LBB19_91, $1292(%rip)

LBB19_5:
	WORD $0x894d; BYTE $0xe8       // movq         %r13, %r8
	WORD $0x8b4d; BYTE $0x0f       // movq         (%r15), %r9
	LONG $0x08578b4d               // movq         $8(%r15), %r10
	WORD $0x8b48; BYTE $0x06       // movq         (%rsi), %rax
	WORD $0x394c; BYTE $0xd0       // cmpq         %r10, %rax
	LONG $0x002c830f; WORD $0x0000 // jae          LBB19_10, $44(%rip)
	LONG $0x010c8a41               // movb         (%r9,%rax), %cl
	WORD $0xf980; BYTE $0x0d       // cmpb         $13, %cl
	LONG $0x001f840f; WORD $0x0000 // je           LBB19_10, $31(%rip)
	WORD $0xf980; BYTE $0x20       // cmpb         $32, %cl
	LONG $0x0016840f; WORD $0x0000 // je           LBB19_10, $22(%rip)
	WORD $0xc180; BYTE $0xf7       // addb         $-9, %cl
	WORD $0xf980; BYTE $0x01       // cmpb         $1, %cl
	LONG $0x000a860f; WORD $0x0000 // jbe          LBB19_10, $10(%rip)
	WORD $0x8949; BYTE $0xc5       // movq         %rax, %r13
	LONG $0x000202e9; BYTE $0x00   // jmp          LBB19_43, $514(%rip)
	WORD $0x9090                   // .p2align 4, 0x90

LBB19_10:
	LONG $0x01688d4c               // leaq         $1(%rax), %r13
	WORD $0x394d; BYTE $0xd5       // cmpq         %r10, %r13
	LONG $0x0023830f; WORD $0x0000 // jae          LBB19_14, $35(%rip)
	LONG $0x290c8a43               // movb         (%r9,%r13), %cl
	WORD $0xf980; BYTE $0x0d       // cmpb         $13, %cl
	LONG $0x0016840f; WORD $0x0000 // je           LBB19_14, $22(%rip)
	WORD $0xf980; BYTE $0x20       // cmpb         $32, %cl
	LONG $0x000d840f; WORD $0x0000 // je           LBB19_14, $13(%rip)
	WORD $0xc180; BYTE $0xf7       // addb         $-9, %cl
	WORD $0xf980; BYTE $0x01       // cmpb         $1, %cl
	LONG $0x01d1870f; WORD $0x0000 // ja           LBB19_43, $465(%rip)
	BYTE $0x90                     // .p2align 4, 0x90

LBB19_14:
	LONG $0x02688d4c               // leaq         $2(%rax), %r13
	WORD $0x394d; BYTE $0xd5       // cmpq         %r10, %r13
	LONG $0x0023830f; WORD $0x0000 // jae          LBB19_18, $35(%rip)
	LONG $0x290c8a43               // movb         (%r9,%r13), %cl
	WORD $0xf980; BYTE $0x0d       // cmpb         $13, %cl
	LONG $0x0016840f; WORD $0x0000 // je           LBB19_18, $22(%rip)
	WORD $0xf980; BYTE $0x20       // cmpb         $32, %cl
	LONG $0x000d840f; WORD $0x0000 // je           LBB19_18, $13(%rip)
	WORD $0xc180; BYTE $0xf7       // addb         $-9, %cl
	WORD $0xf980; BYTE $0x01       // cmpb         $1, %cl
	LONG $0x01a1870f; WORD $0x0000 // ja           LBB19_43, $417(%rip)
	BYTE $0x90                     // .p2align 4, 0x90

LBB19_18:
	LONG $0x03688d4c               // leaq         $3(%rax), %r13
	WORD $0x394d; BYTE $0xd5       // cmpq         %r10, %r13
	LONG $0x0023830f; WORD $0x0000 // jae          LBB19_22, $35(%rip)
	LONG $0x290c8a43               // movb         (%r9,%r13), %cl
	WORD $0xf980; BYTE $0x0d       // cmpb         $13, %cl
	LONG $0x0016840f; WORD $0x0000 // je           LBB19_22, $22(%rip)
	WORD $0xf980; BYTE $0x20       // cmpb         $32, %cl
	LONG $0x000d840f; WORD $0x0000 // je           LBB19_22, $13(%rip)
	WORD $0xc180; BYTE $0xf7       // addb         $-9, %cl
	WORD $0xf980; BYTE $0x01       // cmpb         $1, %cl
	LONG $0x0171870f; WORD $0x0000 // ja           LBB19_43, $369(%rip)
	BYTE $0x90                     // .p2align 4, 0x90

LBB19_22:
	LONG $0x04488d48               // leaq         $4(%rax), %rcx
	WORD $0x3949; BYTE $0xca       // cmpq         %rcx, %r10
	LONG $0x0423860f; WORD $0x0000 // jbe          LBB19_89, $1059(%rip)
	LONG $0x092c8d4d               // leaq         (%r9,%rcx), %r13
	WORD $0x894c; BYTE $0xd7       // movq         %r10, %rdi
	WORD $0x2948; BYTE $0xcf       // subq         %rcx, %rdi
	LONG $0x0068840f; WORD $0x0000 // je           LBB19_31, $104(%rip)
	WORD $0x8944; BYTE $0xe9       // movl         %r13d, %ecx
	WORD $0xe183; BYTE $0x0f       // andl         $15, %ecx
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0x0059840f; WORD $0x0000 // je           LBB19_31, $89(%rip)
	LONG $0x011c8d49               // leaq         (%r9,%rax), %rbx
	WORD $0x894c; BYTE $0xd7       // movq         %r10, %rdi
	WORD $0x2948; BYTE $0xc7       // subq         %rax, %rdi
	LONG $0xfb5f8d4c               // leaq         $-5(%rdi), %r11
	WORD $0xd231                   // xorl         %edx, %edx
	LONG $0x90909090               // .p2align 4, 0x90

LBB19_26:
	LONG $0x134cbe0f; BYTE $0x04   // movsbl       $4(%rbx,%rdx), %ecx
	WORD $0xf983; BYTE $0x20       // cmpl         $32, %ecx
	LONG $0x00fe870f; WORD $0x0000 // ja           LBB19_42, $254(%rip)
	LONG $0xcca30f49               // btq          %rcx, %r12
	LONG $0x00f4830f; WORD $0x0000 // jae          LBB19_42, $244(%rip)
	LONG $0x014a8d48               // leaq         $1(%rdx), %rcx
	WORD $0x3949; BYTE $0xd3       // cmpq         %rdx, %r11
	LONG $0x0014840f; WORD $0x0000 // je           LBB19_30, $20(%rip)
	LONG $0x13448d48; BYTE $0x05   // leaq         $5(%rbx,%rdx), %rax
	WORD $0xe083; BYTE $0x0f       // andl         $15, %eax
	WORD $0x8948; BYTE $0xca       // movq         %rcx, %rdx
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0xffc7850f; WORD $0xffff // jne          LBB19_26, $-57(%rip)

LBB19_30:
	LONG $0x196c8d4c; BYTE $0x04 // leaq         $4(%rcx,%rbx), %r13
	WORD $0x2948; BYTE $0xcf     // subq         %rcx, %rdi
	LONG $0xfcc78348             // addq         $-4, %rdi

LBB19_31:
	LONG $0x10ff8348               // cmpq         $16, %rdi
	LONG $0x0043820f; WORD $0x0000 // jb           LBB19_34, $67(%rip)
	BYTE $0x90                     // .p2align 4, 0x90

LBB19_32:
	LONG $0x6f79c1c4; WORD $0x0045 // vmovdqa      (%r13), %xmm0
	LONG $0xcb74f9c5               // vpcmpeqb     %xmm3, %xmm0, %xmm1
	LONG $0xd474f9c5               // vpcmpeqb     %xmm4, %xmm0, %xmm2
	LONG $0xcaebf1c5               // vpor         %xmm2, %xmm1, %xmm1
	LONG $0xd574f9c5               // vpcmpeqb     %xmm5, %xmm0, %xmm2
	LONG $0xc674f9c5               // vpcmpeqb     %xmm6, %xmm0, %xmm0
	LONG $0xc2ebf9c5               // vpor         %xmm2, %xmm0, %xmm0
	LONG $0xc1ebf9c5               // vpor         %xmm1, %xmm0, %xmm0
	LONG $0xc8d7f9c5               // vpmovmskb    %xmm0, %ecx
	LONG $0xfff98366               // cmpw         $-1, %cx
	LONG $0x0070850f; WORD $0x0000 // jne          LBB19_41, $112(%rip)
	LONG $0x10c58349               // addq         $16, %r13
	LONG $0xf0c78348               // addq         $-16, %rdi
	LONG $0x0fff8348               // cmpq         $15, %rdi
	LONG $0xffbe870f; WORD $0xffff // ja           LBB19_32, $-66(%rip)

LBB19_34:
	WORD $0x8548; BYTE $0xff                               // testq        %rdi, %rdi
	LONG $0x003f840f; WORD $0x0000                         // je           LBB19_40, $63(%rip)
	LONG $0x3d448d49; BYTE $0x00                           // leaq         (%r13,%rdi), %rax
	WORD $0xff49; BYTE $0xc5                               // incq         %r13
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

LBB19_36:
	LONG $0x4dbe0f41; BYTE $0xff   // movsbl       $-1(%r13), %ecx
	WORD $0xf983; BYTE $0x20       // cmpl         $32, %ecx
	LONG $0x030f870f; WORD $0x0000 // ja           LBB19_86, $783(%rip)
	LONG $0xcca30f49               // btq          %rcx, %r12
	LONG $0x0305830f; WORD $0x0000 // jae          LBB19_86, $773(%rip)
	WORD $0xff48; BYTE $0xcf       // decq         %rdi
	WORD $0xff49; BYTE $0xc5       // incq         %r13
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0xffd9850f; WORD $0xffff // jne          LBB19_36, $-39(%rip)
	WORD $0x8949; BYTE $0xc5       // movq         %rax, %r13

LBB19_40:
	WORD $0x294d; BYTE $0xcd       // subq         %r9, %r13
	WORD $0x394d; BYTE $0xd5       // cmpq         %r10, %r13
	LONG $0x004a820f; WORD $0x0000 // jb           LBB19_43, $74(%rip)
	LONG $0x000308e9; BYTE $0x00   // jmp          LBB19_90, $776(%rip)
	LONG $0x90909090; BYTE $0x90   // .p2align 4, 0x90

LBB19_41:
	WORD $0xb70f; BYTE $0xc1       // movzwl       %cx, %eax
	WORD $0x294d; BYTE $0xcd       // subq         %r9, %r13
	WORD $0xd0f7                   // notl         %eax
	WORD $0xbc0f; BYTE $0xc0       // bsfl         %eax, %eax
	WORD $0x0149; BYTE $0xc5       // addq         %rax, %r13
	WORD $0x394d; BYTE $0xd5       // cmpq         %r10, %r13
	LONG $0x0029820f; WORD $0x0000 // jb           LBB19_43, $41(%rip)
	LONG $0x0002e7e9; BYTE $0x00   // jmp          LBB19_90, $743(%rip)

LBB19_42:
	WORD $0x0148; BYTE $0xd3                               // addq         %rdx, %rbx
	WORD $0x894c; BYTE $0xc9                               // movq         %r9, %rcx
	WORD $0xf748; BYTE $0xd1                               // notq         %rcx
	LONG $0x196c8d4c; BYTE $0x05                           // leaq         $5(%rcx,%rbx), %r13
	WORD $0x394d; BYTE $0xd5                               // cmpq         %r10, %r13
	LONG $0x02d0830f; WORD $0x0000                         // jae          LBB19_90, $720(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

LBB19_43:
	LONG $0x01458d49                           // leaq         $1(%r13), %rax
	WORD $0x8948; BYTE $0x06                   // movq         %rax, (%rsi)
	LONG $0x1cbe0f43; BYTE $0x29               // movsbl       (%r9,%r13), %ebx
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	WORD $0xdb85                               // testl        %ebx, %ebx
	LONG $0x02af840f; WORD $0x0000             // je           LBB19_91, $687(%rip)
	WORD $0x8b49; BYTE $0x3e                   // movq         (%r14), %rdi
	LONG $0xff578d4c                           // leaq         $-1(%rdi), %r10
	LONG $0xfe0c8b41                           // movl         (%r14,%rdi,8), %ecx
	LONG $0xfff88349                           // cmpq         $-1, %r8
	LONG $0xe8450f4d                           // cmovneq      %r8, %r13
	WORD $0xc9ff                               // decl         %ecx
	WORD $0xf983; BYTE $0x05                   // cmpl         $5, %ecx
	LONG $0x0027870f; WORD $0x0000             // ja           LBB19_87, $39(%rip)
	LONG $0xbc158d48; WORD $0x0003; BYTE $0x00 // leaq         $956(%rip), %rdx  /* LJTI19_0(%rip) */
	LONG $0x8a0c6348                           // movslq       (%rdx,%rcx,4), %rcx
	WORD $0x0148; BYTE $0xd1                   // addq         %rdx, %rcx
	JMP  CX

LBB19_46:
	WORD $0xfb83; BYTE $0x2c       // cmpl         $44, %ebx
	LONG $0x00e2840f; WORD $0x0000 // je           LBB19_62, $226(%rip)
	WORD $0xfb83; BYTE $0x5d       // cmpl         $93, %ebx
	LONG $0x00c5840f; WORD $0x0000 // je           LBB19_48, $197(%rip)
	LONG $0x000254e9; BYTE $0x00   // jmp          LBB19_88, $596(%rip)

LBB19_87:
	WORD $0x894d; BYTE $0x16       // movq         %r10, (%r14)
	WORD $0xfb83; BYTE $0x7b       // cmpl         $123, %ebx
	LONG $0x0083860f; WORD $0x0000 // jbe          LBB19_58, $131(%rip)
	LONG $0x000243e9; BYTE $0x00   // jmp          LBB19_88, $579(%rip)

LBB19_49:
	WORD $0xfb83; BYTE $0x2c                   // cmpl         $44, %ebx
	LONG $0x009d850f; WORD $0x0000             // jne          LBB19_50, $157(%rip)
	LONG $0xffff8148; WORD $0x000f; BYTE $0x00 // cmpq         $4095, %rdi
	LONG $0x02528f0f; WORD $0x0000             // jg           LBB19_93, $594(%rip)
	LONG $0x01478d48                           // leaq         $1(%rdi), %rax
	WORD $0x8949; BYTE $0x06                   // movq         %rax, (%r14)
	QUAD $0x00000308fe44c749; BYTE $0x00       // movq         $3, $8(%r14,%rdi,8)
	LONG $0xfffd13e9; BYTE $0xff               // jmp          LBB19_3, $-749(%rip)

LBB19_51:
	WORD $0xfb80; BYTE $0x22       // cmpb         $34, %bl
	LONG $0x020f850f; WORD $0x0000 // jne          LBB19_88, $527(%rip)
	QUAD $0x00000004fe04c749       // movq         $4, (%r14,%rdi,8)

LBB19_53:
	LONG $0x000020ba; BYTE $0x00 // movl         $32, %edx
	WORD $0x894c; BYTE $0xff     // movq         %r15, %rdi
	LONG $0xffda46e8; BYTE $0xff // callq        _skip_string, $-9658(%rip)
	LONG $0xfffcc3e9; BYTE $0xff // jmp          LBB19_2, $-829(%rip)

LBB19_54:
	WORD $0xfb80; BYTE $0x3a       // cmpb         $58, %bl
	LONG $0x01ec850f; WORD $0x0000 // jne          LBB19_88, $492(%rip)
	QUAD $0x00000000fe04c749       // movq         $0, (%r14,%rdi,8)
	LONG $0xfffcdae9; BYTE $0xff   // jmp          LBB19_3, $-806(%rip)

LBB19_56:
	WORD $0xfb80; BYTE $0x5d       // cmpb         $93, %bl
	LONG $0x0042840f; WORD $0x0000 // je           LBB19_48, $66(%rip)
	QUAD $0x00000001fe04c749       // movq         $1, (%r14,%rdi,8)
	WORD $0xfb83; BYTE $0x7b       // cmpl         $123, %ebx
	LONG $0x01c5870f; WORD $0x0000 // ja           LBB19_88, $453(%rip)

LBB19_58:
	WORD $0xd989                               // movl         %ebx, %ecx
	LONG $0x1c158d48; WORD $0x0003; BYTE $0x00 // leaq         $796(%rip), %rdx  /* LJTI19_1(%rip) */
	LONG $0x8a0c6348                           // movslq       (%rdx,%rcx,4), %rcx
	WORD $0x0148; BYTE $0xd1                   // addq         %rdx, %rcx
	JMP  CX

LBB19_61:
	WORD $0x894c; BYTE $0xff     // movq         %r15, %rdi
	LONG $0xffe2e7e8; BYTE $0xff // callq        _skip_negative, $-7449(%rip)
	LONG $0xfffc74e9; BYTE $0xff // jmp          LBB19_2, $-908(%rip)

LBB19_59:
	WORD $0xfb83; BYTE $0x22       // cmpl         $34, %ebx
	LONG $0x003f840f; WORD $0x0000 // je           LBB19_66, $63(%rip)

LBB19_50:
	WORD $0xfb83; BYTE $0x7d       // cmpl         $125, %ebx
	LONG $0x0194850f; WORD $0x0000 // jne          LBB19_88, $404(%rip)

LBB19_48:
	WORD $0x894d; BYTE $0x16       // movq         %r10, (%r14)
	WORD $0x894c; BYTE $0xe8       // movq         %r13, %rax
	WORD $0x854d; BYTE $0xd2       // testq        %r10, %r10
	LONG $0xfc8f850f; WORD $0xffff // jne          LBB19_5, $-881(%rip)
	LONG $0x000196e9; BYTE $0x00   // jmp          LBB19_91, $406(%rip)

LBB19_62:
	LONG $0xffff8148; WORD $0x000f; BYTE $0x00 // cmpq         $4095, %rdi
	LONG $0x01988f0f; WORD $0x0000             // jg           LBB19_93, $408(%rip)
	LONG $0x01478d48                           // leaq         $1(%rdi), %rax
	WORD $0x8949; BYTE $0x06                   // movq         %rax, (%r14)
	QUAD $0x00000008fe44c749; BYTE $0x00       // movq         $0, $8(%r14,%rdi,8)
	LONG $0xfffc59e9; BYTE $0xff               // jmp          LBB19_3, $-935(%rip)

LBB19_66:
	QUAD $0x00000002fe04c749             // movq         $2, (%r14,%rdi,8)
	LONG $0x000020ba; BYTE $0x00         // movl         $32, %edx
	WORD $0x894c; BYTE $0xff             // movq         %r15, %rdi
	LONG $0xffd995e8; BYTE $0xff         // callq        _skip_string, $-9835(%rip)
	WORD $0x8548; BYTE $0xc0             // testq        %rax, %rax
	LONG $0x0156880f; WORD $0x0000       // js           LBB19_91, $342(%rip)
	WORD $0x8b49; BYTE $0x06             // movq         (%r14), %rax
	LONG $0x0fff3d48; WORD $0x0000       // cmpq         $4095, %rax
	QUAD $0xfffffb5b1d6ff9c5             // vmovdqa      $-1189(%rip), %xmm3  /* LCPI19_1(%rip) */
	QUAD $0xfffffb63256ff9c5             // vmovdqa      $-1181(%rip), %xmm4  /* LCPI19_2(%rip) */
	QUAD $0xfffffb6b2d6ff9c5             // vmovdqa      $-1173(%rip), %xmm5  /* LCPI19_3(%rip) */
	QUAD $0xfffffb73356ff9c5             // vmovdqa      $-1165(%rip), %xmm6  /* LCPI19_4(%rip) */
	LONG $0x01368f0f; WORD $0x0000       // jg           LBB19_93, $310(%rip)
	LONG $0x01488d48                     // leaq         $1(%rax), %rcx
	WORD $0x8949; BYTE $0x0e             // movq         %rcx, (%r14)
	QUAD $0x00000408c644c749; BYTE $0x00 // movq         $4, $8(%r14,%rax,8)
	LONG $0xd0758b48                     // movq         $-48(%rbp), %rsi
	LONG $0xfffbf3e9; BYTE $0xff         // jmp          LBB19_3, $-1037(%rip)

LBB19_69:
	WORD $0x8b49; BYTE $0x06             // movq         (%r14), %rax
	LONG $0x0fff3d48; WORD $0x0000       // cmpq         $4095, %rax
	LONG $0x010e8f0f; WORD $0x0000       // jg           LBB19_93, $270(%rip)
	LONG $0x01488d48                     // leaq         $1(%rax), %rcx
	WORD $0x8949; BYTE $0x0e             // movq         %rcx, (%r14)
	QUAD $0x00000508c644c749; BYTE $0x00 // movq         $5, $8(%r14,%rax,8)
	LONG $0xfffbcfe9; BYTE $0xff         // jmp          LBB19_3, $-1073(%rip)

LBB19_71:
	WORD $0x8b48; BYTE $0x16       // movq         (%rsi), %rdx
	LONG $0x084f8b49               // movq         $8(%r15), %rcx
	LONG $0xfc798d48               // leaq         $-4(%rcx), %rdi
	WORD $0x3948; BYTE $0xfa       // cmpq         %rdi, %rdx
	LONG $0x00f1870f; WORD $0x0000 // ja           LBB19_92, $241(%rip)
	LONG $0x110c8b41               // movl         (%r9,%rdx), %ecx
	LONG $0x6c61f981; WORD $0x6573 // cmpl         $1702063201, %ecx
	LONG $0x0147850f; WORD $0x0000 // jne          LBB19_94, $327(%rip)
	LONG $0x04428d48               // leaq         $4(%rdx), %rax
	WORD $0x8948; BYTE $0x06       // movq         %rax, (%rsi)
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0xfb9b8f0f; WORD $0xffff // jg           LBB19_3, $-1125(%rip)
	LONG $0x0000d4e9; BYTE $0x00   // jmp          LBB19_83, $212(%rip)

LBB19_74:
	WORD $0x8b48; BYTE $0x16             // movq         (%rsi), %rdx
	LONG $0x084f8b49                     // movq         $8(%r15), %rcx
	LONG $0xfd798d48                     // leaq         $-3(%rcx), %rdi
	WORD $0x3948; BYTE $0xfa             // cmpq         %rdi, %rdx
	LONG $0x00b8870f; WORD $0x0000       // ja           LBB19_92, $184(%rip)
	QUAD $0x6c756eff117c8141; BYTE $0x6c // cmpl         $1819047278, $-1(%r9,%rdx)
	LONG $0x0028840f; WORD $0x0000       // je           LBB19_82, $40(%rip)
	LONG $0x0000b7e9; BYTE $0x00         // jmp          LBB19_76, $183(%rip)

LBB19_80:
	WORD $0x8b48; BYTE $0x16             // movq         (%rsi), %rdx
	LONG $0x084f8b49                     // movq         $8(%r15), %rcx
	LONG $0xfd798d48                     // leaq         $-3(%rcx), %rdi
	WORD $0x3948; BYTE $0xfa             // cmpq         %rdi, %rdx
	LONG $0x0090870f; WORD $0x0000       // ja           LBB19_92, $144(%rip)
	QUAD $0x757274ff117c8141; BYTE $0x65 // cmpl         $1702195828, $-1(%r9,%rdx)
	LONG $0x013c850f; WORD $0x0000       // jne          LBB19_99, $316(%rip)

LBB19_82:
	LONG $0x03428d48               // leaq         $3(%rdx), %rax
	WORD $0x8948; BYTE $0x06       // movq         %rax, (%rsi)
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0xfb3b8f0f; WORD $0xffff // jg           LBB19_3, $-1221(%rip)
	LONG $0x000074e9; BYTE $0x00   // jmp          LBB19_83, $116(%rip)

LBB19_84:
	WORD $0x8b49; BYTE $0x06             // movq         (%r14), %rax
	LONG $0x0fff3d48; WORD $0x0000       // cmpq         $4095, %rax
	LONG $0x00518f0f; WORD $0x0000       // jg           LBB19_93, $81(%rip)
	LONG $0x01488d48                     // leaq         $1(%rax), %rcx
	WORD $0x8949; BYTE $0x0e             // movq         %rcx, (%r14)
	QUAD $0x00000608c644c749; BYTE $0x00 // movq         $6, $8(%r14,%rax,8)
	LONG $0xfffb12e9; BYTE $0xff         // jmp          LBB19_3, $-1262(%rip)

LBB19_86:
	WORD $0x894c; BYTE $0xc8       // movq         %r9, %rax
	WORD $0xf748; BYTE $0xd0       // notq         %rax
	WORD $0x0149; BYTE $0xc5       // addq         %rax, %r13
	WORD $0x394d; BYTE $0xd5       // cmpq         %r10, %r13
	LONG $0xfd51820f; WORD $0xffff // jb           LBB19_43, $-687(%rip)
	LONG $0x00000fe9; BYTE $0x00   // jmp          LBB19_90, $15(%rip)

LBB19_88:
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x00000ae9; BYTE $0x00               // jmp          LBB19_91, $10(%rip)

LBB19_89:
	WORD $0x8948; BYTE $0x0e // movq         %rcx, (%rsi)

LBB19_90:
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax

LBB19_91:
	LONG $0x08c48348 // addq         $8, %rsp
	BYTE $0x5b       // popq         %rbx
	WORD $0x5c41     // popq         %r12
	WORD $0x5d41     // popq         %r13
	WORD $0x5e41     // popq         %r14
	WORD $0x5f41     // popq         %r15
	BYTE $0x5d       // popq         %rbp
	BYTE $0xc3       // retq

LBB19_93:
	LONG $0xf9c0c748; WORD $0xffff; BYTE $0xff // movq         $-7, %rax
	LONG $0xffffe5e9; BYTE $0xff               // jmp          LBB19_91, $-27(%rip)

LBB19_92:
	WORD $0x8948; BYTE $0x0e     // movq         %rcx, (%rsi)
	LONG $0xffffdde9; BYTE $0xff // jmp          LBB19_91, $-35(%rip)

LBB19_83:
	WORD $0xff48; BYTE $0xca     // decq         %rdx
	WORD $0x8948; BYTE $0xd0     // movq         %rdx, %rax
	LONG $0xffffd2e9; BYTE $0xff // jmp          LBB19_91, $-46(%rip)

LBB19_76:
	LONG $0xff428d48                           // leaq         $-1(%rdx), %rax
	WORD $0x8948; BYTE $0x06                   // movq         %rax, (%rsi)
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x117c8041; WORD $0x6eff             // cmpb         $110, $-1(%r9,%rdx)
	LONG $0xffb8850f; WORD $0xffff             // jne          LBB19_91, $-72(%rip)
	WORD $0x8948; BYTE $0x16                   // movq         %rdx, (%rsi)
	LONG $0x113c8041; BYTE $0x75               // cmpb         $117, (%r9,%rdx)
	LONG $0xffaa850f; WORD $0xffff             // jne          LBB19_91, $-86(%rip)
	LONG $0x014a8d48                           // leaq         $1(%rdx), %rcx
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0x117c8041; WORD $0x6c01             // cmpb         $108, $1(%r9,%rdx)
	LONG $0xff97850f; WORD $0xffff             // jne          LBB19_91, $-105(%rip)
	LONG $0x024a8d48                           // leaq         $2(%rdx), %rcx
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0x117c8041; WORD $0x6c02             // cmpb         $108, $2(%r9,%rdx)
	LONG $0xff84850f; WORD $0xffff             // jne          LBB19_91, $-124(%rip)
	LONG $0x0000a3e9; BYTE $0x00               // jmp          LBB19_103, $163(%rip)

LBB19_94:
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	WORD $0xf980; BYTE $0x61                   // cmpb         $97, %cl
	LONG $0xff6f850f; WORD $0xffff             // jne          LBB19_91, $-145(%rip)
	LONG $0x014a8d48                           // leaq         $1(%rdx), %rcx
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0x117c8041; WORD $0x6c01             // cmpb         $108, $1(%r9,%rdx)
	LONG $0xff5c850f; WORD $0xffff             // jne          LBB19_91, $-164(%rip)
	LONG $0x024a8d48                           // leaq         $2(%rdx), %rcx
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0x117c8041; WORD $0x7302             // cmpb         $115, $2(%r9,%rdx)
	LONG $0xff49850f; WORD $0xffff             // jne          LBB19_91, $-183(%rip)
	LONG $0x034a8d48                           // leaq         $3(%rdx), %rcx
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0x117c8041; WORD $0x6503             // cmpb         $101, $3(%r9,%rdx)
	LONG $0xff36850f; WORD $0xffff             // jne          LBB19_91, $-202(%rip)
	LONG $0x04c28348                           // addq         $4, %rdx
	WORD $0x8948; BYTE $0x16                   // movq         %rdx, (%rsi)
	LONG $0xffff2ae9; BYTE $0xff               // jmp          LBB19_91, $-214(%rip)

LBB19_99:
	LONG $0xff428d48                           // leaq         $-1(%rdx), %rax
	WORD $0x8948; BYTE $0x06                   // movq         %rax, (%rsi)
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x117c8041; WORD $0x74ff             // cmpb         $116, $-1(%r9,%rdx)
	LONG $0xff10850f; WORD $0xffff             // jne          LBB19_91, $-240(%rip)
	WORD $0x8948; BYTE $0x16                   // movq         %rdx, (%rsi)
	LONG $0x113c8041; BYTE $0x72               // cmpb         $114, (%r9,%rdx)
	LONG $0xff02850f; WORD $0xffff             // jne          LBB19_91, $-254(%rip)
	LONG $0x014a8d48                           // leaq         $1(%rdx), %rcx
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0x117c8041; WORD $0x7501             // cmpb         $117, $1(%r9,%rdx)
	LONG $0xfeef850f; WORD $0xffff             // jne          LBB19_91, $-273(%rip)
	LONG $0x024a8d48                           // leaq         $2(%rdx), %rcx
	WORD $0x8948; BYTE $0x0e                   // movq         %rcx, (%rsi)
	LONG $0x117c8041; WORD $0x6502             // cmpb         $101, $2(%r9,%rdx)
	LONG $0xfedc850f; WORD $0xffff             // jne          LBB19_91, $-292(%rip)

LBB19_103:
	LONG $0x03c28348             // addq         $3, %rdx
	WORD $0x8948; BYTE $0x16     // movq         %rdx, (%rsi)
	LONG $0xfffed0e9; BYTE $0xff // jmp          LBB19_91, $-304(%rip)
	WORD $0x9090                 // .p2align 2, 0x90

	// .set L19_0_set_46, LBB19_46-LJTI19_0
	// .set L19_0_set_49, LBB19_49-LJTI19_0
	// .set L19_0_set_51, LBB19_51-LJTI19_0
	// .set L19_0_set_54, LBB19_54-LJTI19_0
	// .set L19_0_set_56, LBB19_56-LJTI19_0
	// .set L19_0_set_59, LBB19_59-LJTI19_0
LJTI19_0:
	LONG $0xfffffc4d // .long L19_0_set_46
	LONG $0xfffffc75 // .long L19_0_set_49
	LONG $0xfffffca0 // .long L19_0_set_51
	LONG $0xfffffcc3 // .long L19_0_set_54
	LONG $0xfffffcd9 // .long L19_0_set_56
	LONG $0xfffffd12 // .long L19_0_set_59

	// .set L19_1_set_91, LBB19_91-LJTI19_1
	// .set L19_1_set_88, LBB19_88-LJTI19_1
	// .set L19_1_set_53, LBB19_53-LJTI19_1
	// .set L19_1_set_61, LBB19_61-LJTI19_1
	// .set L19_1_set_1, LBB19_1-LJTI19_1
	// .set L19_1_set_69, LBB19_69-LJTI19_1
	// .set L19_1_set_71, LBB19_71-LJTI19_1
	// .set L19_1_set_74, LBB19_74-LJTI19_1
	// .set L19_1_set_80, LBB19_80-LJTI19_1
	// .set L19_1_set_84, LBB19_84-LJTI19_1
LJTI19_1:
	LONG $0xfffffeb6                           // .long L19_1_set_91
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffc99                           // .long L19_1_set_53
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffced                           // .long L19_1_set_61
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffff966                           // .long L19_1_set_1
	LONG $0xfffff966                           // .long L19_1_set_1
	LONG $0xfffff966                           // .long L19_1_set_1
	LONG $0xfffff966                           // .long L19_1_set_1
	LONG $0xfffff966                           // .long L19_1_set_1
	LONG $0xfffff966                           // .long L19_1_set_1
	LONG $0xfffff966                           // .long L19_1_set_1
	LONG $0xfffff966                           // .long L19_1_set_1
	LONG $0xfffff966                           // .long L19_1_set_1
	LONG $0xfffff966                           // .long L19_1_set_1
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffda8                           // .long L19_1_set_69
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffdcc                           // .long L19_1_set_71
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffe05                           // .long L19_1_set_74
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffe2d                           // .long L19_1_set_80
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffea0                           // .long L19_1_set_88
	LONG $0xfffffe65                           // .long L19_1_set_84
	QUAD $0x0000000000000000; LONG $0x00000000 // .p2align 4, 0x00

LCPI20_0:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI20_1:
	QUAD $0x0909090909090909; QUAD $0x0909090909090909 // .space 16, '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'

LCPI20_2:
	QUAD $0x0a0a0a0a0a0a0a0a; QUAD $0x0a0a0a0a0a0a0a0a // .space 16, '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'

LCPI20_3:
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'

LCPI20_4:
	QUAD $0x2c2c2c2c2c2c2c2c; QUAD $0x2c2c2c2c2c2c2c2c // .space 16, ',,,,,,,,,,,,,,,,'

LCPI20_5:
	QUAD $0xdfdfdfdfdfdfdfdf; QUAD $0xdfdfdfdfdfdfdfdf // .space 16, '\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf'

LCPI20_6:
	QUAD $0x5d5d5d5d5d5d5d5d; QUAD $0x5d5d5d5d5d5d5d5d // .space 16, ']]]]]]]]]]]]]]]]'

LCPI20_7:
	QUAD $0x2222222222222222; QUAD $0x2222222222222222 // .space 16, '""""""""""""""""'

LCPI20_8:
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'

LCPI20_9:
	QUAD $0x7b7b7b7b7b7b7b7b; QUAD $0x7b7b7b7b7b7b7b7b // .space 16, '{{{{{{{{{{{{{{{{'

LCPI20_10:
	QUAD $0x7d7d7d7d7d7d7d7d; QUAD $0x7d7d7d7d7d7d7d7d // .space 16, '}}}}}}}}}}}}}}}}'

LCPI20_11:
	QUAD $0x5b5b5b5b5b5b5b5b; QUAD $0x5b5b5b5b5b5b5b5b // .space 16, '[[[[[[[[[[[[[[[['

	// .p2align 4, 0x90
_skip_one_fast:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	LONG $0xe0e48348                           // andq         $-32, %rsp
	LONG $0x80ec8148; WORD $0x0000; BYTE $0x00 // subq         $128, %rsp
	WORD $0x8b4c; BYTE $0x37                   // movq         (%rdi), %r14
	LONG $0x08478b4c                           // movq         $8(%rdi), %r8
	WORD $0x8b48; BYTE $0x16                   // movq         (%rsi), %rdx
	WORD $0x394c; BYTE $0xc2                   // cmpq         %r8, %rdx
	LONG $0x0026830f; WORD $0x0000             // jae          LBB20_5, $38(%rip)
	LONG $0x16048a41                           // movb         (%r14,%rdx), %al
	WORD $0x0d3c                               // cmpb         $13, %al
	LONG $0x001a840f; WORD $0x0000             // je           LBB20_5, $26(%rip)
	WORD $0x203c                               // cmpb         $32, %al
	LONG $0x0012840f; WORD $0x0000             // je           LBB20_5, $18(%rip)
	WORD $0xf704                               // addb         $-9, %al
	WORD $0x013c                               // cmpb         $1, %al
	LONG $0x0008860f; WORD $0x0000             // jbe          LBB20_5, $8(%rip)
	WORD $0x8949; BYTE $0xd1                   // movq         %rdx, %r9
	LONG $0x00022ce9; BYTE $0x00               // jmp          LBB20_40, $556(%rip)

LBB20_5:
	LONG $0x014a8d4c               // leaq         $1(%rdx), %r9
	WORD $0x394d; BYTE $0xc1       // cmpq         %r8, %r9
	LONG $0x001e830f; WORD $0x0000 // jae          LBB20_9, $30(%rip)
	LONG $0x0e048a43               // movb         (%r14,%r9), %al
	WORD $0x0d3c                   // cmpb         $13, %al
	LONG $0x0012840f; WORD $0x0000 // je           LBB20_9, $18(%rip)
	WORD $0x203c                   // cmpb         $32, %al
	LONG $0x000a840f; WORD $0x0000 // je           LBB20_9, $10(%rip)
	WORD $0xf704                   // addb         $-9, %al
	WORD $0x013c                   // cmpb         $1, %al
	LONG $0x0201870f; WORD $0x0000 // ja           LBB20_40, $513(%rip)

LBB20_9:
	LONG $0x024a8d4c               // leaq         $2(%rdx), %r9
	WORD $0x394d; BYTE $0xc1       // cmpq         %r8, %r9
	LONG $0x001e830f; WORD $0x0000 // jae          LBB20_13, $30(%rip)
	LONG $0x0e048a43               // movb         (%r14,%r9), %al
	WORD $0x0d3c                   // cmpb         $13, %al
	LONG $0x0012840f; WORD $0x0000 // je           LBB20_13, $18(%rip)
	WORD $0x203c                   // cmpb         $32, %al
	LONG $0x000a840f; WORD $0x0000 // je           LBB20_13, $10(%rip)
	WORD $0xf704                   // addb         $-9, %al
	WORD $0x013c                   // cmpb         $1, %al
	LONG $0x01d6870f; WORD $0x0000 // ja           LBB20_40, $470(%rip)

LBB20_13:
	LONG $0x034a8d4c               // leaq         $3(%rdx), %r9
	WORD $0x394d; BYTE $0xc1       // cmpq         %r8, %r9
	LONG $0x001e830f; WORD $0x0000 // jae          LBB20_17, $30(%rip)
	LONG $0x0e048a43               // movb         (%r14,%r9), %al
	WORD $0x0d3c                   // cmpb         $13, %al
	LONG $0x0012840f; WORD $0x0000 // je           LBB20_17, $18(%rip)
	WORD $0x203c                   // cmpb         $32, %al
	LONG $0x000a840f; WORD $0x0000 // je           LBB20_17, $10(%rip)
	WORD $0xf704                   // addb         $-9, %al
	WORD $0x013c                   // cmpb         $1, %al
	LONG $0x01ab870f; WORD $0x0000 // ja           LBB20_40, $427(%rip)

LBB20_17:
	LONG $0x045a8d48                       // leaq         $4(%rdx), %rbx
	WORD $0x3949; BYTE $0xd8               // cmpq         %rbx, %r8
	LONG $0x014e860f; WORD $0x0000         // jbe          LBB20_37, $334(%rip)
	LONG $0x1e0c8d4d                       // leaq         (%r14,%rbx), %r9
	WORD $0x894c; BYTE $0xc0               // movq         %r8, %rax
	WORD $0x2948; BYTE $0xd8               // subq         %rbx, %rax
	LONG $0x0077840f; WORD $0x0000         // je           LBB20_26, $119(%rip)
	WORD $0x8944; BYTE $0xc9               // movl         %r9d, %ecx
	WORD $0xe183; BYTE $0x0f               // andl         $15, %ecx
	WORD $0x8548; BYTE $0xc9               // testq        %rcx, %rcx
	LONG $0x0068840f; WORD $0x0000         // je           LBB20_26, $104(%rip)
	LONG $0x161c8d4d                       // leaq         (%r14,%rdx), %r11
	WORD $0x894c; BYTE $0xc0               // movq         %r8, %rax
	WORD $0x2948; BYTE $0xd0               // subq         %rdx, %rax
	LONG $0xfb508d4c                       // leaq         $-5(%rax), %r10
	WORD $0xdb31                           // xorl         %ebx, %ebx
	QUAD $0x000100002600b949; WORD $0x0000 // movabsq      $4294977024, %r9
	QUAD $0x9090909090909090               // .p2align 4, 0x90

LBB20_21:
	LONG $0x54be0f41; WORD $0x041b // movsbl       $4(%r11,%rbx), %edx
	WORD $0xfa83; BYTE $0x20       // cmpl         $32, %edx
	LONG $0x0130870f; WORD $0x0000 // ja           LBB20_39, $304(%rip)
	LONG $0xd1a30f49               // btq          %rdx, %r9
	LONG $0x0126830f; WORD $0x0000 // jae          LBB20_39, $294(%rip)
	LONG $0x01538d48               // leaq         $1(%rbx), %rdx
	WORD $0x3949; BYTE $0xda       // cmpq         %rbx, %r10
	LONG $0x0014840f; WORD $0x0000 // je           LBB20_25, $20(%rip)
	LONG $0x1b4c8d49; BYTE $0x05   // leaq         $5(%r11,%rbx), %rcx
	WORD $0xe183; BYTE $0x0f       // andl         $15, %ecx
	WORD $0x8948; BYTE $0xd3       // movq         %rdx, %rbx
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0xffc6850f; WORD $0xffff // jne          LBB20_21, $-58(%rip)

LBB20_25:
	LONG $0x1a4c8d4e; BYTE $0x04 // leaq         $4(%rdx,%r11), %r9
	WORD $0x2948; BYTE $0xd0     // subq         %rdx, %rax
	LONG $0xfcc08348             // addq         $-4, %rax

LBB20_26:
	LONG $0x10f88348               // cmpq         $16, %rax
	LONG $0x0061820f; WORD $0x0000 // jb           LBB20_30, $97(%rip)
	QUAD $0xfffffdc8056ff9c5       // vmovdqa      $-568(%rip), %xmm0  /* LCPI20_0(%rip) */
	QUAD $0xfffffdd00d6ff9c5       // vmovdqa      $-560(%rip), %xmm1  /* LCPI20_1(%rip) */
	QUAD $0xfffffdd8156ff9c5       // vmovdqa      $-552(%rip), %xmm2  /* LCPI20_2(%rip) */
	QUAD $0xfffffde01d6ff9c5       // vmovdqa      $-544(%rip), %xmm3  /* LCPI20_3(%rip) */

	// .p2align 4, 0x90
LBB20_28:
	LONG $0x6f79c1c4; BYTE $0x21   // vmovdqa      (%r9), %xmm4
	LONG $0xe874d9c5               // vpcmpeqb     %xmm0, %xmm4, %xmm5
	LONG $0xf174d9c5               // vpcmpeqb     %xmm1, %xmm4, %xmm6
	LONG $0xeeebd1c5               // vpor         %xmm6, %xmm5, %xmm5
	LONG $0xf274d9c5               // vpcmpeqb     %xmm2, %xmm4, %xmm6
	LONG $0xe374d9c5               // vpcmpeqb     %xmm3, %xmm4, %xmm4
	LONG $0xe6ebd9c5               // vpor         %xmm6, %xmm4, %xmm4
	LONG $0xe5ebd9c5               // vpor         %xmm5, %xmm4, %xmm4
	LONG $0xd4d7f9c5               // vpmovmskb    %xmm4, %edx
	LONG $0xfffa8366               // cmpw         $-1, %dx
	LONG $0x007d850f; WORD $0x0000 // jne          LBB20_38, $125(%rip)
	LONG $0x10c18349               // addq         $16, %r9
	LONG $0xf0c08348               // addq         $-16, %rax
	LONG $0x0ff88348               // cmpq         $15, %rax
	LONG $0xffbf870f; WORD $0xffff // ja           LBB20_28, $-65(%rip)

LBB20_30:
	WORD $0x8548; BYTE $0xc0               // testq        %rax, %rax
	LONG $0x003b840f; WORD $0x0000         // je           LBB20_36, $59(%rip)
	LONG $0x010c8d49                       // leaq         (%r9,%rax), %rcx
	WORD $0xff49; BYTE $0xc1               // incq         %r9
	QUAD $0x000100002600bb48; WORD $0x0000 // movabsq      $4294977024, %rbx

LBB20_32:
	LONG $0x51be0f41; BYTE $0xff   // movsbl       $-1(%r9), %edx
	WORD $0xfa83; BYTE $0x20       // cmpl         $32, %edx
	LONG $0x09cb870f; WORD $0x0000 // ja           LBB20_128, $2507(%rip)
	LONG $0xd3a30f48               // btq          %rdx, %rbx
	LONG $0x09c1830f; WORD $0x0000 // jae          LBB20_128, $2497(%rip)
	WORD $0xff48; BYTE $0xc8       // decq         %rax
	WORD $0xff49; BYTE $0xc1       // incq         %r9
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0xffd9850f; WORD $0xffff // jne          LBB20_32, $-39(%rip)
	WORD $0x8949; BYTE $0xc9       // movq         %rcx, %r9

LBB20_36:
	WORD $0x294d; BYTE $0xf1                   // subq         %r14, %r9
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	WORD $0x394d; BYTE $0xc1                   // cmpq         %r8, %r9
	LONG $0x0055820f; WORD $0x0000             // jb           LBB20_40, $85(%rip)
	LONG $0x00013be9; BYTE $0x00               // jmp          LBB20_57, $315(%rip)

LBB20_37:
	WORD $0x8948; BYTE $0x1e                   // movq         %rbx, (%rsi)
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	LONG $0x00012ce9; BYTE $0x00               // jmp          LBB20_57, $300(%rip)

LBB20_38:
	WORD $0xb70f; BYTE $0xc2                   // movzwl       %dx, %eax
	WORD $0x294d; BYTE $0xf1                   // subq         %r14, %r9
	WORD $0xd0f7                               // notl         %eax
	WORD $0xbc0f; BYTE $0xc0                   // bsfl         %eax, %eax
	WORD $0x0149; BYTE $0xc1                   // addq         %rax, %r9
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	WORD $0x394d; BYTE $0xc1                   // cmpq         %r8, %r9
	LONG $0x0023820f; WORD $0x0000             // jb           LBB20_40, $35(%rip)
	LONG $0x000109e9; BYTE $0x00               // jmp          LBB20_57, $265(%rip)

LBB20_39:
	WORD $0x0149; BYTE $0xdb                   // addq         %rbx, %r11
	WORD $0x894c; BYTE $0xf0                   // movq         %r14, %rax
	WORD $0xf748; BYTE $0xd0                   // notq         %rax
	LONG $0x184c8d4e; BYTE $0x05               // leaq         $5(%rax,%r11), %r9
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	WORD $0x394d; BYTE $0xc1                   // cmpq         %r8, %r9
	LONG $0x00eb830f; WORD $0x0000             // jae          LBB20_57, $235(%rip)

LBB20_40:
	LONG $0x01598d49                           // leaq         $1(%r9), %rbx
	WORD $0x8948; BYTE $0x1e                   // movq         %rbx, (%rsi)
	LONG $0x14be0f43; BYTE $0x0e               // movsbl       (%r14,%r9), %edx
	WORD $0xfa83; BYTE $0x7b                   // cmpl         $123, %edx
	LONG $0x00fb870f; WORD $0x0000             // ja           LBB20_59, $251(%rip)
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	LONG $0xec0d8d48; WORD $0x0009; BYTE $0x00 // leaq         $2540(%rip), %rcx  /* LJTI20_0(%rip) */
	LONG $0x91146348                           // movslq       (%rcx,%rdx,4), %rdx
	WORD $0x0148; BYTE $0xca                   // addq         %rcx, %rdx
	JMP  DX

LBB20_42:
	LONG $0x08478b48                                   // movq         $8(%rdi), %rax
	WORD $0x2948; BYTE $0xd8                           // subq         %rbx, %rax
	WORD $0x014c; BYTE $0xf3                           // addq         %r14, %rbx
	LONG $0x10f88348                                   // cmpq         $16, %rax
	LONG $0x0056820f; WORD $0x0000                     // jb           LBB20_46, $86(%rip)
	QUAD $0xfffffcbb056ff9c5                           // vmovdqa      $-837(%rip), %xmm0  /* LCPI20_4(%rip) */
	QUAD $0xfffffcc30d6ff9c5                           // vmovdqa      $-829(%rip), %xmm1  /* LCPI20_5(%rip) */
	QUAD $0xfffffccb156ff9c5                           // vmovdqa      $-821(%rip), %xmm2  /* LCPI20_6(%rip) */
	QUAD $0x9090909090909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB20_44:
	LONG $0x1b6ffac5               // vmovdqu      (%rbx), %xmm3
	LONG $0xe074e1c5               // vpcmpeqb     %xmm0, %xmm3, %xmm4
	LONG $0xd9dbe1c5               // vpand        %xmm1, %xmm3, %xmm3
	LONG $0xda74e1c5               // vpcmpeqb     %xmm2, %xmm3, %xmm3
	LONG $0xdcebe1c5               // vpor         %xmm4, %xmm3, %xmm3
	LONG $0xd3d7f9c5               // vpmovmskb    %xmm3, %edx
	WORD $0x8566; BYTE $0xd2       // testw        %dx, %dx
	LONG $0x0054850f; WORD $0x0000 // jne          LBB20_54, $84(%rip)
	LONG $0x10c38348               // addq         $16, %rbx
	LONG $0xf0c08348               // addq         $-16, %rax
	LONG $0x0ff88348               // cmpq         $15, %rax
	LONG $0xffcd870f; WORD $0xffff // ja           LBB20_44, $-51(%rip)

LBB20_46:
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0x0031840f; WORD $0x0000 // je           LBB20_53, $49(%rip)
	LONG $0x033c8d48               // leaq         (%rbx,%rax), %rdi

LBB20_48:
	WORD $0xb60f; BYTE $0x13       // movzbl       (%rbx), %edx
	WORD $0xfa80; BYTE $0x2c       // cmpb         $44, %dl
	LONG $0x0021840f; WORD $0x0000 // je           LBB20_53, $33(%rip)
	WORD $0xfa80; BYTE $0x7d       // cmpb         $125, %dl
	LONG $0x0018840f; WORD $0x0000 // je           LBB20_53, $24(%rip)
	WORD $0xfa80; BYTE $0x5d       // cmpb         $93, %dl
	LONG $0x000f840f; WORD $0x0000 // je           LBB20_53, $15(%rip)
	WORD $0xff48; BYTE $0xc3       // incq         %rbx
	WORD $0xff48; BYTE $0xc8       // decq         %rax
	LONG $0xffd6850f; WORD $0xffff // jne          LBB20_48, $-42(%rip)
	WORD $0x8948; BYTE $0xfb       // movq         %rdi, %rbx

LBB20_53:
	WORD $0x294c; BYTE $0xf3     // subq         %r14, %rbx
	LONG $0x00000de9; BYTE $0x00 // jmp          LBB20_55, $13(%rip)

LBB20_54:
	WORD $0xb70f; BYTE $0xc2 // movzwl       %dx, %eax
	LONG $0xc0bc0f48         // bsfq         %rax, %rax
	WORD $0x294c; BYTE $0xf3 // subq         %r14, %rbx
	WORD $0x0148; BYTE $0xc3 // addq         %rax, %rbx

LBB20_55:
	WORD $0x8948; BYTE $0x1e // movq         %rbx, (%rsi)

LBB20_56:
	WORD $0x894c; BYTE $0xc8 // movq         %r9, %rax

LBB20_57:
	LONG $0xd8658d48         // leaq         $-40(%rbp), %rsp
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

LBB20_58:
	LONG $0x04518d49               // leaq         $4(%r9), %rdx
	LONG $0x08573b48               // cmpq         $8(%rdi), %rdx
	LONG $0xffe0830f; WORD $0xffff // jae          LBB20_57, $-32(%rip)
	LONG $0x000492e9; BYTE $0x00   // jmp          LBB20_95, $1170(%rip)

LBB20_59:
	WORD $0x894c; BYTE $0x0e                   // movq         %r9, (%rsi)
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0xffffcce9; BYTE $0xff               // jmp          LBB20_57, $-52(%rip)

LBB20_60:
	LONG $0x08478b4c               // movq         $8(%rdi), %r8
	WORD $0x894d; BYTE $0xc2       // movq         %r8, %r10
	WORD $0x2949; BYTE $0xda       // subq         %rbx, %r10
	LONG $0x20fa8349               // cmpq         $32, %r10
	LONG $0x08b2820f; WORD $0x0000 // jb           LBB20_130, $2226(%rip)
	LONG $0xffffbc41; WORD $0xffff // movl         $4294967295, %r12d
	WORD $0x894c; BYTE $0xc7       // movq         %r8, %rdi
	WORD $0x294c; BYTE $0xcf       // subq         %r9, %rdi
	LONG $0xfec78348               // addq         $-2, %rdi
	WORD $0xff49; BYTE $0xc8       // decq         %r8
	WORD $0x3145; BYTE $0xdb       // xorl         %r11d, %r11d
	QUAD $0xfffffbe2056ff9c5       // vmovdqa      $-1054(%rip), %xmm0  /* LCPI20_7(%rip) */
	QUAD $0xfffffbea0d6ff9c5       // vmovdqa      $-1046(%rip), %xmm1  /* LCPI20_8(%rip) */
	WORD $0x894d; BYTE $0xf7       // movq         %r14, %r15
	LONG $0x00002ae9; BYTE $0x00   // jmp          LBB20_62, $42(%rip)
	WORD $0x9090                   // .p2align 4, 0x90

LBB20_64:
	WORD $0x3145; BYTE $0xdb       // xorl         %r11d, %r11d
	WORD $0xdb85                   // testl        %ebx, %ebx
	LONG $0x00a8850f; WORD $0x0000 // jne          LBB20_122, $168(%rip)

LBB20_65:
	LONG $0x20c78349               // addq         $32, %r15
	LONG $0xe0578d4c               // leaq         $-32(%rdi), %r10
	LONG $0xe1c78348               // addq         $-31, %rdi
	LONG $0xe0c08349               // addq         $-32, %r8
	LONG $0x1fff8348               // cmpq         $31, %rdi
	WORD $0x894c; BYTE $0xd7       // movq         %r10, %rdi
	LONG $0x07da860f; WORD $0x0000 // jbe          LBB20_66, $2010(%rip)

LBB20_62:
	LONG $0x6f7a81c4; WORD $0x0f54; BYTE $0x01 // vmovdqu      $1(%r15,%r9), %xmm2
	LONG $0x6f7a81c4; WORD $0x0f5c; BYTE $0x11 // vmovdqu      $17(%r15,%r9), %xmm3
	LONG $0xe074e9c5                           // vpcmpeqb     %xmm0, %xmm2, %xmm4
	LONG $0xd4d7f9c5                           // vpmovmskb    %xmm4, %edx
	LONG $0xe074e1c5                           // vpcmpeqb     %xmm0, %xmm3, %xmm4
	LONG $0xdcd7f9c5                           // vpmovmskb    %xmm4, %ebx
	LONG $0x10e3c148                           // shlq         $16, %rbx
	WORD $0x0948; BYTE $0xd3                   // orq          %rdx, %rbx
	LONG $0xd174e9c5                           // vpcmpeqb     %xmm1, %xmm2, %xmm2
	LONG $0xcad7f9c5                           // vpmovmskb    %xmm2, %ecx
	LONG $0xd174e1c5                           // vpcmpeqb     %xmm1, %xmm3, %xmm2
	LONG $0xd2d7f9c5                           // vpmovmskb    %xmm2, %edx
	LONG $0x10e2c148                           // shlq         $16, %rdx
	WORD $0x0948; BYTE $0xca                   // orq          %rcx, %rdx
	WORD $0x8948; BYTE $0xd1                   // movq         %rdx, %rcx
	WORD $0x094c; BYTE $0xd9                   // orq          %r11, %rcx
	LONG $0xff90840f; WORD $0xffff             // je           LBB20_64, $-112(%rip)
	WORD $0x8944; BYTE $0xd9                   // movl         %r11d, %ecx
	WORD $0x3144; BYTE $0xe1                   // xorl         %r12d, %ecx
	WORD $0xca21                               // andl         %ecx, %edx
	LONG $0x12148d44                           // leal         (%rdx,%rdx), %r10d
	WORD $0x0945; BYTE $0xda                   // orl          %r11d, %r10d
	QUAD $0xaaaaaaab248c8d41                   // leal         $-1431655765(%r12), %ecx
	WORD $0x3144; BYTE $0xd1                   // xorl         %r10d, %ecx
	WORD $0xd121                               // andl         %edx, %ecx
	LONG $0xaaaae181; WORD $0xaaaa             // andl         $-1431655766, %ecx
	WORD $0x3145; BYTE $0xdb                   // xorl         %r11d, %r11d
	WORD $0xd101                               // addl         %edx, %ecx
	LONG $0xc3920f41                           // setb         %r11b
	WORD $0xc901                               // addl         %ecx, %ecx
	LONG $0x5555f181; WORD $0x5555             // xorl         $1431655765, %ecx
	WORD $0x2144; BYTE $0xd1                   // andl         %r10d, %ecx
	WORD $0x3144; BYTE $0xe1                   // xorl         %r12d, %ecx
	WORD $0xcb21                               // andl         %ecx, %ebx
	WORD $0xdb85                               // testl        %ebx, %ebx
	LONG $0xff58840f; WORD $0xffff             // je           LBB20_65, $-168(%rip)

LBB20_122:
	LONG $0xc3bc0f48             // bsfq         %rbx, %rax
	WORD $0x014c; BYTE $0xc8     // addq         %r9, %rax
	WORD $0x0149; BYTE $0xc7     // addq         %rax, %r15
	WORD $0x294d; BYTE $0xf7     // subq         %r14, %r15
	LONG $0x02c78349             // addq         $2, %r15
	WORD $0x894c; BYTE $0x3e     // movq         %r15, (%rsi)
	LONG $0xfffeb9e9; BYTE $0xff // jmp          LBB20_56, $-327(%rip)

LBB20_69:
	LONG $0x084f8b48               // movq         $8(%rdi), %rcx
	WORD $0x2948; BYTE $0xd9       // subq         %rbx, %rcx
	WORD $0x0149; BYTE $0xde       // addq         %rbx, %r14
	WORD $0x3145; BYTE $0xdb       // xorl         %r11d, %r11d
	QUAD $0xfffffaff156f79c5       // vmovdqa      $-1281(%rip), %xmm10  /* LCPI20_8(%rip) */
	QUAD $0xfffffae70d6ff9c5       // vmovdqa      $-1305(%rip), %xmm1  /* LCPI20_7(%rip) */
	LONG $0x763141c4; BYTE $0xc9   // vpcmpeqd     %xmm9, %xmm9, %xmm9
	QUAD $0xfffffb1a1d6ff9c5       // vmovdqa      $-1254(%rip), %xmm3  /* LCPI20_11(%rip) */
	QUAD $0xfffffac2256ff9c5       // vmovdqa      $-1342(%rip), %xmm4  /* LCPI20_6(%rip) */
	LONG $0x573841c4; BYTE $0xc0   // vxorps       %xmm8, %xmm8, %xmm8
	WORD $0x3145; BYTE $0xe4       // xorl         %r12d, %r12d
	WORD $0x3145; BYTE $0xff       // xorl         %r15d, %r15d
	WORD $0xdb31                   // xorl         %ebx, %ebx
	LONG $0x40f98348               // cmpq         $64, %rcx
	LONG $0x244c8948; BYTE $0x10   // movq         %rcx, $16(%rsp)
	LONG $0x01338d0f; WORD $0x0000 // jge          LBB20_70, $307(%rip)

LBB20_79:
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0x07678e0f; WORD $0x0000 // jle          LBB20_131, $1895(%rip)
	LONG $0x44297cc5; WORD $0x4024 // vmovaps      %ymm8, $64(%rsp)
	LONG $0x44297cc5; WORD $0x2024 // vmovaps      %ymm8, $32(%rsp)
	WORD $0x8944; BYTE $0xf1       // movl         %r14d, %ecx
	LONG $0x0fffe181; WORD $0x0000 // andl         $4095, %ecx
	LONG $0x0fc1f981; WORD $0x0000 // cmpl         $4033, %ecx
	LONG $0x0109820f; WORD $0x0000 // jb           LBB20_70, $265(%rip)
	LONG $0x247c8348; WORD $0x2010 // cmpq         $32, $16(%rsp)
	LONG $0x002e820f; WORD $0x0000 // jb           LBB20_83, $46(%rip)
	LONG $0x1078c1c4; BYTE $0x06   // vmovups      (%r14), %xmm0
	LONG $0x4429f8c5; WORD $0x2024 // vmovaps      %xmm0, $32(%rsp)
	LONG $0x6f7ac1c4; WORD $0x1046 // vmovdqu      $16(%r14), %xmm0
	LONG $0x447ff9c5; WORD $0x3024 // vmovdqa      %xmm0, $48(%rsp)
	LONG $0x20c68349               // addq         $32, %r14
	LONG $0x244c8b48; BYTE $0x10   // movq         $16(%rsp), %rcx
	LONG $0xe0518d48               // leaq         $-32(%rcx), %rdx
	LONG $0x24448d4c; BYTE $0x40   // leaq         $64(%rsp), %r8
	LONG $0x00000ae9; BYTE $0x00   // jmp          LBB20_84, $10(%rip)

LBB20_83:
	LONG $0x24448d4c; BYTE $0x20 // leaq         $32(%rsp), %r8
	LONG $0x24548b48; BYTE $0x10 // movq         $16(%rsp), %rdx

LBB20_84:
	LONG $0x10fa8348               // cmpq         $16, %rdx
	LONG $0x005c820f; WORD $0x0000 // jb           LBB20_85, $92(%rip)
	LONG $0x6f7ac1c4; BYTE $0x06   // vmovdqu      (%r14), %xmm0
	LONG $0x7f7ac1c4; BYTE $0x00   // vmovdqu      %xmm0, (%r8)
	LONG $0x10c68349               // addq         $16, %r14
	LONG $0x10c08349               // addq         $16, %r8
	LONG $0xf0c28348               // addq         $-16, %rdx
	LONG $0x08fa8348               // cmpq         $8, %rdx
	LONG $0x0046830f; WORD $0x0000 // jae          LBB20_90, $70(%rip)

LBB20_86:
	LONG $0x04fa8348               // cmpq         $4, %rdx
	LONG $0x00588c0f; WORD $0x0000 // jl           LBB20_87, $88(%rip)

LBB20_91:
	WORD $0x8b41; BYTE $0x0e       // movl         (%r14), %ecx
	WORD $0x8941; BYTE $0x08       // movl         %ecx, (%r8)
	LONG $0x04c68349               // addq         $4, %r14
	LONG $0x04c08349               // addq         $4, %r8
	LONG $0xfcc28348               // addq         $-4, %rdx
	LONG $0x02fa8348               // cmpq         $2, %rdx
	LONG $0x0046830f; WORD $0x0000 // jae          LBB20_92, $70(%rip)

LBB20_88:
	WORD $0x894c; BYTE $0xf1       // movq         %r14, %rcx
	LONG $0x24748d4c; BYTE $0x20   // leaq         $32(%rsp), %r14
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0x005a850f; WORD $0x0000 // jne          LBB20_93, $90(%rip)
	LONG $0x00005fe9; BYTE $0x00   // jmp          LBB20_70, $95(%rip)

LBB20_85:
	LONG $0x08fa8348               // cmpq         $8, %rdx
	LONG $0xffba820f; WORD $0xffff // jb           LBB20_86, $-70(%rip)

LBB20_90:
	WORD $0x8b49; BYTE $0x0e       // movq         (%r14), %rcx
	WORD $0x8949; BYTE $0x08       // movq         %rcx, (%r8)
	LONG $0x08c68349               // addq         $8, %r14
	LONG $0x08c08349               // addq         $8, %r8
	LONG $0xf8c28348               // addq         $-8, %rdx
	LONG $0x04fa8348               // cmpq         $4, %rdx
	LONG $0xffa88d0f; WORD $0xffff // jge          LBB20_91, $-88(%rip)

LBB20_87:
	LONG $0x02fa8348               // cmpq         $2, %rdx
	LONG $0xffba820f; WORD $0xffff // jb           LBB20_88, $-70(%rip)

LBB20_92:
	LONG $0x0eb70f41               // movzwl       (%r14), %ecx
	LONG $0x08894166               // movw         %cx, (%r8)
	LONG $0x02c68349               // addq         $2, %r14
	LONG $0x02c08349               // addq         $2, %r8
	LONG $0xfec28348               // addq         $-2, %rdx
	WORD $0x894c; BYTE $0xf1       // movq         %r14, %rcx
	LONG $0x24748d4c; BYTE $0x20   // leaq         $32(%rsp), %r14
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0x000a840f; WORD $0x0000 // je           LBB20_70, $10(%rip)

LBB20_93:
	WORD $0x098a                 // movb         (%rcx), %cl
	WORD $0x8841; BYTE $0x08     // movb         %cl, (%r8)
	LONG $0x24748d4c; BYTE $0x20 // leaq         $32(%rsp), %r14

LBB20_70:
	LONG $0x6f7ac1c4; BYTE $0x16           // vmovdqu      (%r14), %xmm2
	LONG $0x6f7ac1c4; WORD $0x106e         // vmovdqu      $16(%r14), %xmm5
	LONG $0x6f7ac1c4; WORD $0x207e         // vmovdqu      $32(%r14), %xmm7
	LONG $0x6f7ac1c4; WORD $0x3076         // vmovdqu      $48(%r14), %xmm6
	LONG $0xc274a9c5                       // vpcmpeqb     %xmm2, %xmm10, %xmm0
	LONG $0xd0d7f9c5                       // vpmovmskb    %xmm0, %edx
	LONG $0xc574a9c5                       // vpcmpeqb     %xmm5, %xmm10, %xmm0
	LONG $0xc8d7f9c5                       // vpmovmskb    %xmm0, %ecx
	LONG $0xc774a9c5                       // vpcmpeqb     %xmm7, %xmm10, %xmm0
	LONG $0xd0d779c5                       // vpmovmskb    %xmm0, %r10d
	LONG $0xc674a9c5                       // vpcmpeqb     %xmm6, %xmm10, %xmm0
	LONG $0xe8d779c5                       // vpmovmskb    %xmm0, %r13d
	LONG $0x30e5c149                       // shlq         $48, %r13
	LONG $0x20e2c149                       // shlq         $32, %r10
	LONG $0x10e1c148                       // shlq         $16, %rcx
	WORD $0x0948; BYTE $0xca               // orq          %rcx, %rdx
	WORD $0x094c; BYTE $0xd2               // orq          %r10, %rdx
	WORD $0x094c; BYTE $0xea               // orq          %r13, %rdx
	WORD $0x8948; BYTE $0xd1               // movq         %rdx, %rcx
	WORD $0x094c; BYTE $0xe1               // orq          %r12, %rcx
	LONG $0x004e840f; WORD $0x0000         // je           LBB20_72, $78(%rip)
	WORD $0x894d; BYTE $0xe0               // movq         %r12, %r8
	WORD $0xf749; BYTE $0xd0               // notq         %r8
	WORD $0x2149; BYTE $0xd0               // andq         %rdx, %r8
	LONG $0x00148d4f                       // leaq         (%r8,%r8), %r10
	WORD $0x094d; BYTE $0xe2               // orq          %r12, %r10
	WORD $0x894d; BYTE $0xd4               // movq         %r10, %r12
	QUAD $0xaaaaaaaaaaaab948; WORD $0xaaaa // movabsq      $-6148914691236517206, %rcx
	WORD $0x3149; BYTE $0xcc               // xorq         %rcx, %r12
	WORD $0x2148; BYTE $0xca               // andq         %rcx, %rdx
	WORD $0x214c; BYTE $0xe2               // andq         %r12, %rdx
	WORD $0xc931                           // xorl         %ecx, %ecx
	WORD $0x014c; BYTE $0xc2               // addq         %r8, %rdx
	WORD $0x920f; BYTE $0xc1               // setb         %cl
	LONG $0x244c8948; BYTE $0x18           // movq         %rcx, $24(%rsp)
	WORD $0x0148; BYTE $0xd2               // addq         %rdx, %rdx
	QUAD $0x555555555555b948; WORD $0x5555 // movabsq      $6148914691236517205, %rcx
	WORD $0x3148; BYTE $0xca               // xorq         %rcx, %rdx
	WORD $0x214c; BYTE $0xd2               // andq         %r10, %rdx
	WORD $0xf748; BYTE $0xd2               // notq         %rdx
	LONG $0x00000ee9; BYTE $0x00           // jmp          LBB20_73, $14(%rip)

LBB20_72:
	LONG $0xffc2c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rdx
	WORD $0xc931                               // xorl         %ecx, %ecx
	LONG $0x244c8948; BYTE $0x18               // movq         %rcx, $24(%rsp)

LBB20_73:
	LONG $0xc174d1c5               // vpcmpeqb     %xmm1, %xmm5, %xmm0
	LONG $0xc8d7f9c5               // vpmovmskb    %xmm0, %ecx
	LONG $0x10e1c148               // shlq         $16, %rcx
	LONG $0xc174e9c5               // vpcmpeqb     %xmm1, %xmm2, %xmm0
	LONG $0xd0d779c5               // vpmovmskb    %xmm0, %r10d
	WORD $0x0949; BYTE $0xca       // orq          %rcx, %r10
	LONG $0xc174c1c5               // vpcmpeqb     %xmm1, %xmm7, %xmm0
	LONG $0xe8d779c5               // vpmovmskb    %xmm0, %r13d
	LONG $0x20e5c149               // shlq         $32, %r13
	WORD $0x094d; BYTE $0xd5       // orq          %r10, %r13
	LONG $0xc174c9c5               // vpcmpeqb     %xmm1, %xmm6, %xmm0
	LONG $0xc8d7f9c5               // vpmovmskb    %xmm0, %ecx
	LONG $0x30e1c148               // shlq         $48, %rcx
	WORD $0x094c; BYTE $0xe9       // orq          %r13, %rcx
	WORD $0x2148; BYTE $0xd1       // andq         %rdx, %rcx
	LONG $0x6ef9e1c4; BYTE $0xc1   // vmovq        %rcx, %xmm0
	LONG $0x4479c3c4; WORD $0x00c1 // vpclmulqdq   $0, %xmm9, %xmm0, %xmm0
	LONG $0x7ef9c1c4; BYTE $0xc5   // vmovq        %xmm0, %r13
	WORD $0x314d; BYTE $0xdd       // xorq         %r11, %r13
	LONG $0xc374e9c5               // vpcmpeqb     %xmm3, %xmm2, %xmm0
	LONG $0xd8d779c5               // vpmovmskb    %xmm0, %r11d
	LONG $0xc374d1c5               // vpcmpeqb     %xmm3, %xmm5, %xmm0
	LONG $0xc8d7f9c5               // vpmovmskb    %xmm0, %ecx
	LONG $0xc374c1c5               // vpcmpeqb     %xmm3, %xmm7, %xmm0
	LONG $0xd0d7f9c5               // vpmovmskb    %xmm0, %edx
	LONG $0xc374c9c5               // vpcmpeqb     %xmm3, %xmm6, %xmm0
	LONG $0xd0d779c5               // vpmovmskb    %xmm0, %r10d
	LONG $0x30e2c149               // shlq         $48, %r10
	LONG $0x20e2c148               // shlq         $32, %rdx
	LONG $0x10e1c148               // shlq         $16, %rcx
	WORD $0x0949; BYTE $0xcb       // orq          %rcx, %r11
	WORD $0x0949; BYTE $0xd3       // orq          %rdx, %r11
	WORD $0x094d; BYTE $0xd3       // orq          %r10, %r11
	WORD $0x894d; BYTE $0xea       // movq         %r13, %r10
	WORD $0xf749; BYTE $0xd2       // notq         %r10
	WORD $0x214d; BYTE $0xd3       // andq         %r10, %r11
	LONG $0xc474e9c5               // vpcmpeqb     %xmm4, %xmm2, %xmm0
	LONG $0xd0d7f9c5               // vpmovmskb    %xmm0, %edx
	LONG $0xc474d1c5               // vpcmpeqb     %xmm4, %xmm5, %xmm0
	LONG $0xc8d7f9c5               // vpmovmskb    %xmm0, %ecx
	LONG $0xc474c1c5               // vpcmpeqb     %xmm4, %xmm7, %xmm0
	LONG $0xc0d779c5               // vpmovmskb    %xmm0, %r8d
	LONG $0xc474c9c5               // vpcmpeqb     %xmm4, %xmm6, %xmm0
	LONG $0xe0d779c5               // vpmovmskb    %xmm0, %r12d
	LONG $0x30e4c149               // shlq         $48, %r12
	LONG $0x20e0c149               // shlq         $32, %r8
	LONG $0x10e1c148               // shlq         $16, %rcx
	WORD $0x0948; BYTE $0xca       // orq          %rcx, %rdx
	WORD $0x094c; BYTE $0xc2       // orq          %r8, %rdx
	WORD $0x094c; BYTE $0xe2       // orq          %r12, %rdx
	WORD $0x214c; BYTE $0xd2       // andq         %r10, %rdx
	LONG $0x0034840f; WORD $0x0000 // je           LBB20_77, $52(%rip)
	LONG $0x24648b4c; BYTE $0x18   // movq         $24(%rsp), %r12
	WORD $0x9090; BYTE $0x90       // .p2align 4, 0x90

LBB20_75:
	LONG $0xff528d4c               // leaq         $-1(%rdx), %r10
	WORD $0x894c; BYTE $0xd1       // movq         %r10, %rcx
	WORD $0x214c; BYTE $0xd9       // andq         %r11, %rcx
	LONG $0xb80f48f3; BYTE $0xc9   // popcntq      %rcx, %rcx
	WORD $0x014c; BYTE $0xf9       // addq         %r15, %rcx
	WORD $0x3948; BYTE $0xd9       // cmpq         %rbx, %rcx
	LONG $0x03c6860f; WORD $0x0000 // jbe          LBB20_121, $966(%rip)
	WORD $0xff48; BYTE $0xc3       // incq         %rbx
	WORD $0x214c; BYTE $0xd2       // andq         %r10, %rdx
	LONG $0xffd9850f; WORD $0xffff // jne          LBB20_75, $-39(%rip)
	LONG $0x000005e9; BYTE $0x00   // jmp          LBB20_78, $5(%rip)

LBB20_77:
	LONG $0x24648b4c; BYTE $0x18 // movq         $24(%rsp), %r12

LBB20_78:
	LONG $0x3ffdc149               // sarq         $63, %r13
	LONG $0xb80f49f3; BYTE $0xcb   // popcntq      %r11, %rcx
	WORD $0x0149; BYTE $0xcf       // addq         %rcx, %r15
	LONG $0x40c68349               // addq         $64, %r14
	LONG $0x244c8b48; BYTE $0x10   // movq         $16(%rsp), %rcx
	LONG $0xc0c18348               // addq         $-64, %rcx
	WORD $0x894d; BYTE $0xeb       // movq         %r13, %r11
	LONG $0x40f98348               // cmpq         $64, %rcx
	LONG $0x244c8948; BYTE $0x10   // movq         %rcx, $16(%rsp)
	LONG $0xfe218d0f; WORD $0xffff // jge          LBB20_70, $-479(%rip)
	LONG $0xfffce9e9; BYTE $0xff   // jmp          LBB20_79, $-791(%rip)

LBB20_94:
	LONG $0x05518d49               // leaq         $5(%r9), %rdx
	LONG $0x08573b48               // cmpq         $8(%rdi), %rdx
	LONG $0xfb49830f; WORD $0xffff // jae          LBB20_57, $-1207(%rip)

LBB20_95:
	WORD $0x8948; BYTE $0x16     // movq         %rdx, (%rsi)
	LONG $0xfffb3ee9; BYTE $0xff // jmp          LBB20_56, $-1218(%rip)

LBB20_96:
	LONG $0x084f8b48               // movq         $8(%rdi), %rcx
	WORD $0x2948; BYTE $0xd9       // subq         %rbx, %rcx
	WORD $0x0149; BYTE $0xde       // addq         %rbx, %r14
	WORD $0x3145; BYTE $0xdb       // xorl         %r11d, %r11d
	QUAD $0xfffff784156f79c5       // vmovdqa      $-2172(%rip), %xmm10  /* LCPI20_8(%rip) */
	QUAD $0xfffff76c0d6ff9c5       // vmovdqa      $-2196(%rip), %xmm1  /* LCPI20_7(%rip) */
	LONG $0x763141c4; BYTE $0xc9   // vpcmpeqd     %xmm9, %xmm9, %xmm9
	QUAD $0xfffff77f1d6ff9c5       // vmovdqa      $-2177(%rip), %xmm3  /* LCPI20_9(%rip) */
	QUAD $0xfffff787256ff9c5       // vmovdqa      $-2169(%rip), %xmm4  /* LCPI20_10(%rip) */
	LONG $0x573841c4; BYTE $0xc0   // vxorps       %xmm8, %xmm8, %xmm8
	WORD $0x3145; BYTE $0xe4       // xorl         %r12d, %r12d
	WORD $0x3145; BYTE $0xff       // xorl         %r15d, %r15d
	WORD $0xdb31                   // xorl         %ebx, %ebx
	LONG $0x40f98348               // cmpq         $64, %rcx
	LONG $0x244c8948; BYTE $0x10   // movq         %rcx, $16(%rsp)
	LONG $0x01338d0f; WORD $0x0000 // jge          LBB20_97, $307(%rip)

LBB20_106:
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0x03ec8e0f; WORD $0x0000 // jle          LBB20_131, $1004(%rip)
	LONG $0x44297cc5; WORD $0x4024 // vmovaps      %ymm8, $64(%rsp)
	LONG $0x44297cc5; WORD $0x2024 // vmovaps      %ymm8, $32(%rsp)
	WORD $0x8944; BYTE $0xf1       // movl         %r14d, %ecx
	LONG $0x0fffe181; WORD $0x0000 // andl         $4095, %ecx
	LONG $0x0fc1f981; WORD $0x0000 // cmpl         $4033, %ecx
	LONG $0x0109820f; WORD $0x0000 // jb           LBB20_97, $265(%rip)
	LONG $0x247c8348; WORD $0x2010 // cmpq         $32, $16(%rsp)
	LONG $0x002e820f; WORD $0x0000 // jb           LBB20_110, $46(%rip)
	LONG $0x1078c1c4; BYTE $0x06   // vmovups      (%r14), %xmm0
	LONG $0x4429f8c5; WORD $0x2024 // vmovaps      %xmm0, $32(%rsp)
	LONG $0x6f7ac1c4; WORD $0x1046 // vmovdqu      $16(%r14), %xmm0
	LONG $0x447ff9c5; WORD $0x3024 // vmovdqa      %xmm0, $48(%rsp)
	LONG $0x20c68349               // addq         $32, %r14
	LONG $0x244c8b48; BYTE $0x10   // movq         $16(%rsp), %rcx
	LONG $0xe0518d48               // leaq         $-32(%rcx), %rdx
	LONG $0x24448d4c; BYTE $0x40   // leaq         $64(%rsp), %r8
	LONG $0x00000ae9; BYTE $0x00   // jmp          LBB20_111, $10(%rip)

LBB20_110:
	LONG $0x24448d4c; BYTE $0x20 // leaq         $32(%rsp), %r8
	LONG $0x24548b48; BYTE $0x10 // movq         $16(%rsp), %rdx

LBB20_111:
	LONG $0x10fa8348               // cmpq         $16, %rdx
	LONG $0x005c820f; WORD $0x0000 // jb           LBB20_112, $92(%rip)
	LONG $0x6f7ac1c4; BYTE $0x06   // vmovdqu      (%r14), %xmm0
	LONG $0x7f7ac1c4; BYTE $0x00   // vmovdqu      %xmm0, (%r8)
	LONG $0x10c68349               // addq         $16, %r14
	LONG $0x10c08349               // addq         $16, %r8
	LONG $0xf0c28348               // addq         $-16, %rdx
	LONG $0x08fa8348               // cmpq         $8, %rdx
	LONG $0x0046830f; WORD $0x0000 // jae          LBB20_117, $70(%rip)

LBB20_113:
	LONG $0x04fa8348               // cmpq         $4, %rdx
	LONG $0x00588c0f; WORD $0x0000 // jl           LBB20_114, $88(%rip)

LBB20_118:
	WORD $0x8b41; BYTE $0x0e       // movl         (%r14), %ecx
	WORD $0x8941; BYTE $0x08       // movl         %ecx, (%r8)
	LONG $0x04c68349               // addq         $4, %r14
	LONG $0x04c08349               // addq         $4, %r8
	LONG $0xfcc28348               // addq         $-4, %rdx
	LONG $0x02fa8348               // cmpq         $2, %rdx
	LONG $0x0046830f; WORD $0x0000 // jae          LBB20_119, $70(%rip)

LBB20_115:
	WORD $0x894c; BYTE $0xf1       // movq         %r14, %rcx
	LONG $0x24748d4c; BYTE $0x20   // leaq         $32(%rsp), %r14
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0x005a850f; WORD $0x0000 // jne          LBB20_120, $90(%rip)
	LONG $0x00005fe9; BYTE $0x00   // jmp          LBB20_97, $95(%rip)

LBB20_112:
	LONG $0x08fa8348               // cmpq         $8, %rdx
	LONG $0xffba820f; WORD $0xffff // jb           LBB20_113, $-70(%rip)

LBB20_117:
	WORD $0x8b49; BYTE $0x0e       // movq         (%r14), %rcx
	WORD $0x8949; BYTE $0x08       // movq         %rcx, (%r8)
	LONG $0x08c68349               // addq         $8, %r14
	LONG $0x08c08349               // addq         $8, %r8
	LONG $0xf8c28348               // addq         $-8, %rdx
	LONG $0x04fa8348               // cmpq         $4, %rdx
	LONG $0xffa88d0f; WORD $0xffff // jge          LBB20_118, $-88(%rip)

LBB20_114:
	LONG $0x02fa8348               // cmpq         $2, %rdx
	LONG $0xffba820f; WORD $0xffff // jb           LBB20_115, $-70(%rip)

LBB20_119:
	LONG $0x0eb70f41               // movzwl       (%r14), %ecx
	LONG $0x08894166               // movw         %cx, (%r8)
	LONG $0x02c68349               // addq         $2, %r14
	LONG $0x02c08349               // addq         $2, %r8
	LONG $0xfec28348               // addq         $-2, %rdx
	WORD $0x894c; BYTE $0xf1       // movq         %r14, %rcx
	LONG $0x24748d4c; BYTE $0x20   // leaq         $32(%rsp), %r14
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0x000a840f; WORD $0x0000 // je           LBB20_97, $10(%rip)

LBB20_120:
	WORD $0x098a                 // movb         (%rcx), %cl
	WORD $0x8841; BYTE $0x08     // movb         %cl, (%r8)
	LONG $0x24748d4c; BYTE $0x20 // leaq         $32(%rsp), %r14

LBB20_97:
	LONG $0x6f7ac1c4; BYTE $0x16           // vmovdqu      (%r14), %xmm2
	LONG $0x6f7ac1c4; WORD $0x106e         // vmovdqu      $16(%r14), %xmm5
	LONG $0x6f7ac1c4; WORD $0x207e         // vmovdqu      $32(%r14), %xmm7
	LONG $0x6f7ac1c4; WORD $0x3076         // vmovdqu      $48(%r14), %xmm6
	LONG $0xc274a9c5                       // vpcmpeqb     %xmm2, %xmm10, %xmm0
	LONG $0xd0d7f9c5                       // vpmovmskb    %xmm0, %edx
	LONG $0xc574a9c5                       // vpcmpeqb     %xmm5, %xmm10, %xmm0
	LONG $0xc8d7f9c5                       // vpmovmskb    %xmm0, %ecx
	LONG $0xc774a9c5                       // vpcmpeqb     %xmm7, %xmm10, %xmm0
	LONG $0xd0d779c5                       // vpmovmskb    %xmm0, %r10d
	LONG $0xc674a9c5                       // vpcmpeqb     %xmm6, %xmm10, %xmm0
	LONG $0xe8d779c5                       // vpmovmskb    %xmm0, %r13d
	LONG $0x30e5c149                       // shlq         $48, %r13
	LONG $0x20e2c149                       // shlq         $32, %r10
	LONG $0x10e1c148                       // shlq         $16, %rcx
	WORD $0x0948; BYTE $0xca               // orq          %rcx, %rdx
	WORD $0x094c; BYTE $0xd2               // orq          %r10, %rdx
	WORD $0x094c; BYTE $0xea               // orq          %r13, %rdx
	WORD $0x8948; BYTE $0xd1               // movq         %rdx, %rcx
	WORD $0x094c; BYTE $0xe1               // orq          %r12, %rcx
	LONG $0x004e840f; WORD $0x0000         // je           LBB20_99, $78(%rip)
	WORD $0x894d; BYTE $0xe0               // movq         %r12, %r8
	WORD $0xf749; BYTE $0xd0               // notq         %r8
	WORD $0x2149; BYTE $0xd0               // andq         %rdx, %r8
	LONG $0x00148d4f                       // leaq         (%r8,%r8), %r10
	WORD $0x094d; BYTE $0xe2               // orq          %r12, %r10
	WORD $0x894d; BYTE $0xd4               // movq         %r10, %r12
	QUAD $0xaaaaaaaaaaaab948; WORD $0xaaaa // movabsq      $-6148914691236517206, %rcx
	WORD $0x3149; BYTE $0xcc               // xorq         %rcx, %r12
	WORD $0x2148; BYTE $0xca               // andq         %rcx, %rdx
	WORD $0x214c; BYTE $0xe2               // andq         %r12, %rdx
	WORD $0xc931                           // xorl         %ecx, %ecx
	WORD $0x014c; BYTE $0xc2               // addq         %r8, %rdx
	WORD $0x920f; BYTE $0xc1               // setb         %cl
	LONG $0x244c8948; BYTE $0x18           // movq         %rcx, $24(%rsp)
	WORD $0x0148; BYTE $0xd2               // addq         %rdx, %rdx
	QUAD $0x555555555555b948; WORD $0x5555 // movabsq      $6148914691236517205, %rcx
	WORD $0x3148; BYTE $0xca               // xorq         %rcx, %rdx
	WORD $0x214c; BYTE $0xd2               // andq         %r10, %rdx
	WORD $0xf748; BYTE $0xd2               // notq         %rdx
	LONG $0x00000ee9; BYTE $0x00           // jmp          LBB20_100, $14(%rip)

LBB20_99:
	LONG $0xffc2c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rdx
	WORD $0xc931                               // xorl         %ecx, %ecx
	LONG $0x244c8948; BYTE $0x18               // movq         %rcx, $24(%rsp)

LBB20_100:
	LONG $0xc174d1c5               // vpcmpeqb     %xmm1, %xmm5, %xmm0
	LONG $0xc8d7f9c5               // vpmovmskb    %xmm0, %ecx
	LONG $0x10e1c148               // shlq         $16, %rcx
	LONG $0xc174e9c5               // vpcmpeqb     %xmm1, %xmm2, %xmm0
	LONG $0xd0d779c5               // vpmovmskb    %xmm0, %r10d
	WORD $0x0949; BYTE $0xca       // orq          %rcx, %r10
	LONG $0xc174c1c5               // vpcmpeqb     %xmm1, %xmm7, %xmm0
	LONG $0xe8d779c5               // vpmovmskb    %xmm0, %r13d
	LONG $0x20e5c149               // shlq         $32, %r13
	WORD $0x094d; BYTE $0xd5       // orq          %r10, %r13
	LONG $0xc174c9c5               // vpcmpeqb     %xmm1, %xmm6, %xmm0
	LONG $0xc8d7f9c5               // vpmovmskb    %xmm0, %ecx
	LONG $0x30e1c148               // shlq         $48, %rcx
	WORD $0x094c; BYTE $0xe9       // orq          %r13, %rcx
	WORD $0x2148; BYTE $0xd1       // andq         %rdx, %rcx
	LONG $0x6ef9e1c4; BYTE $0xc1   // vmovq        %rcx, %xmm0
	LONG $0x4479c3c4; WORD $0x00c1 // vpclmulqdq   $0, %xmm9, %xmm0, %xmm0
	LONG $0x7ef9c1c4; BYTE $0xc5   // vmovq        %xmm0, %r13
	WORD $0x314d; BYTE $0xdd       // xorq         %r11, %r13
	LONG $0xc374e9c5               // vpcmpeqb     %xmm3, %xmm2, %xmm0
	LONG $0xd8d779c5               // vpmovmskb    %xmm0, %r11d
	LONG $0xc374d1c5               // vpcmpeqb     %xmm3, %xmm5, %xmm0
	LONG $0xc8d7f9c5               // vpmovmskb    %xmm0, %ecx
	LONG $0xc374c1c5               // vpcmpeqb     %xmm3, %xmm7, %xmm0
	LONG $0xd0d7f9c5               // vpmovmskb    %xmm0, %edx
	LONG $0xc374c9c5               // vpcmpeqb     %xmm3, %xmm6, %xmm0
	LONG $0xd0d779c5               // vpmovmskb    %xmm0, %r10d
	LONG $0x30e2c149               // shlq         $48, %r10
	LONG $0x20e2c148               // shlq         $32, %rdx
	LONG $0x10e1c148               // shlq         $16, %rcx
	WORD $0x0949; BYTE $0xcb       // orq          %rcx, %r11
	WORD $0x0949; BYTE $0xd3       // orq          %rdx, %r11
	WORD $0x094d; BYTE $0xd3       // orq          %r10, %r11
	WORD $0x894d; BYTE $0xea       // movq         %r13, %r10
	WORD $0xf749; BYTE $0xd2       // notq         %r10
	WORD $0x214d; BYTE $0xd3       // andq         %r10, %r11
	LONG $0xc474e9c5               // vpcmpeqb     %xmm4, %xmm2, %xmm0
	LONG $0xd0d7f9c5               // vpmovmskb    %xmm0, %edx
	LONG $0xc474d1c5               // vpcmpeqb     %xmm4, %xmm5, %xmm0
	LONG $0xc8d7f9c5               // vpmovmskb    %xmm0, %ecx
	LONG $0xc474c1c5               // vpcmpeqb     %xmm4, %xmm7, %xmm0
	LONG $0xc0d779c5               // vpmovmskb    %xmm0, %r8d
	LONG $0xc474c9c5               // vpcmpeqb     %xmm4, %xmm6, %xmm0
	LONG $0xe0d779c5               // vpmovmskb    %xmm0, %r12d
	LONG $0x30e4c149               // shlq         $48, %r12
	LONG $0x20e0c149               // shlq         $32, %r8
	LONG $0x10e1c148               // shlq         $16, %rcx
	WORD $0x0948; BYTE $0xca       // orq          %rcx, %rdx
	WORD $0x094c; BYTE $0xc2       // orq          %r8, %rdx
	WORD $0x094c; BYTE $0xe2       // orq          %r12, %rdx
	WORD $0x214c; BYTE $0xd2       // andq         %r10, %rdx
	LONG $0x0039840f; WORD $0x0000 // je           LBB20_104, $57(%rip)
	LONG $0x24648b4c; BYTE $0x18   // movq         $24(%rsp), %r12
	QUAD $0x9090909090909090       // .p2align 4, 0x90

LBB20_102:
	LONG $0xff528d4c               // leaq         $-1(%rdx), %r10
	WORD $0x894c; BYTE $0xd1       // movq         %r10, %rcx
	WORD $0x214c; BYTE $0xd9       // andq         %r11, %rcx
	LONG $0xb80f48f3; BYTE $0xc9   // popcntq      %rcx, %rcx
	WORD $0x014c; BYTE $0xf9       // addq         %r15, %rcx
	WORD $0x3948; BYTE $0xd9       // cmpq         %rbx, %rcx
	LONG $0x0046860f; WORD $0x0000 // jbe          LBB20_121, $70(%rip)
	WORD $0xff48; BYTE $0xc3       // incq         %rbx
	WORD $0x214c; BYTE $0xd2       // andq         %r10, %rdx
	LONG $0xffd9850f; WORD $0xffff // jne          LBB20_102, $-39(%rip)
	LONG $0x000005e9; BYTE $0x00   // jmp          LBB20_105, $5(%rip)

LBB20_104:
	LONG $0x24648b4c; BYTE $0x18 // movq         $24(%rsp), %r12

LBB20_105:
	LONG $0x3ffdc149               // sarq         $63, %r13
	LONG $0xb80f49f3; BYTE $0xcb   // popcntq      %r11, %rcx
	WORD $0x0149; BYTE $0xcf       // addq         %rcx, %r15
	LONG $0x40c68349               // addq         $64, %r14
	LONG $0x244c8b48; BYTE $0x10   // movq         $16(%rsp), %rcx
	LONG $0xc0c18348               // addq         $-64, %rcx
	WORD $0x894d; BYTE $0xeb       // movq         %r13, %r11
	LONG $0x40f98348               // cmpq         $64, %rcx
	LONG $0x244c8948; BYTE $0x10   // movq         %rcx, $16(%rsp)
	LONG $0xfe1c8d0f; WORD $0xffff // jge          LBB20_97, $-484(%rip)
	LONG $0xfffce4e9; BYTE $0xff   // jmp          LBB20_106, $-796(%rip)

LBB20_121:
	LONG $0x08478b48                           // movq         $8(%rdi), %rax
	LONG $0xcabc0f48                           // bsfq         %rdx, %rcx
	LONG $0x244c2b48; BYTE $0x10               // subq         $16(%rsp), %rcx
	LONG $0x01448d48; BYTE $0x01               // leaq         $1(%rcx,%rax), %rax
	WORD $0x8948; BYTE $0x06                   // movq         %rax, (%rsi)
	LONG $0x084f8b48                           // movq         $8(%rdi), %rcx
	WORD $0x3948; BYTE $0xc8                   // cmpq         %rcx, %rax
	LONG $0xc1470f48                           // cmovaq       %rcx, %rax
	WORD $0x8948; BYTE $0x06                   // movq         %rax, (%rsi)
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	LONG $0xc8470f4c                           // cmovaq       %rax, %r9
	LONG $0xfff7a1e9; BYTE $0xff               // jmp          LBB20_56, $-2143(%rip)

LBB20_128:
	WORD $0x894c; BYTE $0xf0                   // movq         %r14, %rax
	WORD $0xf748; BYTE $0xd0                   // notq         %rax
	WORD $0x0149; BYTE $0xc1                   // addq         %rax, %r9
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	WORD $0x394d; BYTE $0xc1                   // cmpq         %r8, %r9
	LONG $0xf6a0820f; WORD $0xffff             // jb           LBB20_40, $-2400(%rip)
	LONG $0xfff786e9; BYTE $0xff               // jmp          LBB20_57, $-2170(%rip)

LBB20_66:
	WORD $0x854d; BYTE $0xdb       // testq        %r11, %r11
	LONG $0x008b850f; WORD $0x0000 // jne          LBB20_132, $139(%rip)
	WORD $0xff49; BYTE $0xc2       // incq         %r10
	LONG $0x0f5c8d4b; BYTE $0x01   // leaq         $1(%r15,%r9), %rbx

LBB20_68:
	WORD $0x854d; BYTE $0xd2       // testq        %r10, %r10
	LONG $0x0024850f; WORD $0x0000 // jne          LBB20_125, $36(%rip)
	LONG $0xfff767e9; BYTE $0xff   // jmp          LBB20_57, $-2201(%rip)

LBB20_123:
	LONG $0xfec2c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rdx
	LONG $0x000002b8; BYTE $0x00               // movl         $2, %eax
	WORD $0x0148; BYTE $0xc3                   // addq         %rax, %rbx
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	WORD $0x0149; BYTE $0xd2                   // addq         %rdx, %r10
	LONG $0xf748840f; WORD $0xffff             // je           LBB20_57, $-2232(%rip)

LBB20_125:
	WORD $0xb60f; BYTE $0x03                   // movzbl       (%rbx), %eax
	WORD $0x5c3c                               // cmpb         $92, %al
	LONG $0xffd6840f; WORD $0xffff             // je           LBB20_123, $-42(%rip)
	WORD $0x223c                               // cmpb         $34, %al
	LONG $0x0024840f; WORD $0x0000             // je           LBB20_129, $36(%rip)
	LONG $0xffc2c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rdx
	LONG $0x000001b8; BYTE $0x00               // movl         $1, %eax
	WORD $0x0148; BYTE $0xc3                   // addq         %rax, %rbx
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	WORD $0x0149; BYTE $0xd2                   // addq         %rdx, %r10
	LONG $0xffce850f; WORD $0xffff             // jne          LBB20_125, $-50(%rip)
	LONG $0xfff711e9; BYTE $0xff               // jmp          LBB20_57, $-2287(%rip)

LBB20_129:
	WORD $0x294c; BYTE $0xf3     // subq         %r14, %rbx
	WORD $0xff48; BYTE $0xc3     // incq         %rbx
	LONG $0xfff700e9; BYTE $0xff // jmp          LBB20_55, $-2304(%rip)

LBB20_130:
	WORD $0x014c; BYTE $0xf3     // addq         %r14, %rbx
	LONG $0xffff89e9; BYTE $0xff // jmp          LBB20_68, $-119(%rip)

LBB20_131:
	LONG $0x084f8b48             // movq         $8(%rdi), %rcx
	WORD $0x8948; BYTE $0x0e     // movq         %rcx, (%rsi)
	LONG $0xfff6f2e9; BYTE $0xff // jmp          LBB20_57, $-2318(%rip)

LBB20_132:
	WORD $0x394d; BYTE $0xc1       // cmpq         %r8, %r9
	LONG $0xf6e9840f; WORD $0xffff // je           LBB20_57, $-2327(%rip)
	LONG $0x0f5c8d4b; BYTE $0x02   // leaq         $2(%r15,%r9), %rbx
	LONG $0xffff6ae9; BYTE $0xff   // jmp          LBB20_68, $-150(%rip)
	WORD $0x9090; BYTE $0x90       // .p2align 2, 0x90

	// .set L20_0_set_57, LBB20_57-LJTI20_0
	// .set L20_0_set_59, LBB20_59-LJTI20_0
	// .set L20_0_set_60, LBB20_60-LJTI20_0
	// .set L20_0_set_42, LBB20_42-LJTI20_0
	// .set L20_0_set_69, LBB20_69-LJTI20_0
	// .set L20_0_set_94, LBB20_94-LJTI20_0
	// .set L20_0_set_58, LBB20_58-LJTI20_0
	// .set L20_0_set_96, LBB20_96-LJTI20_0
LJTI20_0:
	LONG $0xfffff6dc // .long L20_0_set_57
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff710 // .long L20_0_set_60
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff61d // .long L20_0_set_42
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff61d // .long L20_0_set_42
	LONG $0xfffff61d // .long L20_0_set_42
	LONG $0xfffff61d // .long L20_0_set_42
	LONG $0xfffff61d // .long L20_0_set_42
	LONG $0xfffff61d // .long L20_0_set_42
	LONG $0xfffff61d // .long L20_0_set_42
	LONG $0xfffff61d // .long L20_0_set_42
	LONG $0xfffff61d // .long L20_0_set_42
	LONG $0xfffff61d // .long L20_0_set_42
	LONG $0xfffff61d // .long L20_0_set_42
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff820 // .long L20_0_set_69
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffffb85 // .long L20_0_set_94
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff6ee // .long L20_0_set_58
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff6ee // .long L20_0_set_58
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffff701 // .long L20_0_set_59
	LONG $0xfffffb9b // .long L20_0_set_96
	LONG $0x00000000 // .p2align 4, 0x00

LCPI21_0:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI21_1:
	QUAD $0x0909090909090909; QUAD $0x0909090909090909 // .space 16, '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'

LCPI21_2:
	QUAD $0x0a0a0a0a0a0a0a0a; QUAD $0x0a0a0a0a0a0a0a0a // .space 16, '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'

LCPI21_3:
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'

LCPI21_4:
	QUAD $0x2222222222222222; QUAD $0x2222222222222222 // .space 16, '""""""""""""""""'

LCPI21_5:
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'

	// .p2align 4, 0x90
_get_by_path:
	BYTE $0x55                             // pushq        %rbp
	WORD $0x8948; BYTE $0xe5               // movq         %rsp, %rbp
	WORD $0x5741                           // pushq        %r15
	WORD $0x5641                           // pushq        %r14
	WORD $0x5541                           // pushq        %r13
	WORD $0x5441                           // pushq        %r12
	BYTE $0x53                             // pushq        %rbx
	LONG $0x48ec8348                       // subq         $72, %rsp
	WORD $0x8949; BYTE $0xf4               // movq         %rsi, %r12
	WORD $0x8948; BYTE $0xfb               // movq         %rdi, %rbx
	LONG $0x08528b4c                       // movq         $8(%rdx), %r10
	WORD $0x854d; BYTE $0xd2               // testq        %r10, %r10
	LONG $0x170e840f; WORD $0x0000         // je           LBB21_316, $5902(%rip)
	WORD $0x8b48; BYTE $0x02               // movq         (%rdx), %rax
	LONG $0x04e2c149                       // shlq         $4, %r10
	LONG $0xa0458948                       // movq         %rax, $-96(%rbp)
	WORD $0x0149; BYTE $0xc2               // addq         %rax, %r10
	WORD $0x8b4c; BYTE $0x2b               // movq         (%rbx), %r13
	LONG $0x241c8b4d                       // movq         (%r12), %r11
	QUAD $0x000100002600be49; WORD $0x0000 // movabsq      $4294977024, %r14
	QUAD $0xffffff55056f79c5               // vmovdqa      $-171(%rip), %xmm8  /* LCPI21_0(%rip) */
	QUAD $0xffffff5d0d6f79c5               // vmovdqa      $-163(%rip), %xmm9  /* LCPI21_1(%rip) */
	QUAD $0xffffff65156f79c5               // vmovdqa      $-155(%rip), %xmm10  /* LCPI21_2(%rip) */
	QUAD $0xffffff6d2d6ff9c5               // vmovdqa      $-147(%rip), %xmm5  /* LCPI21_3(%rip) */
	LONG $0xc85d8948                       // movq         %rbx, $-56(%rbp)
	LONG $0x9055894c                       // movq         %r10, $-112(%rbp)

LBB21_2:
	LONG $0x08438b4c                                       // movq         $8(%rbx), %r8
	WORD $0x394d; BYTE $0xc3                               // cmpq         %r8, %r11
	LONG $0x0038830f; WORD $0x0000                         // jae          LBB21_7, $56(%rip)
	LONG $0x1d4c8a43; BYTE $0x00                           // movb         (%r13,%r11), %cl
	WORD $0xf980; BYTE $0x0d                               // cmpb         $13, %cl
	LONG $0x002a840f; WORD $0x0000                         // je           LBB21_7, $42(%rip)
	WORD $0xf980; BYTE $0x20                               // cmpb         $32, %cl
	LONG $0x0021840f; WORD $0x0000                         // je           LBB21_7, $33(%rip)
	WORD $0xc180; BYTE $0xf7                               // addb         $-9, %cl
	WORD $0xf980; BYTE $0x01                               // cmpb         $1, %cl
	LONG $0x0015860f; WORD $0x0000                         // jbe          LBB21_7, $21(%rip)
	WORD $0x894c; BYTE $0xda                               // movq         %r11, %rdx
	LONG $0x0001f4e9; BYTE $0x00                           // jmp          LBB21_41, $500(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

LBB21_7:
	LONG $0x01538d49               // leaq         $1(%r11), %rdx
	WORD $0x394c; BYTE $0xc2       // cmpq         %r8, %rdx
	LONG $0x0023830f; WORD $0x0000 // jae          LBB21_11, $35(%rip)
	LONG $0x154c8a41; BYTE $0x00   // movb         (%r13,%rdx), %cl
	WORD $0xf980; BYTE $0x0d       // cmpb         $13, %cl
	LONG $0x0015840f; WORD $0x0000 // je           LBB21_11, $21(%rip)
	WORD $0xf980; BYTE $0x20       // cmpb         $32, %cl
	LONG $0x000c840f; WORD $0x0000 // je           LBB21_11, $12(%rip)
	WORD $0xc180; BYTE $0xf7       // addb         $-9, %cl
	WORD $0xf980; BYTE $0x01       // cmpb         $1, %cl
	LONG $0x01b7870f; WORD $0x0000 // ja           LBB21_41, $439(%rip)

	// .p2align 4, 0x90
LBB21_11:
	LONG $0x02538d49               // leaq         $2(%r11), %rdx
	WORD $0x394c; BYTE $0xc2       // cmpq         %r8, %rdx
	LONG $0x0023830f; WORD $0x0000 // jae          LBB21_15, $35(%rip)
	LONG $0x154c8a41; BYTE $0x00   // movb         (%r13,%rdx), %cl
	WORD $0xf980; BYTE $0x0d       // cmpb         $13, %cl
	LONG $0x0015840f; WORD $0x0000 // je           LBB21_15, $21(%rip)
	WORD $0xf980; BYTE $0x20       // cmpb         $32, %cl
	LONG $0x000c840f; WORD $0x0000 // je           LBB21_15, $12(%rip)
	WORD $0xc180; BYTE $0xf7       // addb         $-9, %cl
	WORD $0xf980; BYTE $0x01       // cmpb         $1, %cl
	LONG $0x0187870f; WORD $0x0000 // ja           LBB21_41, $391(%rip)

	// .p2align 4, 0x90
LBB21_15:
	LONG $0x03538d49               // leaq         $3(%r11), %rdx
	WORD $0x394c; BYTE $0xc2       // cmpq         %r8, %rdx
	LONG $0x0023830f; WORD $0x0000 // jae          LBB21_19, $35(%rip)
	LONG $0x154c8a41; BYTE $0x00   // movb         (%r13,%rdx), %cl
	WORD $0xf980; BYTE $0x0d       // cmpb         $13, %cl
	LONG $0x0015840f; WORD $0x0000 // je           LBB21_19, $21(%rip)
	WORD $0xf980; BYTE $0x20       // cmpb         $32, %cl
	LONG $0x000c840f; WORD $0x0000 // je           LBB21_19, $12(%rip)
	WORD $0xc180; BYTE $0xf7       // addb         $-9, %cl
	WORD $0xf980; BYTE $0x01       // cmpb         $1, %cl
	LONG $0x0157870f; WORD $0x0000 // ja           LBB21_41, $343(%rip)

	// .p2align 4, 0x90
LBB21_19:
	LONG $0x044b8d4d               // leaq         $4(%r11), %r9
	WORD $0x394d; BYTE $0xc8       // cmpq         %r9, %r8
	LONG $0x0123860f; WORD $0x0000 // jbe          LBB21_38, $291(%rip)
	LONG $0x0d548d4b; BYTE $0x00   // leaq         (%r13,%r9), %rdx
	WORD $0x894c; BYTE $0xc6       // movq         %r8, %rsi
	WORD $0x294c; BYTE $0xce       // subq         %r9, %rsi
	LONG $0x006b840f; WORD $0x0000 // je           LBB21_28, $107(%rip)
	WORD $0xd189                   // movl         %edx, %ecx
	WORD $0xe183; BYTE $0x0f       // andl         $15, %ecx
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0x005d840f; WORD $0x0000 // je           LBB21_28, $93(%rip)
	LONG $0x1d548d4b; BYTE $0x00   // leaq         (%r13,%r11), %rdx
	WORD $0x894c; BYTE $0xc6       // movq         %r8, %rsi
	WORD $0x294c; BYTE $0xde       // subq         %r11, %rsi
	LONG $0xfb7e8d48               // leaq         $-5(%rsi), %rdi
	WORD $0xdb31                   // xorl         %ebx, %ebx
	WORD $0x9090; BYTE $0x90       // .p2align 4, 0x90

LBB21_23:
	LONG $0x1a4cbe0f; BYTE $0x04   // movsbl       $4(%rdx,%rbx), %ecx
	WORD $0xf983; BYTE $0x20       // cmpl         $32, %ecx
	LONG $0x011b870f; WORD $0x0000 // ja           LBB21_40, $283(%rip)
	LONG $0xcea30f49               // btq          %rcx, %r14
	LONG $0x0111830f; WORD $0x0000 // jae          LBB21_40, $273(%rip)
	LONG $0x014b8d48               // leaq         $1(%rbx), %rcx
	WORD $0x3948; BYTE $0xdf       // cmpq         %rbx, %rdi
	LONG $0x0014840f; WORD $0x0000 // je           LBB21_27, $20(%rip)
	LONG $0x1a448d48; BYTE $0x05   // leaq         $5(%rdx,%rbx), %rax
	WORD $0xe083; BYTE $0x0f       // andl         $15, %eax
	WORD $0x8948; BYTE $0xcb       // movq         %rcx, %rbx
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0xffc7850f; WORD $0xffff // jne          LBB21_23, $-57(%rip)

LBB21_27:
	LONG $0x11548d48; BYTE $0x04 // leaq         $4(%rcx,%rdx), %rdx
	WORD $0x2948; BYTE $0xce     // subq         %rcx, %rsi
	LONG $0xfcc68348             // addq         $-4, %rsi
	LONG $0xc85d8b48             // movq         $-56(%rbp), %rbx

LBB21_28:
	LONG $0x10fe8348                                       // cmpq         $16, %rsi
	LONG $0x004d820f; WORD $0x0000                         // jb           LBB21_31, $77(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

LBB21_29:
	LONG $0x026ff9c5               // vmovdqa      (%rdx), %xmm0
	LONG $0xc874b9c5               // vpcmpeqb     %xmm0, %xmm8, %xmm1
	LONG $0xd074b1c5               // vpcmpeqb     %xmm0, %xmm9, %xmm2
	LONG $0xcaebf1c5               // vpor         %xmm2, %xmm1, %xmm1
	LONG $0xd074a9c5               // vpcmpeqb     %xmm0, %xmm10, %xmm2
	LONG $0xc574f9c5               // vpcmpeqb     %xmm5, %xmm0, %xmm0
	LONG $0xc2ebf9c5               // vpor         %xmm2, %xmm0, %xmm0
	LONG $0xc1ebf9c5               // vpor         %xmm1, %xmm0, %xmm0
	LONG $0xc8d7f9c5               // vpmovmskb    %xmm0, %ecx
	LONG $0xfff98366               // cmpw         $-1, %cx
	LONG $0x0072850f; WORD $0x0000 // jne          LBB21_39, $114(%rip)
	LONG $0x10c28348               // addq         $16, %rdx
	LONG $0xf0c68348               // addq         $-16, %rsi
	LONG $0x0ffe8348               // cmpq         $15, %rsi
	LONG $0xffc0870f; WORD $0xffff // ja           LBB21_29, $-64(%rip)

LBB21_31:
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x0030840f; WORD $0x0000 // je           LBB21_37, $48(%rip)
	LONG $0x323c8d48               // leaq         (%rdx,%rsi), %rdi
	WORD $0xff48; BYTE $0xc2       // incq         %rdx

LBB21_33:
	LONG $0xff4abe0f               // movsbl       $-1(%rdx), %ecx
	WORD $0xf983; BYTE $0x20       // cmpl         $32, %ecx
	LONG $0x14de870f; WORD $0x0000 // ja           LBB21_42, $5342(%rip)
	LONG $0xcea30f49               // btq          %rcx, %r14
	LONG $0x14d4830f; WORD $0x0000 // jae          LBB21_42, $5332(%rip)
	WORD $0xff48; BYTE $0xce       // decq         %rsi
	WORD $0xff48; BYTE $0xc2       // incq         %rdx
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0xffda850f; WORD $0xffff // jne          LBB21_33, $-38(%rip)
	WORD $0x8948; BYTE $0xfa       // movq         %rdi, %rdx

LBB21_37:
	WORD $0x294c; BYTE $0xea       // subq         %r13, %rdx
	WORD $0x394c; BYTE $0xc2       // cmpq         %r8, %rdx
	LONG $0x0032820f; WORD $0x0000 // jb           LBB21_41, $50(%rip)
	LONG $0x00005ae9; BYTE $0x00   // jmp          LBB21_43, $90(%rip)
	LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB21_38:
	LONG $0x240c894d             // movq         %r9, (%r12)
	WORD $0xc931                 // xorl         %ecx, %ecx
	LONG $0x000055e9; BYTE $0x00 // jmp          LBB21_44, $85(%rip)
	LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

LBB21_39:
	WORD $0xb70f; BYTE $0xc1       // movzwl       %cx, %eax
	WORD $0x294c; BYTE $0xea       // subq         %r13, %rdx
	WORD $0xd0f7                   // notl         %eax
	WORD $0xbc0f; BYTE $0xc0       // bsfl         %eax, %eax
	WORD $0x0148; BYTE $0xc2       // addq         %rax, %rdx
	WORD $0x394c; BYTE $0xc2       // cmpq         %r8, %rdx
	LONG $0x002d830f; WORD $0x0000 // jae          LBB21_43, $45(%rip)

LBB21_41:
	LONG $0x014a8d4c             // leaq         $1(%rdx), %r9
	LONG $0x240c894d             // movq         %r9, (%r12)
	LONG $0x154c8a41; BYTE $0x00 // movb         (%r13,%rdx), %cl
	LONG $0x000027e9; BYTE $0x00 // jmp          LBB21_44, $39(%rip)

LBB21_40:
	WORD $0x0148; BYTE $0xda       // addq         %rbx, %rdx
	WORD $0x894c; BYTE $0xe9       // movq         %r13, %rcx
	WORD $0xf748; BYTE $0xd1       // notq         %rcx
	LONG $0x11548d48; BYTE $0x05   // leaq         $5(%rcx,%rdx), %rdx
	LONG $0xc85d8b48               // movq         $-56(%rbp), %rbx
	WORD $0x394c; BYTE $0xc2       // cmpq         %r8, %rdx
	LONG $0xffd3820f; WORD $0xffff // jb           LBB21_41, $-45(%rip)

LBB21_43:
	WORD $0xc931                               // xorl         %ecx, %ecx
	WORD $0x894d; BYTE $0xd9                   // movq         %r11, %r9
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB21_44:
	LONG $0xa0458b48                       // movq         $-96(%rbp), %rax
	WORD $0x8b48; BYTE $0x00               // movq         (%rax), %rax
	WORD $0x408a; BYTE $0x17               // movb         $23(%rax), %al
	WORD $0x1f24                           // andb         $31, %al
	WORD $0x183c                           // cmpb         $24, %al
	LONG $0x10ec850f; WORD $0x0000         // jne          LBB21_270, $4332(%rip)
	WORD $0xf980; BYTE $0x7b               // cmpb         $123, %cl
	LONG $0xc065894c                       // movq         %r12, $-64(%rbp)
	LONG $0x003a840f; WORD $0x0000         // je           LBB21_46, $58(%rip)
	LONG $0x001467e9; BYTE $0x00           // jmp          LBB21_320, $5223(%rip)
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

LBB21_250:
	WORD $0xb70f; BYTE $0xc6       // movzwl       %si, %eax
	WORD $0x294c; BYTE $0xe9       // subq         %r13, %rcx
	WORD $0xd0f7                   // notl         %eax
	WORD $0xbc0f; BYTE $0xc0       // bsfl         %eax, %eax
	WORD $0x0148; BYTE $0xc1       // addq         %rax, %rcx
	WORD $0x394c; BYTE $0xc1       // cmpq         %r8, %rcx
	LONG $0x1446830f; WORD $0x0000 // jae          LBB21_320, $5190(%rip)

LBB21_251:
	LONG $0x01498d4c               // leaq         $1(%rcx), %r9
	LONG $0x240c894d               // movq         %r9, (%r12)
	LONG $0x0d7c8041; WORD $0x2c00 // cmpb         $44, (%r13,%rcx)
	LONG $0x1432850f; WORD $0x0000 // jne          LBB21_320, $5170(%rip)

LBB21_46:
	LONG $0x08438b4c               // movq         $8(%rbx), %r8
	WORD $0x394d; BYTE $0xc1       // cmpq         %r8, %r9
	LONG $0x0028830f; WORD $0x0000 // jae          LBB21_51, $40(%rip)
	LONG $0x0d448a43; BYTE $0x00   // movb         (%r13,%r9), %al
	WORD $0x0d3c                   // cmpb         $13, %al
	LONG $0x001b840f; WORD $0x0000 // je           LBB21_51, $27(%rip)
	WORD $0x203c                   // cmpb         $32, %al
	LONG $0x0013840f; WORD $0x0000 // je           LBB21_51, $19(%rip)
	WORD $0xf704                   // addb         $-9, %al
	WORD $0x013c                   // cmpb         $1, %al
	LONG $0x0009860f; WORD $0x0000 // jbe          LBB21_51, $9(%rip)
	WORD $0x894d; BYTE $0xcf       // movq         %r9, %r15
	LONG $0x000221e9; BYTE $0x00   // jmp          LBB21_84, $545(%rip)
	BYTE $0x90                     // .p2align 4, 0x90

LBB21_51:
	LONG $0x01798d4d               // leaq         $1(%r9), %r15
	WORD $0x394d; BYTE $0xc7       // cmpq         %r8, %r15
	LONG $0x0023830f; WORD $0x0000 // jae          LBB21_55, $35(%rip)
	LONG $0x3d548a43; BYTE $0x00   // movb         (%r13,%r15), %dl
	WORD $0xfa80; BYTE $0x0d       // cmpb         $13, %dl
	LONG $0x0015840f; WORD $0x0000 // je           LBB21_55, $21(%rip)
	WORD $0xfa80; BYTE $0x20       // cmpb         $32, %dl
	LONG $0x000c840f; WORD $0x0000 // je           LBB21_55, $12(%rip)
	WORD $0xc280; BYTE $0xf7       // addb         $-9, %dl
	WORD $0xfa80; BYTE $0x01       // cmpb         $1, %dl
	LONG $0x01f0870f; WORD $0x0000 // ja           LBB21_84, $496(%rip)

	// .p2align 4, 0x90
LBB21_55:
	LONG $0x02798d4d               // leaq         $2(%r9), %r15
	WORD $0x394d; BYTE $0xc7       // cmpq         %r8, %r15
	LONG $0x0023830f; WORD $0x0000 // jae          LBB21_59, $35(%rip)
	LONG $0x3d548a43; BYTE $0x00   // movb         (%r13,%r15), %dl
	WORD $0xfa80; BYTE $0x0d       // cmpb         $13, %dl
	LONG $0x0015840f; WORD $0x0000 // je           LBB21_59, $21(%rip)
	WORD $0xfa80; BYTE $0x20       // cmpb         $32, %dl
	LONG $0x000c840f; WORD $0x0000 // je           LBB21_59, $12(%rip)
	WORD $0xc280; BYTE $0xf7       // addb         $-9, %dl
	WORD $0xfa80; BYTE $0x01       // cmpb         $1, %dl
	LONG $0x01c0870f; WORD $0x0000 // ja           LBB21_84, $448(%rip)

	// .p2align 4, 0x90
LBB21_59:
	LONG $0x03798d4d               // leaq         $3(%r9), %r15
	WORD $0x394d; BYTE $0xc7       // cmpq         %r8, %r15
	LONG $0x0023830f; WORD $0x0000 // jae          LBB21_63, $35(%rip)
	LONG $0x3d548a43; BYTE $0x00   // movb         (%r13,%r15), %dl
	WORD $0xfa80; BYTE $0x0d       // cmpb         $13, %dl
	LONG $0x0015840f; WORD $0x0000 // je           LBB21_63, $21(%rip)
	WORD $0xfa80; BYTE $0x20       // cmpb         $32, %dl
	LONG $0x000c840f; WORD $0x0000 // je           LBB21_63, $12(%rip)
	WORD $0xc280; BYTE $0xf7       // addb         $-9, %dl
	WORD $0xfa80; BYTE $0x01       // cmpb         $1, %dl
	LONG $0x0190870f; WORD $0x0000 // ja           LBB21_84, $400(%rip)

	// .p2align 4, 0x90
LBB21_63:
	LONG $0x04718d49                       // leaq         $4(%r9), %rsi
	WORD $0x3949; BYTE $0xf0               // cmpq         %rsi, %r8
	LONG $0x1345860f; WORD $0x0000         // jbe          LBB21_317, $4933(%rip)
	LONG $0x357c8d4d; BYTE $0x00           // leaq         (%r13,%rsi), %r15
	WORD $0x894c; BYTE $0xc2               // movq         %r8, %rdx
	WORD $0x2948; BYTE $0xf2               // subq         %rsi, %rdx
	LONG $0x007b840f; WORD $0x0000         // je           LBB21_72, $123(%rip)
	WORD $0x8944; BYTE $0xfe               // movl         %r15d, %esi
	WORD $0xe683; BYTE $0x0f               // andl         $15, %esi
	WORD $0x8548; BYTE $0xf6               // testq        %rsi, %rsi
	LONG $0x006c840f; WORD $0x0000         // je           LBB21_72, $108(%rip)
	LONG $0x0d448d4b; BYTE $0x00           // leaq         (%r13,%r9), %rax
	WORD $0x894c; BYTE $0xc2               // movq         %r8, %rdx
	WORD $0x294c; BYTE $0xca               // subq         %r9, %rdx
	LONG $0xfb528d4c                       // leaq         $-5(%rdx), %r10
	WORD $0xdb31                           // xorl         %ebx, %ebx
	QUAD $0x000100002600be48; WORD $0x0000 // movabsq      $4294977024, %rsi
	QUAD $0x9090909090909090               // .p2align 4, 0x90

LBB21_67:
	LONG $0x187cbe0f; BYTE $0x04   // movsbl       $4(%rax,%rbx), %edi
	WORD $0xff83; BYTE $0x20       // cmpl         $32, %edi
	LONG $0x010e870f; WORD $0x0000 // ja           LBB21_83, $270(%rip)
	LONG $0xfea30f48               // btq          %rdi, %rsi
	LONG $0x0104830f; WORD $0x0000 // jae          LBB21_83, $260(%rip)
	LONG $0x017b8d48               // leaq         $1(%rbx), %rdi
	WORD $0x3949; BYTE $0xda       // cmpq         %rbx, %r10
	LONG $0x0014840f; WORD $0x0000 // je           LBB21_71, $20(%rip)
	LONG $0x184c8d48; BYTE $0x05   // leaq         $5(%rax,%rbx), %rcx
	WORD $0xe183; BYTE $0x0f       // andl         $15, %ecx
	WORD $0x8948; BYTE $0xfb       // movq         %rdi, %rbx
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0xffc7850f; WORD $0xffff // jne          LBB21_67, $-57(%rip)

LBB21_71:
	LONG $0x077c8d4c; BYTE $0x04 // leaq         $4(%rdi,%rax), %r15
	WORD $0x2948; BYTE $0xfa     // subq         %rdi, %rdx
	LONG $0xfcc28348             // addq         $-4, %rdx
	LONG $0xc85d8b48             // movq         $-56(%rbp), %rbx

LBB21_72:
	LONG $0x10fa8348                                       // cmpq         $16, %rdx
	LONG $0x004e820f; WORD $0x0000                         // jb           LBB21_75, $78(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

LBB21_73:
	LONG $0x6f79c1c4; BYTE $0x07   // vmovdqa      (%r15), %xmm0
	LONG $0xc874b9c5               // vpcmpeqb     %xmm0, %xmm8, %xmm1
	LONG $0xd074b1c5               // vpcmpeqb     %xmm0, %xmm9, %xmm2
	LONG $0xcaebf1c5               // vpor         %xmm2, %xmm1, %xmm1
	LONG $0xd074a9c5               // vpcmpeqb     %xmm0, %xmm10, %xmm2
	LONG $0xc574f9c5               // vpcmpeqb     %xmm5, %xmm0, %xmm0
	LONG $0xc2ebf9c5               // vpor         %xmm2, %xmm0, %xmm0
	LONG $0xc1ebf9c5               // vpor         %xmm1, %xmm0, %xmm0
	LONG $0xf0d7f9c5               // vpmovmskb    %xmm0, %esi
	LONG $0xfffe8366               // cmpw         $-1, %si
	LONG $0x0071850f; WORD $0x0000 // jne          LBB21_82, $113(%rip)
	LONG $0x10c78349               // addq         $16, %r15
	LONG $0xf0c28348               // addq         $-16, %rdx
	LONG $0x0ffa8348               // cmpq         $15, %rdx
	LONG $0xffbf870f; WORD $0xffff // ja           LBB21_73, $-65(%rip)

LBB21_75:
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0x003b840f; WORD $0x0000 // je           LBB21_81, $59(%rip)
	LONG $0x17348d49               // leaq         (%r15,%rdx), %rsi
	WORD $0xff49; BYTE $0xc7       // incq         %r15

LBB21_77:
	LONG $0x7fbe0f41; BYTE $0xff           // movsbl       $-1(%r15), %edi
	WORD $0xff83; BYTE $0x20               // cmpl         $32, %edi
	LONG $0x0406870f; WORD $0x0000         // ja           LBB21_124, $1030(%rip)
	QUAD $0x000100002600b848; WORD $0x0000 // movabsq      $4294977024, %rax
	LONG $0xf8a30f48                       // btq          %rdi, %rax
	LONG $0x03f2830f; WORD $0x0000         // jae          LBB21_124, $1010(%rip)
	WORD $0xff48; BYTE $0xca               // decq         %rdx
	WORD $0xff49; BYTE $0xc7               // incq         %r15
	WORD $0x8548; BYTE $0xd2               // testq        %rdx, %rdx
	LONG $0xffcf850f; WORD $0xffff         // jne          LBB21_77, $-49(%rip)
	WORD $0x8949; BYTE $0xf7               // movq         %rsi, %r15

LBB21_81:
	WORD $0x294d; BYTE $0xef               // subq         %r13, %r15
	WORD $0x394d; BYTE $0xc7               // cmpq         %r8, %r15
	LONG $0x004f820f; WORD $0x0000         // jb           LBB21_84, $79(%rip)
	LONG $0x001227e9; BYTE $0x00           // jmp          LBB21_320, $4647(%rip)
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

LBB21_82:
	WORD $0xb70f; BYTE $0xce       // movzwl       %si, %ecx
	WORD $0x294d; BYTE $0xef       // subq         %r13, %r15
	WORD $0xd1f7                   // notl         %ecx
	WORD $0xbc0f; BYTE $0xc9       // bsfl         %ecx, %ecx
	WORD $0x0149; BYTE $0xcf       // addq         %rcx, %r15
	WORD $0x394d; BYTE $0xc7       // cmpq         %r8, %r15
	LONG $0x0029820f; WORD $0x0000 // jb           LBB21_84, $41(%rip)
	LONG $0x001201e9; BYTE $0x00   // jmp          LBB21_320, $4609(%rip)

LBB21_83:
	WORD $0x0148; BYTE $0xd8             // addq         %rbx, %rax
	WORD $0x894c; BYTE $0xea             // movq         %r13, %rdx
	WORD $0xf748; BYTE $0xd2             // notq         %rdx
	LONG $0x027c8d4c; BYTE $0x05         // leaq         $5(%rdx,%rax), %r15
	LONG $0xc85d8b48                     // movq         $-56(%rbp), %rbx
	WORD $0x394d; BYTE $0xc7             // cmpq         %r8, %r15
	LONG $0x11e6830f; WORD $0x0000       // jae          LBB21_320, $4582(%rip)
	QUAD $0x9090909090909090; BYTE $0x90 // .p2align 4, 0x90

LBB21_84:
	LONG $0x015f8d4d               // leaq         $1(%r15), %r11
	LONG $0x241c894d               // movq         %r11, (%r12)
	LONG $0x3d7c8043; WORD $0x2200 // cmpb         $34, (%r13,%r15)
	LONG $0x11ba850f; WORD $0x0000 // jne          LBB21_318, $4538(%rip)
	LONG $0x08438b48               // movq         $8(%rbx), %rax
	WORD $0x8948; BYTE $0xc1       // movq         %rax, %rcx
	WORD $0x294c; BYTE $0xd9       // subq         %r11, %rcx
	LONG $0x11d6840f; WORD $0x0000 // je           LBB21_322, $4566(%rip)
	LONG $0x98458948               // movq         %rax, $-104(%rbp)
	LONG $0xa0458b48               // movq         $-96(%rbp), %rax
	LONG $0x08508b48               // movq         $8(%rax), %rdx
	WORD $0x8b48; BYTE $0x02       // movq         (%rdx), %rax
	LONG $0xb0458948               // movq         %rax, $-80(%rbp)
	WORD $0x894c; BYTE $0xe8       // movq         %r13, %rax
	LONG $0x086a8b4c               // movq         $8(%rdx), %r13
	LONG $0xd0458948               // movq         %rax, $-48(%rbp)
	WORD $0x0149; BYTE $0xc3       // addq         %rax, %r11
	LONG $0x40f98348               // cmpq         $64, %rcx
	LONG $0x034d820f; WORD $0x0000 // jb           LBB21_125, $845(%rip)
	QUAD $0xffffffffa845c748       // movq         $-1, $-88(%rbp)
	WORD $0x894c; BYTE $0xde       // movq         %r11, %rsi
	WORD $0x3145; BYTE $0xc9       // xorl         %r9d, %r9d
	QUAD $0xfffff9fb356ff9c5       // vmovdqa      $-1541(%rip), %xmm6  /* LCPI21_4(%rip) */
	QUAD $0xfffffa033d6ff9c5       // vmovdqa      $-1533(%rip), %xmm7  /* LCPI21_5(%rip) */
	WORD $0x9090; BYTE $0x90       // .p2align 4, 0x90

LBB21_88:
	LONG $0x066ffac5               // vmovdqu      (%rsi), %xmm0
	LONG $0x4e6ffac5; BYTE $0x10   // vmovdqu      $16(%rsi), %xmm1
	LONG $0x566ffac5; BYTE $0x20   // vmovdqu      $32(%rsi), %xmm2
	LONG $0x5e6ffac5; BYTE $0x30   // vmovdqu      $48(%rsi), %xmm3
	LONG $0xe674f9c5               // vpcmpeqb     %xmm6, %xmm0, %xmm4
	LONG $0xd4d7f9c5               // vpmovmskb    %xmm4, %edx
	LONG $0xe674f1c5               // vpcmpeqb     %xmm6, %xmm1, %xmm4
	LONG $0xdcd7f9c5               // vpmovmskb    %xmm4, %ebx
	LONG $0xe674e9c5               // vpcmpeqb     %xmm6, %xmm2, %xmm4
	LONG $0xc4d7f9c5               // vpmovmskb    %xmm4, %eax
	LONG $0xe674e1c5               // vpcmpeqb     %xmm6, %xmm3, %xmm4
	LONG $0xfcd7f9c5               // vpmovmskb    %xmm4, %edi
	LONG $0xc774f9c5               // vpcmpeqb     %xmm7, %xmm0, %xmm0
	LONG $0xf0d779c5               // vpmovmskb    %xmm0, %r14d
	LONG $0xc774f1c5               // vpcmpeqb     %xmm7, %xmm1, %xmm0
	LONG $0xc0d779c5               // vpmovmskb    %xmm0, %r8d
	LONG $0xc774e9c5               // vpcmpeqb     %xmm7, %xmm2, %xmm0
	LONG $0xd0d779c5               // vpmovmskb    %xmm0, %r10d
	LONG $0xc774e1c5               // vpcmpeqb     %xmm7, %xmm3, %xmm0
	LONG $0xe0d779c5               // vpmovmskb    %xmm0, %r12d
	LONG $0x30e7c148               // shlq         $48, %rdi
	LONG $0x20e0c148               // shlq         $32, %rax
	LONG $0x10e3c148               // shlq         $16, %rbx
	WORD $0x0948; BYTE $0xda       // orq          %rbx, %rdx
	WORD $0x0948; BYTE $0xc2       // orq          %rax, %rdx
	WORD $0x0948; BYTE $0xfa       // orq          %rdi, %rdx
	LONG $0x30e4c149               // shlq         $48, %r12
	LONG $0x20e2c149               // shlq         $32, %r10
	LONG $0x10e0c149               // shlq         $16, %r8
	WORD $0x094d; BYTE $0xc6       // orq          %r8, %r14
	WORD $0x094d; BYTE $0xd6       // orq          %r10, %r14
	WORD $0x094d; BYTE $0xe6       // orq          %r12, %r14
	LONG $0x002c850f; WORD $0x0000 // jne          LBB21_92, $44(%rip)
	WORD $0x854d; BYTE $0xc9       // testq        %r9, %r9
	LONG $0x0040850f; WORD $0x0000 // jne          LBB21_94, $64(%rip)
	WORD $0x3145; BYTE $0xc9       // xorl         %r9d, %r9d
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0x0088850f; WORD $0x0000 // jne          LBB21_95, $136(%rip)

LBB21_91:
	LONG $0x40c68348               // addq         $64, %rsi
	LONG $0xc0c18348               // addq         $-64, %rcx
	LONG $0x3ff98348               // cmpq         $63, %rcx
	LONG $0xff56870f; WORD $0xffff // ja           LBB21_88, $-170(%rip)
	LONG $0x0001f0e9; BYTE $0x00   // jmp          LBB21_119, $496(%rip)

LBB21_92:
	LONG $0xa87d8348; BYTE $0xff   // cmpq         $-1, $-88(%rbp)
	LONG $0x0012850f; WORD $0x0000 // jne          LBB21_94, $18(%rip)
	WORD $0x8948; BYTE $0xf0       // movq         %rsi, %rax
	LONG $0xd0452b48               // subq         $-48(%rbp), %rax
	LONG $0xfebc0f49               // bsfq         %r14, %rdi
	WORD $0x0148; BYTE $0xc7       // addq         %rax, %rdi
	LONG $0xa87d8948               // movq         %rdi, $-88(%rbp)

LBB21_94:
	WORD $0x894c; BYTE $0xc8               // movq         %r9, %rax
	WORD $0xf748; BYTE $0xd0               // notq         %rax
	WORD $0x214c; BYTE $0xf0               // andq         %r14, %rax
	LONG $0x00048d4c                       // leaq         (%rax,%rax), %r8
	WORD $0x094d; BYTE $0xc8               // orq          %r9, %r8
	WORD $0x894c; BYTE $0xc7               // movq         %r8, %rdi
	WORD $0xf748; BYTE $0xd7               // notq         %rdi
	WORD $0x214c; BYTE $0xf7               // andq         %r14, %rdi
	QUAD $0xaaaaaaaaaaaabb48; WORD $0xaaaa // movabsq      $-6148914691236517206, %rbx
	WORD $0x2148; BYTE $0xdf               // andq         %rbx, %rdi
	WORD $0x3145; BYTE $0xc9               // xorl         %r9d, %r9d
	WORD $0x0148; BYTE $0xc7               // addq         %rax, %rdi
	LONG $0xc1920f41                       // setb         %r9b
	WORD $0x0148; BYTE $0xff               // addq         %rdi, %rdi
	QUAD $0x555555555555b848; WORD $0x5555 // movabsq      $6148914691236517205, %rax
	WORD $0x3148; BYTE $0xc7               // xorq         %rax, %rdi
	WORD $0x214c; BYTE $0xc7               // andq         %r8, %rdi
	WORD $0xf748; BYTE $0xd7               // notq         %rdi
	WORD $0x2148; BYTE $0xfa               // andq         %rdi, %rdx
	WORD $0x8548; BYTE $0xd2               // testq        %rdx, %rdx
	LONG $0xff7a840f; WORD $0xffff         // je           LBB21_91, $-134(%rip)
	WORD $0x9090                           // .p2align 4, 0x90

LBB21_95:
	LONG $0xc2bc0f48             // bsfq         %rdx, %rax
	LONG $0xd0752b48             // subq         $-48(%rbp), %rsi
	LONG $0x064c8d4c; BYTE $0x01 // leaq         $1(%rsi,%rax), %r9
	LONG $0xc85d8b48             // movq         $-56(%rbp), %rbx
	LONG $0xa8558b48             // movq         $-88(%rbp), %rdx

LBB21_96:
	WORD $0x854d; BYTE $0xc9       // testq        %r9, %r9
	LONG $0x1050880f; WORD $0x0000 // js           LBB21_323, $4176(%rip)
	LONG $0xc0458b48               // movq         $-64(%rbp), %rax
	WORD $0x894c; BYTE $0x08       // movq         %r9, (%rax)
	LONG $0xfffa8348               // cmpq         $-1, %rdx
	LONG $0x0009840f; WORD $0x0000 // je           LBB21_99, $9(%rip)
	WORD $0x394c; BYTE $0xca       // cmpq         %r9, %rdx
	LONG $0x02058e0f; WORD $0x0000 // jle          LBB21_127, $517(%rip)

LBB21_99:
	WORD $0x894c; BYTE $0xc8                   // movq         %r9, %rax
	WORD $0x294c; BYTE $0xf8                   // subq         %r15, %rax
	LONG $0xfec08348                           // addq         $-2, %rax
	WORD $0x394c; BYTE $0xe8                   // cmpq         %r13, %rax
	LONG $0x00f5850f; WORD $0x0000             // jne          LBB21_112, $245(%rip)
	LONG $0x10fd8349                           // cmpq         $16, %r13
	LONG $0x005b820f; WORD $0x0000             // jb           LBB21_105, $91(%rip)
	LONG $0xb0558b48                           // movq         $-80(%rbp), %rdx
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB21_102:
	LONG $0x6f7ac1c4; BYTE $0x03               // vmovdqu      (%r11), %xmm0
	LONG $0x0274f9c5                           // vpcmpeqb     (%rdx), %xmm0, %xmm0
	LONG $0xc0d7f9c5                           // vpmovmskb    %xmm0, %eax
	LONG $0xfff88366                           // cmpw         $-1, %ax
	LONG $0x00c9850f; WORD $0x0000             // jne          LBB21_112, $201(%rip)
	LONG $0x10c38349                           // addq         $16, %r11
	LONG $0x10c28348                           // addq         $16, %rdx
	LONG $0xf0c58349                           // addq         $-16, %r13
	LONG $0x0ffd8349                           // cmpq         $15, %r13
	LONG $0xffd3870f; WORD $0xffff             // ja           LBB21_102, $-45(%rip)
	WORD $0xd089                               // movl         %edx, %eax
	LONG $0x000fff25; BYTE $0x00               // andl         $4095, %eax
	LONG $0x000ff03d; BYTE $0x00               // cmpl         $4080, %eax
	LONG $0x0027860f; WORD $0x0000             // jbe          LBB21_106, $39(%rip)
	LONG $0x000063e9; BYTE $0x00               // jmp          LBB21_108, $99(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090 // .p2align 4, 0x90

LBB21_105:
	LONG $0xb0558b48               // movq         $-80(%rbp), %rdx
	WORD $0xd089                   // movl         %edx, %eax
	LONG $0x000fff25; BYTE $0x00   // andl         $4095, %eax
	LONG $0x000ff03d; BYTE $0x00   // cmpl         $4080, %eax
	LONG $0x0041870f; WORD $0x0000 // ja           LBB21_108, $65(%rip)

LBB21_106:
	WORD $0x8944; BYTE $0xd8       // movl         %r11d, %eax
	LONG $0x000fff25; BYTE $0x00   // andl         $4095, %eax
	LONG $0x000ff13d; BYTE $0x00   // cmpl         $4081, %eax
	LONG $0x002e830f; WORD $0x0000 // jae          LBB21_108, $46(%rip)
	LONG $0x6f7ac1c4; BYTE $0x03   // vmovdqu      (%r11), %xmm0
	LONG $0x0274f9c5               // vpcmpeqb     (%rdx), %xmm0, %xmm0
	LONG $0xc0d7f9c5               // vpmovmskb    %xmm0, %eax
	LONG $0xfff88366               // cmpw         $-1, %ax
	WORD $0x940f; BYTE $0xc1       // sete         %cl
	WORD $0xd0f7                   // notl         %eax
	WORD $0xb70f; BYTE $0xc0       // movzwl       %ax, %eax
	LONG $0xc0bc0f48               // bsfq         %rax, %rax
	WORD $0x394c; BYTE $0xe8       // cmpq         %r13, %rax
	WORD $0x930f; BYTE $0xc0       // setae        %al
	WORD $0xc808                   // orb          %cl, %al
	LONG $0xf0b60f44               // movzbl       %al, %r14d
	LONG $0x00003ce9; BYTE $0x00   // jmp          LBB21_113, $60(%rip)

LBB21_108:
	LONG $0x0001be41; WORD $0x0000 // movl         $1, %r14d
	WORD $0x854d; BYTE $0xed       // testq        %r13, %r13
	LONG $0x002d840f; WORD $0x0000 // je           LBB21_113, $45(%rip)
	WORD $0xc031                   // xorl         %eax, %eax
	QUAD $0x9090909090909090       // .p2align 4, 0x90

LBB21_110:
	LONG $0x0cb60f41; BYTE $0x03   // movzbl       (%r11,%rax), %ecx
	WORD $0x0c3a; BYTE $0x02       // cmpb         (%rdx,%rax), %cl
	LONG $0x0012850f; WORD $0x0000 // jne          LBB21_112, $18(%rip)
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	WORD $0x3949; BYTE $0xc5       // cmpq         %rax, %r13
	LONG $0xffe6850f; WORD $0xffff // jne          LBB21_110, $-26(%rip)
	LONG $0x000004e9; BYTE $0x00   // jmp          LBB21_113, $4(%rip)
	BYTE $0x90                     // .p2align 4, 0x90

LBB21_112:
	WORD $0x3145; BYTE $0xf6 // xorl         %r14d, %r14d

LBB21_113:
	LONG $0xc0658b4c               // movq         $-64(%rbp), %r12
	LONG $0xd06d8b4c               // movq         $-48(%rbp), %r13
	LONG $0x08438b4c               // movq         $8(%rbx), %r8
	WORD $0x394d; BYTE $0xc1       // cmpq         %r8, %r9
	LONG $0x04c8830f; WORD $0x0000 // jae          LBB21_176, $1224(%rip)

LBB21_115:
	LONG $0x0d448a43; BYTE $0x00   // movb         (%r13,%r9), %al
	WORD $0x0d3c                   // cmpb         $13, %al
	LONG $0x04bb840f; WORD $0x0000 // je           LBB21_176, $1211(%rip)
	WORD $0x203c                   // cmpb         $32, %al
	LONG $0x04b3840f; WORD $0x0000 // je           LBB21_176, $1203(%rip)
	WORD $0xf704                   // addb         $-9, %al
	WORD $0x013c                   // cmpb         $1, %al
	LONG $0x04a9860f; WORD $0x0000 // jbe          LBB21_176, $1193(%rip)
	WORD $0x894c; BYTE $0xca       // movq         %r9, %rdx
	LONG $0x0006b8e9; BYTE $0x00   // jmp          LBB21_210, $1720(%rip)

LBB21_119:
	LONG $0xc85d8b48               // movq         $-56(%rbp), %rbx
	LONG $0x20f98348               // cmpq         $32, %rcx
	LONG $0x00a7820f; WORD $0x0000 // jb           LBB21_126, $167(%rip)

LBB21_120:
	LONG $0x066ffac5               // vmovdqu      (%rsi), %xmm0
	LONG $0x4e6ffac5; BYTE $0x10   // vmovdqu      $16(%rsi), %xmm1
	LONG $0xd674f9c5               // vpcmpeqb     %xmm6, %xmm0, %xmm2
	LONG $0xf2d779c5               // vpmovmskb    %xmm2, %r14d
	LONG $0xd674f1c5               // vpcmpeqb     %xmm6, %xmm1, %xmm2
	LONG $0xc2d7f9c5               // vpmovmskb    %xmm2, %eax
	LONG $0xc774f9c5               // vpcmpeqb     %xmm7, %xmm0, %xmm0
	LONG $0xd0d7f9c5               // vpmovmskb    %xmm0, %edx
	LONG $0xc774f1c5               // vpcmpeqb     %xmm7, %xmm1, %xmm0
	LONG $0xf8d7f9c5               // vpmovmskb    %xmm0, %edi
	LONG $0x10e0c148               // shlq         $16, %rax
	WORD $0x0949; BYTE $0xc6       // orq          %rax, %r14
	LONG $0x10e7c148               // shlq         $16, %rdi
	WORD $0x0948; BYTE $0xfa       // orq          %rdi, %rdx
	LONG $0x095b850f; WORD $0x0000 // jne          LBB21_255, $2395(%rip)
	WORD $0x854d; BYTE $0xc9       // testq        %r9, %r9
	LONG $0x096f850f; WORD $0x0000 // jne          LBB21_257, $2415(%rip)
	WORD $0x3145; BYTE $0xc9       // xorl         %r9d, %r9d
	WORD $0x854d; BYTE $0xf6       // testq        %r14, %r14
	LONG $0xa8558b48               // movq         $-88(%rbp), %rdx
	LONG $0x09c0840f; WORD $0x0000 // je           LBB21_258, $2496(%rip)

LBB21_123:
	LONG $0xc6bc0f49             // bsfq         %r14, %rax
	LONG $0xd0752b48             // subq         $-48(%rbp), %rsi
	LONG $0x064c8d4c; BYTE $0x01 // leaq         $1(%rsi,%rax), %r9
	LONG $0xfffe20e9; BYTE $0xff // jmp          LBB21_96, $-480(%rip)

LBB21_124:
	WORD $0x894c; BYTE $0xe9       // movq         %r13, %rcx
	WORD $0xf748; BYTE $0xd1       // notq         %rcx
	WORD $0x0149; BYTE $0xcf       // addq         %rcx, %r15
	WORD $0x394d; BYTE $0xc7       // cmpq         %r8, %r15
	LONG $0xfc69820f; WORD $0xffff // jb           LBB21_84, $-919(%rip)
	LONG $0x000e41e9; BYTE $0x00   // jmp          LBB21_320, $3649(%rip)

LBB21_125:
	QUAD $0xffffffffa845c748       // movq         $-1, $-88(%rbp)
	WORD $0x3145; BYTE $0xc9       // xorl         %r9d, %r9d
	WORD $0x894c; BYTE $0xde       // movq         %r11, %rsi
	QUAD $0xfffff6ae356ff9c5       // vmovdqa      $-2386(%rip), %xmm6  /* LCPI21_4(%rip) */
	QUAD $0xfffff6b63d6ff9c5       // vmovdqa      $-2378(%rip), %xmm7  /* LCPI21_5(%rip) */
	LONG $0x20f98348               // cmpq         $32, %rcx
	LONG $0xff59830f; WORD $0xffff // jae          LBB21_120, $-167(%rip)

LBB21_126:
	LONG $0xa8558b48             // movq         $-88(%rbp), %rdx
	LONG $0x00096ee9; BYTE $0x00 // jmp          LBB21_259, $2414(%rip)

LBB21_127:
	QUAD $0x00000000b845c748                   // movq         $0, $-72(%rbp)
	LONG $0xd0458b48                           // movq         $-48(%rbp), %rax
	LONG $0x08448d4e; BYTE $0xff               // leaq         $-1(%rax,%r9), %r8
	LONG $0xb0458b48                           // movq         $-80(%rbp), %rax
	LONG $0x28148d4e                           // leaq         (%rax,%r13), %r10
	WORD $0x854d; BYTE $0xed                   // testq        %r13, %r13
	LONG $0x03998e0f; WORD $0x0000             // jle          LBB21_173, $921(%rip)
	WORD $0x394d; BYTE $0xd8                   // cmpq         %r11, %r8
	LONG $0xc0658b4c                           // movq         $-64(%rbp), %r12
	LONG $0x0390860f; WORD $0x0000             // jbe          LBB21_174, $912(%rip)
	LONG $0x8d358d4c; WORD $0x0069; BYTE $0x00 // leaq         $27021(%rip), %r14  /* __UnquoteTab(%rip) */
	LONG $0xb87d8d4c                           // leaq         $-72(%rbp), %r15

LBB21_130:
	WORD $0x8a41; BYTE $0x03                   // movb         (%r11), %al
	WORD $0x5c3c                               // cmpb         $92, %al
	LONG $0x0050850f; WORD $0x0000             // jne          LBB21_135, $80(%rip)
	WORD $0x894c; BYTE $0xc2                   // movq         %r8, %rdx
	WORD $0x294c; BYTE $0xda                   // subq         %r11, %rdx
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	WORD $0x8548; BYTE $0xd2                   // testq        %rdx, %rdx
	LONG $0x0e0f8e0f; WORD $0x0000             // jle          LBB21_327, $3599(%rip)
	LONG $0x4bb60f41; BYTE $0x01               // movzbl       $1(%r11), %ecx
	LONG $0x310c8a42                           // movb         (%rcx,%r14), %cl
	WORD $0xf980; BYTE $0xff                   // cmpb         $-1, %cl
	LONG $0x0043840f; WORD $0x0000             // je           LBB21_137, $67(%rip)
	WORD $0xc984                               // testb        %cl, %cl
	LONG $0x0de3840f; WORD $0x0000             // je           LBB21_325, $3555(%rip)
	WORD $0x4d88; BYTE $0xb8                   // movb         %cl, $-72(%rbp)
	LONG $0x02c38349                           // addq         $2, %r11
	LONG $0x000001ba; BYTE $0x00               // movl         $1, %edx
	LONG $0x15448d48; BYTE $0xb8               // leaq         $-72(%rbp,%rdx), %rax
	LONG $0xb055394c                           // cmpq         %r10, $-80(%rbp)
	LONG $0x0125820f; WORD $0x0000             // jb           LBB21_147, $293(%rip)
	LONG $0x0002fae9; BYTE $0x00               // jmp          LBB21_168, $762(%rip)

LBB21_135:
	LONG $0xb04d8b48               // movq         $-80(%rbp), %rcx
	WORD $0x013a                   // cmpb         (%rcx), %al
	LONG $0x082e850f; WORD $0x0000 // jne          LBB21_254, $2094(%rip)
	WORD $0xff49; BYTE $0xc3       // incq         %r11
	WORD $0xff48; BYTE $0xc1       // incq         %rcx
	LONG $0xb04d8948               // movq         %rcx, $-80(%rbp)
	LONG $0x0002ebe9; BYTE $0x00   // jmp          LBB21_170, $747(%rip)

LBB21_137:
	LONG $0x03fa8348               // cmpq         $3, %rdx
	LONG $0x0dad8e0f; WORD $0x0000 // jle          LBB21_326, $3501(%rip)
	LONG $0x02438b41               // movl         $2(%r11), %eax
	WORD $0xc189                   // movl         %eax, %ecx
	WORD $0xd1f7                   // notl         %ecx
	LONG $0xcfd0b08d; WORD $0xcfcf // leal         $-808464432(%rax), %esi
	LONG $0x8080e181; WORD $0x8080 // andl         $-2139062144, %ecx
	WORD $0xf185                   // testl        %esi, %ecx
	LONG $0x0d72850f; WORD $0x0000 // jne          LBB21_324, $3442(%rip)
	LONG $0x1919b08d; WORD $0x1919 // leal         $421075225(%rax), %esi
	WORD $0xc609                   // orl          %eax, %esi
	LONG $0x8080c6f7; WORD $0x8080 // testl        $-2139062144, %esi
	LONG $0x0d5e850f; WORD $0x0000 // jne          LBB21_324, $3422(%rip)
	WORD $0xc689                   // movl         %eax, %esi
	LONG $0x7f7fe681; WORD $0x7f7f // andl         $2139062143, %esi
	LONG $0xc0c0c0bb; BYTE $0xc0   // movl         $-1061109568, %ebx
	WORD $0xf329                   // subl         %esi, %ebx
	LONG $0x4646be8d; WORD $0x4646 // leal         $1179010630(%rsi), %edi
	WORD $0xcb21                   // andl         %ecx, %ebx
	WORD $0xfb85                   // testl        %edi, %ebx
	LONG $0x0d3f850f; WORD $0x0000 // jne          LBB21_324, $3391(%rip)
	LONG $0xe0e0e0bf; BYTE $0xe0   // movl         $-522133280, %edi
	WORD $0xf729                   // subl         %esi, %edi
	LONG $0x3939c681; WORD $0x3939 // addl         $960051513, %esi
	WORD $0xf921                   // andl         %edi, %ecx
	WORD $0xf185                   // testl        %esi, %ecx
	LONG $0x0d28850f; WORD $0x0000 // jne          LBB21_324, $3368(%rip)
	WORD $0xc80f                   // bswapl       %eax
	WORD $0xc189                   // movl         %eax, %ecx
	WORD $0xe9c1; BYTE $0x04       // shrl         $4, %ecx
	WORD $0xd1f7                   // notl         %ecx
	LONG $0x0101e181; WORD $0x0101 // andl         $16843009, %ecx
	WORD $0x0c8d; BYTE $0xc9       // leal         (%rcx,%rcx,8), %ecx
	LONG $0x0f0f0f25; BYTE $0x0f   // andl         $252645135, %eax
	WORD $0xc801                   // addl         %ecx, %eax
	WORD $0xc189                   // movl         %eax, %ecx
	WORD $0xe9c1; BYTE $0x04       // shrl         $4, %ecx
	WORD $0xc109                   // orl          %eax, %ecx
	WORD $0xcb89                   // movl         %ecx, %ebx
	WORD $0xebc1; BYTE $0x08       // shrl         $8, %ebx
	LONG $0xff00e381; WORD $0x0000 // andl         $65280, %ebx
	WORD $0xb60f; BYTE $0xc1       // movzbl       %cl, %eax
	WORD $0xd809                   // orl          %ebx, %eax
	LONG $0x06738d49               // leaq         $6(%r11), %rsi
	WORD $0xf883; BYTE $0x7f       // cmpl         $127, %eax
	LONG $0x00ac860f; WORD $0x0000 // jbe          LBB21_156, $172(%rip)
	LONG $0x0007ff3d; BYTE $0x00   // cmpl         $2047, %eax
	LONG $0x00ae860f; WORD $0x0000 // jbe          LBB21_157, $174(%rip)
	WORD $0xcf89                   // movl         %ecx, %edi
	LONG $0x0000e781; WORD $0x00f8 // andl         $16252928, %edi
	LONG $0x0000ff81; WORD $0x00d8 // cmpl         $14155776, %edi
	LONG $0x00b7840f; WORD $0x0000 // je           LBB21_158, $183(%rip)
	WORD $0xebc1; BYTE $0x0c       // shrl         $12, %ebx
	WORD $0xcb80; BYTE $0xe0       // orb          $-32, %bl
	WORD $0x5d88; BYTE $0xb8       // movb         %bl, $-72(%rbp)
	WORD $0xe8c1; BYTE $0x06       // shrl         $6, %eax
	WORD $0x3f24                   // andb         $63, %al
	WORD $0x800c                   // orb          $-128, %al
	WORD $0x4588; BYTE $0xb9       // movb         %al, $-71(%rbp)
	WORD $0xe180; BYTE $0x3f       // andb         $63, %cl
	WORD $0xc980; BYTE $0x80       // orb          $-128, %cl
	WORD $0x4d88; BYTE $0xba       // movb         %cl, $-70(%rbp)
	LONG $0x000003ba; BYTE $0x00   // movl         $3, %edx
	WORD $0xd989                   // movl         %ebx, %ecx

LBB21_146:
	WORD $0x8949; BYTE $0xf3       // movq         %rsi, %r11
	LONG $0xc85d8b48               // movq         $-56(%rbp), %rbx
	LONG $0x15448d48; BYTE $0xb8   // leaq         $-72(%rbp,%rdx), %rax
	LONG $0xb055394c               // cmpq         %r10, $-80(%rbp)
	LONG $0x01da830f; WORD $0x0000 // jae          LBB21_168, $474(%rip)

LBB21_147:
	WORD $0x394c; BYTE $0xf8       // cmpq         %r15, %rax
	LONG $0x01d1860f; WORD $0x0000 // jbe          LBB21_168, $465(%rip)
	LONG $0xb0758b48               // movq         $-80(%rbp), %rsi
	WORD $0x0e38                   // cmpb         %cl, (%rsi)
	LONG $0x01c5850f; WORD $0x0000 // jne          LBB21_168, $453(%rip)
	WORD $0xff48; BYTE $0xc6       // incq         %rsi
	LONG $0xb9558d48               // leaq         $-71(%rbp), %rdx

LBB21_150:
	WORD $0x8948; BYTE $0xf7       // movq         %rsi, %rdi
	WORD $0x8948; BYTE $0xd1       // movq         %rdx, %rcx
	WORD $0x3948; BYTE $0xc2       // cmpq         %rax, %rdx
	LONG $0x0020830f; WORD $0x0000 // jae          LBB21_153, $32(%rip)
	WORD $0x394c; BYTE $0xd7       // cmpq         %r10, %rdi
	LONG $0x0017830f; WORD $0x0000 // jae          LBB21_153, $23(%rip)
	WORD $0xb60f; BYTE $0x1f       // movzbl       (%rdi), %ebx
	LONG $0x01778d48               // leaq         $1(%rdi), %rsi
	LONG $0x01518d48               // leaq         $1(%rcx), %rdx
	WORD $0x193a                   // cmpb         (%rcx), %bl
	LONG $0xc85d8b48               // movq         $-56(%rbp), %rbx
	LONG $0xffd1840f; WORD $0xffff // je           LBB21_150, $-47(%rip)

LBB21_153:
	LONG $0xb07d8948             // movq         %rdi, $-80(%rbp)
	LONG $0x000189e9; BYTE $0x00 // jmp          LBB21_169, $393(%rip)

LBB21_156:
	WORD $0x4d88; BYTE $0xb8     // movb         %cl, $-72(%rbp)
	LONG $0x000001ba; BYTE $0x00 // movl         $1, %edx
	LONG $0xffff89e9; BYTE $0xff // jmp          LBB21_146, $-119(%rip)

LBB21_157:
	WORD $0xe8c1; BYTE $0x06     // shrl         $6, %eax
	WORD $0xc00c                 // orb          $-64, %al
	WORD $0x4588; BYTE $0xb8     // movb         %al, $-72(%rbp)
	WORD $0xe180; BYTE $0x3f     // andb         $63, %cl
	WORD $0xc980; BYTE $0x80     // orb          $-128, %cl
	WORD $0x4d88; BYTE $0xb9     // movb         %cl, $-71(%rbp)
	LONG $0x000002ba; BYTE $0x00 // movl         $2, %edx
	WORD $0xc189                 // movl         %eax, %ecx
	LONG $0xffff6ce9; BYTE $0xff // jmp          LBB21_146, $-148(%rip)

LBB21_158:
	LONG $0x06fa8348                           // cmpq         $6, %rdx
	LONG $0x0c498c0f; WORD $0x0000             // jl           LBB21_329, $3145(%rip)
	LONG $0x00dbff3d; BYTE $0x00               // cmpl         $56319, %eax
	LONG $0x0c3e870f; WORD $0x0000             // ja           LBB21_329, $3134(%rip)
	WORD $0x3e80; BYTE $0x5c                   // cmpb         $92, (%rsi)
	LONG $0x0c35850f; WORD $0x0000             // jne          LBB21_329, $3125(%rip)
	LONG $0x077b8041; BYTE $0x75               // cmpb         $117, $7(%r11)
	LONG $0x0c2a850f; WORD $0x0000             // jne          LBB21_329, $3114(%rip)
	LONG $0x08738d4d                           // leaq         $8(%r11), %r14
	LONG $0x08538b41                           // movl         $8(%r11), %edx
	WORD $0xd689                               // movl         %edx, %esi
	WORD $0xd6f7                               // notl         %esi
	LONG $0xcfd0ba8d; WORD $0xcfcf             // leal         $-808464432(%rdx), %edi
	LONG $0x8080e681; WORD $0x8080             // andl         $-2139062144, %esi
	WORD $0xfe85                               // testl        %edi, %esi
	LONG $0x0bfe850f; WORD $0x0000             // jne          LBB21_328, $3070(%rip)
	LONG $0x1919ba8d; WORD $0x1919             // leal         $421075225(%rdx), %edi
	WORD $0xd709                               // orl          %edx, %edi
	LONG $0x8080c7f7; WORD $0x8080             // testl        $-2139062144, %edi
	LONG $0x0bea850f; WORD $0x0000             // jne          LBB21_328, $3050(%rip)
	WORD $0xd389                               // movl         %edx, %ebx
	LONG $0x7f7fe381; WORD $0x7f7f             // andl         $2139062143, %ebx
	LONG $0xc0c0c0bf; BYTE $0xc0               // movl         $-1061109568, %edi
	WORD $0xdf29                               // subl         %ebx, %edi
	LONG $0x46468b8d; WORD $0x4646             // leal         $1179010630(%rbx), %ecx
	WORD $0xf721                               // andl         %esi, %edi
	WORD $0xcf85                               // testl        %ecx, %edi
	LONG $0x0bcb850f; WORD $0x0000             // jne          LBB21_328, $3019(%rip)
	LONG $0xe0e0e0b9; BYTE $0xe0               // movl         $-522133280, %ecx
	WORD $0xd929                               // subl         %ebx, %ecx
	LONG $0x3939c381; WORD $0x3939             // addl         $960051513, %ebx
	WORD $0xce21                               // andl         %ecx, %esi
	WORD $0xde85                               // testl        %ebx, %esi
	LONG $0x0bb4850f; WORD $0x0000             // jne          LBB21_328, $2996(%rip)
	WORD $0xca0f                               // bswapl       %edx
	WORD $0xd189                               // movl         %edx, %ecx
	WORD $0xe9c1; BYTE $0x04                   // shrl         $4, %ecx
	WORD $0xd1f7                               // notl         %ecx
	LONG $0x0101e181; WORD $0x0101             // andl         $16843009, %ecx
	WORD $0x0c8d; BYTE $0xc9                   // leal         (%rcx,%rcx,8), %ecx
	LONG $0x0f0fe281; WORD $0x0f0f             // andl         $252645135, %edx
	WORD $0xca01                               // addl         %ecx, %edx
	WORD $0xd689                               // movl         %edx, %esi
	WORD $0xeec1; BYTE $0x04                   // shrl         $4, %esi
	WORD $0xd609                               // orl          %edx, %esi
	WORD $0xf189                               // movl         %esi, %ecx
	LONG $0x0000e181; WORD $0x00fc             // andl         $16515072, %ecx
	LONG $0x0000f981; WORD $0x00dc             // cmpl         $14417920, %ecx
	LONG $0x0b9a850f; WORD $0x0000             // jne          LBB21_330, $2970(%rip)
	WORD $0xf189                               // movl         %esi, %ecx
	WORD $0xe9c1; BYTE $0x08                   // shrl         $8, %ecx
	LONG $0xff00e181; WORD $0x0000             // andl         $65280, %ecx
	LONG $0xd6b60f40                           // movzbl       %sil, %edx
	WORD $0xca09                               // orl          %ecx, %edx
	WORD $0xe0c1; BYTE $0x0a                   // shll         $10, %eax
	LONG $0x0010848d; WORD $0xa024; BYTE $0xfc // leal         $-56613888(%rax,%rdx), %eax
	WORD $0xc189                               // movl         %eax, %ecx
	WORD $0xe9c1; BYTE $0x12                   // shrl         $18, %ecx
	WORD $0xc980; BYTE $0xf0                   // orb          $-16, %cl
	WORD $0x4d88; BYTE $0xb8                   // movb         %cl, $-72(%rbp)
	WORD $0xc289                               // movl         %eax, %edx
	WORD $0xeac1; BYTE $0x0c                   // shrl         $12, %edx
	WORD $0xe280; BYTE $0x3f                   // andb         $63, %dl
	WORD $0xca80; BYTE $0x80                   // orb          $-128, %dl
	WORD $0x5588; BYTE $0xb9                   // movb         %dl, $-71(%rbp)
	WORD $0xc289                               // movl         %eax, %edx
	WORD $0xeac1; BYTE $0x06                   // shrl         $6, %edx
	WORD $0xe280; BYTE $0x3f                   // andb         $63, %dl
	WORD $0xca80; BYTE $0x80                   // orb          $-128, %dl
	WORD $0x5588; BYTE $0xba                   // movb         %dl, $-70(%rbp)
	WORD $0x3f24                               // andb         $63, %al
	WORD $0x800c                               // orb          $-128, %al
	WORD $0x4588; BYTE $0xbb                   // movb         %al, $-69(%rbp)
	LONG $0x0cc38349                           // addq         $12, %r11
	LONG $0x000004ba; BYTE $0x00               // movl         $4, %edx
	LONG $0xc0658b4c                           // movq         $-64(%rbp), %r12
	LONG $0xc85d8b48                           // movq         $-56(%rbp), %rbx
	QUAD $0xfffff2f6056f79c5                   // vmovdqa      $-3338(%rip), %xmm8  /* LCPI21_0(%rip) */
	QUAD $0xfffff2fe0d6f79c5                   // vmovdqa      $-3330(%rip), %xmm9  /* LCPI21_1(%rip) */
	QUAD $0xfffff306156f79c5                   // vmovdqa      $-3322(%rip), %xmm10  /* LCPI21_2(%rip) */
	QUAD $0xfffff30e2d6ff9c5                   // vmovdqa      $-3314(%rip), %xmm5  /* LCPI21_3(%rip) */
	LONG $0x47358d4c; WORD $0x0066; BYTE $0x00 // leaq         $26183(%rip), %r14  /* __UnquoteTab(%rip) */
	LONG $0xb87d8d4c                           // leaq         $-72(%rbp), %r15
	LONG $0x15448d48; BYTE $0xb8               // leaq         $-72(%rbp,%rdx), %rax
	LONG $0xb055394c                           // cmpq         %r10, $-80(%rbp)
	LONG $0xfe26820f; WORD $0xffff             // jb           LBB21_147, $-474(%rip)

LBB21_168:
	WORD $0x894c; BYTE $0xf9 // movq         %r15, %rcx

LBB21_169:
	WORD $0x3948; BYTE $0xc1       // cmpq         %rax, %rcx
	LONG $0x0534850f; WORD $0x0000 // jne          LBB21_254, $1332(%rip)

LBB21_170:
	WORD $0x394d; BYTE $0xd8       // cmpq         %r11, %r8
	LONG $0x000a860f; WORD $0x0000 // jbe          LBB21_172, $10(%rip)
	LONG $0xb055394c               // cmpq         %r10, $-80(%rbp)
	LONG $0xfc8c820f; WORD $0xffff // jb           LBB21_130, $-884(%rip)

LBB21_172:
	LONG $0xd06d8b4c             // movq         $-48(%rbp), %r13
	LONG $0xb0458b48             // movq         $-80(%rbp), %rax
	LONG $0x000008e9; BYTE $0x00 // jmp          LBB21_175, $8(%rip)

LBB21_173:
	LONG $0xc0658b4c // movq         $-64(%rbp), %r12

LBB21_174:
	LONG $0xd06d8b4c // movq         $-48(%rbp), %r13

LBB21_175:
	WORD $0x314d; BYTE $0xd8       // xorq         %r11, %r8
	WORD $0x314c; BYTE $0xd0       // xorq         %r10, %rax
	WORD $0x3145; BYTE $0xf6       // xorl         %r14d, %r14d
	WORD $0x094c; BYTE $0xc0       // orq          %r8, %rax
	LONG $0xc6940f41               // sete         %r14b
	LONG $0x08438b4c               // movq         $8(%rbx), %r8
	WORD $0x394d; BYTE $0xc1       // cmpq         %r8, %r9
	LONG $0xfb3b820f; WORD $0xffff // jb           LBB21_115, $-1221(%rip)
	WORD $0x9090; BYTE $0x90       // .p2align 4, 0x90

LBB21_176:
	LONG $0x01518d49               // leaq         $1(%r9), %rdx
	WORD $0x394c; BYTE $0xc2       // cmpq         %r8, %rdx
	LONG $0x0023830f; WORD $0x0000 // jae          LBB21_180, $35(%rip)
	LONG $0x15448a41; BYTE $0x00   // movb         (%r13,%rdx), %al
	WORD $0x0d3c                   // cmpb         $13, %al
	LONG $0x0016840f; WORD $0x0000 // je           LBB21_180, $22(%rip)
	WORD $0x203c                   // cmpb         $32, %al
	LONG $0x000e840f; WORD $0x0000 // je           LBB21_180, $14(%rip)
	WORD $0xf704                   // addb         $-9, %al
	WORD $0x013c                   // cmpb         $1, %al
	LONG $0x01eb870f; WORD $0x0000 // ja           LBB21_210, $491(%rip)
	LONG $0x90909090               // .p2align 4, 0x90

LBB21_180:
	LONG $0x02518d49               // leaq         $2(%r9), %rdx
	WORD $0x394c; BYTE $0xc2       // cmpq         %r8, %rdx
	LONG $0x0023830f; WORD $0x0000 // jae          LBB21_184, $35(%rip)
	LONG $0x15448a41; BYTE $0x00   // movb         (%r13,%rdx), %al
	WORD $0x0d3c                   // cmpb         $13, %al
	LONG $0x0016840f; WORD $0x0000 // je           LBB21_184, $22(%rip)
	WORD $0x203c                   // cmpb         $32, %al
	LONG $0x000e840f; WORD $0x0000 // je           LBB21_184, $14(%rip)
	WORD $0xf704                   // addb         $-9, %al
	WORD $0x013c                   // cmpb         $1, %al
	LONG $0x01bb870f; WORD $0x0000 // ja           LBB21_210, $443(%rip)
	LONG $0x90909090               // .p2align 4, 0x90

LBB21_184:
	LONG $0x03518d49               // leaq         $3(%r9), %rdx
	WORD $0x394c; BYTE $0xc2       // cmpq         %r8, %rdx
	LONG $0x0023830f; WORD $0x0000 // jae          LBB21_188, $35(%rip)
	LONG $0x15448a41; BYTE $0x00   // movb         (%r13,%rdx), %al
	WORD $0x0d3c                   // cmpb         $13, %al
	LONG $0x0016840f; WORD $0x0000 // je           LBB21_188, $22(%rip)
	WORD $0x203c                   // cmpb         $32, %al
	LONG $0x000e840f; WORD $0x0000 // je           LBB21_188, $14(%rip)
	WORD $0xf704                   // addb         $-9, %al
	WORD $0x013c                   // cmpb         $1, %al
	LONG $0x018b870f; WORD $0x0000 // ja           LBB21_210, $395(%rip)
	LONG $0x90909090               // .p2align 4, 0x90

LBB21_188:
	LONG $0x04418d49                       // leaq         $4(%r9), %rax
	WORD $0x3949; BYTE $0xc0               // cmpq         %rax, %r8
	LONG $0x0989860f; WORD $0x0000         // jbe          LBB21_319, $2441(%rip)
	LONG $0x05548d49; BYTE $0x00           // leaq         (%r13,%rax), %rdx
	WORD $0x894c; BYTE $0xc6               // movq         %r8, %rsi
	WORD $0x2948; BYTE $0xc6               // subq         %rax, %rsi
	LONG $0x00a0840f; WORD $0x0000         // je           LBB21_198, $160(%rip)
	WORD $0xd089                           // movl         %edx, %eax
	WORD $0xe083; BYTE $0x0f               // andl         $15, %eax
	WORD $0x8548; BYTE $0xc0               // testq        %rax, %rax
	QUAD $0x000100002600ba49; WORD $0x0000 // movabsq      $4294977024, %r10
	LONG $0x0092840f; WORD $0x0000         // je           LBB21_199, $146(%rip)
	LONG $0x0d548d4b; BYTE $0x00           // leaq         (%r13,%r9), %rdx
	WORD $0x894c; BYTE $0xc6               // movq         %r8, %rsi
	WORD $0x294c; BYTE $0xce               // subq         %r9, %rsi
	LONG $0xfb5e8d48                       // leaq         $-5(%rsi), %rbx
	WORD $0xc031                           // xorl         %eax, %eax
	QUAD $0x9090909090909090; BYTE $0x90   // .p2align 4, 0x90

LBB21_192:
	LONG $0x027cbe0f; BYTE $0x04   // movsbl       $4(%rdx,%rax), %edi
	WORD $0xff83; BYTE $0x20       // cmpl         $32, %edi
	LONG $0x0040870f; WORD $0x0000 // ja           LBB21_197, $64(%rip)
	LONG $0xfaa30f49               // btq          %rdi, %r10
	LONG $0x0036830f; WORD $0x0000 // jae          LBB21_197, $54(%rip)
	LONG $0x01788d48               // leaq         $1(%rax), %rdi
	WORD $0x3948; BYTE $0xc3       // cmpq         %rax, %rbx
	LONG $0x0014840f; WORD $0x0000 // je           LBB21_196, $20(%rip)
	LONG $0x024c8d48; BYTE $0x05   // leaq         $5(%rdx,%rax), %rcx
	WORD $0xe183; BYTE $0x0f       // andl         $15, %ecx
	WORD $0x8948; BYTE $0xf8       // movq         %rdi, %rax
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0xffc7850f; WORD $0xffff // jne          LBB21_192, $-57(%rip)

LBB21_196:
	LONG $0x17548d48; BYTE $0x04 // leaq         $4(%rdi,%rdx), %rdx
	WORD $0x2948; BYTE $0xfe     // subq         %rdi, %rsi
	LONG $0xfcc68348             // addq         $-4, %rsi
	LONG $0xc85d8b48             // movq         $-56(%rbp), %rbx
	LONG $0x00002ae9; BYTE $0x00 // jmp          LBB21_199, $42(%rip)

LBB21_197:
	WORD $0x0148; BYTE $0xc2       // addq         %rax, %rdx
	WORD $0x894c; BYTE $0xe8       // movq         %r13, %rax
	WORD $0xf748; BYTE $0xd0       // notq         %rax
	LONG $0x10548d48; BYTE $0x05   // leaq         $5(%rax,%rdx), %rdx
	LONG $0xc85d8b48               // movq         $-56(%rbp), %rbx
	WORD $0x394c; BYTE $0xc2       // cmpq         %r8, %rdx
	LONG $0x00ce820f; WORD $0x0000 // jb           LBB21_210, $206(%rip)
	LONG $0x0008dfe9; BYTE $0x00   // jmp          LBB21_320, $2271(%rip)

LBB21_198:
	QUAD $0x000100002600ba49; WORD $0x0000 // movabsq      $4294977024, %r10

LBB21_199:
	LONG $0x10fe8348                                         // cmpq         $16, %rsi
	LONG $0x004e820f; WORD $0x0000                           // jb           LBB21_202, $78(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB21_200:
	LONG $0x026ff9c5               // vmovdqa      (%rdx), %xmm0
	LONG $0xc874b9c5               // vpcmpeqb     %xmm0, %xmm8, %xmm1
	LONG $0xd074b1c5               // vpcmpeqb     %xmm0, %xmm9, %xmm2
	LONG $0xcaebf1c5               // vpor         %xmm2, %xmm1, %xmm1
	LONG $0xd074a9c5               // vpcmpeqb     %xmm0, %xmm10, %xmm2
	LONG $0xc574f9c5               // vpcmpeqb     %xmm5, %xmm0, %xmm0
	LONG $0xc2ebf9c5               // vpor         %xmm2, %xmm0, %xmm0
	LONG $0xc1ebf9c5               // vpor         %xmm1, %xmm0, %xmm0
	LONG $0xc0d7f9c5               // vpmovmskb    %xmm0, %eax
	LONG $0xfff88366               // cmpw         $-1, %ax
	LONG $0x0062850f; WORD $0x0000 // jne          LBB21_209, $98(%rip)
	LONG $0x10c28348               // addq         $16, %rdx
	LONG $0xf0c68348               // addq         $-16, %rsi
	LONG $0x0ffe8348               // cmpq         $15, %rsi
	LONG $0xffc0870f; WORD $0xffff // ja           LBB21_200, $-64(%rip)

LBB21_202:
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0x0034840f; WORD $0x0000 // je           LBB21_208, $52(%rip)
	LONG $0x321c8d48               // leaq         (%rdx,%rsi), %rbx
	WORD $0xff48; BYTE $0xc2       // incq         %rdx

LBB21_204:
	LONG $0xff42be0f               // movsbl       $-1(%rdx), %eax
	WORD $0xf883; BYTE $0x20       // cmpl         $32, %eax
	LONG $0x02ed870f; WORD $0x0000 // ja           LBB21_252, $749(%rip)
	LONG $0xc2a30f49               // btq          %rax, %r10
	LONG $0x02e3830f; WORD $0x0000 // jae          LBB21_252, $739(%rip)
	WORD $0xff48; BYTE $0xce       // decq         %rsi
	WORD $0xff48; BYTE $0xc2       // incq         %rdx
	WORD $0x8548; BYTE $0xf6       // testq        %rsi, %rsi
	LONG $0xffda850f; WORD $0xffff // jne          LBB21_204, $-38(%rip)
	WORD $0x8948; BYTE $0xda       // movq         %rbx, %rdx
	LONG $0xc85d8b48               // movq         $-56(%rbp), %rbx

LBB21_208:
	WORD $0x294c; BYTE $0xea       // subq         %r13, %rdx
	WORD $0x394c; BYTE $0xc2       // cmpq         %r8, %rdx
	LONG $0x001e820f; WORD $0x0000 // jb           LBB21_210, $30(%rip)
	LONG $0x00082fe9; BYTE $0x00   // jmp          LBB21_320, $2095(%rip)
	WORD $0x9090                   // .p2align 4, 0x90

LBB21_209:
	WORD $0xb70f; BYTE $0xc0       // movzwl       %ax, %eax
	WORD $0x294c; BYTE $0xea       // subq         %r13, %rdx
	WORD $0xd0f7                   // notl         %eax
	WORD $0xbc0f; BYTE $0xc0       // bsfl         %eax, %eax
	WORD $0x0148; BYTE $0xc2       // addq         %rax, %rdx
	WORD $0x394c; BYTE $0xc2       // cmpq         %r8, %rdx
	LONG $0x0816830f; WORD $0x0000 // jae          LBB21_320, $2070(%rip)

LBB21_210:
	LONG $0x014a8d4c               // leaq         $1(%rdx), %r9
	LONG $0x240c894d               // movq         %r9, (%r12)
	LONG $0x157c8041; WORD $0x3a00 // cmpb         $58, (%r13,%rdx)
	LONG $0x0802850f; WORD $0x0000 // jne          LBB21_320, $2050(%rip)
	WORD $0x854d; BYTE $0xf6       // testq        %r14, %r14
	LONG $0x078c850f; WORD $0x0000 // jne          LBB21_315, $1932(%rip)
	WORD $0x8948; BYTE $0xdf       // movq         %rbx, %rdi
	WORD $0x894c; BYTE $0xe6       // movq         %r12, %rsi
	LONG $0xffe1b1e8; BYTE $0xff   // callq        _skip_one_fast, $-7759(%rip)
	WORD $0x8b4c; BYTE $0x2b       // movq         (%rbx), %r13
	LONG $0x08438b4c               // movq         $8(%rbx), %r8
	LONG $0x240c8b4d               // movq         (%r12), %r9
	WORD $0x394d; BYTE $0xc1       // cmpq         %r8, %r9
	LONG $0x004d830f; WORD $0x0000 // jae          LBB21_217, $77(%rip)
	LONG $0x0d4c8a43; BYTE $0x00   // movb         (%r13,%r9), %cl
	WORD $0xf980; BYTE $0x0d       // cmpb         $13, %cl
	LONG $0x003f840f; WORD $0x0000 // je           LBB21_217, $63(%rip)
	WORD $0xf980; BYTE $0x20       // cmpb         $32, %cl
	LONG $0x0036840f; WORD $0x0000 // je           LBB21_217, $54(%rip)
	WORD $0xc180; BYTE $0xf7       // addb         $-9, %cl
	WORD $0xf980; BYTE $0x01       // cmpb         $1, %cl
	LONG $0x002a860f; WORD $0x0000 // jbe          LBB21_217, $42(%rip)
	WORD $0x894c; BYTE $0xc9       // movq         %r9, %rcx
	QUAD $0xffffefef056f79c5       // vmovdqa      $-4113(%rip), %xmm8  /* LCPI21_0(%rip) */
	QUAD $0xffffeff70d6f79c5       // vmovdqa      $-4105(%rip), %xmm9  /* LCPI21_1(%rip) */
	QUAD $0xffffefff156f79c5       // vmovdqa      $-4097(%rip), %xmm10  /* LCPI21_2(%rip) */
	QUAD $0xfffff0072d6ff9c5       // vmovdqa      $-4089(%rip), %xmm5  /* LCPI21_3(%rip) */
	LONG $0xfff349e9; BYTE $0xff   // jmp          LBB21_251, $-3255(%rip)
	WORD $0x9090                   // .p2align 4, 0x90

LBB21_217:
	LONG $0x01498d49               // leaq         $1(%r9), %rcx
	WORD $0x394c; BYTE $0xc1       // cmpq         %r8, %rcx
	QUAD $0xffffefc1056f79c5       // vmovdqa      $-4159(%rip), %xmm8  /* LCPI21_0(%rip) */
	QUAD $0xffffefc90d6f79c5       // vmovdqa      $-4151(%rip), %xmm9  /* LCPI21_1(%rip) */
	QUAD $0xffffefd1156f79c5       // vmovdqa      $-4143(%rip), %xmm10  /* LCPI21_2(%rip) */
	QUAD $0xffffefd92d6ff9c5       // vmovdqa      $-4135(%rip), %xmm5  /* LCPI21_3(%rip) */
	LONG $0x0023830f; WORD $0x0000 // jae          LBB21_221, $35(%rip)
	LONG $0x0d548a41; BYTE $0x00   // movb         (%r13,%rcx), %dl
	WORD $0xfa80; BYTE $0x0d       // cmpb         $13, %dl
	LONG $0x0015840f; WORD $0x0000 // je           LBB21_221, $21(%rip)
	WORD $0xfa80; BYTE $0x20       // cmpb         $32, %dl
	LONG $0x000c840f; WORD $0x0000 // je           LBB21_221, $12(%rip)
	WORD $0xc280; BYTE $0xf7       // addb         $-9, %dl
	WORD $0xfa80; BYTE $0x01       // cmpb         $1, %dl
	LONG $0xf2f7870f; WORD $0xffff // ja           LBB21_251, $-3337(%rip)

	// .p2align 4, 0x90
LBB21_221:
	LONG $0x02498d49               // leaq         $2(%r9), %rcx
	WORD $0x394c; BYTE $0xc1       // cmpq         %r8, %rcx
	LONG $0x0023830f; WORD $0x0000 // jae          LBB21_225, $35(%rip)
	LONG $0x0d548a41; BYTE $0x00   // movb         (%r13,%rcx), %dl
	WORD $0xfa80; BYTE $0x0d       // cmpb         $13, %dl
	LONG $0x0015840f; WORD $0x0000 // je           LBB21_225, $21(%rip)
	WORD $0xfa80; BYTE $0x20       // cmpb         $32, %dl
	LONG $0x000c840f; WORD $0x0000 // je           LBB21_225, $12(%rip)
	WORD $0xc280; BYTE $0xf7       // addb         $-9, %dl
	WORD $0xfa80; BYTE $0x01       // cmpb         $1, %dl
	LONG $0xf2c7870f; WORD $0xffff // ja           LBB21_251, $-3385(%rip)

	// .p2align 4, 0x90
LBB21_225:
	LONG $0x03498d49               // leaq         $3(%r9), %rcx
	WORD $0x394c; BYTE $0xc1       // cmpq         %r8, %rcx
	LONG $0x0023830f; WORD $0x0000 // jae          LBB21_229, $35(%rip)
	LONG $0x0d548a41; BYTE $0x00   // movb         (%r13,%rcx), %dl
	WORD $0xfa80; BYTE $0x0d       // cmpb         $13, %dl
	LONG $0x0015840f; WORD $0x0000 // je           LBB21_229, $21(%rip)
	WORD $0xfa80; BYTE $0x20       // cmpb         $32, %dl
	LONG $0x000c840f; WORD $0x0000 // je           LBB21_229, $12(%rip)
	WORD $0xc280; BYTE $0xf7       // addb         $-9, %dl
	WORD $0xfa80; BYTE $0x01       // cmpb         $1, %dl
	LONG $0xf297870f; WORD $0xffff // ja           LBB21_251, $-3433(%rip)

	// .p2align 4, 0x90
LBB21_229:
	LONG $0x04718d49                       // leaq         $4(%r9), %rsi
	WORD $0x3949; BYTE $0xf0               // cmpq         %rsi, %r8
	LONG $0x06b5860f; WORD $0x0000         // jbe          LBB21_317, $1717(%rip)
	LONG $0x354c8d49; BYTE $0x00           // leaq         (%r13,%rsi), %rcx
	WORD $0x894c; BYTE $0xc2               // movq         %r8, %rdx
	WORD $0x2948; BYTE $0xf2               // subq         %rsi, %rdx
	LONG $0x00a0840f; WORD $0x0000         // je           LBB21_239, $160(%rip)
	WORD $0xce89                           // movl         %ecx, %esi
	WORD $0xe683; BYTE $0x0f               // andl         $15, %esi
	WORD $0x8548; BYTE $0xf6               // testq        %rsi, %rsi
	QUAD $0x000100002600ba49; WORD $0x0000 // movabsq      $4294977024, %r10
	LONG $0x0092840f; WORD $0x0000         // je           LBB21_240, $146(%rip)
	LONG $0x0d4c8d4b; BYTE $0x00           // leaq         (%r13,%r9), %rcx
	WORD $0x894c; BYTE $0xc2               // movq         %r8, %rdx
	WORD $0x294c; BYTE $0xca               // subq         %r9, %rdx
	LONG $0xfb728d48                       // leaq         $-5(%rdx), %rsi
	WORD $0xdb31                           // xorl         %ebx, %ebx
	QUAD $0x9090909090909090; BYTE $0x90   // .p2align 4, 0x90

LBB21_233:
	LONG $0x197cbe0f; BYTE $0x04   // movsbl       $4(%rcx,%rbx), %edi
	WORD $0xff83; BYTE $0x20       // cmpl         $32, %edi
	LONG $0x0040870f; WORD $0x0000 // ja           LBB21_238, $64(%rip)
	LONG $0xfaa30f49               // btq          %rdi, %r10
	LONG $0x0036830f; WORD $0x0000 // jae          LBB21_238, $54(%rip)
	LONG $0x017b8d48               // leaq         $1(%rbx), %rdi
	WORD $0x3948; BYTE $0xde       // cmpq         %rbx, %rsi
	LONG $0x0014840f; WORD $0x0000 // je           LBB21_237, $20(%rip)
	LONG $0x19448d48; BYTE $0x05   // leaq         $5(%rcx,%rbx), %rax
	WORD $0xe083; BYTE $0x0f       // andl         $15, %eax
	WORD $0x8948; BYTE $0xfb       // movq         %rdi, %rbx
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0xffc7850f; WORD $0xffff // jne          LBB21_233, $-57(%rip)

LBB21_237:
	LONG $0x0f4c8d48; BYTE $0x04 // leaq         $4(%rdi,%rcx), %rcx
	WORD $0x2948; BYTE $0xfa     // subq         %rdi, %rdx
	LONG $0xfcc28348             // addq         $-4, %rdx
	LONG $0xc85d8b48             // movq         $-56(%rbp), %rbx
	LONG $0x00002ae9; BYTE $0x00 // jmp          LBB21_240, $42(%rip)

LBB21_238:
	WORD $0x0148; BYTE $0xd9       // addq         %rbx, %rcx
	WORD $0x894c; BYTE $0xea       // movq         %r13, %rdx
	WORD $0xf748; BYTE $0xd2       // notq         %rdx
	LONG $0x0a4c8d48; BYTE $0x05   // leaq         $5(%rdx,%rcx), %rcx
	LONG $0xc85d8b48               // movq         $-56(%rbp), %rbx
	WORD $0x394c; BYTE $0xc1       // cmpq         %r8, %rcx
	LONG $0xf1de820f; WORD $0xffff // jb           LBB21_251, $-3618(%rip)
	LONG $0x00061fe9; BYTE $0x00   // jmp          LBB21_320, $1567(%rip)

LBB21_239:
	QUAD $0x000100002600ba49; WORD $0x0000 // movabsq      $4294977024, %r10

LBB21_240:
	LONG $0x10fa8348                                         // cmpq         $16, %rdx
	LONG $0x004e820f; WORD $0x0000                           // jb           LBB21_243, $78(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB21_241:
	LONG $0x016ff9c5               // vmovdqa      (%rcx), %xmm0
	LONG $0xc874b9c5               // vpcmpeqb     %xmm0, %xmm8, %xmm1
	LONG $0xd074b1c5               // vpcmpeqb     %xmm0, %xmm9, %xmm2
	LONG $0xcaebf1c5               // vpor         %xmm2, %xmm1, %xmm1
	LONG $0xd074a9c5               // vpcmpeqb     %xmm0, %xmm10, %xmm2
	LONG $0xc574f9c5               // vpcmpeqb     %xmm5, %xmm0, %xmm0
	LONG $0xc2ebf9c5               // vpor         %xmm2, %xmm0, %xmm0
	LONG $0xc1ebf9c5               // vpor         %xmm1, %xmm0, %xmm0
	LONG $0xf0d7f9c5               // vpmovmskb    %xmm0, %esi
	LONG $0xfffe8366               // cmpw         $-1, %si
	LONG $0xf172850f; WORD $0xffff // jne          LBB21_250, $-3726(%rip)
	LONG $0x10c18348               // addq         $16, %rcx
	LONG $0xf0c28348               // addq         $-16, %rdx
	LONG $0x0ffa8348               // cmpq         $15, %rdx
	LONG $0xffc0870f; WORD $0xffff // ja           LBB21_241, $-64(%rip)

LBB21_243:
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0x0030840f; WORD $0x0000 // je           LBB21_249, $48(%rip)
	LONG $0x11348d48               // leaq         (%rcx,%rdx), %rsi
	WORD $0xff48; BYTE $0xc1       // incq         %rcx

LBB21_245:
	LONG $0xff79be0f               // movsbl       $-1(%rcx), %edi
	WORD $0xff83; BYTE $0x20       // cmpl         $32, %edi
	LONG $0x0048870f; WORD $0x0000 // ja           LBB21_253, $72(%rip)
	LONG $0xfaa30f49               // btq          %rdi, %r10
	LONG $0x003e830f; WORD $0x0000 // jae          LBB21_253, $62(%rip)
	WORD $0xff48; BYTE $0xca       // decq         %rdx
	WORD $0xff48; BYTE $0xc1       // incq         %rcx
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0xffda850f; WORD $0xffff // jne          LBB21_245, $-38(%rip)
	WORD $0x8948; BYTE $0xf1       // movq         %rsi, %rcx

LBB21_249:
	WORD $0x294c; BYTE $0xe9       // subq         %r13, %rcx
	WORD $0x394c; BYTE $0xc1       // cmpq         %r8, %rcx
	LONG $0xf132820f; WORD $0xffff // jb           LBB21_251, $-3790(%rip)
	LONG $0x000573e9; BYTE $0x00   // jmp          LBB21_320, $1395(%rip)

LBB21_252:
	WORD $0x894c; BYTE $0xe8       // movq         %r13, %rax
	WORD $0xf748; BYTE $0xd0       // notq         %rax
	WORD $0x0148; BYTE $0xc2       // addq         %rax, %rdx
	LONG $0xc85d8b48               // movq         $-56(%rbp), %rbx
	WORD $0x394c; BYTE $0xc2       // cmpq         %r8, %rdx
	LONG $0xfd47820f; WORD $0xffff // jb           LBB21_210, $-697(%rip)
	LONG $0x000558e9; BYTE $0x00   // jmp          LBB21_320, $1368(%rip)

LBB21_253:
	WORD $0x894c; BYTE $0xe8       // movq         %r13, %rax
	WORD $0xf748; BYTE $0xd0       // notq         %rax
	WORD $0x0148; BYTE $0xc1       // addq         %rax, %rcx
	WORD $0x394c; BYTE $0xc1       // cmpq         %r8, %rcx
	LONG $0xf100820f; WORD $0xffff // jb           LBB21_251, $-3840(%rip)
	LONG $0x000541e9; BYTE $0x00   // jmp          LBB21_320, $1345(%rip)

LBB21_254:
	WORD $0x3145; BYTE $0xf6       // xorl         %r14d, %r14d
	LONG $0xd06d8b4c               // movq         $-48(%rbp), %r13
	LONG $0x08438b4c               // movq         $8(%rbx), %r8
	WORD $0x394d; BYTE $0xc1       // cmpq         %r8, %r9
	LONG $0xfb00830f; WORD $0xffff // jae          LBB21_176, $-1280(%rip)
	LONG $0xfff633e9; BYTE $0xff   // jmp          LBB21_115, $-2509(%rip)

LBB21_255:
	LONG $0xa87d8348; BYTE $0xff   // cmpq         $-1, $-88(%rbp)
	LONG $0x0012850f; WORD $0x0000 // jne          LBB21_257, $18(%rip)
	WORD $0x8948; BYTE $0xf0       // movq         %rsi, %rax
	LONG $0xd0452b48               // subq         $-48(%rbp), %rax
	LONG $0xfabc0f48               // bsfq         %rdx, %rdi
	WORD $0x0148; BYTE $0xc7       // addq         %rax, %rdi
	LONG $0xa87d8948               // movq         %rdi, $-88(%rbp)

LBB21_257:
	WORD $0x8944; BYTE $0xc8       // movl         %r9d, %eax
	WORD $0xd0f7                   // notl         %eax
	WORD $0xd021                   // andl         %edx, %eax
	LONG $0x413c8d41               // leal         (%r9,%rax,2), %edi
	WORD $0x1c8d; BYTE $0x00       // leal         (%rax,%rax), %ebx
	WORD $0xd3f7                   // notl         %ebx
	WORD $0xd321                   // andl         %edx, %ebx
	LONG $0xaaaae381; WORD $0xaaaa // andl         $-1431655766, %ebx
	WORD $0x3145; BYTE $0xc9       // xorl         %r9d, %r9d
	WORD $0xc301                   // addl         %eax, %ebx
	LONG $0xc1920f41               // setb         %r9b
	WORD $0xdb01                   // addl         %ebx, %ebx
	LONG $0x5555f381; WORD $0x5555 // xorl         $1431655765, %ebx
	WORD $0xfb21                   // andl         %edi, %ebx
	WORD $0xd3f7                   // notl         %ebx
	WORD $0x2141; BYTE $0xde       // andl         %ebx, %r14d
	LONG $0xc85d8b48               // movq         $-56(%rbp), %rbx
	QUAD $0xffffed12056f79c5       // vmovdqa      $-4846(%rip), %xmm8  /* LCPI21_0(%rip) */
	QUAD $0xffffed1a0d6f79c5       // vmovdqa      $-4838(%rip), %xmm9  /* LCPI21_1(%rip) */
	QUAD $0xffffed22156f79c5       // vmovdqa      $-4830(%rip), %xmm10  /* LCPI21_2(%rip) */
	QUAD $0xffffed2a2d6ff9c5       // vmovdqa      $-4822(%rip), %xmm5  /* LCPI21_3(%rip) */
	WORD $0x854d; BYTE $0xf6       // testq        %r14, %r14
	LONG $0xa8558b48               // movq         $-88(%rbp), %rdx
	LONG $0xf640850f; WORD $0xffff // jne          LBB21_123, $-2496(%rip)

LBB21_258:
	LONG $0x20c68348 // addq         $32, %rsi
	LONG $0xe0c18348 // addq         $-32, %rcx

LBB21_259:
	WORD $0x854d; BYTE $0xc9       // testq        %r9, %r9
	LONG $0x00ab850f; WORD $0x0000 // jne          LBB21_268, $171(%rip)
	WORD $0x8949; BYTE $0xd0       // movq         %rdx, %r8
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0x04ae840f; WORD $0x0000 // je           LBB21_323, $1198(%rip)

LBB21_261:
	WORD $0x8948; BYTE $0xd0 // movq         %rdx, %rax
	LONG $0xd0558b48         // movq         $-48(%rbp), %rdx
	WORD $0xf748; BYTE $0xd2 // notq         %rdx

LBB21_262:
	LONG $0x014e8d4c               // leaq         $1(%rsi), %r9
	LONG $0x36b60f44               // movzbl       (%rsi), %r14d
	LONG $0x22fe8041               // cmpb         $34, %r14b
	LONG $0x0077840f; WORD $0x0000 // je           LBB21_267, $119(%rip)
	LONG $0xff798d48               // leaq         $-1(%rcx), %rdi
	LONG $0x5cfe8041               // cmpb         $92, %r14b
	LONG $0x0014840f; WORD $0x0000 // je           LBB21_265, $20(%rip)
	WORD $0x8948; BYTE $0xf9       // movq         %rdi, %rcx
	WORD $0x894c; BYTE $0xce       // movq         %r9, %rsi
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0xffd1850f; WORD $0xffff // jne          LBB21_262, $-47(%rip)
	LONG $0x000470e9; BYTE $0x00   // jmp          LBB21_323, $1136(%rip)

LBB21_265:
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0x0467840f; WORD $0x0000 // je           LBB21_323, $1127(%rip)
	WORD $0x0149; BYTE $0xd1       // addq         %rdx, %r9
	LONG $0xfff88349               // cmpq         $-1, %r8
	LONG $0xc1440f49               // cmoveq       %r9, %rax
	LONG $0xc1440f4d               // cmoveq       %r9, %r8
	LONG $0x02c68348               // addq         $2, %rsi
	LONG $0xfec18348               // addq         $-2, %rcx
	WORD $0x8948; BYTE $0xcf       // movq         %rcx, %rdi
	LONG $0xc85d8b48               // movq         $-56(%rbp), %rbx
	QUAD $0xffffec63056f79c5       // vmovdqa      $-5021(%rip), %xmm8  /* LCPI21_0(%rip) */
	QUAD $0xffffec6b0d6f79c5       // vmovdqa      $-5013(%rip), %xmm9  /* LCPI21_1(%rip) */
	QUAD $0xffffec73156f79c5       // vmovdqa      $-5005(%rip), %xmm10  /* LCPI21_2(%rip) */
	QUAD $0xffffec7b2d6ff9c5       // vmovdqa      $-4997(%rip), %xmm5  /* LCPI21_3(%rip) */
	WORD $0x8548; BYTE $0xff       // testq        %rdi, %rdi
	LONG $0xff7c850f; WORD $0xffff // jne          LBB21_262, $-132(%rip)
	LONG $0x00041be9; BYTE $0x00   // jmp          LBB21_323, $1051(%rip)

LBB21_267:
	LONG $0xd04d2b4c             // subq         $-48(%rbp), %r9
	WORD $0x8948; BYTE $0xc2     // movq         %rax, %rdx
	LONG $0xfff3b6e9; BYTE $0xff // jmp          LBB21_96, $-3146(%rip)

LBB21_268:
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0x0406840f; WORD $0x0000 // je           LBB21_323, $1030(%rip)
	LONG $0xd0458b4c               // movq         $-48(%rbp), %r8
	WORD $0xf749; BYTE $0xd0       // notq         %r8
	WORD $0x0149; BYTE $0xf0       // addq         %rsi, %r8
	LONG $0xfffa8348               // cmpq         $-1, %rdx
	WORD $0x8948; BYTE $0xd0       // movq         %rdx, %rax
	LONG $0xc0440f49               // cmoveq       %r8, %rax
	LONG $0xc2450f4c               // cmovneq      %rdx, %r8
	WORD $0xff48; BYTE $0xc6       // incq         %rsi
	WORD $0xff48; BYTE $0xc9       // decq         %rcx
	WORD $0x8948; BYTE $0xc2       // movq         %rax, %rdx
	LONG $0xc85d8b48               // movq         $-56(%rbp), %rbx
	QUAD $0xffffebfa056f79c5       // vmovdqa      $-5126(%rip), %xmm8  /* LCPI21_0(%rip) */
	QUAD $0xffffec020d6f79c5       // vmovdqa      $-5118(%rip), %xmm9  /* LCPI21_1(%rip) */
	QUAD $0xffffec0a156f79c5       // vmovdqa      $-5110(%rip), %xmm10  /* LCPI21_2(%rip) */
	QUAD $0xffffec122d6ff9c5       // vmovdqa      $-5102(%rip), %xmm5  /* LCPI21_3(%rip) */
	WORD $0x8548; BYTE $0xc9       // testq        %rcx, %rcx
	LONG $0xff09850f; WORD $0xffff // jne          LBB21_261, $-247(%rip)
	LONG $0x0003b2e9; BYTE $0x00   // jmp          LBB21_323, $946(%rip)
	LONG $0x90909090               // .p2align 4, 0x90

LBB21_270:
	WORD $0xf980; BYTE $0x5b                           // cmpb         $91, %cl
	LONG $0x0384850f; WORD $0x0000                     // jne          LBB21_320, $900(%rip)
	WORD $0x023c                                       // cmpb         $2, %al
	LONG $0x037c850f; WORD $0x0000                     // jne          LBB21_320, $892(%rip)
	LONG $0xa0458b48                                   // movq         $-96(%rbp), %rax
	LONG $0x08408b48                                   // movq         $8(%rax), %rax
	WORD $0x8b4c; BYTE $0x30                           // movq         (%rax), %r14
	WORD $0x854d; BYTE $0xf6                           // testq        %r14, %r14
	LONG $0x02fb8e0f; WORD $0x0000                     // jle          LBB21_315, $763(%rip)
	QUAD $0x9090909090909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB21_273:
	WORD $0x8948; BYTE $0xdf       // movq         %rbx, %rdi
	WORD $0x894c; BYTE $0xe6       // movq         %r12, %rsi
	LONG $0xffdd15e8; BYTE $0xff   // callq        _skip_one_fast, $-8939(%rip)
	WORD $0x8b4c; BYTE $0x2b       // movq         (%rbx), %r13
	LONG $0x08438b4c               // movq         $8(%rbx), %r8
	LONG $0x240c8b4d               // movq         (%r12), %r9
	WORD $0x394d; BYTE $0xc1       // cmpq         %r8, %r9
	LONG $0x0051830f; WORD $0x0000 // jae          LBB21_278, $81(%rip)
	LONG $0x0d4c8a43; BYTE $0x00   // movb         (%r13,%r9), %cl
	WORD $0xf980; BYTE $0x0d       // cmpb         $13, %cl
	LONG $0x0043840f; WORD $0x0000 // je           LBB21_278, $67(%rip)
	WORD $0xf980; BYTE $0x20       // cmpb         $32, %cl
	LONG $0x003a840f; WORD $0x0000 // je           LBB21_278, $58(%rip)
	WORD $0xc180; BYTE $0xf7       // addb         $-9, %cl
	WORD $0xf980; BYTE $0x01       // cmpb         $1, %cl
	LONG $0x002e860f; WORD $0x0000 // jbe          LBB21_278, $46(%rip)
	WORD $0x894c; BYTE $0xc9       // movq         %r9, %rcx
	QUAD $0xffffeb53056f79c5       // vmovdqa      $-5293(%rip), %xmm8  /* LCPI21_0(%rip) */
	QUAD $0xffffeb5b0d6f79c5       // vmovdqa      $-5285(%rip), %xmm9  /* LCPI21_1(%rip) */
	QUAD $0xffffeb63156f79c5       // vmovdqa      $-5277(%rip), %xmm10  /* LCPI21_2(%rip) */
	QUAD $0xffffeb6b2d6ff9c5       // vmovdqa      $-5269(%rip), %xmm5  /* LCPI21_3(%rip) */
	LONG $0x00023de9; BYTE $0x00   // jmp          LBB21_312, $573(%rip)
	LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB21_278:
	LONG $0x01498d49               // leaq         $1(%r9), %rcx
	WORD $0x394c; BYTE $0xc1       // cmpq         %r8, %rcx
	QUAD $0xffffeb21056f79c5       // vmovdqa      $-5343(%rip), %xmm8  /* LCPI21_0(%rip) */
	QUAD $0xffffeb290d6f79c5       // vmovdqa      $-5335(%rip), %xmm9  /* LCPI21_1(%rip) */
	QUAD $0xffffeb31156f79c5       // vmovdqa      $-5327(%rip), %xmm10  /* LCPI21_2(%rip) */
	QUAD $0xffffeb392d6ff9c5       // vmovdqa      $-5319(%rip), %xmm5  /* LCPI21_3(%rip) */
	LONG $0x0023830f; WORD $0x0000 // jae          LBB21_282, $35(%rip)
	LONG $0x0d548a41; BYTE $0x00   // movb         (%r13,%rcx), %dl
	WORD $0xfa80; BYTE $0x0d       // cmpb         $13, %dl
	LONG $0x0015840f; WORD $0x0000 // je           LBB21_282, $21(%rip)
	WORD $0xfa80; BYTE $0x20       // cmpb         $32, %dl
	LONG $0x000c840f; WORD $0x0000 // je           LBB21_282, $12(%rip)
	WORD $0xc280; BYTE $0xf7       // addb         $-9, %dl
	WORD $0xfa80; BYTE $0x01       // cmpb         $1, %dl
	LONG $0x01e7870f; WORD $0x0000 // ja           LBB21_312, $487(%rip)

	// .p2align 4, 0x90
LBB21_282:
	LONG $0x02498d49               // leaq         $2(%r9), %rcx
	WORD $0x394c; BYTE $0xc1       // cmpq         %r8, %rcx
	LONG $0x0023830f; WORD $0x0000 // jae          LBB21_286, $35(%rip)
	LONG $0x0d548a41; BYTE $0x00   // movb         (%r13,%rcx), %dl
	WORD $0xfa80; BYTE $0x0d       // cmpb         $13, %dl
	LONG $0x0015840f; WORD $0x0000 // je           LBB21_286, $21(%rip)
	WORD $0xfa80; BYTE $0x20       // cmpb         $32, %dl
	LONG $0x000c840f; WORD $0x0000 // je           LBB21_286, $12(%rip)
	WORD $0xc280; BYTE $0xf7       // addb         $-9, %dl
	WORD $0xfa80; BYTE $0x01       // cmpb         $1, %dl
	LONG $0x01b7870f; WORD $0x0000 // ja           LBB21_312, $439(%rip)

	// .p2align 4, 0x90
LBB21_286:
	LONG $0x03498d49               // leaq         $3(%r9), %rcx
	WORD $0x394c; BYTE $0xc1       // cmpq         %r8, %rcx
	LONG $0x0023830f; WORD $0x0000 // jae          LBB21_290, $35(%rip)
	LONG $0x0d548a41; BYTE $0x00   // movb         (%r13,%rcx), %dl
	WORD $0xfa80; BYTE $0x0d       // cmpb         $13, %dl
	LONG $0x0015840f; WORD $0x0000 // je           LBB21_290, $21(%rip)
	WORD $0xfa80; BYTE $0x20       // cmpb         $32, %dl
	LONG $0x000c840f; WORD $0x0000 // je           LBB21_290, $12(%rip)
	WORD $0xc280; BYTE $0xf7       // addb         $-9, %dl
	WORD $0xfa80; BYTE $0x01       // cmpb         $1, %dl
	LONG $0x0187870f; WORD $0x0000 // ja           LBB21_312, $391(%rip)

	// .p2align 4, 0x90
LBB21_290:
	LONG $0x04718d49                       // leaq         $4(%r9), %rsi
	WORD $0x3949; BYTE $0xf0               // cmpq         %rsi, %r8
	LONG $0x0215860f; WORD $0x0000         // jbe          LBB21_317, $533(%rip)
	LONG $0x354c8d49; BYTE $0x00           // leaq         (%r13,%rsi), %rcx
	WORD $0x894c; BYTE $0xc2               // movq         %r8, %rdx
	WORD $0x2948; BYTE $0xf2               // subq         %rsi, %rdx
	LONG $0x00a0840f; WORD $0x0000         // je           LBB21_300, $160(%rip)
	WORD $0xce89                           // movl         %ecx, %esi
	WORD $0xe683; BYTE $0x0f               // andl         $15, %esi
	WORD $0x8548; BYTE $0xf6               // testq        %rsi, %rsi
	QUAD $0x000100002600ba49; WORD $0x0000 // movabsq      $4294977024, %r10
	LONG $0x0092840f; WORD $0x0000         // je           LBB21_301, $146(%rip)
	LONG $0x0d4c8d4b; BYTE $0x00           // leaq         (%r13,%r9), %rcx
	WORD $0x894c; BYTE $0xc2               // movq         %r8, %rdx
	WORD $0x294c; BYTE $0xca               // subq         %r9, %rdx
	LONG $0xfb728d48                       // leaq         $-5(%rdx), %rsi
	WORD $0xdb31                           // xorl         %ebx, %ebx
	QUAD $0x9090909090909090; BYTE $0x90   // .p2align 4, 0x90

LBB21_294:
	LONG $0x197cbe0f; BYTE $0x04   // movsbl       $4(%rcx,%rbx), %edi
	WORD $0xff83; BYTE $0x20       // cmpl         $32, %edi
	LONG $0x0040870f; WORD $0x0000 // ja           LBB21_299, $64(%rip)
	LONG $0xfaa30f49               // btq          %rdi, %r10
	LONG $0x0036830f; WORD $0x0000 // jae          LBB21_299, $54(%rip)
	LONG $0x017b8d48               // leaq         $1(%rbx), %rdi
	WORD $0x3948; BYTE $0xde       // cmpq         %rbx, %rsi
	LONG $0x0014840f; WORD $0x0000 // je           LBB21_298, $20(%rip)
	LONG $0x19448d48; BYTE $0x05   // leaq         $5(%rcx,%rbx), %rax
	WORD $0xe083; BYTE $0x0f       // andl         $15, %eax
	WORD $0x8948; BYTE $0xfb       // movq         %rdi, %rbx
	WORD $0x8548; BYTE $0xc0       // testq        %rax, %rax
	LONG $0xffc7850f; WORD $0xffff // jne          LBB21_294, $-57(%rip)

LBB21_298:
	LONG $0x0f4c8d48; BYTE $0x04 // leaq         $4(%rdi,%rcx), %rcx
	WORD $0x2948; BYTE $0xfa     // subq         %rdi, %rdx
	LONG $0xfcc28348             // addq         $-4, %rdx
	LONG $0xc85d8b48             // movq         $-56(%rbp), %rbx
	LONG $0x00002ae9; BYTE $0x00 // jmp          LBB21_301, $42(%rip)

LBB21_299:
	WORD $0x0148; BYTE $0xd9       // addq         %rbx, %rcx
	WORD $0x894c; BYTE $0xea       // movq         %r13, %rdx
	WORD $0xf748; BYTE $0xd2       // notq         %rdx
	LONG $0x0a4c8d48; BYTE $0x05   // leaq         $5(%rdx,%rcx), %rcx
	LONG $0xc85d8b48               // movq         $-56(%rbp), %rbx
	WORD $0x394c; BYTE $0xc1       // cmpq         %r8, %rcx
	LONG $0x00ce820f; WORD $0x0000 // jb           LBB21_312, $206(%rip)
	LONG $0x00017fe9; BYTE $0x00   // jmp          LBB21_320, $383(%rip)

LBB21_300:
	QUAD $0x000100002600ba49; WORD $0x0000 // movabsq      $4294977024, %r10

LBB21_301:
	LONG $0x10fa8348                                         // cmpq         $16, %rdx
	LONG $0x004e820f; WORD $0x0000                           // jb           LBB21_304, $78(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB21_302:
	LONG $0x016ff9c5               // vmovdqa      (%rcx), %xmm0
	LONG $0xc874b9c5               // vpcmpeqb     %xmm0, %xmm8, %xmm1
	LONG $0xd074b1c5               // vpcmpeqb     %xmm0, %xmm9, %xmm2
	LONG $0xcaebf1c5               // vpor         %xmm2, %xmm1, %xmm1
	LONG $0xd074a9c5               // vpcmpeqb     %xmm0, %xmm10, %xmm2
	LONG $0xc574f9c5               // vpcmpeqb     %xmm5, %xmm0, %xmm0
	LONG $0xc2ebf9c5               // vpor         %xmm2, %xmm0, %xmm0
	LONG $0xc1ebf9c5               // vpor         %xmm1, %xmm0, %xmm0
	LONG $0xf0d7f9c5               // vpmovmskb    %xmm0, %esi
	LONG $0xfffe8366               // cmpw         $-1, %si
	LONG $0x0062850f; WORD $0x0000 // jne          LBB21_311, $98(%rip)
	LONG $0x10c18348               // addq         $16, %rcx
	LONG $0xf0c28348               // addq         $-16, %rdx
	LONG $0x0ffa8348               // cmpq         $15, %rdx
	LONG $0xffc0870f; WORD $0xffff // ja           LBB21_302, $-64(%rip)

LBB21_304:
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0x0030840f; WORD $0x0000 // je           LBB21_310, $48(%rip)
	LONG $0x11348d48               // leaq         (%rcx,%rdx), %rsi
	WORD $0xff48; BYTE $0xc1       // incq         %rcx

	// .p2align 4, 0x90
LBB21_306:
	LONG $0xff79be0f               // movsbl       $-1(%rcx), %edi
	WORD $0xff83; BYTE $0x20       // cmpl         $32, %edi
	LONG $0x0074870f; WORD $0x0000 // ja           LBB21_314, $116(%rip)
	LONG $0xfaa30f49               // btq          %rdi, %r10
	LONG $0x006a830f; WORD $0x0000 // jae          LBB21_314, $106(%rip)
	WORD $0xff48; BYTE $0xca       // decq         %rdx
	WORD $0xff48; BYTE $0xc1       // incq         %rcx
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0xffda850f; WORD $0xffff // jne          LBB21_306, $-38(%rip)
	WORD $0x8948; BYTE $0xf1       // movq         %rsi, %rcx

LBB21_310:
	WORD $0x294c; BYTE $0xe9       // subq         %r13, %rcx
	WORD $0x394c; BYTE $0xc1       // cmpq         %r8, %rcx
	LONG $0x0022820f; WORD $0x0000 // jb           LBB21_312, $34(%rip)
	LONG $0x0000d3e9; BYTE $0x00   // jmp          LBB21_320, $211(%rip)
	LONG $0x90909090; WORD $0x9090 // .p2align 4, 0x90

LBB21_311:
	WORD $0xb70f; BYTE $0xc6       // movzwl       %si, %eax
	WORD $0x294c; BYTE $0xe9       // subq         %r13, %rcx
	WORD $0xd0f7                   // notl         %eax
	WORD $0xbc0f; BYTE $0xc0       // bsfl         %eax, %eax
	WORD $0x0148; BYTE $0xc1       // addq         %rax, %rcx
	WORD $0x394c; BYTE $0xc1       // cmpq         %r8, %rcx
	LONG $0x00b6830f; WORD $0x0000 // jae          LBB21_320, $182(%rip)

LBB21_312:
	LONG $0x01498d4c               // leaq         $1(%rcx), %r9
	LONG $0x240c894d               // movq         %r9, (%r12)
	LONG $0x0d7c8041; WORD $0x2c00 // cmpb         $44, (%r13,%rcx)
	LONG $0x00a2850f; WORD $0x0000 // jne          LBB21_320, $162(%rip)
	LONG $0xff468d49               // leaq         $-1(%r14), %rax
	LONG $0x02fe8349               // cmpq         $2, %r14
	WORD $0x8949; BYTE $0xc6       // movq         %rax, %r14
	LONG $0xfd348d0f; WORD $0xffff // jge          LBB21_273, $-716(%rip)
	LONG $0x00001fe9; BYTE $0x00   // jmp          LBB21_315, $31(%rip)

LBB21_314:
	WORD $0x894c; BYTE $0xe8       // movq         %r13, %rax
	WORD $0xf748; BYTE $0xd0       // notq         %rax
	WORD $0x0148; BYTE $0xc1       // addq         %rax, %rcx
	WORD $0x394c; BYTE $0xc1       // cmpq         %r8, %rcx
	LONG $0xffc4820f; WORD $0xffff // jb           LBB21_312, $-60(%rip)
	LONG $0x000075e9; BYTE $0x00   // jmp          LBB21_320, $117(%rip)
	QUAD $0x9090909090909090       // .p2align 4, 0x90

LBB21_315:
	LONG $0xa0458b48                       // movq         $-96(%rbp), %rax
	LONG $0x10c08348                       // addq         $16, %rax
	WORD $0x894d; BYTE $0xcb               // movq         %r9, %r11
	LONG $0x90558b4c                       // movq         $-112(%rbp), %r10
	LONG $0xa0458948                       // movq         %rax, $-96(%rbp)
	WORD $0x394c; BYTE $0xd0               // cmpq         %r10, %rax
	QUAD $0x000100002600be49; WORD $0x0000 // movabsq      $4294977024, %r14
	LONG $0xe955850f; WORD $0xffff         // jne          LBB21_2, $-5803(%rip)
	LONG $0x000017e9; BYTE $0x00           // jmp          LBB21_316, $23(%rip)

LBB21_42:
	WORD $0x894c; BYTE $0xe8       // movq         %r13, %rax
	WORD $0xf748; BYTE $0xd0       // notq         %rax
	WORD $0x0148; BYTE $0xc2       // addq         %rax, %rdx
	WORD $0x394c; BYTE $0xc2       // cmpq         %r8, %rdx
	LONG $0xeb6a820f; WORD $0xffff // jb           LBB21_41, $-5270(%rip)
	LONG $0xffeb92e9; BYTE $0xff   // jmp          LBB21_43, $-5230(%rip)

LBB21_316:
	WORD $0x8948; BYTE $0xdf     // movq         %rbx, %rdi
	WORD $0x894c; BYTE $0xe6     // movq         %r12, %rsi
	LONG $0xffd9e3e8; BYTE $0xff // callq        _skip_one_fast, $-9757(%rip)
	LONG $0x000029e9; BYTE $0x00 // jmp          LBB21_321, $41(%rip)

LBB21_317:
	LONG $0x24348949             // movq         %rsi, (%r12)
	WORD $0x8949; BYTE $0xf1     // movq         %rsi, %r9
	LONG $0x00000fe9; BYTE $0x00 // jmp          LBB21_320, $15(%rip)

LBB21_318:
	WORD $0x894d; BYTE $0xd9     // movq         %r11, %r9
	LONG $0x000007e9; BYTE $0x00 // jmp          LBB21_320, $7(%rip)

LBB21_319:
	LONG $0x24048949         // movq         %rax, (%r12)
	WORD $0x8949; BYTE $0xc1 // movq         %rax, %r9

LBB21_320:
	WORD $0xff49; BYTE $0xc9                   // decq         %r9
	LONG $0x240c894d                           // movq         %r9, (%r12)
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax

LBB21_321:
	LONG $0x48c48348 // addq         $72, %rsp
	BYTE $0x5b       // popq         %rbx
	WORD $0x5c41     // popq         %r12
	WORD $0x5d41     // popq         %r13
	WORD $0x5e41     // popq         %r14
	WORD $0x5f41     // popq         %r15
	BYTE $0x5d       // popq         %rbp
	BYTE $0xc3       // retq

LBB21_322:
	LONG $0x985d894c // movq         %r11, $-104(%rbp)

LBB21_323:
	LONG $0xc0458b48                           // movq         $-64(%rbp), %rax
	LONG $0x984d8b48                           // movq         $-104(%rbp), %rcx
	WORD $0x8948; BYTE $0x08                   // movq         %rcx, (%rax)
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	LONG $0xffffd6e9; BYTE $0xff               // jmp          LBB21_321, $-42(%rip)

LBB21_324:
	LONG $0x02c38349                           // addq         $2, %r11
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x000012e9; BYTE $0x00               // jmp          LBB21_327, $18(%rip)

LBB21_325:
	WORD $0xff49; BYTE $0xc3                   // incq         %r11
	LONG $0xfdc0c748; WORD $0xffff; BYTE $0xff // movq         $-3, %rax
	LONG $0x000003e9; BYTE $0x00               // jmp          LBB21_327, $3(%rip)

LBB21_326:
	WORD $0xff49; BYTE $0xc3 // incq         %r11

LBB21_327:
	LONG $0xd04d8b48             // movq         $-48(%rbp), %rcx
	WORD $0x2949; BYTE $0xcb     // subq         %rcx, %r11
	LONG $0x241c894d             // movq         %r11, (%r12)
	LONG $0xffffa4e9; BYTE $0xff // jmp          LBB21_321, $-92(%rip)

LBB21_328:
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff // movq         $-2, %rax
	LONG $0x000016e9; BYTE $0x00               // jmp          LBB21_331, $22(%rip)

LBB21_329:
	LONG $0xfcc0c748; WORD $0xffff; BYTE $0xff // movq         $-4, %rax
	WORD $0x8949; BYTE $0xf3                   // movq         %rsi, %r11
	LONG $0x00000ae9; BYTE $0x00               // jmp          LBB21_332, $10(%rip)

LBB21_330:
	LONG $0xfcc0c748; WORD $0xffff; BYTE $0xff // movq         $-4, %rax

LBB21_331:
	WORD $0x894d; BYTE $0xf3 // movq         %r14, %r11

LBB21_332:
	LONG $0xc0658b4c                                   // movq         $-64(%rbp), %r12
	LONG $0xffffc2e9; BYTE $0xff                       // jmp          LBB21_327, $-62(%rip)
	QUAD $0x9090909090909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

_validate_utf8:
	BYTE $0x55                                             // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                               // movq         %rsp, %rbp
	WORD $0x5741                                           // pushq        %r15
	WORD $0x5641                                           // pushq        %r14
	WORD $0x5441                                           // pushq        %r12
	BYTE $0x53                                             // pushq        %rbx
	BYTE $0x50                                             // pushq        %rax
	WORD $0x8b4c; BYTE $0x17                               // movq         (%rdi), %r10
	LONG $0x085f8b4c                                       // movq         $8(%rdi), %r11
	WORD $0x8b48; BYTE $0x0e                               // movq         (%rsi), %rcx
	WORD $0x014c; BYTE $0xd1                               // addq         %r10, %rcx
	LONG $0x1a448d4f; BYTE $0xfd                           // leaq         $-3(%r10,%r11), %r8
	LONG $0x000010e9; BYTE $0x00                           // jmp          LBB22_1, $16(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

LBB22_19:
	WORD $0x0148; BYTE $0xd9 // addq         %rbx, %rcx

LBB22_1:
	WORD $0x394c; BYTE $0xc1                                             // cmpq         %r8, %rcx
	LONG $0x00e1830f; WORD $0x0000                                       // jae          LBB22_2, $225(%rip)
	LONG $0x000001bb; BYTE $0x00                                         // movl         $1, %ebx
	WORD $0x3980; BYTE $0x00                                             // cmpb         $0, (%rcx)
	LONG $0xffe6890f; WORD $0xffff                                       // jns          LBB22_19, $-26(%rip)
	WORD $0x018b                                                         // movl         (%rcx), %eax
	WORD $0xc789                                                         // movl         %eax, %edi
	LONG $0xc0f0e781; WORD $0x00c0                                       // andl         $12632304, %edi
	LONG $0x80e0ff81; WORD $0x0080                                       // cmpl         $8421600, %edi
	LONG $0x0030850f; WORD $0x0000                                       // jne          LBB22_10, $48(%rip)
	WORD $0xc789                                                         // movl         %eax, %edi
	LONG $0x200fe781; WORD $0x0000                                       // andl         $8207, %edi
	LONG $0x200dff81; WORD $0x0000                                       // cmpl         $8205, %edi
	LONG $0x001c840f; WORD $0x0000                                       // je           LBB22_10, $28(%rip)
	LONG $0x000003bb; BYTE $0x00                                         // movl         $3, %ebx
	WORD $0xff85                                                         // testl        %edi, %edi
	LONG $0xffaf850f; WORD $0xffff                                       // jne          LBB22_19, $-81(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB22_10:
	WORD $0xc789                   // movl         %eax, %edi
	LONG $0xc0e0e781; WORD $0x0000 // andl         $49376, %edi
	LONG $0x80c0ff81; WORD $0x0000 // cmpl         $32960, %edi
	LONG $0x0010850f; WORD $0x0000 // jne          LBB22_12, $16(%rip)
	WORD $0xc789                   // movl         %eax, %edi
	LONG $0x000002bb; BYTE $0x00   // movl         $2, %ebx
	WORD $0xe783; BYTE $0x1e       // andl         $30, %edi
	LONG $0xff7c850f; WORD $0xffff // jne          LBB22_19, $-132(%rip)

LBB22_12:
	WORD $0xc789                   // movl         %eax, %edi
	LONG $0xc0f8e781; WORD $0xc0c0 // andl         $-1061109512, %edi
	LONG $0x80f0ff81; WORD $0x8080 // cmpl         $-2139062032, %edi
	LONG $0x0026850f; WORD $0x0000 // jne          LBB22_16, $38(%rip)
	WORD $0xc789                   // movl         %eax, %edi
	LONG $0x3007e781; WORD $0x0000 // andl         $12295, %edi
	LONG $0x0018840f; WORD $0x0000 // je           LBB22_16, $24(%rip)
	LONG $0x000004bb; BYTE $0x00   // movl         $4, %ebx
	WORD $0x04a8                   // testb        $4, %al
	LONG $0xff4d840f; WORD $0xffff // je           LBB22_19, $-179(%rip)
	LONG $0x00300325; BYTE $0x00   // andl         $12291, %eax
	LONG $0xff42840f; WORD $0xffff // je           LBB22_19, $-190(%rip)

LBB22_16:
	WORD $0x8948; BYTE $0xcf                   // movq         %rcx, %rdi
	WORD $0x294c; BYTE $0xd7                   // subq         %r10, %rdi
	WORD $0x8b48; BYTE $0x1a                   // movq         (%rdx), %rbx
	LONG $0x00fb8148; WORD $0x0010; BYTE $0x00 // cmpq         $4096, %rbx
	LONG $0x0187830f; WORD $0x0000             // jae          LBB22_17, $391(%rip)
	WORD $0x6348; BYTE $0xc7                   // movslq       %edi, %rax
	LONG $0x017b8d48                           // leaq         $1(%rbx), %rdi
	WORD $0x8948; BYTE $0x3a                   // movq         %rdi, (%rdx)
	LONG $0xda448948; BYTE $0x08               // movq         %rax, $8(%rdx,%rbx,8)
	LONG $0x000001bb; BYTE $0x00               // movl         $1, %ebx
	LONG $0xffff13e9; BYTE $0xff               // jmp          LBB22_19, $-237(%rip)

LBB22_2:
	WORD $0x014d; BYTE $0xd3               // addq         %r10, %r11
	WORD $0x394c; BYTE $0xd9               // cmpq         %r11, %rcx
	LONG $0x013e830f; WORD $0x0000         // jae          LBB22_36, $318(%rip)
	LONG $0xdc458d4c                       // leaq         $-36(%rbp), %r8
	LONG $0xda4d8d4c                       // leaq         $-38(%rbp), %r9
	LONG $0x000016e9; BYTE $0x00           // jmp          LBB22_4, $22(%rip)
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

LBB22_5:
	WORD $0xff48; BYTE $0xc1       // incq         %rcx
	WORD $0x394c; BYTE $0xd9       // cmpq         %r11, %rcx
	LONG $0x011b830f; WORD $0x0000 // jae          LBB22_36, $283(%rip)

LBB22_4:
	WORD $0x3980; BYTE $0x00       // cmpb         $0, (%rcx)
	LONG $0xffeb890f; WORD $0xffff // jns          LBB22_5, $-21(%rip)
	LONG $0x00dc45c6               // movb         $0, $-36(%rbp)
	LONG $0x00da45c6               // movb         $0, $-38(%rbp)
	WORD $0x894c; BYTE $0xdb       // movq         %r11, %rbx
	WORD $0x2948; BYTE $0xcb       // subq         %rcx, %rbx
	LONG $0x02fb8348               // cmpq         $2, %rbx
	LONG $0x0035820f; WORD $0x0000 // jb           LBB22_21, $53(%rip)
	LONG $0x21b60f44               // movzbl       (%rcx), %r12d
	LONG $0x71b60f44; BYTE $0x01   // movzbl       $1(%rcx), %r14d
	LONG $0xdc658844               // movb         %r12b, $-36(%rbp)
	LONG $0x02798d4c               // leaq         $2(%rcx), %r15
	LONG $0xfec38348               // addq         $-2, %rbx
	WORD $0x894c; BYTE $0xcf       // movq         %r9, %rdi
	WORD $0x8548; BYTE $0xdb       // testq        %rbx, %rbx
	LONG $0x0029840f; WORD $0x0000 // je           LBB22_24, $41(%rip)

LBB22_25:
	LONG $0x07b60f41             // movzbl       (%r15), %eax
	WORD $0x0788                 // movb         %al, (%rdi)
	LONG $0x65b60f44; BYTE $0xdc // movzbl       $-36(%rbp), %r12d
	LONG $0xda7db60f             // movzbl       $-38(%rbp), %edi
	LONG $0x000017e9; BYTE $0x00 // jmp          LBB22_26, $23(%rip)

LBB22_21:
	WORD $0x3145; BYTE $0xe4       // xorl         %r12d, %r12d
	WORD $0x3145; BYTE $0xf6       // xorl         %r14d, %r14d
	WORD $0x894c; BYTE $0xc7       // movq         %r8, %rdi
	WORD $0x8949; BYTE $0xcf       // movq         %rcx, %r15
	WORD $0x8548; BYTE $0xdb       // testq        %rbx, %rbx
	LONG $0xffd7850f; WORD $0xffff // jne          LBB22_25, $-41(%rip)

LBB22_24:
	WORD $0xff31 // xorl         %edi, %edi

LBB22_26:
	LONG $0xc7b60f40               // movzbl       %dil, %eax
	WORD $0xe0c1; BYTE $0x10       // shll         $16, %eax
	LONG $0xdeb60f41               // movzbl       %r14b, %ebx
	WORD $0xe3c1; BYTE $0x08       // shll         $8, %ebx
	LONG $0xfcb60f41               // movzbl       %r12b, %edi
	WORD $0xdf09                   // orl          %ebx, %edi
	WORD $0xf809                   // orl          %edi, %eax
	LONG $0xc0c0f025; BYTE $0x00   // andl         $12632304, %eax
	LONG $0x8080e03d; BYTE $0x00   // cmpl         $8421600, %eax
	LONG $0x0021850f; WORD $0x0000 // jne          LBB22_29, $33(%rip)
	WORD $0xf889                   // movl         %edi, %eax
	LONG $0x00200f25; BYTE $0x00   // andl         $8207, %eax
	LONG $0x00200d3d; BYTE $0x00   // cmpl         $8205, %eax
	LONG $0x000f840f; WORD $0x0000 // je           LBB22_29, $15(%rip)
	LONG $0x000003bb; BYTE $0x00   // movl         $3, %ebx
	WORD $0xc085                   // testl        %eax, %eax
	LONG $0x0023850f; WORD $0x0000 // jne          LBB22_34, $35(%rip)
	WORD $0x9090                   // .p2align 4, 0x90

LBB22_29:
	LONG $0x1ec4f641               // testb        $30, %r12b
	LONG $0x0028840f; WORD $0x0000 // je           LBB22_31, $40(%rip)
	LONG $0xc0e0e781; WORD $0x0000 // andl         $49376, %edi
	LONG $0x000002bb; BYTE $0x00   // movl         $2, %ebx
	LONG $0x80c0ff81; WORD $0x0000 // cmpl         $32960, %edi
	LONG $0x0011850f; WORD $0x0000 // jne          LBB22_31, $17(%rip)

LBB22_34:
	WORD $0x0148; BYTE $0xd9       // addq         %rbx, %rcx
	WORD $0x394c; BYTE $0xd9       // cmpq         %r11, %rcx
	LONG $0xff1f820f; WORD $0xffff // jb           LBB22_4, $-225(%rip)
	LONG $0x000035e9; BYTE $0x00   // jmp          LBB22_36, $53(%rip)

LBB22_31:
	WORD $0x8948; BYTE $0xc8                   // movq         %rcx, %rax
	WORD $0x294c; BYTE $0xd0                   // subq         %r10, %rax
	WORD $0x8b48; BYTE $0x3a                   // movq         (%rdx), %rdi
	LONG $0x00ff8148; WORD $0x0010; BYTE $0x00 // cmpq         $4096, %rdi
	LONG $0x0034830f; WORD $0x0000             // jae          LBB22_32, $52(%rip)
	WORD $0x9848                               // cltq
	LONG $0x015f8d48                           // leaq         $1(%rdi), %rbx
	WORD $0x8948; BYTE $0x1a                   // movq         %rbx, (%rdx)
	LONG $0xfa448948; BYTE $0x08               // movq         %rax, $8(%rdx,%rdi,8)
	LONG $0x000001bb; BYTE $0x00               // movl         $1, %ebx
	WORD $0x0148; BYTE $0xd9                   // addq         %rbx, %rcx
	WORD $0x394c; BYTE $0xd9                   // cmpq         %r11, %rcx
	LONG $0xfee5820f; WORD $0xffff             // jb           LBB22_4, $-283(%rip)

LBB22_36:
	WORD $0x294c; BYTE $0xd1 // subq         %r10, %rcx
	WORD $0x8948; BYTE $0x0e // movq         %rcx, (%rsi)
	WORD $0xc031             // xorl         %eax, %eax

LBB22_37:
	LONG $0x08c48348 // addq         $8, %rsp
	BYTE $0x5b       // popq         %rbx
	WORD $0x5c41     // popq         %r12
	WORD $0x5e41     // popq         %r14
	WORD $0x5f41     // popq         %r15
	BYTE $0x5d       // popq         %rbp
	BYTE $0xc3       // retq

LBB22_32:
	WORD $0x8948; BYTE $0x06                   // movq         %rax, (%rsi)
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	LONG $0xffffe4e9; BYTE $0xff               // jmp          LBB22_37, $-28(%rip)

LBB22_17:
	WORD $0x8948; BYTE $0x3e                   // movq         %rdi, (%rsi)
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rax
	LONG $0xffffd5e9; BYTE $0xff               // jmp          LBB22_37, $-43(%rip)
	LONG $0x90909090; WORD $0x9090             // .p2align 4, 0x90

_validate_utf8_fast:
	BYTE $0x55                             // pushq        %rbp
	WORD $0x8948; BYTE $0xe5               // movq         %rsp, %rbp
	BYTE $0x53                             // pushq        %rbx
	BYTE $0x50                             // pushq        %rax
	WORD $0x8b4c; BYTE $0x17               // movq         (%rdi), %r10
	LONG $0x085f8b4c                       // movq         $8(%rdi), %r11
	LONG $0x1a748d4b; BYTE $0xfd           // leaq         $-3(%r10,%r11), %rsi
	WORD $0x894c; BYTE $0xd0               // movq         %r10, %rax
	WORD $0x3949; BYTE $0xf2               // cmpq         %rsi, %r10
	LONG $0x00e0830f; WORD $0x0000         // jae          LBB23_14, $224(%rip)
	WORD $0x894c; BYTE $0xd0               // movq         %r10, %rax
	LONG $0x000016e9; BYTE $0x00           // jmp          LBB23_3, $22(%rip)
	QUAD $0x9090909090909090; WORD $0x9090 // .p2align 4, 0x90

LBB23_2:
	WORD $0x0148; BYTE $0xd0       // addq         %rdx, %rax
	WORD $0x3948; BYTE $0xf0       // cmpq         %rsi, %rax
	LONG $0x00c2830f; WORD $0x0000 // jae          LBB23_14, $194(%rip)

LBB23_3:
	LONG $0x000001ba; BYTE $0x00                                         // movl         $1, %edx
	WORD $0x3880; BYTE $0x00                                             // cmpb         $0, (%rax)
	LONG $0xffe6890f; WORD $0xffff                                       // jns          LBB23_2, $-26(%rip)
	WORD $0x388b                                                         // movl         (%rax), %edi
	WORD $0xf989                                                         // movl         %edi, %ecx
	LONG $0xc0f0e181; WORD $0x00c0                                       // andl         $12632304, %ecx
	LONG $0x80e0f981; WORD $0x0080                                       // cmpl         $8421600, %ecx
	LONG $0x0030850f; WORD $0x0000                                       // jne          LBB23_7, $48(%rip)
	WORD $0xf989                                                         // movl         %edi, %ecx
	LONG $0x200fe181; WORD $0x0000                                       // andl         $8207, %ecx
	LONG $0x200df981; WORD $0x0000                                       // cmpl         $8205, %ecx
	LONG $0x001c840f; WORD $0x0000                                       // je           LBB23_7, $28(%rip)
	LONG $0x000003ba; BYTE $0x00                                         // movl         $3, %edx
	WORD $0xc985                                                         // testl        %ecx, %ecx
	LONG $0xffaf850f; WORD $0xffff                                       // jne          LBB23_2, $-81(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB23_7:
	WORD $0xf989                   // movl         %edi, %ecx
	LONG $0xc0e0e181; WORD $0x0000 // andl         $49376, %ecx
	LONG $0x80c0f981; WORD $0x0000 // cmpl         $32960, %ecx
	LONG $0x0010850f; WORD $0x0000 // jne          LBB23_9, $16(%rip)
	WORD $0xf989                   // movl         %edi, %ecx
	LONG $0x000002ba; BYTE $0x00   // movl         $2, %edx
	WORD $0xe183; BYTE $0x1e       // andl         $30, %ecx
	LONG $0xff7c850f; WORD $0xffff // jne          LBB23_2, $-132(%rip)

LBB23_9:
	WORD $0xf989                   // movl         %edi, %ecx
	LONG $0xc0f8e181; WORD $0xc0c0 // andl         $-1061109512, %ecx
	LONG $0x80f0f981; WORD $0x8080 // cmpl         $-2139062032, %ecx
	LONG $0x0029850f; WORD $0x0000 // jne          LBB23_13, $41(%rip)
	WORD $0xf989                   // movl         %edi, %ecx
	LONG $0x3007e181; WORD $0x0000 // andl         $12295, %ecx
	LONG $0x001b840f; WORD $0x0000 // je           LBB23_13, $27(%rip)
	LONG $0x000004ba; BYTE $0x00   // movl         $4, %edx
	LONG $0x04c7f640               // testb        $4, %dil
	LONG $0xff4b840f; WORD $0xffff // je           LBB23_2, $-181(%rip)
	LONG $0x3003e781; WORD $0x0000 // andl         $12291, %edi
	LONG $0xff3f840f; WORD $0xffff // je           LBB23_2, $-193(%rip)

LBB23_13:
	WORD $0xf748; BYTE $0xd0 // notq         %rax
	WORD $0x014c; BYTE $0xd0 // addq         %r10, %rax
	LONG $0x08c48348         // addq         $8, %rsp
	BYTE $0x5b               // popq         %rbx
	BYTE $0x5d               // popq         %rbp
	BYTE $0xc3               // retq

LBB23_14:
	WORD $0x014d; BYTE $0xd3             // addq         %r10, %r11
	WORD $0x394c; BYTE $0xd8             // cmpq         %r11, %rax
	LONG $0x0103830f; WORD $0x0000       // jae          LBB23_30, $259(%rip)
	LONG $0xf4458d4c                     // leaq         $-12(%rbp), %r8
	LONG $0xf24d8d4c                     // leaq         $-14(%rbp), %r9
	LONG $0x000015e9; BYTE $0x00         // jmp          LBB23_17, $21(%rip)
	QUAD $0x9090909090909090; BYTE $0x90 // .p2align 4, 0x90

LBB23_16:
	WORD $0xff48; BYTE $0xc0       // incq         %rax
	WORD $0x394c; BYTE $0xd8       // cmpq         %r11, %rax
	LONG $0x00e1830f; WORD $0x0000 // jae          LBB23_30, $225(%rip)

LBB23_17:
	WORD $0x3880; BYTE $0x00       // cmpb         $0, (%rax)
	LONG $0xffeb890f; WORD $0xffff // jns          LBB23_16, $-21(%rip)
	LONG $0x00f445c6               // movb         $0, $-12(%rbp)
	LONG $0x00f245c6               // movb         $0, $-14(%rbp)
	WORD $0x894c; BYTE $0xda       // movq         %r11, %rdx
	WORD $0x2948; BYTE $0xc2       // subq         %rax, %rdx
	LONG $0x02fa8348               // cmpq         $2, %rdx
	LONG $0x0031820f; WORD $0x0000 // jb           LBB23_21, $49(%rip)
	WORD $0xb60f; BYTE $0x30       // movzbl       (%rax), %esi
	LONG $0x0178b60f               // movzbl       $1(%rax), %edi
	LONG $0xf4758840               // movb         %sil, $-12(%rbp)
	LONG $0x02488d48               // leaq         $2(%rax), %rcx
	LONG $0xfec28348               // addq         $-2, %rdx
	WORD $0x894c; BYTE $0xcb       // movq         %r9, %rbx
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0x0025840f; WORD $0x0000 // je           LBB23_22, $37(%rip)

LBB23_20:
	WORD $0xb60f; BYTE $0x09     // movzbl       (%rcx), %ecx
	WORD $0x0b88                 // movb         %cl, (%rbx)
	LONG $0xf475b60f             // movzbl       $-12(%rbp), %esi
	LONG $0xf24db60f             // movzbl       $-14(%rbp), %ecx
	LONG $0x000015e9; BYTE $0x00 // jmp          LBB23_23, $21(%rip)

LBB23_21:
	WORD $0xf631                   // xorl         %esi, %esi
	WORD $0xff31                   // xorl         %edi, %edi
	WORD $0x894c; BYTE $0xc3       // movq         %r8, %rbx
	WORD $0x8948; BYTE $0xc1       // movq         %rax, %rcx
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0xffdb850f; WORD $0xffff // jne          LBB23_20, $-37(%rip)

LBB23_22:
	WORD $0xc931 // xorl         %ecx, %ecx

LBB23_23:
	WORD $0xb60f; BYTE $0xc9       // movzbl       %cl, %ecx
	WORD $0xe1c1; BYTE $0x10       // shll         $16, %ecx
	LONG $0xffb60f40               // movzbl       %dil, %edi
	WORD $0xe7c1; BYTE $0x08       // shll         $8, %edi
	LONG $0xd6b60f40               // movzbl       %sil, %edx
	WORD $0xfa09                   // orl          %edi, %edx
	WORD $0xd109                   // orl          %edx, %ecx
	LONG $0xc0f0e181; WORD $0x00c0 // andl         $12632304, %ecx
	LONG $0x80e0f981; WORD $0x0080 // cmpl         $8421600, %ecx
	LONG $0x0026850f; WORD $0x0000 // jne          LBB23_26, $38(%rip)
	WORD $0xd789                   // movl         %edx, %edi
	LONG $0x200fe781; WORD $0x0000 // andl         $8207, %edi
	LONG $0x200dff81; WORD $0x0000 // cmpl         $8205, %edi
	LONG $0x0012840f; WORD $0x0000 // je           LBB23_26, $18(%rip)
	LONG $0x000003b9; BYTE $0x00   // movl         $3, %ecx
	WORD $0xff85                   // testl        %edi, %edi
	LONG $0x0026850f; WORD $0x0000 // jne          LBB23_28, $38(%rip)
	LONG $0x90909090; BYTE $0x90   // .p2align 4, 0x90

LBB23_26:
	LONG $0x1ec6f640               // testb        $30, %sil
	LONG $0xff07840f; WORD $0xffff // je           LBB23_13, $-249(%rip)
	LONG $0xc0e0e281; WORD $0x0000 // andl         $49376, %edx
	LONG $0x000002b9; BYTE $0x00   // movl         $2, %ecx
	LONG $0x80c0fa81; WORD $0x0000 // cmpl         $32960, %edx
	LONG $0xfef0850f; WORD $0xffff // jne          LBB23_13, $-272(%rip)

LBB23_28:
	WORD $0x0148; BYTE $0xc8       // addq         %rcx, %rax
	WORD $0x394c; BYTE $0xd8       // cmpq         %r11, %rax
	LONG $0xff1f820f; WORD $0xffff // jb           LBB23_17, $-225(%rip)

LBB23_30:
	WORD $0xc031                                                                               // xorl         %eax, %eax
	LONG $0x08c48348                                                                           // addq         $8, %rsp
	BYTE $0x5b                                                                                 // popq         %rbx
	BYTE $0x5d                                                                                 // popq         %rbp
	BYTE $0xc3                                                                                 // retq
	QUAD $0x0000000000000000; QUAD $0x0000000000000000; QUAD $0x0000000000000000; WORD $0x0000 // .p2align 5, 0x00

LCPI24_0:
	QUAD $0x3030303030303030; QUAD $0x3030303030303030 // .space 16, '0000000000000000'
	QUAD $0x3030303030303030; QUAD $0x3030303030303030 // .space 16, '0000000000000000'

	// .p2align 4, 0x90
_f32toa:
	BYTE $0x55                                 // pushq        %rbp
	WORD $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD $0x5741                               // pushq        %r15
	WORD $0x5641                               // pushq        %r14
	WORD $0x5541                               // pushq        %r13
	WORD $0x5441                               // pushq        %r12
	BYTE $0x53                                 // pushq        %rbx
	LONG $0xc07ef9c5                           // vmovd        %xmm0, %eax
	WORD $0xc189                               // movl         %eax, %ecx
	WORD $0xe9c1; BYTE $0x17                   // shrl         $23, %ecx
	WORD $0xb60f; BYTE $0xd9                   // movzbl       %cl, %ebx
	LONG $0x00fffb81; WORD $0x0000             // cmpl         $255, %ebx
	LONG $0x0cf1840f; WORD $0x0000             // je           LBB24_138, $3313(%rip)
	WORD $0x07c6; BYTE $0x2d                   // movb         $45, (%rdi)
	WORD $0x8941; BYTE $0xc1                   // movl         %eax, %r9d
	LONG $0x1fe9c141                           // shrl         $31, %r9d
	LONG $0x0f048d4e                           // leaq         (%rdi,%r9), %r8
	LONG $0xffffffa9; BYTE $0x7f               // testl        $2147483647, %eax
	LONG $0x01bf840f; WORD $0x0000             // je           LBB24_11, $447(%rip)
	LONG $0x7fffff25; BYTE $0x00               // andl         $8388607, %eax
	WORD $0xdb85                               // testl        %ebx, %ebx
	LONG $0x0cd3840f; WORD $0x0000             // je           LBB24_139, $3283(%rip)
	LONG $0x0000b08d; WORD $0x0080             // leal         $8388608(%rax), %esi
	LONG $0x6abb8d44; WORD $0xffff; BYTE $0xff // leal         $-150(%rbx), %r15d
	WORD $0x4b8d; BYTE $0x81                   // leal         $-127(%rbx), %ecx
	WORD $0xf983; BYTE $0x17                   // cmpl         $23, %ecx
	LONG $0x0019870f; WORD $0x0000             // ja           LBB24_5, $25(%rip)
	WORD $0x8944; BYTE $0xf9                   // movl         %r15d, %ecx
	WORD $0xd9f7                               // negl         %ecx
	LONG $0xffc2c748; WORD $0xffff; BYTE $0xff // movq         $-1, %rdx
	WORD $0xd348; BYTE $0xe2                   // shlq         %cl, %rdx
	WORD $0xd2f7                               // notl         %edx
	WORD $0xf285                               // testl        %esi, %edx
	LONG $0x03fc840f; WORD $0x0000             // je           LBB24_32, $1020(%rip)

LBB24_5:
	WORD $0x8941; BYTE $0xf6                   // movl         %esi, %r14d
	LONG $0x01e68341                           // andl         $1, %r14d
	WORD $0xc085                               // testl        %eax, %eax
	WORD $0x940f; BYTE $0xc0                   // sete         %al
	WORD $0xfb83; BYTE $0x01                   // cmpl         $1, %ebx
	WORD $0x970f; BYTE $0xc1                   // seta         %cl
	WORD $0xc120                               // andb         %al, %cl
	WORD $0xb60f; BYTE $0xc9                   // movzbl       %cl, %ecx
	WORD $0x8941; BYTE $0xf2                   // movl         %esi, %r10d
	LONG $0x02e2c141                           // shll         $2, %r10d
	LONG $0xfeb1448d                           // leal         $-2(%rcx,%rsi,4), %eax
	LONG $0x13d76941; WORD $0x1344; BYTE $0x00 // imull        $1262611, %r15d, %edx
	WORD $0xdb31                               // xorl         %ebx, %ebx
	WORD $0xc984                               // testb        %cl, %cl
	LONG $0x0101bb41; WORD $0xfff8             // movl         $-524031, %r11d
	LONG $0xdb440f44                           // cmovel       %ebx, %r11d
	WORD $0x0141; BYTE $0xd3                   // addl         %edx, %r11d
	LONG $0x16fbc141                           // sarl         $22, %r11d
	LONG $0xb1cb6941; WORD $0xe56c; BYTE $0xff // imull        $-1741647, %r11d, %ecx
	WORD $0xe9c1; BYTE $0x13                   // shrl         $19, %ecx
	WORD $0x0144; BYTE $0xf9                   // addl         %r15d, %ecx
	LONG $0x00001fba; BYTE $0x00               // movl         $31, %edx
	WORD $0x2944; BYTE $0xda                   // subl         %r11d, %edx
	LONG $0x991d8d48; WORD $0x00ab; BYTE $0x00 // leaq         $43929(%rip), %rbx  /* _pow10_ceil_sig_f32.g(%rip) */
	WORD $0xc1fe                               // incb         %cl
	WORD $0xe0d3                               // shll         %cl, %eax
	LONG $0xd3248b4c                           // movq         (%rbx,%rdx,8), %r12
	WORD $0xf749; BYTE $0xe4                   // mulq         %r12
	LONG $0x20e8c148                           // shrq         $32, %rax
	WORD $0xdb31                               // xorl         %ebx, %ebx
	WORD $0xf883; BYTE $0x01                   // cmpl         $1, %eax
	WORD $0x970f; BYTE $0xc3                   // seta         %bl
	WORD $0xd341; BYTE $0xe2                   // shll         %cl, %r10d
	WORD $0xd309                               // orl          %edx, %ebx
	WORD $0x894c; BYTE $0xd0                   // movq         %r10, %rax
	WORD $0xf749; BYTE $0xe4                   // mulq         %r12
	WORD $0x8949; BYTE $0xd2                   // movq         %rdx, %r10
	LONG $0x20e8c148                           // shrq         $32, %rax
	WORD $0x3145; BYTE $0xff                   // xorl         %r15d, %r15d
	WORD $0xf883; BYTE $0x01                   // cmpl         $1, %eax
	LONG $0xc7970f41                           // seta         %r15b
	LONG $0x02b5048d; WORD $0x0000; BYTE $0x00 // leal         $2(,%rsi,4), %eax
	WORD $0xe0d3                               // shll         %cl, %eax
	WORD $0x0945; BYTE $0xd7                   // orl          %r10d, %r15d
	WORD $0xf749; BYTE $0xe4                   // mulq         %r12
	LONG $0x20e8c148                           // shrq         $32, %rax
	WORD $0xc931                               // xorl         %ecx, %ecx
	WORD $0xf883; BYTE $0x01                   // cmpl         $1, %eax
	WORD $0x970f; BYTE $0xc1                   // seta         %cl
	WORD $0xd109                               // orl          %edx, %ecx
	WORD $0x0144; BYTE $0xf3                   // addl         %r14d, %ebx
	WORD $0x2944; BYTE $0xf1                   // subl         %r14d, %ecx
	LONG $0x28ff8341                           // cmpl         $40, %r15d
	LONG $0x003d820f; WORD $0x0000             // jb           LBB24_7, $61(%rip)
	WORD $0x8944; BYTE $0xd0                   // movl         %r10d, %eax
	LONG $0xcccdbd41; WORD $0xcccc             // movl         $3435973837, %r13d
	LONG $0xe8af0f4c                           // imulq        %rax, %r13
	LONG $0x25edc149                           // shrq         $37, %r13
	WORD $0x8941; BYTE $0xde                   // movl         %ebx, %r14d
	QUAD $0x00000000ed348d4a                   // leaq         (,%r13,8), %rsi
	LONG $0xb6048d48                           // leaq         (%rsi,%rsi,4), %rax
	WORD $0x394c; BYTE $0xf0                   // cmpq         %r14, %rax
	LONG $0xc6920f41                           // setb         %r14b
	LONG $0xb6648d4c; BYTE $0x28               // leaq         $40(%rsi,%rsi,4), %r12
	WORD $0xce89                               // movl         %ecx, %esi
	WORD $0x3949; BYTE $0xf4                   // cmpq         %rsi, %r12
	WORD $0x960f; BYTE $0xc0                   // setbe        %al
	WORD $0x3044; BYTE $0xf0                   // xorb         %r14b, %al
	LONG $0x01e9840f; WORD $0x0000             // je           LBB24_16, $489(%rip)

LBB24_7:
	WORD $0x894c; BYTE $0xd0       // movq         %r10, %rax
	LONG $0x02e8c148               // shrq         $2, %rax
	WORD $0x8944; BYTE $0xd6       // movl         %r10d, %esi
	WORD $0xe683; BYTE $0xfc       // andl         $-4, %esi
	WORD $0xf339                   // cmpl         %esi, %ebx
	LONG $0xc6970f41               // seta         %r14b
	WORD $0x568d; BYTE $0x04       // leal         $4(%rsi), %edx
	WORD $0xca39                   // cmpl         %ecx, %edx
	WORD $0x960f; BYTE $0xc3       // setbe        %bl
	WORD $0x3044; BYTE $0xf3       // xorb         %r14b, %bl
	LONG $0x0074840f; WORD $0x0000 // je           LBB24_12, $116(%rip)
	WORD $0xce83; BYTE $0x02       // orl          $2, %esi
	LONG $0x0001bd41; WORD $0x0000 // movl         $1, %r13d
	WORD $0x3941; BYTE $0xf7       // cmpl         %esi, %r15d
	LONG $0x000e870f; WORD $0x0000 // ja           LBB24_10, $14(%rip)
	WORD $0x940f; BYTE $0xc1       // sete         %cl
	LONG $0x02eac041               // shrb         $2, %r10b
	WORD $0x2041; BYTE $0xca       // andb         %cl, %r10b
	LONG $0xeab60f45               // movzbl       %r10b, %r13d

LBB24_10:
	WORD $0x0141; BYTE $0xc5                   // addl         %eax, %r13d
	LONG $0xa0fd8141; WORD $0x0186; BYTE $0x00 // cmpl         $100000, %r13d
	LONG $0x0059820f; WORD $0x0000             // jb           LBB24_17, $89(%rip)

LBB24_13:
	LONG $0x000006be; BYTE $0x00               // movl         $6, %esi
	LONG $0x40fd8141; WORD $0x0f42; BYTE $0x00 // cmpl         $1000000, %r13d
	LONG $0x0086820f; WORD $0x0000             // jb           LBB24_22, $134(%rip)
	LONG $0x000007be; BYTE $0x00               // movl         $7, %esi
	LONG $0x80fd8141; WORD $0x9896; BYTE $0x00 // cmpl         $10000000, %r13d
	LONG $0x0074820f; WORD $0x0000             // jb           LBB24_22, $116(%rip)
	LONG $0x00fd8141; WORD $0xf5e1; BYTE $0x05 // cmpl         $100000000, %r13d
	LONG $0x000009be; BYTE $0x00               // movl         $9, %esi
	LONG $0x000060e9; BYTE $0x00               // jmp          LBB24_21, $96(%rip)

LBB24_11:
	LONG $0x3000c641             // movb         $48, (%r8)
	WORD $0x2941; BYTE $0xf8     // subl         %edi, %r8d
	WORD $0xff41; BYTE $0xc0     // incl         %r8d
	LONG $0x000af9e9; BYTE $0x00 // jmp          LBB24_137, $2809(%rip)

LBB24_12:
	WORD $0xd139                               // cmpl         %edx, %ecx
	WORD $0xd883; BYTE $0xff                   // sbbl         $-1, %eax
	WORD $0x8941; BYTE $0xc5                   // movl         %eax, %r13d
	LONG $0xa0fd8141; WORD $0x0186; BYTE $0x00 // cmpl         $100000, %r13d
	LONG $0xffa7830f; WORD $0xffff             // jae          LBB24_13, $-89(%rip)

LBB24_17:
	LONG $0x000001be; BYTE $0x00               // movl         $1, %esi
	LONG $0x0afd8341                           // cmpl         $10, %r13d
	LONG $0x0030820f; WORD $0x0000             // jb           LBB24_22, $48(%rip)
	LONG $0x000002be; BYTE $0x00               // movl         $2, %esi
	LONG $0x64fd8341                           // cmpl         $100, %r13d
	LONG $0x0021820f; WORD $0x0000             // jb           LBB24_22, $33(%rip)
	LONG $0x000003be; BYTE $0x00               // movl         $3, %esi
	LONG $0xe8fd8141; WORD $0x0003; BYTE $0x00 // cmpl         $1000, %r13d
	LONG $0x000f820f; WORD $0x0000             // jb           LBB24_22, $15(%rip)
	LONG $0x10fd8141; WORD $0x0027; BYTE $0x00 // cmpl         $10000, %r13d
	LONG $0x000005be; BYTE $0x00               // movl         $5, %esi

LBB24_21:
	WORD $0xde83; BYTE $0x00 // sbbl         $0, %esi

LBB24_22:
	LONG $0x1e148d46                           // leal         (%rsi,%r11), %r10d
	LONG $0x1e448d42; BYTE $0x05               // leal         $5(%rsi,%r11), %eax
	WORD $0xf883; BYTE $0x1b                   // cmpl         $27, %eax
	LONG $0x0075820f; WORD $0x0000             // jb           LBB24_26, $117(%rip)
	WORD $0xf089                               // movl         %esi, %eax
	LONG $0x00748d4d; BYTE $0x01               // leaq         $1(%r8,%rax), %r14
	LONG $0x10fd8141; WORD $0x0027; BYTE $0x00 // cmpl         $10000, %r13d
	LONG $0x00f3820f; WORD $0x0000             // jb           LBB24_30, $243(%rip)
	WORD $0x8944; BYTE $0xe8                   // movl         %r13d, %eax
	LONG $0xb71759bb; BYTE $0xd1               // movl         $3518437209, %ebx
	LONG $0xd8af0f48                           // imulq        %rax, %rbx
	LONG $0x2debc148                           // shrq         $45, %rbx
	LONG $0xd8f0c369; WORD $0xffff             // imull        $-10000, %ebx, %eax
	WORD $0x0144; BYTE $0xe8                   // addl         %r13d, %eax
	LONG $0x048b840f; WORD $0x0000             // je           LBB24_62, $1163(%rip)
	WORD $0xc189                               // movl         %eax, %ecx
	LONG $0x1fc96948; WORD $0xeb85; BYTE $0x51 // imulq        $1374389535, %rcx, %rcx
	LONG $0x25e9c148                           // shrq         $37, %rcx
	WORD $0xd16b; BYTE $0x64                   // imull        $100, %ecx, %edx
	WORD $0xd029                               // subl         %edx, %eax
	LONG $0x72158d48; WORD $0x000a; BYTE $0x00 // leaq         $2674(%rip), %rdx  /* _Digits(%rip) */
	LONG $0x4204b70f                           // movzwl       (%rdx,%rax,2), %eax
	LONG $0x46894166; BYTE $0xfe               // movw         %ax, $-2(%r14)
	LONG $0x4a04b70f                           // movzwl       (%rdx,%rcx,2), %eax
	LONG $0x46894166; BYTE $0xfc               // movw         %ax, $-4(%r14)
	WORD $0x3145; BYTE $0xc9                   // xorl         %r9d, %r9d
	LONG $0xfc4e8d49                           // leaq         $-4(%r14), %rcx
	WORD $0xfb83; BYTE $0x64                   // cmpl         $100, %ebx
	LONG $0x00ab830f; WORD $0x0000             // jae          LBB24_64, $171(%rip)

LBB24_31:
	WORD $0xda89                 // movl         %ebx, %edx
	LONG $0x0000e8e9; BYTE $0x00 // jmp          LBB24_66, $232(%rip)

LBB24_26:
	WORD $0x8941; BYTE $0xf4                   // movl         %esi, %r12d
	WORD $0x8545; BYTE $0xdb                   // testl        %r11d, %r11d
	LONG $0x021d880f; WORD $0x0000             // js           LBB24_38, $541(%rip)
	LONG $0x20348d4b                           // leaq         (%r8,%r12), %rsi
	LONG $0x10fd8141; WORD $0x0027; BYTE $0x00 // cmpl         $10000, %r13d
	LONG $0x028d820f; WORD $0x0000             // jb           LBB24_43, $653(%rip)
	WORD $0x8944; BYTE $0xe8                   // movl         %r13d, %eax
	LONG $0xb71759b9; BYTE $0xd1               // movl         $3518437209, %ecx
	LONG $0xc8af0f48                           // imulq        %rax, %rcx
	LONG $0x2de9c148                           // shrq         $45, %rcx
	LONG $0xd8f0c169; WORD $0xffff             // imull        $-10000, %ecx, %eax
	WORD $0x0144; BYTE $0xe8                   // addl         %r13d, %eax
	LONG $0x1fd06948; WORD $0xeb85; BYTE $0x51 // imulq        $1374389535, %rax, %rdx
	LONG $0x25eac148                           // shrq         $37, %rdx
	WORD $0xda6b; BYTE $0x64                   // imull        $100, %edx, %ebx
	WORD $0xd829                               // subl         %ebx, %eax
	LONG $0xfc1d8d48; WORD $0x0009; BYTE $0x00 // leaq         $2556(%rip), %rbx  /* _Digits(%rip) */
	LONG $0x4304b70f                           // movzwl       (%rbx,%rax,2), %eax
	LONG $0xfe468966                           // movw         %ax, $-2(%rsi)
	LONG $0xfc468d48                           // leaq         $-4(%rsi), %rax
	LONG $0x5314b70f                           // movzwl       (%rbx,%rdx,2), %edx
	LONG $0xfc568966                           // movw         %dx, $-4(%rsi)
	WORD $0x8941; BYTE $0xcd                   // movl         %ecx, %r13d
	LONG $0x64fd8341                           // cmpl         $100, %r13d
	LONG $0x0249830f; WORD $0x0000             // jae          LBB24_44, $585(%rip)

LBB24_29:
	WORD $0x8944; BYTE $0xe9     // movl         %r13d, %ecx
	LONG $0x000286e9; BYTE $0x00 // jmp          LBB24_46, $646(%rip)

LBB24_16:
	WORD $0x394c; BYTE $0xe6                   // cmpq         %r12, %rsi
	LONG $0xffdd8341                           // sbbl         $-1, %r13d
	WORD $0xff41; BYTE $0xc3                   // incl         %r11d
	LONG $0xa0fd8141; WORD $0x0186; BYTE $0x00 // cmpl         $100000, %r13d
	LONG $0xfe54830f; WORD $0xffff             // jae          LBB24_13, $-428(%rip)
	LONG $0xfffea8e9; BYTE $0xff               // jmp          LBB24_17, $-344(%rip)

LBB24_30:
	WORD $0x3145; BYTE $0xc9       // xorl         %r9d, %r9d
	WORD $0x894c; BYTE $0xf1       // movq         %r14, %rcx
	WORD $0x8944; BYTE $0xeb       // movl         %r13d, %ebx
	WORD $0xfb83; BYTE $0x64       // cmpl         $100, %ebx
	LONG $0xff55820f; WORD $0xffff // jb           LBB24_31, $-171(%rip)

LBB24_64:
	WORD $0xff48; BYTE $0xc9                           // decq         %rcx
	LONG $0x9b1d8d4c; WORD $0x0009; BYTE $0x00         // leaq         $2459(%rip), %r11  /* _Digits(%rip) */
	QUAD $0x9090909090909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB24_65:
	WORD $0xda89                               // movl         %ebx, %edx
	LONG $0x1fd26948; WORD $0xeb85; BYTE $0x51 // imulq        $1374389535, %rdx, %rdx
	LONG $0x25eac148                           // shrq         $37, %rdx
	WORD $0xc26b; BYTE $0x64                   // imull        $100, %edx, %eax
	WORD $0xde89                               // movl         %ebx, %esi
	WORD $0xc629                               // subl         %eax, %esi
	LONG $0x04b70f41; BYTE $0x73               // movzwl       (%r11,%rsi,2), %eax
	LONG $0xff418966                           // movw         %ax, $-1(%rcx)
	LONG $0xfec18348                           // addq         $-2, %rcx
	LONG $0x270ffb81; WORD $0x0000             // cmpl         $9999, %ebx
	WORD $0xd389                               // movl         %edx, %ebx
	LONG $0xffd1870f; WORD $0xffff             // ja           LBB24_65, $-47(%rip)

LBB24_66:
	LONG $0x01708d49                           // leaq         $1(%r8), %rsi
	WORD $0xfa83; BYTE $0x0a                   // cmpl         $10, %edx
	LONG $0x001d820f; WORD $0x0000             // jb           LBB24_68, $29(%rip)
	WORD $0xd089                               // movl         %edx, %eax
	LONG $0x4b0d8d48; WORD $0x0009; BYTE $0x00 // leaq         $2379(%rip), %rcx  /* _Digits(%rip) */
	WORD $0x148a; BYTE $0x41                   // movb         (%rcx,%rax,2), %dl
	LONG $0x0141448a                           // movb         $1(%rcx,%rax,2), %al
	LONG $0x01508841                           // movb         %dl, $1(%r8)
	LONG $0x02408841                           // movb         %al, $2(%r8)
	LONG $0x000005e9; BYTE $0x00               // jmp          LBB24_69, $5(%rip)

LBB24_68:
	WORD $0xc280; BYTE $0x30 // addb         $48, %dl
	WORD $0x1688             // movb         %dl, (%rsi)

LBB24_69:
	WORD $0x294d; BYTE $0xce                                             // subq         %r9, %r14
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB24_70:
	LONG $0xff7e8041; BYTE $0x30   // cmpb         $48, $-1(%r14)
	LONG $0xff768d4d               // leaq         $-1(%r14), %r14
	LONG $0xfff1840f; WORD $0xffff // je           LBB24_70, $-15(%rip)
	WORD $0x8841; BYTE $0x10       // movb         %dl, (%r8)
	LONG $0x01468d49               // leaq         $1(%r14), %rax
	WORD $0x8948; BYTE $0xc1       // movq         %rax, %rcx
	WORD $0x2948; BYTE $0xf1       // subq         %rsi, %rcx
	LONG $0x02f98348               // cmpq         $2, %rcx
	LONG $0x00068c0f; WORD $0x0000 // jl           LBB24_73, $6(%rip)
	WORD $0x06c6; BYTE $0x2e       // movb         $46, (%rsi)
	WORD $0x8949; BYTE $0xc6       // movq         %rax, %r14

LBB24_73:
	LONG $0x6506c641               // movb         $101, (%r14)
	LONG $0xff428d41               // leal         $-1(%r10), %eax
	WORD $0x8545; BYTE $0xd2       // testl        %r10d, %r10d
	LONG $0x01228e0f; WORD $0x0000 // jle          LBB24_76, $290(%rip)
	LONG $0x0146c641; BYTE $0x2b   // movb         $43, $1(%r14)
	WORD $0xf883; BYTE $0x0a       // cmpl         $10, %eax
	LONG $0x01248c0f; WORD $0x0000 // jl           LBB24_77, $292(%rip)

LBB24_75:
	WORD $0x9848                               // cltq
	LONG $0xcc0d8d48; WORD $0x0008; BYTE $0x00 // leaq         $2252(%rip), %rcx  /* _Digits(%rip) */
	LONG $0x4104b70f                           // movzwl       (%rcx,%rax,2), %eax
	LONG $0x46894166; BYTE $0x02               // movw         %ax, $2(%r14)
	LONG $0x04c68349                           // addq         $4, %r14
	WORD $0x894d; BYTE $0xf0                   // movq         %r14, %r8
	LONG $0x000889e9; BYTE $0x00               // jmp          LBB24_136, $2185(%rip)

LBB24_32:
	WORD $0xeed3                   // shrl         %cl, %esi
	LONG $0x86a0fe81; WORD $0x0001 // cmpl         $100000, %esi
	LONG $0x01f1820f; WORD $0x0000 // jb           LBB24_52, $497(%rip)
	LONG $0x000006b8; BYTE $0x00   // movl         $6, %eax
	LONG $0x4240fe81; WORD $0x000f // cmpl         $1000000, %esi
	LONG $0x0020820f; WORD $0x0000 // jb           LBB24_36, $32(%rip)
	LONG $0x000007b8; BYTE $0x00   // movl         $7, %eax
	LONG $0x9680fe81; WORD $0x0098 // cmpl         $10000000, %esi
	LONG $0x000f820f; WORD $0x0000 // jb           LBB24_36, $15(%rip)
	LONG $0xe100fe81; WORD $0x05f5 // cmpl         $100000000, %esi
	LONG $0x000009b8; BYTE $0x00   // movl         $9, %eax
	LONG $0x00d88348               // sbbq         $0, %rax

LBB24_36:
	WORD $0x014c; BYTE $0xc0 // addq         %r8, %rax

LBB24_37:
	WORD $0xf189                               // movl         %esi, %ecx
	LONG $0xb71759ba; BYTE $0xd1               // movl         $3518437209, %edx
	LONG $0xd1af0f48                           // imulq        %rcx, %rdx
	LONG $0x2deac148                           // shrq         $45, %rdx
	LONG $0xd8f0ca69; WORD $0xffff             // imull        $-10000, %edx, %ecx
	WORD $0xf101                               // addl         %esi, %ecx
	LONG $0x1ff16948; WORD $0xeb85; BYTE $0x51 // imulq        $1374389535, %rcx, %rsi
	LONG $0x25eec148                           // shrq         $37, %rsi
	WORD $0xde6b; BYTE $0x64                   // imull        $100, %esi, %ebx
	WORD $0xd929                               // subl         %ebx, %ecx
	LONG $0x471d8d48; WORD $0x0008; BYTE $0x00 // leaq         $2119(%rip), %rbx  /* _Digits(%rip) */
	LONG $0x4b0cb70f                           // movzwl       (%rbx,%rcx,2), %ecx
	LONG $0xfe488966                           // movw         %cx, $-2(%rax)
	LONG $0x730cb70f                           // movzwl       (%rbx,%rsi,2), %ecx
	LONG $0xfc488966                           // movw         %cx, $-4(%rax)
	WORD $0x8949; BYTE $0xc1                   // movq         %rax, %r9
	LONG $0xfcc08348                           // addq         $-4, %rax
	WORD $0xd689                               // movl         %edx, %esi
	WORD $0xfe83; BYTE $0x64                   // cmpl         $100, %esi
	LONG $0x01ac830f; WORD $0x0000             // jae          LBB24_56, $428(%rip)
	LONG $0x0001efe9; BYTE $0x00               // jmp          LBB24_58, $495(%rip)

LBB24_38:
	WORD $0x8545; BYTE $0xd2       // testl        %r10d, %r10d
	LONG $0x04878f0f; WORD $0x0000 // jg           LBB24_96, $1159(%rip)
	LONG $0x00c74166; WORD $0x2e30 // movw         $11824, (%r8)
	LONG $0x02c08349               // addq         $2, %r8
	WORD $0x8545; BYTE $0xd2       // testl        %r10d, %r10d
	LONG $0x0474890f; WORD $0x0000 // jns          LBB24_96, $1140(%rip)
	WORD $0xd6f7                   // notl         %esi
	WORD $0x2944; BYTE $0xde       // subl         %r11d, %esi
	WORD $0x3145; BYTE $0xff       // xorl         %r15d, %r15d
	WORD $0xfe83; BYTE $0x7f       // cmpl         $127, %esi
	LONG $0x043e820f; WORD $0x0000 // jb           LBB24_94, $1086(%rip)
	WORD $0xff48; BYTE $0xc6       // incq         %rsi
	WORD $0x8949; BYTE $0xf7       // movq         %rsi, %r15
	LONG $0x80e78349               // andq         $-128, %r15
	LONG $0x80478d49               // leaq         $-128(%r15), %rax
	WORD $0x8949; BYTE $0xc6       // movq         %rax, %r14
	LONG $0x07eec149               // shrq         $7, %r14
	WORD $0xff49; BYTE $0xc6       // incq         %r14
	WORD $0x8945; BYTE $0xf3       // movl         %r14d, %r11d
	LONG $0x03e38341               // andl         $3, %r11d
	LONG $0x01803d48; WORD $0x0000 // cmpq         $384, %rax
	LONG $0x0321830f; WORD $0x0000 // jae          LBB24_88, $801(%rip)
	WORD $0xdb31                   // xorl         %ebx, %ebx
	LONG $0x0003c4e9; BYTE $0x00   // jmp          LBB24_90, $964(%rip)

LBB24_76:
	LONG $0x0146c641; BYTE $0x2d   // movb         $45, $1(%r14)
	WORD $0xd8f7                   // negl         %eax
	WORD $0xf883; BYTE $0x0a       // cmpl         $10, %eax
	LONG $0xfedc8d0f; WORD $0xffff // jge          LBB24_75, $-292(%rip)

LBB24_77:
	WORD $0x3004                 // addb         $48, %al
	LONG $0x02468841             // movb         %al, $2(%r14)
	LONG $0x03c68349             // addq         $3, %r14
	WORD $0x894d; BYTE $0xf0     // movq         %r14, %r8
	LONG $0x000771e9; BYTE $0x00 // jmp          LBB24_136, $1905(%rip)

LBB24_43:
	WORD $0x8948; BYTE $0xf0       // movq         %rsi, %rax
	LONG $0x64fd8341               // cmpl         $100, %r13d
	LONG $0xfdb7820f; WORD $0xffff // jb           LBB24_29, $-585(%rip)

LBB24_44:
	WORD $0xff48; BYTE $0xc8                   // decq         %rax
	LONG $0x881d8d4c; WORD $0x0007; BYTE $0x00 // leaq         $1928(%rip), %r11  /* _Digits(%rip) */
	QUAD $0x9090909090909090                   // .p2align 4, 0x90

LBB24_45:
	WORD $0x8944; BYTE $0xe9                   // movl         %r13d, %ecx
	LONG $0x1fc96948; WORD $0xeb85; BYTE $0x51 // imulq        $1374389535, %rcx, %rcx
	LONG $0x25e9c148                           // shrq         $37, %rcx
	WORD $0xd96b; BYTE $0x64                   // imull        $100, %ecx, %ebx
	WORD $0x8944; BYTE $0xea                   // movl         %r13d, %edx
	WORD $0xda29                               // subl         %ebx, %edx
	LONG $0x14b70f41; BYTE $0x53               // movzwl       (%r11,%rdx,2), %edx
	LONG $0xff508966                           // movw         %dx, $-1(%rax)
	LONG $0xfec08348                           // addq         $-2, %rax
	LONG $0x0ffd8141; WORD $0x0027; BYTE $0x00 // cmpl         $9999, %r13d
	WORD $0x8941; BYTE $0xcd                   // movl         %ecx, %r13d
	LONG $0xffcd870f; WORD $0xffff             // ja           LBB24_45, $-51(%rip)

LBB24_46:
	WORD $0x6349; BYTE $0xc2                   // movslq       %r10d, %rax
	WORD $0xf983; BYTE $0x0a                   // cmpl         $10, %ecx
	LONG $0x0022820f; WORD $0x0000             // jb           LBB24_48, $34(%rip)
	WORD $0xc989                               // movl         %ecx, %ecx
	LONG $0x38158d48; WORD $0x0007; BYTE $0x00 // leaq         $1848(%rip), %rdx  /* _Digits(%rip) */
	LONG $0x4a0cb70f                           // movzwl       (%rdx,%rcx,2), %ecx
	LONG $0x08894166                           // movw         %cx, (%r8)
	WORD $0x0149; BYTE $0xc0                   // addq         %rax, %r8
	WORD $0x3949; BYTE $0xc4                   // cmpq         %rax, %r12
	LONG $0x00178c0f; WORD $0x0000             // jl           LBB24_49, $23(%rip)
	LONG $0x0006f1e9; BYTE $0x00               // jmp          LBB24_136, $1777(%rip)

LBB24_48:
	WORD $0xc180; BYTE $0x30       // addb         $48, %cl
	WORD $0x8841; BYTE $0x08       // movb         %cl, (%r8)
	WORD $0x0149; BYTE $0xc0       // addq         %rax, %r8
	WORD $0x3949; BYTE $0xc4       // cmpq         %rax, %r12
	LONG $0x06df8d0f; WORD $0x0000 // jge          LBB24_136, $1759(%rip)

LBB24_49:
	LONG $0x21048d4b                           // leaq         (%r9,%r12), %rax
	LONG $0x075c8d4c; BYTE $0x01               // leaq         $1(%rdi,%rax), %r11
	WORD $0x394d; BYTE $0xc3                   // cmpq         %r8, %r11
	LONG $0xd8460f4d                           // cmovbeq      %r8, %r11
	LONG $0x0f0c8d4a                           // leaq         (%rdi,%r9), %rcx
	WORD $0x014c; BYTE $0xe1                   // addq         %r12, %rcx
	WORD $0x2949; BYTE $0xcb                   // subq         %rcx, %r11
	LONG $0x80fb8149; WORD $0x0000; BYTE $0x00 // cmpq         $128, %r11
	LONG $0x0206820f; WORD $0x0000             // jb           LBB24_85, $518(%rip)
	WORD $0x894d; BYTE $0xda                   // movq         %r11, %r10
	LONG $0x80e28349                           // andq         $-128, %r10
	LONG $0x804a8d49                           // leaq         $-128(%r10), %rcx
	WORD $0x8948; BYTE $0xcb                   // movq         %rcx, %rbx
	LONG $0x07ebc148                           // shrq         $7, %rbx
	WORD $0xff48; BYTE $0xc3                   // incq         %rbx
	WORD $0xda89                               // movl         %ebx, %edx
	WORD $0xe283; BYTE $0x03                   // andl         $3, %edx
	LONG $0x80f98148; WORD $0x0001; BYTE $0x00 // cmpq         $384, %rcx
	LONG $0x00d7830f; WORD $0x0000             // jae          LBB24_78, $215(%rip)
	WORD $0xc031                               // xorl         %eax, %eax
	LONG $0x000188e9; BYTE $0x00               // jmp          LBB24_80, $392(%rip)

LBB24_52:
	LONG $0x0001b941; WORD $0x0000 // movl         $1, %r9d
	WORD $0xfe83; BYTE $0x0a       // cmpl         $10, %esi
	LONG $0x0021820f; WORD $0x0000 // jb           LBB24_55, $33(%rip)
	LONG $0x0002b941; WORD $0x0000 // movl         $2, %r9d
	WORD $0xfe83; BYTE $0x64       // cmpl         $100, %esi
	LONG $0x0012820f; WORD $0x0000 // jb           LBB24_55, $18(%rip)
	LONG $0x0003b941; WORD $0x0000 // movl         $3, %r9d
	LONG $0x03e8fe81; WORD $0x0000 // cmpl         $1000, %esi
	LONG $0x01bc830f; WORD $0x0000 // jae          LBB24_86, $444(%rip)

LBB24_55:
	WORD $0x014d; BYTE $0xc1       // addq         %r8, %r9
	WORD $0x894c; BYTE $0xc8       // movq         %r9, %rax
	WORD $0xfe83; BYTE $0x64       // cmpl         $100, %esi
	LONG $0x0048820f; WORD $0x0000 // jb           LBB24_58, $72(%rip)

LBB24_56:
	WORD $0xff48; BYTE $0xc8                                             // decq         %rax
	LONG $0x6f158d4c; WORD $0x0006; BYTE $0x00                           // leaq         $1647(%rip), %r10  /* _Digits(%rip) */
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB24_57:
	WORD $0xf389                               // movl         %esi, %ebx
	WORD $0xf689                               // movl         %esi, %esi
	LONG $0x1ff66948; WORD $0xeb85; BYTE $0x51 // imulq        $1374389535, %rsi, %rsi
	LONG $0x25eec148                           // shrq         $37, %rsi
	WORD $0xce6b; BYTE $0x64                   // imull        $100, %esi, %ecx
	WORD $0xda89                               // movl         %ebx, %edx
	WORD $0xca29                               // subl         %ecx, %edx
	LONG $0x0cb70f41; BYTE $0x52               // movzwl       (%r10,%rdx,2), %ecx
	LONG $0xff488966                           // movw         %cx, $-1(%rax)
	LONG $0xfec08348                           // addq         $-2, %rax
	LONG $0x270ffb81; WORD $0x0000             // cmpl         $9999, %ebx
	LONG $0xffd1870f; WORD $0xffff             // ja           LBB24_57, $-47(%rip)

LBB24_58:
	WORD $0xfe83; BYTE $0x0a                   // cmpl         $10, %esi
	LONG $0x0016820f; WORD $0x0000             // jb           LBB24_60, $22(%rip)
	WORD $0xf089                               // movl         %esi, %eax
	LONG $0x1f0d8d48; WORD $0x0006; BYTE $0x00 // leaq         $1567(%rip), %rcx  /* _Digits(%rip) */
	LONG $0x4104b70f                           // movzwl       (%rcx,%rax,2), %eax
	LONG $0x00894166                           // movw         %ax, (%r8)
	LONG $0x000007e9; BYTE $0x00               // jmp          LBB24_61, $7(%rip)

LBB24_60:
	LONG $0x30c68040         // addb         $48, %sil
	WORD $0x8841; BYTE $0x30 // movb         %sil, (%r8)

LBB24_61:
	WORD $0x2941; BYTE $0xf9     // subl         %edi, %r9d
	WORD $0x8945; BYTE $0xc8     // movl         %r9d, %r8d
	LONG $0x0005d5e9; BYTE $0x00 // jmp          LBB24_137, $1493(%rip)

LBB24_62:
	LONG $0x0004b941; WORD $0x0000 // movl         $4, %r9d
	LONG $0xfc4e8d49               // leaq         $-4(%r14), %rcx
	WORD $0xfb83; BYTE $0x64       // cmpl         $100, %ebx
	LONG $0xfb9d820f; WORD $0xffff // jb           LBB24_31, $-1123(%rip)
	LONG $0xfffc43e9; BYTE $0xff   // jmp          LBB24_64, $-957(%rip)

LBB24_78:
	QUAD $0x000001e0078c8d48                                             // leaq         $480(%rdi,%rax), %rcx
	LONG $0xfce38348                                                     // andq         $-4, %rbx
	WORD $0xf748; BYTE $0xdb                                             // negq         %rbx
	WORD $0xc031                                                         // xorl         %eax, %eax
	QUAD $0xfffff87f056ffdc5                                             // vmovdqa      $-1921(%rip), %ymm0  /* LCPI24_0(%rip) */
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB24_79:
	QUAD $0xfffe2001847ffec5; BYTE $0xff // vmovdqu      %ymm0, $-480(%rcx,%rax)
	QUAD $0xfffe4001847ffec5; BYTE $0xff // vmovdqu      %ymm0, $-448(%rcx,%rax)
	QUAD $0xfffe6001847ffec5; BYTE $0xff // vmovdqu      %ymm0, $-416(%rcx,%rax)
	QUAD $0xfffe8001847ffec5; BYTE $0xff // vmovdqu      %ymm0, $-384(%rcx,%rax)
	QUAD $0xfffea001847ffec5; BYTE $0xff // vmovdqu      %ymm0, $-352(%rcx,%rax)
	QUAD $0xfffec001847ffec5; BYTE $0xff // vmovdqu      %ymm0, $-320(%rcx,%rax)
	QUAD $0xfffee001847ffec5; BYTE $0xff // vmovdqu      %ymm0, $-288(%rcx,%rax)
	QUAD $0xffff0001847ffec5; BYTE $0xff // vmovdqu      %ymm0, $-256(%rcx,%rax)
	QUAD $0xffff2001847ffec5; BYTE $0xff // vmovdqu      %ymm0, $-224(%rcx,%rax)
	QUAD $0xffff4001847ffec5; BYTE $0xff // vmovdqu      %ymm0, $-192(%rcx,%rax)
	QUAD $0xffff6001847ffec5; BYTE $0xff // vmovdqu      %ymm0, $-160(%rcx,%rax)
	LONG $0x447ffec5; WORD $0x8001       // vmovdqu      %ymm0, $-128(%rcx,%rax)
	LONG $0x447ffec5; WORD $0xa001       // vmovdqu      %ymm0, $-96(%rcx,%rax)
	LONG $0x447ffec5; WORD $0xc001       // vmovdqu      %ymm0, $-64(%rcx,%rax)
	LONG $0x447ffec5; WORD $0xe001       // vmovdqu      %ymm0, $-32(%rcx,%rax)
	LONG $0x047ffec5; BYTE $0x01         // vmovdqu      %ymm0, (%rcx,%rax)
	LONG $0x02000548; WORD $0x0000       // addq         $512, %rax
	LONG $0x04c38348                     // addq         $4, %rbx
	LONG $0xff70850f; WORD $0xffff       // jne          LBB24_79, $-144(%rip)

LBB24_80:
	WORD $0x8548; BYTE $0xd2       // testq        %rdx, %rdx
	LONG $0x0037840f; WORD $0x0000 // je           LBB24_83, $55(%rip)
	WORD $0x014c; BYTE $0xc8       // addq         %r9, %rax
	WORD $0x014c; BYTE $0xe0       // addq         %r12, %rax
	LONG $0x07448d48; BYTE $0x60   // leaq         $96(%rdi,%rax), %rax
	WORD $0xf748; BYTE $0xda       // negq         %rdx
	QUAD $0xfffff7c1056ffdc5       // vmovdqa      $-2111(%rip), %ymm0  /* LCPI24_0(%rip) */
	BYTE $0x90                     // .p2align 4, 0x90

LBB24_82:
	LONG $0x407ffec5; BYTE $0xa0   // vmovdqu      %ymm0, $-96(%rax)
	LONG $0x407ffec5; BYTE $0xc0   // vmovdqu      %ymm0, $-64(%rax)
	LONG $0x407ffec5; BYTE $0xe0   // vmovdqu      %ymm0, $-32(%rax)
	LONG $0x007ffec5               // vmovdqu      %ymm0, (%rax)
	LONG $0x80e88348               // subq         $-128, %rax
	WORD $0xff48; BYTE $0xc2       // incq         %rdx
	LONG $0xffe0850f; WORD $0xffff // jne          LBB24_82, $-32(%rip)

LBB24_83:
	WORD $0x394d; BYTE $0xda       // cmpq         %r11, %r10
	LONG $0x04b9840f; WORD $0x0000 // je           LBB24_136, $1209(%rip)
	WORD $0x014c; BYTE $0xd6       // addq         %r10, %rsi
	LONG $0x90909090               // .p2align 4, 0x90

LBB24_85:
	WORD $0x06c6; BYTE $0x30       // movb         $48, (%rsi)
	WORD $0xff48; BYTE $0xc6       // incq         %rsi
	WORD $0x394c; BYTE $0xc6       // cmpq         %r8, %rsi
	LONG $0xfff1820f; WORD $0xffff // jb           LBB24_85, $-15(%rip)
	LONG $0x00049ee9; BYTE $0x00   // jmp          LBB24_136, $1182(%rip)

LBB24_86:
	LONG $0x2710fe81; WORD $0x0000 // cmpl         $10000, %esi
	WORD $0x894c; BYTE $0xc0       // movq         %r8, %rax
	LONG $0x00d88348               // sbbq         $0, %rax
	LONG $0x05c08348               // addq         $5, %rax
	LONG $0x2710fe81; WORD $0x0000 // cmpl         $10000, %esi
	LONG $0xfc3a830f; WORD $0xffff // jae          LBB24_37, $-966(%rip)
	WORD $0x8949; BYTE $0xc1       // movq         %rax, %r9
	LONG $0xfffe2ee9; BYTE $0xff   // jmp          LBB24_56, $-466(%rip)

LBB24_88:
	QUAD $0x000001e239848d49 // leaq         $482(%r9,%rdi), %rax
	LONG $0xfce68349         // andq         $-4, %r14
	WORD $0xf749; BYTE $0xde // negq         %r14
	WORD $0xdb31             // xorl         %ebx, %ebx
	QUAD $0xfffff73e056ffdc5 // vmovdqa      $-2242(%rip), %ymm0  /* LCPI24_0(%rip) */

LBB24_89:
	QUAD $0xfffe2018847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-480(%rax,%rbx)
	QUAD $0xfffe4018847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-448(%rax,%rbx)
	QUAD $0xfffe6018847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-416(%rax,%rbx)
	QUAD $0xfffe8018847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-384(%rax,%rbx)
	QUAD $0xfffea018847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-352(%rax,%rbx)
	QUAD $0xfffec018847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-320(%rax,%rbx)
	QUAD $0xfffee018847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-288(%rax,%rbx)
	QUAD $0xffff0018847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-256(%rax,%rbx)
	QUAD $0xffff2018847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-224(%rax,%rbx)
	QUAD $0xffff4018847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-192(%rax,%rbx)
	QUAD $0xffff6018847ffec5; BYTE $0xff       // vmovdqu      %ymm0, $-160(%rax,%rbx)
	LONG $0x447ffec5; WORD $0x8018             // vmovdqu      %ymm0, $-128(%rax,%rbx)
	LONG $0x447ffec5; WORD $0xa018             // vmovdqu      %ymm0, $-96(%rax,%rbx)
	LONG $0x447ffec5; WORD $0xc018             // vmovdqu      %ymm0, $-64(%rax,%rbx)
	LONG $0x447ffec5; WORD $0xe018             // vmovdqu      %ymm0, $-32(%rax,%rbx)
	LONG $0x047ffec5; BYTE $0x18               // vmovdqu      %ymm0, (%rax,%rbx)
	LONG $0x00c38148; WORD $0x0002; BYTE $0x00 // addq         $512, %rbx
	LONG $0x04c68349                           // addq         $4, %r14
	LONG $0xff6f850f; WORD $0xffff             // jne          LBB24_89, $-145(%rip)

LBB24_90:
	WORD $0x854d; BYTE $0xdb       // testq        %r11, %r11
	LONG $0x0033840f; WORD $0x0000 // je           LBB24_93, $51(%rip)
	WORD $0x014c; BYTE $0xcb       // addq         %r9, %rbx
	LONG $0x1f448d48; BYTE $0x62   // leaq         $98(%rdi,%rbx), %rax
	WORD $0xf749; BYTE $0xdb       // negq         %r11
	QUAD $0xfffff691056ffdc5       // vmovdqa      $-2415(%rip), %ymm0  /* LCPI24_0(%rip) */

LBB24_92:
	LONG $0x407ffec5; BYTE $0xa0   // vmovdqu      %ymm0, $-96(%rax)
	LONG $0x407ffec5; BYTE $0xc0   // vmovdqu      %ymm0, $-64(%rax)
	LONG $0x407ffec5; BYTE $0xe0   // vmovdqu      %ymm0, $-32(%rax)
	LONG $0x007ffec5               // vmovdqu      %ymm0, (%rax)
	LONG $0x80e88348               // subq         $-128, %rax
	WORD $0xff49; BYTE $0xc3       // incq         %r11
	LONG $0xffe0850f; WORD $0xffff // jne          LBB24_92, $-32(%rip)

LBB24_93:
	WORD $0x014d; BYTE $0xf8       // addq         %r15, %r8
	WORD $0x394c; BYTE $0xfe       // cmpq         %r15, %rsi
	LONG $0x0025840f; WORD $0x0000 // je           LBB24_96, $37(%rip)

LBB24_94:
	WORD $0x0145; BYTE $0xd7                                             // addl         %r10d, %r15d
	WORD $0xf741; BYTE $0xdf                                             // negl         %r15d
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB24_95:
	LONG $0x3000c641               // movb         $48, (%r8)
	WORD $0xff49; BYTE $0xc0       // incq         %r8
	WORD $0xff41; BYTE $0xcf       // decl         %r15d
	LONG $0xfff0850f; WORD $0xffff // jne          LBB24_95, $-16(%rip)

LBB24_96:
	LONG $0x20048d4b                           // leaq         (%r8,%r12), %rax
	LONG $0x10fd8141; WORD $0x0027; BYTE $0x00 // cmpl         $10000, %r13d
	LONG $0x0063820f; WORD $0x0000             // jb           LBB24_99, $99(%rip)
	WORD $0x8944; BYTE $0xe9                   // movl         %r13d, %ecx
	LONG $0x1759bb41; WORD $0xd1b7             // movl         $3518437209, %r11d
	LONG $0xd9af0f4c                           // imulq        %rcx, %r11
	LONG $0x2debc149                           // shrq         $45, %r11
	LONG $0xf0cb6941; WORD $0xffd8; BYTE $0xff // imull        $-10000, %r11d, %ecx
	WORD $0x0144; BYTE $0xe9                   // addl         %r13d, %ecx
	LONG $0x0190840f; WORD $0x0000             // je           LBB24_101, $400(%rip)
	WORD $0xca89                               // movl         %ecx, %edx
	LONG $0x1fd26948; WORD $0xeb85; BYTE $0x51 // imulq        $1374389535, %rdx, %rdx
	LONG $0x25eac148                           // shrq         $37, %rdx
	WORD $0xda6b; BYTE $0x64                   // imull        $100, %edx, %ebx
	WORD $0xd929                               // subl         %ebx, %ecx
	LONG $0x451d8d48; WORD $0x0003; BYTE $0x00 // leaq         $837(%rip), %rbx  /* _Digits(%rip) */
	LONG $0x4b0cb70f                           // movzwl       (%rbx,%rcx,2), %ecx
	LONG $0xfe488966                           // movw         %cx, $-2(%rax)
	LONG $0x530cb70f                           // movzwl       (%rbx,%rdx,2), %ecx
	LONG $0xfc488966                           // movw         %cx, $-4(%rax)
	WORD $0x3145; BYTE $0xc9                   // xorl         %r9d, %r9d
	LONG $0xfcc08348                           // addq         $-4, %rax
	LONG $0x64fb8341                           // cmpl         $100, %r11d
	LONG $0x0018830f; WORD $0x0000             // jae          LBB24_103, $24(%rip)

LBB24_100:
	WORD $0x8944; BYTE $0xd9     // movl         %r11d, %ecx
	LONG $0x00004ee9; BYTE $0x00 // jmp          LBB24_105, $78(%rip)

LBB24_99:
	WORD $0x3145; BYTE $0xc9       // xorl         %r9d, %r9d
	WORD $0x8945; BYTE $0xeb       // movl         %r13d, %r11d
	LONG $0x64fb8341               // cmpl         $100, %r11d
	LONG $0xffe8820f; WORD $0xffff // jb           LBB24_100, $-24(%rip)

LBB24_103:
	WORD $0xff48; BYTE $0xc8                   // decq         %rax
	LONG $0x02158d48; WORD $0x0003; BYTE $0x00 // leaq         $770(%rip), %rdx  /* _Digits(%rip) */
	WORD $0x9090                               // .p2align 4, 0x90

LBB24_104:
	WORD $0x8944; BYTE $0xd9                   // movl         %r11d, %ecx
	LONG $0x1fc96948; WORD $0xeb85; BYTE $0x51 // imulq        $1374389535, %rcx, %rcx
	LONG $0x25e9c148                           // shrq         $37, %rcx
	WORD $0xd96b; BYTE $0x64                   // imull        $100, %ecx, %ebx
	WORD $0x8944; BYTE $0xde                   // movl         %r11d, %esi
	WORD $0xde29                               // subl         %ebx, %esi
	LONG $0x7234b70f                           // movzwl       (%rdx,%rsi,2), %esi
	LONG $0xff708966                           // movw         %si, $-1(%rax)
	LONG $0xfec08348                           // addq         $-2, %rax
	LONG $0x0ffb8141; WORD $0x0027; BYTE $0x00 // cmpl         $9999, %r11d
	WORD $0x8941; BYTE $0xcb                   // movl         %ecx, %r11d
	LONG $0xffce870f; WORD $0xffff             // ja           LBB24_104, $-50(%rip)

LBB24_105:
	WORD $0xf983; BYTE $0x0a                   // cmpl         $10, %ecx
	LONG $0x0016820f; WORD $0x0000             // jb           LBB24_107, $22(%rip)
	WORD $0xc889                               // movl         %ecx, %eax
	LONG $0xbc0d8d48; WORD $0x0002; BYTE $0x00 // leaq         $700(%rip), %rcx  /* _Digits(%rip) */
	LONG $0x4104b70f                           // movzwl       (%rcx,%rax,2), %eax
	LONG $0x00894166                           // movw         %ax, (%r8)
	LONG $0x000006e9; BYTE $0x00               // jmp          LBB24_108, $6(%rip)

LBB24_107:
	WORD $0xc180; BYTE $0x30 // addb         $48, %cl
	WORD $0x8841; BYTE $0x08 // movb         %cl, (%r8)

LBB24_108:
	WORD $0x294d; BYTE $0xcc                   // subq         %r9, %r12
	LONG $0x24548d49; BYTE $0x01               // leaq         $1(%r12), %rdx
	LONG $0x24748d49; BYTE $0x61               // leaq         $97(%r12), %rsi
	LONG $0x24448d49; BYTE $0x02               // leaq         $2(%r12), %rax
	LONG $0x90909090; WORD $0x9090; BYTE $0x90 // .p2align 4, 0x90

LBB24_109:
	WORD $0xff48; BYTE $0xce       // decq         %rsi
	WORD $0xff48; BYTE $0xca       // decq         %rdx
	WORD $0xff48; BYTE $0xc8       // decq         %rax
	LONG $0x207c8043; WORD $0x30ff // cmpb         $48, $-1(%r8,%r12)
	LONG $0x24648d4d; BYTE $0xff   // leaq         $-1(%r12), %r12
	LONG $0xffe6840f; WORD $0xffff // je           LBB24_109, $-26(%rip)
	LONG $0x100c8d4d               // leaq         (%r8,%rdx), %r9
	WORD $0x8545; BYTE $0xd2       // testl        %r10d, %r10d
	LONG $0x00938e0f; WORD $0x0000 // jle          LBB24_115, $147(%rip)
	WORD $0x8944; BYTE $0xc9       // movl         %r9d, %ecx
	WORD $0x2944; BYTE $0xc1       // subl         %r8d, %ecx
	WORD $0xcb89                   // movl         %ecx, %ebx
	WORD $0x2944; BYTE $0xd3       // subl         %r10d, %ebx
	LONG $0x00278e0f; WORD $0x0000 // jle          LBB24_116, $39(%rip)
	WORD $0xdb85                   // testl        %ebx, %ebx
	LONG $0x00fa8e0f; WORD $0x0000 // jle          LBB24_127, $250(%rip)
	WORD $0x8941; BYTE $0xdb       // movl         %ebx, %r11d
	LONG $0xff4b8d49               // leaq         $-1(%r11), %rcx
	WORD $0x8945; BYTE $0xd9       // movl         %r11d, %r9d
	LONG $0x03e18341               // andl         $3, %r9d
	LONG $0x03f98348               // cmpq         $3, %rcx
	LONG $0x0083830f; WORD $0x0000 // jae          LBB24_121, $131(%rip)
	WORD $0xc931                   // xorl         %ecx, %ecx
	LONG $0x0000ade9; BYTE $0x00   // jmp          LBB24_124, $173(%rip)

LBB24_116:
	WORD $0x8945; BYTE $0xd6                   // movl         %r10d, %r14d
	WORD $0x2941; BYTE $0xce                   // subl         %ecx, %r14d
	LONG $0x004f8e0f; WORD $0x0000             // jle          LBB24_115, $79(%rip)
	WORD $0x0145; BYTE $0xc2                   // addl         %r8d, %r10d
	WORD $0x8945; BYTE $0xcb                   // movl         %r9d, %r11d
	WORD $0xf741; BYTE $0xd3                   // notl         %r11d
	WORD $0x0145; BYTE $0xd3                   // addl         %r10d, %r11d
	WORD $0xc031                               // xorl         %eax, %eax
	LONG $0x7efb8341                           // cmpl         $126, %r11d
	LONG $0x01bd860f; WORD $0x0000             // jbe          LBB24_134, $445(%rip)
	WORD $0xff49; BYTE $0xc3                   // incq         %r11
	WORD $0x894c; BYTE $0xd8                   // movq         %r11, %rax
	LONG $0x80e08348                           // andq         $-128, %rax
	LONG $0x000c8d4d                           // leaq         (%r8,%rax), %r9
	LONG $0x80488d48                           // leaq         $-128(%rax), %rcx
	WORD $0x8949; BYTE $0xcf                   // movq         %rcx, %r15
	LONG $0x07efc149                           // shrq         $7, %r15
	WORD $0xff49; BYTE $0xc7                   // incq         %r15
	WORD $0x8945; BYTE $0xfa                   // movl         %r15d, %r10d
	LONG $0x03e28341                           // andl         $3, %r10d
	LONG $0x80f98148; WORD $0x0001; BYTE $0x00 // cmpq         $384, %rcx
	LONG $0x0097830f; WORD $0x0000             // jae          LBB24_128, $151(%rip)
	WORD $0xc931                               // xorl         %ecx, %ecx
	LONG $0x000139e9; BYTE $0x00               // jmp          LBB24_130, $313(%rip)

LBB24_115:
	WORD $0x894d; BYTE $0xc8     // movq         %r9, %r8
	LONG $0x0001a0e9; BYTE $0x00 // jmp          LBB24_136, $416(%rip)

LBB24_101:
	LONG $0x0004b941; WORD $0x0000 // movl         $4, %r9d
	LONG $0xfcc08348               // addq         $-4, %rax
	LONG $0x64fb8341               // cmpl         $100, %r11d
	LONG $0xfe96820f; WORD $0xffff // jb           LBB24_100, $-362(%rip)
	LONG $0xfffea9e9; BYTE $0xff   // jmp          LBB24_103, $-343(%rip)

LBB24_121:
	LONG $0xfce38341                           // andl         $-4, %r11d
	WORD $0xf749; BYTE $0xdb                   // negq         %r11
	WORD $0xc931                               // xorl         %ecx, %ecx
	QUAD $0x9090909090909090; LONG $0x90909090 // .p2align 4, 0x90

LBB24_122:
	LONG $0x081c8d49               // leaq         (%r8,%rcx), %rbx
	LONG $0xfc1a748b               // movl         $-4(%rdx,%rbx), %esi
	LONG $0xfd1a7489               // movl         %esi, $-3(%rdx,%rbx)
	LONG $0xfcc18348               // addq         $-4, %rcx
	WORD $0x3949; BYTE $0xcb       // cmpq         %rcx, %r11
	LONG $0xffe7850f; WORD $0xffff // jne          LBB24_122, $-25(%rip)
	WORD $0xf748; BYTE $0xd9       // negq         %rcx

LBB24_124:
	WORD $0x854d; BYTE $0xc9       // testq        %r9, %r9
	LONG $0x0025840f; WORD $0x0000 // je           LBB24_127, $37(%rip)
	WORD $0xf749; BYTE $0xd9       // negq         %r9
	WORD $0x894c; BYTE $0xc2       // movq         %r8, %rdx
	WORD $0x2948; BYTE $0xca       // subq         %rcx, %rdx
	WORD $0xc931                   // xorl         %ecx, %ecx

	// .p2align 4, 0x90
LBB24_126:
	LONG $0x0a348d48               // leaq         (%rdx,%rcx), %rsi
	LONG $0x1cb60f41; BYTE $0x34   // movzbl       (%r12,%rsi), %ebx
	LONG $0x345c8841; BYTE $0x01   // movb         %bl, $1(%r12,%rsi)
	WORD $0xff48; BYTE $0xc9       // decq         %rcx
	WORD $0x3949; BYTE $0xc9       // cmpq         %rcx, %r9
	LONG $0xffe6850f; WORD $0xffff // jne          LBB24_126, $-26(%rip)

LBB24_127:
	WORD $0x6349; BYTE $0xca     // movslq       %r10d, %rcx
	LONG $0x0804c641; BYTE $0x2e // movb         $46, (%r8,%rcx)
	WORD $0x0149; BYTE $0xc0     // addq         %rax, %r8
	LONG $0x000118e9; BYTE $0x00 // jmp          LBB24_136, $280(%rip)

LBB24_128:
	LONG $0xfce78349         // andq         $-4, %r15
	WORD $0xf749; BYTE $0xdf // negq         %r15
	WORD $0xc931             // xorl         %ecx, %ecx
	QUAD $0xfffff3e5056ffdc5 // vmovdqa      $-3099(%rip), %ymm0  /* LCPI24_0(%rip) */

LBB24_129:
	LONG $0x081c8d49                           // leaq         (%r8,%rcx), %rbx
	LONG $0x047ffec5; BYTE $0x1a               // vmovdqu      %ymm0, (%rdx,%rbx)
	LONG $0x447ffec5; WORD $0x201a             // vmovdqu      %ymm0, $32(%rdx,%rbx)
	LONG $0x447ffec5; WORD $0x401a             // vmovdqu      %ymm0, $64(%rdx,%rbx)
	LONG $0x447ffec5; WORD $0x601a             // vmovdqu      %ymm0, $96(%rdx,%rbx)
	QUAD $0x0000801a847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $128(%rdx,%rbx)
	QUAD $0x0000a01a847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $160(%rdx,%rbx)
	QUAD $0x0000c01a847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $192(%rdx,%rbx)
	QUAD $0x0000e01a847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $224(%rdx,%rbx)
	QUAD $0x0001001a847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $256(%rdx,%rbx)
	QUAD $0x0001201a847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $288(%rdx,%rbx)
	QUAD $0x0001401a847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $320(%rdx,%rbx)
	QUAD $0x0001601a847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $352(%rdx,%rbx)
	QUAD $0x0001801a847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $384(%rdx,%rbx)
	QUAD $0x0001a01a847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $416(%rdx,%rbx)
	QUAD $0x0001c01a847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $448(%rdx,%rbx)
	QUAD $0x0001e01a847ffec5; BYTE $0x00       // vmovdqu      %ymm0, $480(%rdx,%rbx)
	LONG $0x00c18148; WORD $0x0002; BYTE $0x00 // addq         $512, %rcx
	LONG $0x04c78349                           // addq         $4, %r15
	LONG $0xff68850f; WORD $0xffff             // jne          LBB24_129, $-152(%rip)

LBB24_130:
	WORD $0x0149; BYTE $0xd1       // addq         %rdx, %r9
	WORD $0x854d; BYTE $0xd2       // testq        %r10, %r10
	LONG $0x0035840f; WORD $0x0000 // je           LBB24_133, $53(%rip)
	WORD $0x0149; BYTE $0xc8       // addq         %rcx, %r8
	WORD $0x0149; BYTE $0xf0       // addq         %rsi, %r8
	WORD $0xf749; BYTE $0xda       // negq         %r10
	QUAD $0xfffff330056ffdc5       // vmovdqa      $-3280(%rip), %ymm0  /* LCPI24_0(%rip) */

LBB24_132:
	LONG $0x7f7ec1c4; WORD $0xa040 // vmovdqu      %ymm0, $-96(%r8)
	LONG $0x7f7ec1c4; WORD $0xc040 // vmovdqu      %ymm0, $-64(%r8)
	LONG $0x7f7ec1c4; WORD $0xe040 // vmovdqu      %ymm0, $-32(%r8)
	LONG $0x7f7ec1c4; BYTE $0x00   // vmovdqu      %ymm0, (%r8)
	LONG $0x80e88349               // subq         $-128, %r8
	WORD $0xff49; BYTE $0xc2       // incq         %r10
	LONG $0xffdc850f; WORD $0xffff // jne          LBB24_132, $-36(%rip)

LBB24_133:
	WORD $0x894d; BYTE $0xc8       // movq         %r9, %r8
	WORD $0x3949; BYTE $0xc3       // cmpq         %rax, %r11
	LONG $0x0022840f; WORD $0x0000 // je           LBB24_136, $34(%rip)

LBB24_134:
	WORD $0x894d; BYTE $0xc8                               // movq         %r9, %r8
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90 // .p2align 4, 0x90

LBB24_135:
	LONG $0x3000c641               // movb         $48, (%r8)
	WORD $0xff49; BYTE $0xc0       // incq         %r8
	WORD $0xc0ff                   // incl         %eax
	WORD $0x3944; BYTE $0xf0       // cmpl         %r14d, %eax
	LONG $0xffee8c0f; WORD $0xffff // jl           LBB24_135, $-18(%rip)

LBB24_136:
	WORD $0x2941; BYTE $0xf8 // subl         %edi, %r8d

LBB24_137:
	WORD $0x8944; BYTE $0xc0 // movl         %r8d, %eax
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	BYTE $0xc3               // retq

LBB24_138:
	WORD $0x3145; BYTE $0xc0     // xorl         %r8d, %r8d
	LONG $0xffffe7e9; BYTE $0xff // jmp          LBB24_137, $-25(%rip)

LBB24_139:
	LONG $0xff6bbf41; WORD $0xffff // movl         $-149, %r15d
	WORD $0xc689                   // movl         %eax, %esi
	LONG $0xfff352e9; BYTE $0xff   // jmp          LBB24_5, $-3246(%rip)
	BYTE $0x00                     // .p2align 2, 0x00

_MASK_USE_NUMBER:
	LONG $0x00000002 // .long 2

	// .p2align 4, 0x00
_Digits:
	QUAD $0x3330323031303030; QUAD $0x3730363035303430 // .ascii 16, '0001020304050607'
	QUAD $0x3131303139303830; QUAD $0x3531343133313231 // .ascii 16, '0809101112131415'
	QUAD $0x3931383137313631; QUAD $0x3332323231323032 // .ascii 16, '1617181920212223'
	QUAD $0x3732363235323432; QUAD $0x3133303339323832 // .ascii 16, '2425262728293031'
	QUAD $0x3533343333333233; QUAD $0x3933383337333633 // .ascii 16, '3233343536373839'
	QUAD $0x3334323431343034; QUAD $0x3734363435343434 // .ascii 16, '4041424344454647'
	QUAD $0x3135303539343834; QUAD $0x3535343533353235 // .ascii 16, '4849505152535455'
	QUAD $0x3935383537353635; QUAD $0x3336323631363036 // .ascii 16, '5657585960616263'
	QUAD $0x3736363635363436; QUAD $0x3137303739363836 // .ascii 16, '6465666768697071'
	QUAD $0x3537343733373237; QUAD $0x3937383737373637 // .ascii 16, '7273747576777879'
	QUAD $0x3338323831383038; QUAD $0x3738363835383438 // .ascii 16, '8081828384858687'
	QUAD $0x3139303939383838; QUAD $0x3539343933393239 // .ascii 16, '8889909192939495'
	QUAD $0x3939383937393639                           // .ascii 8, '96979899'
	QUAD $0x0000000000000000                           // .p2align 4, 0x00

_LB_a866dad5: // _pow10_ceil_sig.g
	QUAD $0xff77b1fcbebcdc4f // .quad -38366372719436721
	QUAD $0x25e8e89c13bb0f7b // .quad 2731688931043774331
	QUAD $0x9faacf3df73609b1 // .quad -6941508010590729807
	QUAD $0x77b191618c54e9ad // .quad 8624834609543440813
	QUAD $0xc795830d75038c1d // .quad -4065198994811024355
	QUAD $0xd59df5b9ef6a2418 // .quad -3054014793352862696
	QUAD $0xf97ae3d0d2446f25 // .quad -469812725086392539
	QUAD $0x4b0573286b44ad1e // .quad 5405853545163697438
	QUAD $0x9becce62836ac577 // .quad -7211161980820077193
	QUAD $0x4ee367f9430aec33 // .quad 5684501474941004851
	QUAD $0xc2e801fb244576d5 // .quad -4402266457597708587
	QUAD $0x229c41f793cda740 // .quad 2493940825248868160
	QUAD $0xf3a20279ed56d48a // .quad -891147053569747830
	QUAD $0x6b43527578c11110 // .quad 7729112049988473104
	QUAD $0x9845418c345644d6 // .quad -7474495936122174250
	QUAD $0x830a13896b78aaaa // .quad -9004363024039368022
	QUAD $0xbe5691ef416bd60c // .quad -4731433901725329908
	QUAD $0x23cc986bc656d554 // .quad 2579604275232953684
	QUAD $0xedec366b11c6cb8f // .quad -1302606358729274481
	QUAD $0x2cbfbe86b7ec8aa9 // .quad 3224505344041192105
	QUAD $0x94b3a202eb1c3f39 // .quad -7731658001846878407
	QUAD $0x7bf7d71432f3d6aa // .quad 8932844867666826922
	QUAD $0xb9e08a83a5e34f07 // .quad -5052886483881210105
	QUAD $0xdaf5ccd93fb0cc54 // .quad -2669001970698630060
	QUAD $0xe858ad248f5c22c9 // .quad -1704422086424124727
	QUAD $0xd1b3400f8f9cff69 // .quad -3336252463373287575
	QUAD $0x91376c36d99995be // .quad -7982792831656159810
	QUAD $0x23100809b9c21fa2 // .quad 2526528228819083170
	QUAD $0xb58547448ffffb2d // .quad -5366805021142811859
	QUAD $0xabd40a0c2832a78b // .quad -6065211750830921845
	QUAD $0xe2e69915b3fff9f9 // .quad -2096820258001126919
	QUAD $0x16c90c8f323f516d // .quad 1641857348316123501
	QUAD $0x8dd01fad907ffc3b // .quad -8228041688891786181
	QUAD $0xae3da7d97f6792e4 // .quad -5891368184943504668
	QUAD $0xb1442798f49ffb4a // .quad -5673366092687344822
	QUAD $0x99cd11cfdf41779d // .quad -7364210231179380835
	QUAD $0xdd95317f31c7fa1d // .quad -2480021597431793123
	QUAD $0x40405643d711d584 // .quad 4629795266307937668
	QUAD $0x8a7d3eef7f1cfc52 // .quad -8467542526035952558
	QUAD $0x482835ea666b2573 // .quad 5199465050656154995
	QUAD $0xad1c8eab5ee43b66 // .quad -5972742139117552794
	QUAD $0xda3243650005eed0 // .quad -2724040723534582064
	QUAD $0xd863b256369d4a40 // .quad -2854241655469553088
	QUAD $0x90bed43e40076a83 // .quad -8016736922845615485
	QUAD $0x873e4f75e2224e68 // .quad -8701430062309552536
	QUAD $0x5a7744a6e804a292 // .quad 6518754469289960082
	QUAD $0xa90de3535aaae202 // .quad -6265101559459552766
	QUAD $0x711515d0a205cb37 // .quad 8148443086612450103
	QUAD $0xd3515c2831559a83 // .quad -3219690930897053053
	QUAD $0x0d5a5b44ca873e04 // .quad 962181821410786820
	QUAD $0x8412d9991ed58091 // .quad -8929835859451740015
	QUAD $0xe858790afe9486c3 // .quad -1704479370831952189
	QUAD $0xa5178fff668ae0b6 // .quad -6550608805887287114
	QUAD $0x626e974dbe39a873 // .quad 7092772823314835571
	QUAD $0xce5d73ff402d98e3 // .quad -3576574988931720989
	QUAD $0xfb0a3d212dc81290 // .quad -357406007711231344
	QUAD $0x80fa687f881c7f8e // .quad -9152888395723407474
	QUAD $0x7ce66634bc9d0b9a // .quad 8999993282035256218
	QUAD $0xa139029f6a239f72 // .quad -6829424476226871438
	QUAD $0x1c1fffc1ebc44e81 // .quad 2026619565689294465
	QUAD $0xc987434744ac874e // .quad -3925094576856201394
	QUAD $0xa327ffb266b56221 // .quad -6690097579743157727
	QUAD $0xfbe9141915d7a922 // .quad -294682202642863838
	QUAD $0x4bf1ff9f0062baa9 // .quad 5472436080603216553
	QUAD $0x9d71ac8fada6c9b5 // .quad -7101705404292871755
	QUAD $0x6f773fc3603db4aa // .quad 8031958568804398250
	QUAD $0xc4ce17b399107c22 // .quad -4265445736938701790
	QUAD $0xcb550fb4384d21d4 // .quad -3795109844276665900
	QUAD $0xf6019da07f549b2b // .quad -720121152745989333
	QUAD $0x7e2a53a146606a49 // .quad 9091170749936331337
	QUAD $0x99c102844f94e0fb // .quad -7367604748107325189
	QUAD $0x2eda7444cbfc426e // .quad 3376138709496513134
	QUAD $0xc0314325637a1939 // .quad -4597819916706768583
	QUAD $0xfa911155fefb5309 // .quad -391512631556746487
	QUAD $0xf03d93eebc589f88 // .quad -1135588877456072824
	QUAD $0x793555ab7eba27cb // .quad 8733981247408842699
	QUAD $0x96267c7535b763b5 // .quad -7627272076051127371
	QUAD $0x4bc1558b2f3458df // .quad 5458738279630526687
	QUAD $0xbbb01b9283253ca2 // .quad -4922404076636521310
	QUAD $0x9eb1aaedfb016f17 // .quad -7011635205744005353
	QUAD $0xea9c227723ee8bcb // .quad -1541319077368263733
	QUAD $0x465e15a979c1cadd // .quad 5070514048102157021
	QUAD $0x92a1958a7675175f // .quad -7880853450996246689
	QUAD $0x0bfacd89ec191eca // .quad 863228270850154186
	QUAD $0xb749faed14125d36 // .quad -5239380795317920458
	QUAD $0xcef980ec671f667c // .quad -3532650679864695172
	QUAD $0xe51c79a85916f484 // .quad -1937539975720012668
	QUAD $0x82b7e12780e7401b // .quad -9027499368258256869
	QUAD $0x8f31cc0937ae58d2 // .quad -8128491512466089774
	QUAD $0xd1b2ecb8b0908811 // .quad -3336344095947716591
	QUAD $0xb2fe3f0b8599ef07 // .quad -5548928372155224313
	QUAD $0x861fa7e6dcb4aa16 // .quad -8782116138362033642
	QUAD $0xdfbdcece67006ac9 // .quad -2324474446766642487
	QUAD $0x67a791e093e1d49b // .quad 7469098900757009563
	QUAD $0x8bd6a141006042bd // .quad -8370325556870233411
	QUAD $0xe0c8bb2c5c6d24e1 // .quad -2249342214667950879
	QUAD $0xaecc49914078536d // .quad -5851220927660403859
	QUAD $0x58fae9f773886e19 // .quad 6411694268519837209
	QUAD $0xda7f5bf590966848 // .quad -2702340141148116920
	QUAD $0xaf39a475506a899f // .quad -5820440219632367201
	QUAD $0x888f99797a5e012d // .quad -8606491615858654931
	QUAD $0x6d8406c952429604 // .quad 7891439908798240260
	QUAD $0xaab37fd7d8f58178 // .quad -6146428501395930760
	QUAD $0xc8e5087ba6d33b84 // .quad -3970758169284363388
	QUAD $0xd5605fcdcf32e1d6 // .quad -3071349608317525546
	QUAD $0xfb1e4a9a90880a65 // .quad -351761693178066331
	QUAD $0x855c3be0a17fcd26 // .quad -8837122532839535322
	QUAD $0x5cf2eea09a550680 // .quad 6697677969404790400
	QUAD $0xa6b34ad8c9dfc06f // .quad -6434717147622031249
	QUAD $0xf42faa48c0ea481f // .quad -851274575098787809
	QUAD $0xd0601d8efc57b08b // .quad -3431710416100151157
	QUAD $0xf13b94daf124da27 // .quad -1064093218873484761
	QUAD $0x823c12795db6ce57 // .quad -9062348037703676329
	QUAD $0x76c53d08d6b70859 // .quad 8558313775058847833
	QUAD $0xa2cb1717b52481ed // .quad -6716249028702207507
	QUAD $0x54768c4b0c64ca6f // .quad 6086206200396171887
	QUAD $0xcb7ddcdda26da268 // .quad -3783625267450371480
	QUAD $0xa9942f5dcf7dfd0a // .quad -6227300304786948854
	QUAD $0xfe5d54150b090b02 // .quad -117845565885576446
	QUAD $0xd3f93b35435d7c4d // .quad -3172439362556298163
	QUAD $0x9efa548d26e5a6e1 // .quad -6991182506319567135
	QUAD $0xc47bc5014a1a6db0 // .quad -4288617610811380304
	QUAD $0xc6b8e9b0709f109a // .quad -4127292114472071014
	QUAD $0x359ab6419ca1091c // .quad 3862600023340550428
	QUAD $0xf867241c8cc6d4c0 // .quad -547429124662700864
	QUAD $0xc30163d203c94b63 // .quad -4395122007679087773
	QUAD $0x9b407691d7fc44f8 // .quad -7259672230555269896
	QUAD $0x79e0de63425dcf1e // .quad 8782263791269039902
	QUAD $0xc21094364dfb5636 // .quad -4462904269766699466
	QUAD $0x985915fc12f542e5 // .quad -7468914334623251739
	QUAD $0xf294b943e17a2bc4 // .quad -966944318780986428
	QUAD $0x3e6f5b7b17b2939e // .quad 4498915137003099038
	QUAD $0x979cf3ca6cec5b5a // .quad -7521869226879198374
	QUAD $0xa705992ceecf9c43 // .quad -6411550076227838909
	QUAD $0xbd8430bd08277231 // .quad -4790650515171610063
	QUAD $0x50c6ff782a838354 // .quad 5820620459997365076
	QUAD $0xece53cec4a314ebd // .quad -1376627125537124675
	QUAD $0xa4f8bf5635246429 // .quad -6559282480285457367
	QUAD $0x940f4613ae5ed136 // .quad -7777920981101784778
	QUAD $0x871b7795e136be9a // .quad -8711237568605798758
	QUAD $0xb913179899f68584 // .quad -5110715207949843068
	QUAD $0x28e2557b59846e40 // .quad 2946011094524915264
	QUAD $0xe757dd7ec07426e5 // .quad -1776707991509915931
	QUAD $0x331aeada2fe589d0 // .quad 3682513868156144080
	QUAD $0x9096ea6f3848984f // .quad -8027971522334779313
	QUAD $0x3ff0d2c85def7622 // .quad 4607414176811284002
	QUAD $0xb4bca50b065abe63 // .quad -5423278384491086237
	QUAD $0x0fed077a756b53aa // .quad 1147581702586717098
	QUAD $0xe1ebce4dc7f16dfb // .quad -2167411962186469893
	QUAD $0xd3e8495912c62895 // .quad -3177208890193991531
	QUAD $0x8d3360f09cf6e4bd // .quad -8272161504007625539
	QUAD $0x64712dd7abbbd95d // .quad 7237616480483531101
	QUAD $0xb080392cc4349dec // .quad -5728515861582144020
	QUAD $0xbd8d794d96aacfb4 // .quad -4788037454677749836
	QUAD $0xdca04777f541c567 // .quad -2548958808550292121
	QUAD $0xecf0d7a0fc5583a1 // .quad -1373360799919799391
	QUAD $0x89e42caaf9491b60 // .quad -8510628282985014432
	QUAD $0xf41686c49db57245 // .quad -858350499949874619
	QUAD $0xac5d37d5b79b6239 // .quad -6026599335303880135
	QUAD $0x311c2875c522ced6 // .quad 3538747893490044630
	QUAD $0xd77485cb25823ac7 // .quad -2921563150702462265
	QUAD $0x7d633293366b828c // .quad 9035120885289943692
	QUAD $0x86a8d39ef77164bc // .quad -8743505996830120772
	QUAD $0xae5dff9c02033198 // .quad -5882264492762254952
	QUAD $0xa8530886b54dbdeb // .quad -6317696477610263061
	QUAD $0xd9f57f830283fdfd // .quad -2741144597525430787
	QUAD $0xd267caa862a12d66 // .quad -3285434578585440922
	QUAD $0xd072df63c324fd7c // .quad -3426430746906788484
	QUAD $0x8380dea93da4bc60 // .quad -8970925639256982432
	QUAD $0x4247cb9e59f71e6e // .quad 4776009810824339054
	QUAD $0xa46116538d0deb78 // .quad -6601971030643840136
	QUAD $0x52d9be85f074e609 // .quad 5970012263530423817
	QUAD $0xcd795be870516656 // .quad -3640777769877412266
	QUAD $0x67902e276c921f8c // .quad 7462515329413029772
	QUAD $0x806bd9714632dff6 // .quad -9193015133814464522
	QUAD $0x00ba1cd8a3db53b7 // .quad 52386062455755703
	QUAD $0xa086cfcd97bf97f3 // .quad -6879582898840692749
	QUAD $0x80e8a40eccd228a5 // .quad -9157889458785081179
	QUAD $0xc8a883c0fdaf7df0 // .quad -3987792605123478032
	QUAD $0x6122cd128006b2ce // .quad 6999382250228200142
	QUAD $0xfad2a4b13d1b5d6c // .quad -373054737976959636
	QUAD $0x796b805720085f82 // .quad 8749227812785250178
	QUAD $0x9cc3a6eec6311a63 // .quad -7150688238876681629
	QUAD $0xcbe3303674053bb1 // .quad -3755104653863994447
	QUAD $0xc3f490aa77bd60fc // .quad -4326674280168464132
	QUAD $0xbedbfc4411068a9d // .quad -4693880817329993059
	QUAD $0xf4f1b4d515acb93b // .quad -796656831783192261
	QUAD $0xee92fb5515482d45 // .quad -1255665003235103419
	QUAD $0x991711052d8bf3c5 // .quad -7415439547505577019
	QUAD $0x751bdd152d4d1c4b // .quad 8438581409832836171
	QUAD $0xbf5cd54678eef0b6 // .quad -4657613415954583370
	QUAD $0xd262d45a78a0635e // .quad -3286831292991118498
	QUAD $0xef340a98172aace4 // .quad -1210330751515841308
	QUAD $0x86fb897116c87c35 // .quad -8720225134666286027
	QUAD $0x9580869f0e7aac0e // .quad -7673985747338482674
	QUAD $0xd45d35e6ae3d4da1 // .quad -3144297699952734815
	QUAD $0xbae0a846d2195712 // .quad -4980796165745715438
	QUAD $0x8974836059cca10a // .quad -8542058143368306422
	QUAD $0xe998d258869facd7 // .quad -1614309188754756393
	QUAD $0x2bd1a438703fc94c // .quad 3157485376071780684
	QUAD $0x91ff83775423cc06 // .quad -7926472270612804602
	QUAD $0x7b6306a34627ddd0 // .quad 8890957387685944784
	QUAD $0xb67f6455292cbf08 // .quad -5296404319838617848
	QUAD $0x1a3bc84c17b1d543 // .quad 1890324697752655171
	QUAD $0xe41f3d6a7377eeca // .quad -2008819381370884406
	QUAD $0x20caba5f1d9e4a94 // .quad 2362905872190818964
	QUAD $0x8e938662882af53e // .quad -8173041140997884610
	QUAD $0x547eb47b7282ee9d // .quad 6088502188546649757
	QUAD $0xb23867fb2a35b28d // .quad -5604615407819967859
	QUAD $0xe99e619a4f23aa44 // .quad -1612744301171463612
	QUAD $0xdec681f9f4c31f31 // .quad -2394083241347571919
	QUAD $0x6405fa00e2ec94d5 // .quad 7207441660390446293
	QUAD $0x8b3c113c38f9f37e // .quad -8413831053483314306
	QUAD $0xde83bc408dd3dd05 // .quad -2412877989897052923
	QUAD $0xae0b158b4738705e // .quad -5905602798426754978
	QUAD $0x9624ab50b148d446 // .quad -7627783505798704058
	QUAD $0xd98ddaee19068c76 // .quad -2770317479606055818
	QUAD $0x3badd624dd9b0958 // .quad 4300328673033783640
	QUAD $0x87f8a8d4cfa417c9 // .quad -8648977452394866743
	QUAD $0xe54ca5d70a80e5d7 // .quad -1923980597781273129
	QUAD $0xa9f6d30a038d1dbc // .quad -6199535797066195524
	QUAD $0x5e9fcf4ccd211f4d // .quad 6818396289628184397
	QUAD $0xd47487cc8470652b // .quad -3137733727905356501
	QUAD $0x7647c32000696720 // .quad 8522995362035230496
	QUAD $0x84c8d4dfd2c63f3b // .quad -8878612607581929669
	QUAD $0x29ecd9f40041e074 // .quad 3021029092058325108
	QUAD $0xa5fb0a17c777cf09 // .quad -6486579741050024183
	QUAD $0xf468107100525891 // .quad -835399653354481519
	QUAD $0xcf79cc9db955c2cc // .quad -3496538657885142324
	QUAD $0x7182148d4066eeb5 // .quad 8179122470161673909
	QUAD $0x81ac1fe293d599bf // .quad -9102865688819295809
	QUAD $0xc6f14cd848405531 // .quad -4111420493003729615
	QUAD $0xa21727db38cb002f // .quad -6766896092596731857
	QUAD $0xb8ada00e5a506a7d // .quad -5139275616254662019
	QUAD $0xca9cf1d206fdc03b // .quad -3846934097318526917
	QUAD $0xa6d90811f0e4851d // .quad -6424094520318327523
	QUAD $0xfd442e4688bd304a // .quad -196981603220770742
	QUAD $0x908f4a166d1da664 // .quad -8030118150397909404
	QUAD $0x9e4a9cec15763e2e // .quad -7040642529654063570
	QUAD $0x9a598e4e043287ff // .quad -7324666853212387329
	QUAD $0xc5dd44271ad3cdba // .quad -4189117143640191558
	QUAD $0x40eff1e1853f29fe // .quad 4679224488766679550
	QUAD $0xf7549530e188c128 // .quad -624710411122851544
	QUAD $0xd12bee59e68ef47d // .quad -3374341425896426371
	QUAD $0x9a94dd3e8cf578b9 // .quad -7307973034592864071
	QUAD $0x82bb74f8301958cf // .quad -9026492418826348337
	QUAD $0xc13a148e3032d6e7 // .quad -4523280274813692185
	QUAD $0xe36a52363c1faf02 // .quad -2059743486678159614
	QUAD $0xf18899b1bc3f8ca1 // .quad -1042414325089727327
	QUAD $0xdc44e6c3cb279ac2 // .quad -2574679358347699518
	QUAD $0x96f5600f15a7b7e5 // .quad -7569037980822161435
	QUAD $0x29ab103a5ef8c0ba // .quad 3002511419460075706
	QUAD $0xbcb2b812db11a5de // .quad -4849611457600313890
	QUAD $0x7415d448f6b6f0e8 // .quad 8364825292752482536
	QUAD $0xebdf661791d60f56 // .quad -1450328303573004458
	QUAD $0x111b495b3464ad22 // .quad 1232659579085827362
	QUAD $0x936b9fcebb25c995 // .quad -7823984217374209643
	QUAD $0xcab10dd900beec35 // .quad -3841273781498745803
	QUAD $0xb84687c269ef3bfb // .quad -5168294253290374149
	QUAD $0x3d5d514f40eea743 // .quad 4421779809981343555
	QUAD $0xe65829b3046b0afa // .quad -1848681798185579782
	QUAD $0x0cb4a5a3112a5113 // .quad 915538744049291539
	QUAD $0x8ff71a0fe2c2e6dc // .quad -8072955151507069220
	QUAD $0x47f0e785eaba72ac // .quad 5183897733458195116
	QUAD $0xb3f4e093db73a093 // .quad -5479507920956448621
	QUAD $0x59ed216765690f57 // .quad 6479872166822743895
	QUAD $0xe0f218b8d25088b8 // .quad -2237698882768172872
	QUAD $0x306869c13ec3532d // .quad 3488154190101041965
	QUAD $0x8c974f7383725573 // .quad -8316090829371189901
	QUAD $0x1e414218c73a13fc // .quad 2180096368813151228
	QUAD $0xafbd2350644eeacf // .quad -5783427518286599473
	QUAD $0xe5d1929ef90898fb // .quad -1886565557410948869
	QUAD $0xdbac6c247d62a583 // .quad -2617598379430861437
	QUAD $0xdf45f746b74abf3a // .quad -2358206946763686086
	QUAD $0x894bc396ce5da772 // .quad -8553528014785370254
	QUAD $0x6b8bba8c328eb784 // .quad 7749492695127472004
	QUAD $0xab9eb47c81f5114f // .quad -6080224000054324913
	QUAD $0x066ea92f3f326565 // .quad 463493832054564197
	QUAD $0xd686619ba27255a2 // .quad -2988593981640518238
	QUAD $0xc80a537b0efefebe // .quad -4032318728359182658
	QUAD $0x8613fd0145877585 // .quad -8785400266166405755
	QUAD $0xbd06742ce95f5f37 // .quad -4826042214438183113
	QUAD $0xa798fc4196e952e7 // .quad -6370064314280619289
	QUAD $0x2c48113823b73705 // .quad 3190819268807046917
	QUAD $0xd17f3b51fca3a7a0 // .quad -3350894374423386208
	QUAD $0xf75a15862ca504c6 // .quad -623161932418579258
	QUAD $0x82ef85133de648c4 // .quad -9011838011655698236
	QUAD $0x9a984d73dbe722fc // .quad -7307005235402693892
	QUAD $0xa3ab66580d5fdaf5 // .quad -6653111496142234891
	QUAD $0xc13e60d0d2e0ebbb // .quad -4522070525825979461
	QUAD $0xcc963fee10b7d1b3 // .quad -3704703351750405709
	QUAD $0x318df905079926a9 // .quad 3570783879572301481
	QUAD $0xffbbcfe994e5c61f // .quad -19193171260619233
	QUAD $0xfdf17746497f7053 // .quad -148206168962011053
	QUAD $0x9fd561f1fd0f9bd3 // .quad -6929524759678968877
	QUAD $0xfeb6ea8bedefa634 // .quad -92628855601256908
	QUAD $0xc7caba6e7c5382c8 // .quad -4050219931171323192
	QUAD $0xfe64a52ee96b8fc1 // .quad -115786069501571135
	QUAD $0xf9bd690a1b68637b // .quad -451088895536766085
	QUAD $0x3dfdce7aa3c673b1 // .quad 4466953431550423985
	QUAD $0x9c1661a651213e2d // .quad -7199459587351560659
	QUAD $0x06bea10ca65c084f // .quad 486002885505321039
	QUAD $0xc31bfa0fe5698db8 // .quad -4387638465762062920
	QUAD $0x486e494fcff30a63 // .quad 5219189625309039203
	QUAD $0xf3e2f893dec3f126 // .quad -872862063775190746
	QUAD $0x5a89dba3c3efccfb // .quad 6523987031636299003
	QUAD $0x986ddb5c6b3a76b7 // .quad -7463067817500576073
	QUAD $0xf89629465a75e01d // .quad -534194123654701027
	QUAD $0xbe89523386091465 // .quad -4717148753448332187
	QUAD $0xf6bbb397f1135824 // .quad -667742654568376284
	QUAD $0xee2ba6c0678b597f // .quad -1284749923383027329
	QUAD $0x746aa07ded582e2d // .quad 8388693718644305453
	QUAD $0x94db483840b717ef // .quad -7720497729755473937
	QUAD $0xa8c2a44eb4571cdd // .quad -6286281471915778851
	QUAD $0xba121a4650e4ddeb // .quad -5038936143766954517
	QUAD $0x92f34d62616ce414 // .quad -7857851839894723564
	QUAD $0xe896a0d7e51e1566 // .quad -1686984161281305242
	QUAD $0x77b020baf9c81d18 // .quad 8624429273841147160
	QUAD $0x915e2486ef32cd60 // .quad -7971894128441897632
	QUAD $0x0ace1474dc1d122f // .quad 778582277723329071
	QUAD $0xb5b5ada8aaff80b8 // .quad -5353181642124984136
	QUAD $0x0d819992132456bb // .quad 973227847154161339
	QUAD $0xe3231912d5bf60e6 // .quad -2079791034228842266
	QUAD $0x10e1fff697ed6c6a // .quad 1216534808942701674
	QUAD $0x8df5efabc5979c8f // .quad -8217398424034108273
	QUAD $0xca8d3ffa1ef463c2 // .quad -3851351762838199358
	QUAD $0xb1736b96b6fd83b3 // .quad -5660062011615247437
	QUAD $0xbd308ff8a6b17cb3 // .quad -4814189703547749197
	QUAD $0xddd0467c64bce4a0 // .quad -2463391496091671392
	QUAD $0xac7cb3f6d05ddbdf // .quad -6017737129434686497
	QUAD $0x8aa22c0dbef60ee4 // .quad -8457148712698376476
	QUAD $0x6bcdf07a423aa96c // .quad 7768129340171790700
	QUAD $0xad4ab7112eb3929d // .quad -5959749872445582691
	QUAD $0x86c16c98d2c953c7 // .quad -8736582398494813241
	QUAD $0xd89d64d57a607744 // .quad -2838001322129590460
	QUAD $0xe871c7bf077ba8b8 // .quad -1697355961263740744
	QUAD $0x87625f056c7c4a8b // .quad -8691279853972075893
	QUAD $0x11471cd764ad4973 // .quad 1244995533423855987
	QUAD $0xa93af6c6c79b5d2d // .quad -6252413799037706963
	QUAD $0xd598e40d3dd89bd0 // .quad -3055441601647567920
	QUAD $0xd389b47879823479 // .quad -3203831230369745799
	QUAD $0x4aff1d108d4ec2c4 // .quad 5404070034795315908
	QUAD $0x843610cb4bf160cb // .quad -8919923546622172981
	QUAD $0xcedf722a585139bb // .quad -3539985255894009413
	QUAD $0xa54394fe1eedb8fe // .quad -6538218414850328322
	QUAD $0xc2974eb4ee658829 // .quad -4424981569867511767
	QUAD $0xce947a3da6a9273e // .quad -3561087000135522498
	QUAD $0x733d226229feea33 // .quad 8303831092947774003
	QUAD $0x811ccc668829b887 // .quad -9143208402725783417
	QUAD $0x0806357d5a3f5260 // .quad 578208414664970848
	QUAD $0xa163ff802a3426a8 // .quad -6817324484979841368
	QUAD $0xca07c2dcb0cf26f8 // .quad -3888925500096174344
	QUAD $0xc9bcff6034c13052 // .quad -3909969587797413806
	QUAD $0xfc89b393dd02f0b6 // .quad -249470856692830026
	QUAD $0xfc2c3f3841f17c67 // .quad -275775966319379353
	QUAD $0xbbac2078d443ace3 // .quad -4923524589293425437
	QUAD $0x9d9ba7832936edc0 // .quad -7089889006590693952
	QUAD $0xd54b944b84aa4c0e // .quad -3077202868308390898
	QUAD $0xc5029163f384a931 // .quad -4250675239810979535
	QUAD $0x0a9e795e65d4df12 // .quad 765182433041899282
	QUAD $0xf64335bcf065d37d // .quad -701658031336336515
	QUAD $0x4d4617b5ff4a16d6 // .quad 5568164059729762006
	QUAD $0x99ea0196163fa42e // .quad -7356065297226292178
	QUAD $0x504bced1bf8e4e46 // .quad 5785945546544795206
	QUAD $0xc06481fb9bcf8d39 // .quad -4583395603105477319
	QUAD $0xe45ec2862f71e1d7 // .quad -1990940103673781801
	QUAD $0xf07da27a82c37088 // .quad -1117558485454458744
	QUAD $0x5d767327bb4e5a4d // .quad 6734696907262548557
	QUAD $0x964e858c91ba2655 // .quad -7616003081050118571
	QUAD $0x3a6a07f8d510f870 // .quad 4209185567039092848
	QUAD $0xbbe226efb628afea // .quad -4908317832885260310
	QUAD $0x890489f70a55368c // .quad -8573576096483297652
	QUAD $0xeadab0aba3b2dbe5 // .quad -1523711272679187483
	QUAD $0x2b45ac74ccea842f // .quad 3118087934678041647
	QUAD $0x92c8ae6b464fc96f // .quad -7869848573065574033
	QUAD $0x3b0b8bc90012929e // .quad 4254647968387469982
	QUAD $0xb77ada0617e3bbcb // .quad -5225624697904579637
	QUAD $0x09ce6ebb40173745 // .quad 706623942056949573
	QUAD $0xe55990879ddcaabd // .quad -1920344853953336643
	QUAD $0xcc420a6a101d0516 // .quad -3728406090856200938
	QUAD $0x8f57fa54c2a9eab6 // .quad -8117744561361917258
	QUAD $0x9fa946824a12232e // .quad -6941939825212513490
	QUAD $0xb32df8e9f3546564 // .quad -5535494683275008668
	QUAD $0x47939822dc96abfa // .quad 5157633273766521850
	QUAD $0xdff9772470297ebd // .quad -2307682335666372931
	QUAD $0x59787e2b93bc56f8 // .quad 6447041592208152312
	QUAD $0x8bfbea76c619ef36 // .quad -8359830487432564938
	QUAD $0x57eb4edb3c55b65b // .quad 6335244004343789147
	QUAD $0xaefae51477a06b03 // .quad -5838102090863318269
	QUAD $0xede622920b6b23f2 // .quad -1304317031425039374
	QUAD $0xdab99e59958885c4 // .quad -2685941595151759932
	QUAD $0xe95fab368e45ecee // .quad -1630396289281299218
	QUAD $0x88b402f7fd75539b // .quad -8596242524610931813
	QUAD $0x11dbcb0218ebb415 // .quad 1286845328412881941
	QUAD $0xaae103b5fcd2a881 // .quad -6133617137336276863
	QUAD $0xd652bdc29f26a11a // .quad -3003129357911285478
	QUAD $0xd59944a37c0752a2 // .quad -3055335403242958174
	QUAD $0x4be76d3346f04960 // .quad 5469460339465668960
	QUAD $0x857fcae62d8493a5 // .quad -8827113654667930715
	QUAD $0x6f70a4400c562ddc // .quad 8030098730593431004
	QUAD $0xa6dfbd9fb8e5b88e // .quad -6422206049907525490
	QUAD $0xcb4ccd500f6bb953 // .quad -3797434642040374957
	QUAD $0xd097ad07a71f26b2 // .quad -3416071543957018958
	QUAD $0x7e2000a41346a7a8 // .quad 9088264752731695016
	QUAD $0x825ecc24c873782f // .quad -9052573742614218705
	QUAD $0x8ed400668c0c28c9 // .quad -8154892584824854327
	QUAD $0xa2f67f2dfa90563b // .quad -6704031159840385477
	QUAD $0x728900802f0f32fb // .quad 8253128342678483707
	QUAD $0xcbb41ef979346bca // .quad -3768352931373093942
	QUAD $0x4f2b40a03ad2ffba // .quad 5704724409920716730
	QUAD $0xfea126b7d78186bc // .quad -98755145788979524
	QUAD $0xe2f610c84987bfa9 // .quad -2092466524453879895
	QUAD $0x9f24b832e6b0f436 // .quad -6979250993759194058
	QUAD $0x0dd9ca7d2df4d7ca // .quad 998051431430019018
	QUAD $0xc6ede63fa05d3143 // .quad -4112377723771604669
	QUAD $0x91503d1c79720dbc // .quad -7975807747567252036
	QUAD $0xf8a95fcf88747d94 // .quad -528786136287117932
	QUAD $0x75a44c6397ce912b // .quad 8476984389250486571
	QUAD $0x9b69dbe1b548ce7c // .quad -7248020362820530564
	QUAD $0xc986afbe3ee11abb // .quad -3925256793573221701
	QUAD $0xc24452da229b021b // .quad -4448339435098275301
	QUAD $0xfbe85badce996169 // .quad -294884973539139223
	QUAD $0xf2d56790ab41c2a2 // .quad -948738275445456222
	QUAD $0xfae27299423fb9c4 // .quad -368606216923924028
	QUAD $0x97c560ba6b0919a5 // .quad -7510490449794491995
	QUAD $0xdccd879fc967d41b // .quad -2536221894791146469
	QUAD $0xbdb6b8e905cb600f // .quad -4776427043815727089
	QUAD $0x5400e987bbc1c921 // .quad 6053094668365842721
	QUAD $0xed246723473e3813 // .quad -1358847786342270957
	QUAD $0x290123e9aab23b69 // .quad 2954682317029915497
	QUAD $0x9436c0760c86e30b // .quad -7766808894105001205
	QUAD $0xf9a0b6720aaf6522 // .quad -459166561069996766
	QUAD $0xb94470938fa89bce // .quad -5096825099203863602
	QUAD $0xf808e40e8d5b3e6a // .quad -573958201337495958
	QUAD $0xe7958cb87392c2c2 // .quad -1759345355577441598
	QUAD $0xb60b1d1230b20e05 // .quad -5329133770099257851
	QUAD $0x90bd77f3483bb9b9 // .quad -8017119874876982855
	QUAD $0xb1c6f22b5e6f48c3 // .quad -5636551615525730109
	QUAD $0xb4ecd5f01a4aa828 // .quad -5409713825168840664
	QUAD $0x1e38aeb6360b1af4 // .quad 2177682517447613172
	QUAD $0xe2280b6c20dd5232 // .quad -2150456263033662926
	QUAD $0x25c6da63c38de1b1 // .quad 2722103146809516465
	QUAD $0x8d590723948a535f // .quad -8261564192037121185
	QUAD $0x579c487e5a38ad0f // .quad 6313000485183335695
	QUAD $0xb0af48ec79ace837 // .quad -5715269221619013577
	QUAD $0x2d835a9df0c6d852 // .quad 3279564588051781714
	QUAD $0xdcdb1b2798182244 // .quad -2532400508596379068
	QUAD $0xf8e431456cf88e66 // .quad -512230283362660762
	QUAD $0x8a08f0f8bf0f156b // .quad -8500279345513818773
	QUAD $0x1b8e9ecb641b5900 // .quad 1985699082112030976
	QUAD $0xac8b2d36eed2dac5 // .quad -6013663163464885563
	QUAD $0xe272467e3d222f40 // .quad -2129562165787349184
	QUAD $0xd7adf884aa879177 // .quad -2905392935903719049
	QUAD $0x5b0ed81dcc6abb10 // .quad 6561419329620589328
	QUAD $0x86ccbb52ea94baea // .quad -8733399612580906262
	QUAD $0x98e947129fc2b4ea // .quad -7428327965055601430
	QUAD $0xa87fea27a539e9a5 // .quad -6305063497298744923
	QUAD $0x3f2398d747b36225 // .quad 4549648098962661925
	QUAD $0xd29fe4b18e88640e // .quad -3269643353196043250
	QUAD $0x8eec7f0d19a03aae // .quad -8147997931578836306
	QUAD $0x83a3eeeef9153e89 // .quad -8961056123388608887
	QUAD $0x1953cf68300424ad // .quad 1825030320404309165
	QUAD $0xa48ceaaab75a8e2b // .quad -6589634135808373205
	QUAD $0x5fa8c3423c052dd8 // .quad 6892973918932774360
	QUAD $0xcdb02555653131b6 // .quad -3625356651333078602
	QUAD $0x3792f412cb06794e // .quad 4004531380238580046
	QUAD $0x808e17555f3ebf11 // .quad -9183376934724255983
	QUAD $0xe2bbd88bbee40bd1 // .quad -2108853905778275375
	QUAD $0xa0b19d2ab70e6ed6 // .quad -6867535149977932074
	QUAD $0x5b6aceaeae9d0ec5 // .quad 6587304654631931589
	QUAD $0xc8de047564d20a8b // .quad -3972732919045027189
	QUAD $0xf245825a5a445276 // .quad -989241218564861322
	QUAD $0xfb158592be068d2e // .quad -354230130378896082
	QUAD $0xeed6e2f0f0d56713 // .quad -1236551523206076653
	QUAD $0x9ced737bb6c4183d // .quad -7138922859127891907
	QUAD $0x55464dd69685606c // .quad 6144684325637283948
	QUAD $0xc428d05aa4751e4c // .quad -4311967555482476980
	QUAD $0xaa97e14c3c26b887 // .quad -6154202648235558777
	QUAD $0xf53304714d9265df // .quad -778273425925708321
	QUAD $0xd53dd99f4b3066a9 // .quad -3081067291867060567
	QUAD $0x993fe2c6d07b7fab // .quad -7403949918844649557
	QUAD $0xe546a8038efe402a // .quad -1925667057416912854
	QUAD $0xbf8fdb78849a5f96 // .quad -4643251380128424042
	QUAD $0xde98520472bdd034 // .quad -2407083821771141068
	QUAD $0xef73d256a5c0f77c // .quad -1192378206733142148
	QUAD $0x963e66858f6d4441 // .quad -7620540795641314239
	QUAD $0x95a8637627989aad // .quad -7662765406849295699
	QUAD $0xdde7001379a44aa9 // .quad -2456994988062127447
	QUAD $0xbb127c53b17ec159 // .quad -4966770740134231719
	QUAD $0x5560c018580d5d53 // .quad 6152128301777116499
	QUAD $0xe9d71b689dde71af // .quad -1596777406740401745
	QUAD $0xaab8f01e6e10b4a7 // .quad -6144897678060768089
	QUAD $0x9226712162ab070d // .quad -7915514906853832947
	QUAD $0xcab3961304ca70e9 // .quad -3840561048787980055
	QUAD $0xb6b00d69bb55c8d1 // .quad -5282707615139903279
	QUAD $0x3d607b97c5fd0d23 // .quad 4422670725869800739
	QUAD $0xe45c10c42a2b3b05 // .quad -1991698500497491195
	QUAD $0x8cb89a7db77c506b // .quad -8306719647944912789
	QUAD $0x8eb98a7a9a5b04e3 // .quad -8162340590452013853
	QUAD $0x77f3608e92adb243 // .quad 8643358275316593219
	QUAD $0xb267ed1940f1c61c // .quad -5591239719637629412
	QUAD $0x55f038b237591ed4 // .quad 6192511825718353620
	QUAD $0xdf01e85f912e37a3 // .quad -2377363631119648861
	QUAD $0x6b6c46dec52f6689 // .quad 7740639782147942025
	QUAD $0x8b61313bbabce2c6 // .quad -8403381297090862394
	QUAD $0x2323ac4b3b3da016 // .quad 2532056854628769814
	QUAD $0xae397d8aa96c1b77 // .quad -5892540602936190089
	QUAD $0xabec975e0a0d081b // .quad -6058300968568813541
	QUAD $0xd9c7dced53c72255 // .quad -2753989735242849707
	QUAD $0x96e7bd358c904a22 // .quad -7572876210711016926
	QUAD $0x881cea14545c7575 // .quad -8638772612167862923
	QUAD $0x7e50d64177da2e55 // .quad 9102010423587778133
	QUAD $0xaa242499697392d2 // .quad -6186779746782440750
	QUAD $0xdde50bd1d5d0b9ea // .quad -2457545025797441046
	QUAD $0xd4ad2dbfc3d07787 // .quad -3121788665050663033
	QUAD $0x955e4ec64b44e865 // .quad -7683617300674189211
	QUAD $0x84ec3c97da624ab4 // .quad -8868646943297746252
	QUAD $0xbd5af13bef0b113f // .quad -4802260812921368257
	QUAD $0xa6274bbdd0fadd61 // .quad -6474122660694794911
	QUAD $0xecb1ad8aeacdd58f // .quad -1391139997724322417
	QUAD $0xcfb11ead453994ba // .quad -3480967307441105734
	QUAD $0x67de18eda5814af3 // .quad 7484447039699372787
	QUAD $0x81ceb32c4b43fcf4 // .quad -9093133594791772940
	QUAD $0x80eacf948770ced8 // .quad -9157278655470055720
	QUAD $0xa2425ff75e14fc31 // .quad -6754730975062328271
	QUAD $0xa1258379a94d028e // .quad -6834912300910181746
	QUAD $0xcad2f7f5359a3b3e // .quad -3831727700400522434
	QUAD $0x096ee45813a04331 // .quad 679731660717048625
	QUAD $0xfd87b5f28300ca0d // .quad -177973607073265139
	QUAD $0x8bca9d6e188853fd // .quad -8373707460958465027
	QUAD $0x9e74d1b791e07e48 // .quad -7028762532061872568
	QUAD $0x775ea264cf55347e // .quad 8601490892183123070
	QUAD $0xc612062576589dda // .quad -4174267146649952806
	QUAD $0x95364afe032a819e // .quad -7694880458480647778
	QUAD $0xf79687aed3eec551 // .quad -606147914885053103
	QUAD $0x3a83ddbd83f52205 // .quad 4216457482181353989
	QUAD $0x9abe14cd44753b52 // .quad -7296371474444240046
	QUAD $0xc4926a9672793543 // .quad -4282243101277735613
	QUAD $0xc16d9a0095928a27 // .quad -4508778324627912153
	QUAD $0x75b7053c0f178294 // .quad 8482254178684994196
	QUAD $0xf1c90080baf72cb1 // .quad -1024286887357502287
	QUAD $0x5324c68b12dd6339 // .quad 5991131704928854841
	QUAD $0x971da05074da7bee // .quad -7557708332239520786
	QUAD $0xd3f6fc16ebca5e04 // .quad -3173071712060547580
	QUAD $0xbce5086492111aea // .quad -4835449396872013078
	QUAD $0x88f4bb1ca6bcf585 // .quad -8578025658503072379
	QUAD $0xec1e4a7db69561a5 // .quad -1432625727662628443
	QUAD $0x2b31e9e3d06c32e6 // .quad 3112525982153323238
	QUAD $0x9392ee8e921d5d07 // .quad -7812920107430224633
	QUAD $0x3aff322e62439fd0 // .quad 4251171748059520976
	QUAD $0xb877aa3236a4b449 // .quad -5154464115860392887
	QUAD $0x09befeb9fad487c3 // .quad 702278666647013315
	QUAD $0xe69594bec44de15b // .quad -1831394126398103205
	QUAD $0x4c2ebe687989a9b4 // .quad 5489534351736154548
	QUAD $0x901d7cf73ab0acd9 // .quad -8062150356639896359
	QUAD $0x0f9d37014bf60a11 // .quad 1125115960621402641
	QUAD $0xb424dc35095cd80f // .quad -5466001927372482545
	QUAD $0x538484c19ef38c95 // .quad 6018080969204141205
	QUAD $0xe12e13424bb40e13 // .quad -2220816390788215277
	QUAD $0x2865a5f206b06fba // .quad 2910915193077788602
	QUAD $0x8cbccc096f5088cb // .quad -8305539271883716405
	QUAD $0xf93f87b7442e45d4 // .quad -486521013540076076
	QUAD $0xafebff0bcb24aafe // .quad -5770238071427257602
	QUAD $0xf78f69a51539d749 // .quad -608151266925095095
	QUAD $0xdbe6fecebdedd5be // .quad -2601111570856684098
	QUAD $0xb573440e5a884d1c // .quad -5371875102083756772
	QUAD $0x89705f4136b4a597 // .quad -8543223759426509417
	QUAD $0x31680a88f8953031 // .quad 3560107088838733873
	QUAD $0xabcc77118461cefc // .quad -6067343680855748868
	QUAD $0xfdc20d2b36ba7c3e // .quad -161552157378970562
	QUAD $0xd6bf94d5e57a42bc // .quad -2972493582642298180
	QUAD $0x3d32907604691b4d // .quad 4409745821703674701
	QUAD $0x8637bd05af6c69b5 // .quad -8775337516792518219
	QUAD $0xa63f9a49c2c1b110 // .quad -6467280898289979120
	QUAD $0xa7c5ac471b478423 // .quad -6357485877563259869
	QUAD $0x0fcf80dc33721d54 // .quad 1139270913992301908
	QUAD $0xd1b71758e219652b // .quad -3335171328526686933
	QUAD $0xd3c36113404ea4a9 // .quad -3187597375937010519
	QUAD $0x83126e978d4fdf3b // .quad -9002011107970261189
	QUAD $0x645a1cac083126ea // .quad 7231123676894144234
	QUAD $0xa3d70a3d70a3d70a // .quad -6640827866535438582
	QUAD $0x3d70a3d70a3d70a4 // .quad 4427218577690292388
	QUAD $0xcccccccccccccccc // .quad -3689348814741910324
	QUAD $0xcccccccccccccccd // .quad -3689348814741910323
	QUAD $0x8000000000000000 // .quad -9223372036854775808
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xa000000000000000 // .quad -6917529027641081856
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xc800000000000000 // .quad -4035225266123964416
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xfa00000000000000 // .quad -432345564227567616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0x9c40000000000000 // .quad -7187745005283311616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xc350000000000000 // .quad -4372995238176751616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xf424000000000000 // .quad -854558029293551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0x9896800000000000 // .quad -7451627795949551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xbebc200000000000 // .quad -4702848726509551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xee6b280000000000 // .quad -1266874889709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0x9502f90000000000 // .quad -7709325833709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xba43b74000000000 // .quad -5024971273709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xe8d4a51000000000 // .quad -1669528073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0x9184e72a00000000 // .quad -7960984073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xb5e620f480000000 // .quad -5339544073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xe35fa931a0000000 // .quad -2062744073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0x8e1bc9bf04000000 // .quad -8206744073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xb1a2bc2ec5000000 // .quad -5646744073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xde0b6b3a76400000 // .quad -2446744073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0x8ac7230489e80000 // .quad -8446744073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xad78ebc5ac620000 // .quad -5946744073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xd8d726b7177a8000 // .quad -2821744073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0x878678326eac9000 // .quad -8681119073709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xa968163f0a57b400 // .quad -6239712823709551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xd3c21bcecceda100 // .quad -3187955011209551616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0x84595161401484a0 // .quad -8910000909647051616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xa56fa5b99019a5c8 // .quad -6525815118631426616
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0xcecb8f27f4200f3a // .quad -3545582879861895366
	QUAD $0x0000000000000000 // .quad 0
	QUAD $0x813f3978f8940984 // .quad -9133518327554766460
	QUAD $0x4000000000000000 // .quad 4611686018427387904
	QUAD $0xa18f07d736b90be5 // .quad -6805211891016070171
	QUAD $0x5000000000000000 // .quad 5764607523034234880
	QUAD $0xc9f2c9cd04674ede // .quad -3894828845342699810
	QUAD $0xa400000000000000 // .quad -6629298651489370112
	QUAD $0xfc6f7c4045812296 // .quad -256850038250986858
	QUAD $0x4d00000000000000 // .quad 5548434740920451072
	QUAD $0x9dc5ada82b70b59d // .quad -7078060301547948643
	QUAD $0xf020000000000000 // .quad -1143914305352105984
	QUAD $0xc5371912364ce305 // .quad -4235889358507547899
	QUAD $0x6c28000000000000 // .quad 7793479155164643328
	QUAD $0xf684df56c3e01bc6 // .quad -683175679707046970
	QUAD $0xc732000000000000 // .quad -4093209111326359552
	QUAD $0x9a130b963a6c115c // .quad -7344513827457986212
	QUAD $0x3c7f400000000000 // .quad 4359273333062107136
	QUAD $0xc097ce7bc90715b3 // .quad -4568956265895094861
	QUAD $0x4b9f100000000000 // .quad 5449091666327633920
	QUAD $0xf0bdc21abb48db20 // .quad -1099509313941480672
	QUAD $0x1e86d40000000000 // .quad 2199678564482154496
	QUAD $0x96769950b50d88f4 // .quad -7604722348854507276
	QUAD $0x1314448000000000 // .quad 1374799102801346560
	QUAD $0xbc143fa4e250eb31 // .quad -4894216917640746191
	QUAD $0x17d955a000000000 // .quad 1718498878501683200
	QUAD $0xeb194f8e1ae525fd // .quad -1506085128623544835
	QUAD $0x5dcfab0800000000 // .quad 6759809616554491904
	QUAD $0x92efd1b8d0cf37be // .quad -7858832233030797378
	QUAD $0x5aa1cae500000000 // .quad 6530724019560251392
	QUAD $0xb7abc627050305ad // .quad -5211854272861108819
	QUAD $0xf14a3d9e40000000 // .quad -1059967012404461568
	QUAD $0xe596b7b0c643c719 // .quad -1903131822648998119
	QUAD $0x6d9ccd05d0000000 // .quad 7898413271349198848
	QUAD $0x8f7e32ce7bea5c6f // .quad -8106986416796705681
	QUAD $0xe4820023a2000000 // .quad -1981020733047832576
	QUAD $0xb35dbf821ae4f38b // .quad -5522047002568494197
	QUAD $0xdda2802c8a800000 // .quad -2476275916309790720
	QUAD $0xe0352f62a19e306e // .quad -2290872734783229842
	QUAD $0xd50b2037ad200000 // .quad -3095344895387238400
	QUAD $0x8c213d9da502de45 // .quad -8349324486880600507
	QUAD $0x4526f422cc340000 // .quad 4982938468024057856
	QUAD $0xaf298d050e4395d6 // .quad -5824969590173362730
	QUAD $0x9670b12b7f410000 // .quad -7606384970252091392
	QUAD $0xdaf3f04651d47b4c // .quad -2669525969289315508
	QUAD $0x3c0cdd765f114000 // .quad 4327076842467049472
	QUAD $0x88d8762bf324cd0f // .quad -8585982758446904049
	QUAD $0xa5880a69fb6ac800 // .quad -6518949010312869888
	QUAD $0xab0e93b6efee0053 // .quad -6120792429631242157
	QUAD $0x8eea0d047a457a00 // .quad -8148686262891087360
	QUAD $0xd5d238a4abe98068 // .quad -3039304518611664792
	QUAD $0x72a4904598d6d880 // .quad 8260886245095692416
	QUAD $0x85a36366eb71f041 // .quad -8817094351773372351
	QUAD $0x47a6da2b7f864750 // .quad 5163053903184807760
	QUAD $0xa70c3c40a64e6c51 // .quad -6409681921289327535
	QUAD $0x999090b65f67d924 // .quad -7381240676301154012
	QUAD $0xd0cf4b50cfe20765 // .quad -3400416383184271515
	QUAD $0xfff4b4e3f741cf6d // .quad -3178808521666707
	QUAD $0x82818f1281ed449f // .quad -9042789267131251553
	QUAD $0xbff8f10e7a8921a5 // .quad -4613672773753429595
	QUAD $0xa321f2d7226895c7 // .quad -6691800565486676537
	QUAD $0xaff72d52192b6a0e // .quad -5767090967191786994
	QUAD $0xcbea6f8ceb02bb39 // .quad -3753064688430957767
	QUAD $0x9bf4f8a69f764491 // .quad -7208863708989733743
	QUAD $0xfee50b7025c36a08 // .quad -79644842111309304
	QUAD $0x02f236d04753d5b5 // .quad 212292400617608629
	QUAD $0x9f4f2726179a2245 // .quad -6967307053960650171
	QUAD $0x01d762422c946591 // .quad 132682750386005393
	QUAD $0xc722f0ef9d80aad6 // .quad -4097447799023424810
	QUAD $0x424d3ad2b7b97ef6 // .quad 4777539456409894646
	QUAD $0xf8ebad2b84e0d58b // .quad -510123730351893109
	QUAD $0xd2e0898765a7deb3 // .quad -3251447716342407501
	QUAD $0x9b934c3b330c8577 // .quad -7236356359111015049
	QUAD $0x63cc55f49f88eb30 // .quad 7191217214140771120
	QUAD $0xc2781f49ffcfa6d5 // .quad -4433759430461380907
	QUAD $0x3cbf6b71c76b25fc // .quad 4377335499248575996
	QUAD $0xf316271c7fc3908a // .quad -930513269649338230
	QUAD $0x8bef464e3945ef7b // .quad -8363388681221443717
	QUAD $0x97edd871cfda3a56 // .quad -7499099821171918250
	QUAD $0x97758bf0e3cbb5ad // .quad -7532960934977096275
	QUAD $0xbde94e8e43d0c8ec // .quad -4762188758037509908
	QUAD $0x3d52eeed1cbea318 // .quad 4418856886560793368
	QUAD $0xed63a231d4c4fb27 // .quad -1341049929119499481
	QUAD $0x4ca7aaa863ee4bde // .quad 5523571108200991710
	QUAD $0x945e455f24fb1cf8 // .quad -7755685233340769032
	QUAD $0x8fe8caa93e74ef6b // .quad -8076983103442849941
	QUAD $0xb975d6b6ee39e436 // .quad -5082920523248573386
	QUAD $0xb3e2fd538e122b45 // .quad -5484542860876174523
	QUAD $0xe7d34c64a9c85d44 // .quad -1741964635633328828
	QUAD $0x60dbbca87196b617 // .quad 6979379479186945559
	QUAD $0x90e40fbeea1d3a4a // .quad -8006256924911912374
	QUAD $0xbc8955e946fe31ce // .quad -4861259862362934834
	QUAD $0xb51d13aea4a488dd // .quad -5396135137712502563
	QUAD $0x6babab6398bdbe42 // .quad 7758483227328495170
	QUAD $0xe264589a4dcdab14 // .quad -2133482903713240300
	QUAD $0xc696963c7eed2dd2 // .quad -4136954021121544750
	QUAD $0x8d7eb76070a08aec // .quad -8250955842461857044
	QUAD $0xfc1e1de5cf543ca3 // .quad -279753253987271517
	QUAD $0xb0de65388cc8ada8 // .quad -5702008784649933400
	QUAD $0x3b25a55f43294bcc // .quad 4261994450943298508
	QUAD $0xdd15fe86affad912 // .quad -2515824962385028846
	QUAD $0x49ef0eb713f39ebf // .quad 5327493063679123135
	QUAD $0x8a2dbf142dfcc7ab // .quad -8489919629131724885
	QUAD $0x6e3569326c784338 // .quad 7941369183226839864
	QUAD $0xacb92ed9397bf996 // .quad -6000713517987268202
	QUAD $0x49c2c37f07965405 // .quad 5315025460606161925
	QUAD $0xd7e77a8f87daf7fb // .quad -2889205879056697349
	QUAD $0xdc33745ec97be907 // .quad -2579590211097073401
	QUAD $0x86f0ac99b4e8dafd // .quad -8723282702051517699
	QUAD $0x69a028bb3ded71a4 // .quad 7611128154919104932
	QUAD $0xa8acd7c0222311bc // .quad -6292417359137009220
	QUAD $0xc40832ea0d68ce0d // .quad -4321147861633282547
	QUAD $0xd2d80db02aabd62b // .quad -3253835680493873621
	QUAD $0xf50a3fa490c30191 // .quad -789748808614215279
	QUAD $0x83c7088e1aab65db // .quad -8951176327949752869
	QUAD $0x792667c6da79e0fb // .quad 8729779031470891259
	QUAD $0xa4b8cab1a1563f52 // .quad -6577284391509803182
	QUAD $0x577001b891185939 // .quad 6300537770911226169
	QUAD $0xcde6fd5e09abcf26 // .quad -3609919470959866074
	QUAD $0xed4c0226b55e6f87 // .quad -1347699823215743097
	QUAD $0x80b05e5ac60b6178 // .quad -9173728696990998152
	QUAD $0x544f8158315b05b5 // .quad 6075216638131242421
	QUAD $0xa0dc75f1778e39d6 // .quad -6855474852811359786
	QUAD $0x696361ae3db1c722 // .quad 7594020797664053026
	QUAD $0xc913936dd571c84c // .quad -3957657547586811828
	QUAD $0x03bc3a19cd1e38ea // .quad 269153960225290474
	QUAD $0xfb5878494ace3a5f // .quad -335385916056126881
	QUAD $0x04ab48a04065c724 // .quad 336442450281613092
	QUAD $0x9d174b2dcec0e47b // .quad -7127145225176161157
	QUAD $0x62eb0d64283f9c77 // .quad 7127805559067090039
	QUAD $0xc45d1df942711d9a // .quad -4297245513042813542
	QUAD $0x3ba5d0bd324f8395 // .quad 4298070930406474645
	QUAD $0xf5746577930d6500 // .quad -759870872876129024
	QUAD $0xca8f44ec7ee3647a // .quad -3850783373846682502
	QUAD $0x9968bf6abbe85f20 // .quad -7392448323188662496
	QUAD $0x7e998b13cf4e1ecc // .quad 9122475437414293196
	QUAD $0xbfc2ef456ae276e8 // .quad -4628874385558440216
	QUAD $0x9e3fedd8c321a67f // .quad -7043649776941685121
	QUAD $0xefb3ab16c59b14a2 // .quad -1174406963520662366
	QUAD $0xc5cfe94ef3ea101f // .quad -4192876202749718497
	QUAD $0x95d04aee3b80ece5 // .quad -7651533379841495835
	QUAD $0xbba1f1d158724a13 // .quad -4926390635932268013
	QUAD $0xbb445da9ca61281f // .quad -4952730706374481889
	QUAD $0x2a8a6e45ae8edc98 // .quad 3065383741939440792
	QUAD $0xea1575143cf97226 // .quad -1579227364540714458
	QUAD $0xf52d09d71a3293be // .quad -779956341003086914
	QUAD $0x924d692ca61be758 // .quad -7904546130479028392
	QUAD $0x593c2626705f9c57 // .quad 6430056314514152535
	QUAD $0xb6e0c377cfa2e12e // .quad -5268996644671397586
	QUAD $0x6f8b2fb00c77836d // .quad 8037570393142690669
	QUAD $0xe498f455c38b997a // .quad -1974559787411859078
	QUAD $0x0b6dfb9c0f956448 // .quad 823590954573587528
	QUAD $0x8edf98b59a373fec // .quad -8151628894773493780
	QUAD $0x4724bd4189bd5ead // .quad 5126430365035880109
	QUAD $0xb2977ee300c50fe7 // .quad -5577850100039479321
	QUAD $0x58edec91ec2cb658 // .quad 6408037956294850136
	QUAD $0xdf3d5e9bc0f653e1 // .quad -2360626606621961247
	QUAD $0x2f2967b66737e3ee // .quad 3398361426941174766
	QUAD $0x8b865b215899f46c // .quad -8392920656779807636
	QUAD $0xbd79e0d20082ee75 // .quad -4793553135802847627
	QUAD $0xae67f1e9aec07187 // .quad -5879464802547371641
	QUAD $0xecd8590680a3aa12 // .quad -1380255401326171630
	QUAD $0xda01ee641a708de9 // .quad -2737644984756826647
	QUAD $0xe80e6f4820cc9496 // .quad -1725319251657714538
	QUAD $0x884134fe908658b2 // .quad -8628557143114098510
	QUAD $0x3109058d147fdcde // .quad 3533361486141316318
	QUAD $0xaa51823e34a7eede // .quad -6174010410465235234
	QUAD $0xbd4b46f0599fd416 // .quad -4806670179178130410
	QUAD $0xd4e5e2cdc1d1ea96 // .quad -3105826994654156138
	QUAD $0x6c9e18ac7007c91b // .quad 7826720331309500699
	QUAD $0x850fadc09923329e // .quad -8858670899299929442
	QUAD $0x03e2cf6bc604ddb1 // .quad 280014188641050033
	QUAD $0xa6539930bf6bff45 // .quad -6461652605697523899
	QUAD $0x84db8346b786151d // .quad -8873354301053463267
	QUAD $0xcfe87f7cef46ff16 // .quad -3465379738694516970
	QUAD $0xe612641865679a64 // .quad -1868320839462053276
	QUAD $0x81f14fae158c5f6e // .quad -9083391364325154962
	QUAD $0x4fcb7e8f3f60c07f // .quad 5749828502977298559
	QUAD $0xa26da3999aef7749 // .quad -6742553186979055799
	QUAD $0xe3be5e330f38f09e // .quad -2036086408133152610
	QUAD $0xcb090c8001ab551c // .quad -3816505465296431844
	QUAD $0x5cadf5bfd3072cc6 // .quad 6678264026688335046
	QUAD $0xfdcb4fa002162a63 // .quad -158945813193151901
	QUAD $0x73d9732fc7c8f7f7 // .quad 8347830033360418807
	QUAD $0x9e9f11c4014dda7e // .quad -7016870160886801794
	QUAD $0x2867e7fddcdd9afb // .quad 2911550761636567803
	QUAD $0xc646d63501a1511d // .quad -4159401682681114339
	QUAD $0xb281e1fd541501b9 // .quad -5583933584809066055
	QUAD $0xf7d88bc24209a565 // .quad -587566084924005019
	QUAD $0x1f225a7ca91a4227 // .quad 2243455055843443239
	QUAD $0x9ae757596946075f // .quad -7284757830718584993
	QUAD $0x3375788de9b06959 // .quad 3708002419115845977
	QUAD $0xc1a12d2fc3978937 // .quad -4494261269970843337
	QUAD $0x0052d6b1641c83af // .quad 23317005467419567
	QUAD $0xf209787bb47d6b84 // .quad -1006140569036166268
	QUAD $0xc0678c5dbd23a49b // .quad -4582539761593113445
	QUAD $0x9745eb4d50ce6332 // .quad -7546366883288685774
	QUAD $0xf840b7ba963646e1 // .quad -558244341782001951
	QUAD $0xbd176620a501fbff // .quad -4821272585683469313
	QUAD $0xb650e5a93bc3d899 // .quad -5309491445654890343
	QUAD $0xec5d3fa8ce427aff // .quad -1414904713676948737
	QUAD $0xa3e51f138ab4cebf // .quad -6636864307068612929
	QUAD $0x93ba47c980e98cdf // .quad -7801844473689174817
	QUAD $0xc66f336c36b10138 // .quad -4148040191917883080
	QUAD $0xb8a8d9bbe123f017 // .quad -5140619573684080617
	QUAD $0xb80b0047445d4185 // .quad -5185050239897353851
	QUAD $0xe6d3102ad96cec1d // .quad -1814088448677712867
	QUAD $0xa60dc059157491e6 // .quad -6481312799871692314
	QUAD $0x9043ea1ac7e41392 // .quad -8051334308064652398
	QUAD $0x87c89837ad68db30 // .quad -8662506518347195600
	QUAD $0xb454e4a179dd1877 // .quad -5452481866653427593
	QUAD $0x29babe4598c311fc // .quad 3006924907348169212
	QUAD $0xe16a1dc9d8545e94 // .quad -2203916314889396588
	QUAD $0xf4296dd6fef3d67b // .quad -853029884242176389
	QUAD $0x8ce2529e2734bb1d // .quad -8294976724446954723
	QUAD $0x1899e4a65f58660d // .quad 1772699331562333709
	QUAD $0xb01ae745b101e9e4 // .quad -5757034887131305500
	QUAD $0x5ec05dcff72e7f90 // .quad 6827560182880305040
	QUAD $0xdc21a1171d42645d // .quad -2584607590486743971
	QUAD $0x76707543f4fa1f74 // .quad 8534450228600381300
	QUAD $0x899504ae72497eba // .quad -8532908771695296838
	QUAD $0x6a06494a791c53a9 // .quad 7639874402088932265
	QUAD $0xabfa45da0edbde69 // .quad -6054449946191733143
	QUAD $0x0487db9d17636893 // .quad 326470965756389523
	QUAD $0xd6f8d7509292d603 // .quad -2956376414312278525
	QUAD $0x45a9d2845d3c42b7 // .quad 5019774725622874807
	QUAD $0x865b86925b9bc5c2 // .quad -8765264286586255934
	QUAD $0x0b8a2392ba45a9b3 // .quad 831516194300602803
	QUAD $0xa7f26836f282b732 // .quad -6344894339805432014
	QUAD $0x8e6cac7768d7141f // .quad -8183976793979022305
	QUAD $0xd1ef0244af2364ff // .quad -3319431906329402113
	QUAD $0x3207d795430cd927 // .quad 3605087062808385831
	QUAD $0x8335616aed761f1f // .quad -8992173969096958177
	QUAD $0x7f44e6bd49e807b9 // .quad 9170708441896323001
	QUAD $0xa402b9c5a8d3a6e7 // .quad -6628531442943809817
	QUAD $0x5f16206c9c6209a7 // .quad 6851699533943015847
	QUAD $0xcd036837130890a1 // .quad -3673978285252374367
	QUAD $0x36dba887c37a8c10 // .quad 3952938399001381904
	QUAD $0x802221226be55a64 // .quad -9213765455923815836
	QUAD $0xc2494954da2c978a // .quad -4446942528265218166
	QUAD $0xa02aa96b06deb0fd // .quad -6905520801477381891
	QUAD $0xf2db9baa10b7bd6d // .quad -946992141904134803
	QUAD $0xc83553c5c8965d3d // .quad -4020214983419339459
	QUAD $0x6f92829494e5acc8 // .quad 8039631859474607304
	QUAD $0xfa42a8b73abbf48c // .quad -413582710846786420
	QUAD $0xcb772339ba1f17fa // .quad -3785518230938904582
	QUAD $0x9c69a97284b578d7 // .quad -7176018221920323369
	QUAD $0xff2a760414536efc // .quad -60105885123121412
	QUAD $0xc38413cf25e2d70d // .quad -4358336758973016307
	QUAD $0xfef5138519684abb // .quad -75132356403901765
	QUAD $0xf46518c2ef5b8cd1 // .quad -836234930288882479
	QUAD $0x7eb258665fc25d6a // .quad 9129456591349898602
	QUAD $0x98bf2f79d5993802 // .quad -7440175859071633406
	QUAD $0xef2f773ffbd97a62 // .quad -1211618658047395230
	QUAD $0xbeeefb584aff8603 // .quad -4688533805412153853
	QUAD $0xaafb550ffacfd8fb // .quad -6126209340986631941
	QUAD $0xeeaaba2e5dbf6784 // .quad -1248981238337804412
	QUAD $0x95ba2a53f983cf39 // .quad -7657761676233289927
	QUAD $0x952ab45cfa97a0b2 // .quad -7698142301602209614
	QUAD $0xdd945a747bf26184 // .quad -2480258038432112252
	QUAD $0xba756174393d88df // .quad -5010991858575374113
	QUAD $0x94f971119aeef9e5 // .quad -7712008566467528219
	QUAD $0xe912b9d1478ceb17 // .quad -1652053804791829737
	QUAD $0x7a37cd5601aab85e // .quad 8806733365625141342
	QUAD $0x91abb422ccb812ee // .quad -7950062655635975442
	QUAD $0xac62e055c10ab33b // .quad -6025006692552756421
	QUAD $0xb616a12b7fe617aa // .quad -5325892301117581398
	QUAD $0x577b986b314d600a // .quad 6303799689591218186
	QUAD $0xe39c49765fdf9d94 // .quad -2045679357969588844
	QUAD $0xed5a7e85fda0b80c // .quad -1343622424865753076
	QUAD $0x8e41ade9fbebc27d // .quad -8196078626372074883
	QUAD $0x14588f13be847308 // .quad 1466078993672598280
	QUAD $0xb1d219647ae6b31c // .quad -5633412264537705700
	QUAD $0x596eb2d8ae258fc9 // .quad 6444284760518135753
	QUAD $0xde469fbd99a05fe3 // .quad -2430079312244744221
	QUAD $0x6fca5f8ed9aef3bc // .quad 8055355950647669692
	QUAD $0x8aec23d680043bee // .quad -8436328597794046994
	QUAD $0x25de7bb9480d5855 // .quad 2728754459941099605
	QUAD $0xada72ccc20054ae9 // .quad -5933724728815170839
	QUAD $0xaf561aa79a10ae6b // .quad -5812428961928401301
	QUAD $0xd910f7ff28069da4 // .quad -2805469892591575644
	QUAD $0x1b2ba1518094da05 // .quad 1957835834444274181
	QUAD $0x87aa9aff79042286 // .quad -8670947710510816634
	QUAD $0x90fb44d2f05d0843 // .quad -7999724640327104445
	QUAD $0xa99541bf57452b28 // .quad -6226998619711132888
	QUAD $0x353a1607ac744a54 // .quad 3835402254873283156
	QUAD $0xd3fa922f2d1675f2 // .quad -3172062256211528206
	QUAD $0x42889b8997915ce9 // .quad 4794252818591603945
	QUAD $0x847c9b5d7c2e09b7 // .quad -8900067937773286985
	QUAD $0x69956135febada12 // .quad 7608094030047140370
	QUAD $0xa59bc234db398c25 // .quad -6513398903789220827
	QUAD $0x43fab9837e699096 // .quad 4898431519131537558
	QUAD $0xcf02b2c21207ef2e // .quad -3530062611309138130
	QUAD $0x94f967e45e03f4bc // .quad -7712018656367741764
	QUAD $0x8161afb94b44f57d // .quad -9123818159709293187
	QUAD $0x1d1be0eebac278f6 // .quad 2097517367411243254
	QUAD $0xa1ba1ba79e1632dc // .quad -6793086681209228580
	QUAD $0x6462d92a69731733 // .quad 7233582727691441971
	QUAD $0xca28a291859bbf93 // .quad -3879672333084147821
	QUAD $0x7d7b8f7503cfdcff // .quad 9041978409614302463
	QUAD $0xfcb2cb35e702af78 // .quad -237904397927796872
	QUAD $0x5cda735244c3d43f // .quad 6690786993590490175
	QUAD $0x9defbf01b061adab // .quad -7066219276345954901
	QUAD $0x3a0888136afa64a8 // .quad 4181741870994056360
	QUAD $0xc56baec21c7a1916 // .quad -4221088077005055722
	QUAD $0x088aaa1845b8fdd1 // .quad 615491320315182545
	QUAD $0xf6c69a72a3989f5b // .quad -664674077828931749
	QUAD $0x8aad549e57273d46 // .quad -8454007886460797626
	QUAD $0x9a3c2087a63f6399 // .quad -7332950326284164199
	QUAD $0x36ac54e2f678864c // .quad 3939617107816777292
	QUAD $0xc0cb28a98fcf3c7f // .quad -4554501889427817345
	QUAD $0x84576a1bb416a7de // .quad -8910536670511192098
	QUAD $0xf0fdf2d3f3c30b9f // .quad -1081441343357383777
	QUAD $0x656d44a2a11c51d6 // .quad 7308573235570561494
	QUAD $0x969eb7c47859e743 // .quad -7593429867239446717
	QUAD $0x9f644ae5a4b1b326 // .quad -6961356773836868826
	QUAD $0xbc4665b596706114 // .quad -4880101315621920492
	QUAD $0x873d5d9f0dde1fef // .quad -8701695967296086033
	QUAD $0xeb57ff22fc0c7959 // .quad -1488440626100012711
	QUAD $0xa90cb506d155a7eb // .quad -6265433940692719637
	QUAD $0x9316ff75dd87cbd8 // .quad -7847804418953589800
	QUAD $0x09a7f12442d588f3 // .quad 695789805494438131
	QUAD $0xb7dcbf5354e9bece // .quad -5198069505264599346
	QUAD $0x0c11ed6d538aeb30 // .quad 869737256868047664
	QUAD $0xe5d3ef282a242e81 // .quad -1885900863153361279
	QUAD $0x8f1668c8a86da5fb // .quad -8136200465769716229
	QUAD $0x8fa475791a569d10 // .quad -8096217067111932656
	QUAD $0xf96e017d694487bd // .quad -473439272678684739
	QUAD $0xb38d92d760ec4455 // .quad -5508585315462527915
	QUAD $0x37c981dcc395a9ad // .quad 4019886927579031981
	QUAD $0xe070f78d3927556a // .quad -2274045625900771990
	QUAD $0x85bbe253f47b1418 // .quad -8810199395808373736
	QUAD $0x8c469ab843b89562 // .quad -8338807543829064350
	QUAD $0x93956d7478ccec8f // .quad -7812217631593927537
	QUAD $0xaf58416654a6babb // .quad -5811823411358942533
	QUAD $0x387ac8d1970027b3 // .quad 4069786015789754291
	QUAD $0xdb2e51bfe9d0696a // .quad -2653093245771290262
	QUAD $0x06997b05fcc0319f // .quad 475546501309804959
	QUAD $0x88fcf317f22241e2 // .quad -8575712306248138270
	QUAD $0x441fece3bdf81f04 // .quad 4908902581746016004
	QUAD $0xab3c2fddeeaad25a // .quad -6107954364382784934
	QUAD $0xd527e81cad7626c4 // .quad -3087243809672255804
	QUAD $0xd60b3bd56a5586f1 // .quad -3023256937051093263
	QUAD $0x8a71e223d8d3b075 // .quad -8470740780517707659
	QUAD $0x85c7056562757456 // .quad -8807064613298015146
	QUAD $0xf6872d5667844e4a // .quad -682526969396179382
	QUAD $0xa738c6bebb12d16c // .quad -6397144748195131028
	QUAD $0xb428f8ac016561dc // .quad -5464844730172612132
	QUAD $0xd106f86e69d785c7 // .quad -3384744916816525881
	QUAD $0xe13336d701beba53 // .quad -2219369894288377261
	QUAD $0x82a45b450226b39c // .quad -9032994600651410532
	QUAD $0xecc0024661173474 // .quad -1387106183930235788
	QUAD $0xa34d721642b06084 // .quad -6679557232386875260
	QUAD $0x27f002d7f95d0191 // .quad 2877803288514593169
	QUAD $0xcc20ce9bd35c78a5 // .quad -3737760522056206171
	QUAD $0x31ec038df7b441f5 // .quad 3597254110643241461
	QUAD $0xff290242c83396ce // .quad -60514634142869810
	QUAD $0x7e67047175a15272 // .quad 9108253656731439730
	QUAD $0x9f79a169bd203e41 // .quad -6955350673980375487
	QUAD $0x0f0062c6e984d387 // .quad 1080972517029761927
	QUAD $0xc75809c42c684dd1 // .quad -4082502324048081455
	QUAD $0x52c07b78a3e60869 // .quad 5962901664714590313
	QUAD $0xf92e0c3537826145 // .quad -491441886632713915
	QUAD $0xa7709a56ccdf8a83 // .quad -6381430974388925821
	QUAD $0x9bbcc7a142b17ccb // .quad -7224680206786528053
	QUAD $0x88a66076400bb692 // .quad -8600080377420466542
	QUAD $0xc2abf989935ddbfe // .quad -4419164240055772162
	QUAD $0x6acff893d00ea436 // .quad 7696643601933968438
	QUAD $0xf356f7ebf83552fe // .quad -912269281642327298
	QUAD $0x0583f6b8c4124d44 // .quad 397432465562684740
	QUAD $0x98165af37b2153de // .quad -7487697328667536418
	QUAD $0xc3727a337a8b704b // .quad -4363290727450709941
	QUAD $0xbe1bf1b059e9a8d6 // .quad -4747935642407032618
	QUAD $0x744f18c0592e4c5d // .quad 8380944645968776285
	QUAD $0xeda2ee1c7064130c // .quad -1323233534581402868
	QUAD $0x1162def06f79df74 // .quad 1252808770606194548
	QUAD $0x9485d4d1c63e8be7 // .quad -7744549986754458649
	QUAD $0x8addcb5645ac2ba9 // .quad -8440366555225904215
	QUAD $0xb9a74a0637ce2ee1 // .quad -5069001465015685407
	QUAD $0x6d953e2bd7173693 // .quad 7896285879677171347
	QUAD $0xe8111c87c5c1ba99 // .quad -1724565812842218855
	QUAD $0xc8fa8db6ccdd0438 // .quad -3964700705685699528
	QUAD $0x910ab1d4db9914a0 // .quad -7995382660667468640
	QUAD $0x1d9c9892400a22a3 // .quad 2133748077373825699
	QUAD $0xb54d5e4a127f59c8 // .quad -5382542307406947896
	QUAD $0x2503beb6d00cab4c // .quad 2667185096717282124
	QUAD $0xe2a0b5dc971f303a // .quad -2116491865831296966
	QUAD $0x2e44ae64840fd61e // .quad 3333981370896602654
	QUAD $0x8da471a9de737e24 // .quad -8240336443785642460
	QUAD $0x5ceaecfed289e5d3 // .quad 6695424375237764563
	QUAD $0xb10d8e1456105dad // .quad -5688734536304665171
	QUAD $0x7425a83e872c5f48 // .quad 8369280469047205704
	QUAD $0xdd50f1996b947518 // .quad -2499232151953443560
	QUAD $0xd12f124e28f7771a // .quad -3373457468973156582
	QUAD $0x8a5296ffe33cc92f // .quad -8479549122611984081
	QUAD $0x82bd6b70d99aaa70 // .quad -9025939945749304720
	QUAD $0xace73cbfdc0bfb7b // .quad -5987750384837592197
	QUAD $0x636cc64d1001550c // .quad 7164319141522920716
	QUAD $0xd8210befd30efa5a // .quad -2873001962619602342
	QUAD $0x3c47f7e05401aa4f // .quad 4343712908476262991
	QUAD $0x8714a775e3e95c78 // .quad -8713155254278333320
	QUAD $0x65acfaec34810a72 // .quad 7326506586225052274
	QUAD $0xa8d9d1535ce3b396 // .quad -6279758049420528746
	QUAD $0x7f1839a741a14d0e // .quad 9158133232781315342
	QUAD $0xd31045a8341ca07c // .quad -3238011543348273028
	QUAD $0x1ede48111209a051 // .quad 2224294504121868369
	QUAD $0x83ea2b892091e44d // .quad -8941286242233752499
	QUAD $0x934aed0aab460433 // .quad -7833187971778608077
	QUAD $0xa4e4b66b68b65d60 // .quad -6564921784364802720
	QUAD $0xf81da84d56178540 // .quad -568112927868484288
	QUAD $0xce1de40642e3f4b9 // .quad -3594466212028615495
	QUAD $0x36251260ab9d668f // .quad 3901544858591782543
	QUAD $0x80d2ae83e9ce78f3 // .quad -9164070410158966541
	QUAD $0xc1d72b7c6b42601a // .quad -4479063491021217766
	QUAD $0xa1075a24e4421730 // .quad -6843401994271320272
	QUAD $0xb24cf65b8612f820 // .quad -5598829363776522208
	QUAD $0xc94930ae1d529cfc // .quad -3942566474411762436
	QUAD $0xdee033f26797b628 // .quad -2386850686293264856
	QUAD $0xfb9b7cd9a4a7443c // .quad -316522074587315140
	QUAD $0x169840ef017da3b2 // .quad 1628122660560806834
	QUAD $0x9d412e0806e88aa5 // .quad -7115355324258153819
	QUAD $0x8e1f289560ee864f // .quad -8205795374004271537
	QUAD $0xc491798a08a2ad4e // .quad -4282508136895304370
	QUAD $0xf1a6f2bab92a27e3 // .quad -1033872180650563613
	QUAD $0xf5b5d7ec8acb58a2 // .quad -741449152691742558
	QUAD $0xae10af696774b1dc // .quad -5904026244240592420
	QUAD $0x9991a6f3d6bf1765 // .quad -7380934748073420955
	QUAD $0xacca6da1e0a8ef2a // .quad -5995859411864064214
	QUAD $0xbff610b0cc6edd3f // .quad -4614482416664388289
	QUAD $0x17fd090a58d32af4 // .quad 1728547772024695540
	QUAD $0xeff394dcff8a948e // .quad -1156417002403097458
	QUAD $0xddfc4b4cef07f5b1 // .quad -2451001303396518479
	QUAD $0x95f83d0a1fb69cd9 // .quad -7640289654143017767
	QUAD $0x4abdaf101564f98f // .quad 5385653213018257807
	QUAD $0xbb764c4ca7a4440f // .quad -4938676049251384305
	QUAD $0x9d6d1ad41abe37f2 // .quad -7102991539009341454
	QUAD $0xea53df5fd18d5513 // .quad -1561659043136842477
	QUAD $0x84c86189216dc5ee // .quad -8878739423761676818
	QUAD $0x92746b9be2f8552c // .quad -7893565929601608404
	QUAD $0x32fd3cf5b4e49bb5 // .quad 3674159897003727797
	QUAD $0xb7118682dbb66a77 // .quad -5255271393574622601
	QUAD $0x3fbc8c33221dc2a2 // .quad 4592699871254659746
	QUAD $0xe4d5e82392a40515 // .quad -1957403223540890347
	QUAD $0x0fabaf3feaa5334b // .quad 1129188820640936779
	QUAD $0x8f05b1163ba6832d // .quad -8140906042354138323
	QUAD $0x29cb4d87f2a7400f // .quad 3011586022114279439
	QUAD $0xb2c71d5bca9023f8 // .quad -5564446534515285000
	QUAD $0x743e20e9ef511013 // .quad 8376168546070237203
	QUAD $0xdf78e4b2bd342cf6 // .quad -2343872149716718346
	QUAD $0x914da9246b255417 // .quad -7976533391121755113
	QUAD $0x8bab8eefb6409c1a // .quad -8382449121214030822
	QUAD $0x1ad089b6c2f7548f // .quad 1932195658189984911
	QUAD $0xae9672aba3d0c320 // .quad -5866375383090150624
	QUAD $0xa184ac2473b529b2 // .quad -6808127464117294670
	QUAD $0xda3c0f568cc4f3e8 // .quad -2721283210435300376
	QUAD $0xc9e5d72d90a2741f // .quad -3898473311719230433
	QUAD $0x8865899617fb1871 // .quad -8618331034163144591
	QUAD $0x7e2fa67c7a658893 // .quad 9092669226243950739
	QUAD $0xaa7eebfb9df9de8d // .quad -6161227774276542835
	QUAD $0xddbb901b98feeab8 // .quad -2469221522477225288
	QUAD $0xd51ea6fa85785631 // .quad -3089848699418290639
	QUAD $0x552a74227f3ea566 // .quad 6136845133758244198
	QUAD $0x8533285c936b35de // .quad -8848684464777513506
	QUAD $0xd53a88958f872760 // .quad -3082000819042179232
	QUAD $0xa67ff273b8460356 // .quad -6449169562544503978
	QUAD $0x8a892abaf368f138 // .quad -8464187042230111944
	QUAD $0xd01fef10a657842c // .quad -3449775934753242068
	QUAD $0x2d2b7569b0432d86 // .quad 3254824252494523782
	QUAD $0x8213f56a67f6b29b // .quad -9073638986861858149
	QUAD $0x9c3b29620e29fc74 // .quad -7189106879045698444
	QUAD $0xa298f2c501f45f42 // .quad -6730362715149934782
	QUAD $0x8349f3ba91b47b90 // .quad -8986383598807123056
	QUAD $0xcb3f2f7642717713 // .quad -3801267375510030573
	QUAD $0x241c70a936219a74 // .quad 2602078556773259892
	QUAD $0xfe0efb53d30dd4d7 // .quad -139898200960150313
	QUAD $0xed238cd383aa0111 // .quad -1359087822460813039
	QUAD $0x9ec95d1463e8a506 // .quad -7004965403241175802
	QUAD $0xf4363804324a40ab // .quad -849429889038008149
	QUAD $0xc67bb4597ce2ce48 // .quad -4144520735624081848
	QUAD $0xb143c6053edcd0d6 // .quad -5673473379724898090
	QUAD $0xf81aa16fdc1b81da // .quad -568964901102714406
	QUAD $0xdd94b7868e94050b // .quad -2480155706228734709
	QUAD $0x9b10a4e5e9913128 // .quad -7273132090830278360
	QUAD $0xca7cf2b4191c8327 // .quad -3855940325606653145
	QUAD $0xc1d4ce1f63f57d72 // .quad -4479729095110460046
	QUAD $0xfd1c2f611f63a3f1 // .quad -208239388580928527
	QUAD $0xf24a01a73cf2dccf // .quad -987975350460687153
	QUAD $0xbc633b39673c8ced // .quad -4871985254153548563
	QUAD $0x976e41088617ca01 // .quad -7535013621679011327
	QUAD $0xd5be0503e085d814 // .quad -3044990783845967852
	QUAD $0xbd49d14aa79dbc82 // .quad -4807081008671376254
	QUAD $0x4b2d8644d8a74e19 // .quad 5417133557047315993
	QUAD $0xec9c459d51852ba2 // .quad -1397165242411832414
	QUAD $0xddf8e7d60ed1219f // .quad -2451955090545630817
	QUAD $0x93e1ab8252f33b45 // .quad -7790757304148477115
	QUAD $0xcabb90e5c942b504 // .quad -3838314940804713212
	QUAD $0xb8da1662e7b00a17 // .quad -5126760611758208489
	QUAD $0x3d6a751f3b936244 // .quad 4425478360848884292
	QUAD $0xe7109bfba19c0c9d // .quad -1796764746270372707
	QUAD $0x0cc512670a783ad5 // .quad 920161932633717461
	QUAD $0x906a617d450187e2 // .quad -8040506994060064798
	QUAD $0x27fb2b80668b24c6 // .quad 2880944217109767366
	QUAD $0xb484f9dc9641e9da // .quad -5438947724147693094
	QUAD $0xb1f9f660802dedf7 // .quad -5622191765467566601
	QUAD $0xe1a63853bbd26451 // .quad -2186998636757228463
	QUAD $0x5e7873f8a0396974 // .quad 6807318348447705460
	QUAD $0x8d07e33455637eb2 // .quad -8284403175614349646
	QUAD $0xdb0b487b6423e1e9 // .quad -2662955059861265943
	QUAD $0xb049dc016abc5e5f // .quad -5743817951090549153
	QUAD $0x91ce1a9a3d2cda63 // .quad -7940379843253970333
	QUAD $0xdc5c5301c56b75f7 // .quad -2568086420435798537
	QUAD $0x7641a140cc7810fc // .quad 8521269269642088700
	QUAD $0x89b9b3e11b6329ba // .quad -8522583040413455942
	QUAD $0xa9e904c87fcb0a9e // .quad -6203421752542164322
	QUAD $0xac2820d9623bf429 // .quad -6041542782089432023
	QUAD $0x546345fa9fbdcd45 // .quad 6080780864604458309
	QUAD $0xd732290fbacaf133 // .quad -2940242459184402125
	QUAD $0xa97c177947ad4096 // .quad -6234081974526590826
	QUAD $0x867f59a9d4bed6c0 // .quad -8755180564631333184
	QUAD $0x49ed8eabcccc485e // .quad 5327070802775656542
	QUAD $0xa81f301449ee8c70 // .quad -6332289687361778576
	QUAD $0x5c68f256bfff5a75 // .quad 6658838503469570677
	QUAD $0xd226fc195c6a2f8c // .quad -3303676090774835316
	QUAD $0x73832eec6fff3112 // .quad 8323548129336963346
	QUAD $0x83585d8fd9c25db7 // .quad -8982326584375353929
	QUAD $0xc831fd53c5ff7eac // .quad -4021154456019173716
	QUAD $0xa42e74f3d032f525 // .quad -6616222212041804507
	QUAD $0xba3e7ca8b77f5e56 // .quad -5026443070023967146
	QUAD $0xcd3a1230c43fb26f // .quad -3658591746624867729
	QUAD $0x28ce1bd2e55f35ec // .quad 2940318199324816876
	QUAD $0x80444b5e7aa7cf85 // .quad -9204148869281624187
	QUAD $0x7980d163cf5b81b4 // .quad 8755227902219092404
	QUAD $0xa0555e361951c366 // .quad -6893500068174642330
	QUAD $0xd7e105bcc3326220 // .quad -2891023177508298208
	QUAD $0xc86ab5c39fa63440 // .quad -4005189066790915008
	QUAD $0x8dd9472bf3fefaa8 // .quad -8225464990312760664
	QUAD $0xfa856334878fc150 // .quad -394800315061255856
	QUAD $0xb14f98f6f0feb952 // .quad -5670145219463562926
	QUAD $0x9c935e00d4b9d8d2 // .quad -7164279224554366766
	QUAD $0x6ed1bf9a569f33d4 // .quad 7985374283903742932
	QUAD $0xc3b8358109e84f07 // .quad -4343663012265570553
	QUAD $0x0a862f80ec4700c9 // .quad 758345818024902857
	QUAD $0xf4a642e14c6262c8 // .quad -817892746904575288
	QUAD $0xcd27bb612758c0fb // .quad -3663753745896259333
	QUAD $0x98e7e9cccfbd7dbd // .quad -7428711994456441411
	QUAD $0x8038d51cb897789d // .quad -9207375118826243939
	QUAD $0xbf21e44003acdd2c // .quad -4674203974643163860
	QUAD $0xe0470a63e6bd56c4 // .quad -2285846861678029116
	QUAD $0xeeea5d5004981478 // .quad -1231068949876566920
	QUAD $0x1858ccfce06cac75 // .quad 1754377441329851509
	QUAD $0x95527a5202df0ccb // .quad -7686947121313936181
	QUAD $0x0f37801e0c43ebc9 // .quad 1096485900831157193
	QUAD $0xbaa718e68396cffd // .quad -4996997883215032323
	QUAD $0xd30560258f54e6bb // .quad -3241078642388441413
	QUAD $0xe950df20247c83fd // .quad -1634561335591402499
	QUAD $0x47c6b82ef32a206a // .quad 5172023733869224042
	QUAD $0x91d28b7416cdd27e // .quad -7939129862385708418
	QUAD $0x4cdc331d57fa5442 // .quad 5538357842881958978
	QUAD $0xb6472e511c81471d // .quad -5312226309554747619
	QUAD $0xe0133fe4adf8e953 // .quad -2300424733252327085
	QUAD $0xe3d8f9e563a198e5 // .quad -2028596868516046619
	QUAD $0x58180fddd97723a7 // .quad 6347841120289366951
	QUAD $0x8e679c2f5e44ff8f // .quad -8185402070463610993
	QUAD $0x570f09eaa7ea7649 // .quad 6273243709394548297
	QUAD $0xb201833b35d63f73 // .quad -5620066569652125837
	QUAD $0x2cd2cc6551e513db // .quad 3229868618315797467
	QUAD $0xde81e40a034bcf4f // .quad -2413397193637769393
	QUAD $0xf8077f7ea65e58d2 // .quad -574350245532641070
	QUAD $0x8b112e86420f6191 // .quad -8425902273664687727
	QUAD $0xfb04afaf27faf783 // .quad -358968903457900669
	QUAD $0xadd57a27d29339f6 // .quad -5920691823653471754
	QUAD $0x79c5db9af1f9b564 // .quad 8774660907532399972
	QUAD $0xd94ad8b1c7380874 // .quad -2789178761139451788
	QUAD $0x18375281ae7822bd // .quad 1744954097560724157
	QUAD $0x87cec76f1c830548 // .quad -8660765753353239224
	QUAD $0x8f2293910d0b15b6 // .quad -8132775725879323210
	QUAD $0xa9c2794ae3a3c69a // .quad -6214271173264161126
	QUAD $0xb2eb3875504ddb23 // .quad -5554283638921766109
	QUAD $0xd433179d9c8cb841 // .quad -3156152948152813503
	QUAD $0x5fa60692a46151ec // .quad 6892203506629956076
	QUAD $0x849feec281d7f328 // .quad -8890124620236590296
	QUAD $0xdbc7c41ba6bcd334 // .quad -2609901835997359308
	QUAD $0xa5c7ea73224deff3 // .quad -6500969756868349965
	QUAD $0x12b9b522906c0801 // .quad 1349308723430688769
	QUAD $0xcf39e50feae16bef // .quad -3514526177658049553
	QUAD $0xd768226b34870a01 // .quad -2925050114139026943
	QUAD $0x81842f29f2cce375 // .quad -9114107888677362827
	QUAD $0xe6a1158300d46641 // .quad -1828156321336891839
	QUAD $0xa1e53af46f801c53 // .quad -6780948842419315629
	QUAD $0x60495ae3c1097fd1 // .quad 6938176635183661009
	QUAD $0xca5e89b18b602368 // .quad -3864500034596756632
	QUAD $0x385bb19cb14bdfc5 // .quad 4061034775552188357
	QUAD $0xfcf62c1dee382c42 // .quad -218939024818557886
	QUAD $0x46729e03dd9ed7b6 // .quad 5076293469440235446
	QUAD $0x9e19db92b4e31ba9 // .quad -7054365918152680535
	QUAD $0x6c07a2c26a8346d2 // .quad 7784369436827535058

	// .p2align 4, 0x00
_VecShiftShuffles:
	QUAD $0x0706050403020100; QUAD $0x0f0e0d0c0b0a0908 // .ascii 16, '\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f'
	QUAD $0x0807060504030201; QUAD $0xff0f0e0d0c0b0a09 // .ascii 16, '\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff'
	QUAD $0x0908070605040302; QUAD $0xffff0f0e0d0c0b0a // .ascii 16, '\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff'
	QUAD $0x0a09080706050403; QUAD $0xffffff0f0e0d0c0b // .ascii 16, '\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff\xff'
	QUAD $0x0b0a090807060504; QUAD $0xffffffff0f0e0d0c // .ascii 16, '\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff\xff\xff'
	QUAD $0x0c0b0a0908070605; QUAD $0xffffffffff0f0e0d // .ascii 16, '\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff\xff\xff\xff'
	QUAD $0x0d0c0b0a09080706; QUAD $0xffffffffffff0f0e // .ascii 16, '\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff\xff\xff\xff\xff'
	QUAD $0x0e0d0c0b0a090807; QUAD $0xffffffffffffff0f // .ascii 16, '\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0x0f0e0d0c0b0a0908; QUAD $0xffffffffffffffff // .ascii 16, '\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff\xff\xff\xff\xff\xff\xff'

	// .p2align 4, 0x00
__SingleQuoteTab:
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000030303030755c                           // .asciz 8, '\\u0000\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000031303030755c                           // .asciz 8, '\\u0001\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000032303030755c                           // .asciz 8, '\\u0002\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000033303030755c                           // .asciz 8, '\\u0003\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000034303030755c                           // .asciz 8, '\\u0004\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000035303030755c                           // .asciz 8, '\\u0005\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000036303030755c                           // .asciz 8, '\\u0006\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000037303030755c                           // .asciz 8, '\\u0007\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000038303030755c                           // .asciz 8, '\\u0008\x00\x00'
	QUAD $0x0000000000000002                           // .quad 2
	QUAD $0x000000000000745c                           // .asciz 8, '\\t\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000002                           // .quad 2
	QUAD $0x0000000000006e5c                           // .asciz 8, '\\n\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000062303030755c                           // .asciz 8, '\\u000b\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000063303030755c                           // .asciz 8, '\\u000c\x00\x00'
	QUAD $0x0000000000000002                           // .quad 2
	QUAD $0x000000000000725c                           // .asciz 8, '\\r\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000065303030755c                           // .asciz 8, '\\u000e\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000066303030755c                           // .asciz 8, '\\u000f\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000030313030755c                           // .asciz 8, '\\u0010\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000031313030755c                           // .asciz 8, '\\u0011\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000032313030755c                           // .asciz 8, '\\u0012\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000033313030755c                           // .asciz 8, '\\u0013\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000034313030755c                           // .asciz 8, '\\u0014\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000035313030755c                           // .asciz 8, '\\u0015\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000036313030755c                           // .asciz 8, '\\u0016\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000037313030755c                           // .asciz 8, '\\u0017\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000038313030755c                           // .asciz 8, '\\u0018\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000039313030755c                           // .asciz 8, '\\u0019\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000061313030755c                           // .asciz 8, '\\u001a\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000062313030755c                           // .asciz 8, '\\u001b\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000063313030755c                           // .asciz 8, '\\u001c\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000064313030755c                           // .asciz 8, '\\u001d\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000065313030755c                           // .asciz 8, '\\u001e\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000066313030755c                           // .asciz 8, '\\u001f\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000002                           // .quad 2
	QUAD $0x000000000000225c                           // .asciz 8, '\\"\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000002                           // .quad 2
	QUAD $0x0000000000005c5c                           // .asciz 8, '\\\\\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

	// .p2align 4, 0x00
__DoubleQuoteTab:
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0030303030755c5c                           // .asciz 8, '\\\\u0000\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0031303030755c5c                           // .asciz 8, '\\\\u0001\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0032303030755c5c                           // .asciz 8, '\\\\u0002\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0033303030755c5c                           // .asciz 8, '\\\\u0003\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0034303030755c5c                           // .asciz 8, '\\\\u0004\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0035303030755c5c                           // .asciz 8, '\\\\u0005\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0036303030755c5c                           // .asciz 8, '\\\\u0006\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0037303030755c5c                           // .asciz 8, '\\\\u0007\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0038303030755c5c                           // .asciz 8, '\\\\u0008\x00'
	QUAD $0x0000000000000003                           // .quad 3
	QUAD $0x0000000000745c5c                           // .asciz 8, '\\\\t\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000003                           // .quad 3
	QUAD $0x00000000006e5c5c                           // .asciz 8, '\\\\n\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0062303030755c5c                           // .asciz 8, '\\\\u000b\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0063303030755c5c                           // .asciz 8, '\\\\u000c\x00'
	QUAD $0x0000000000000003                           // .quad 3
	QUAD $0x0000000000725c5c                           // .asciz 8, '\\\\r\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0065303030755c5c                           // .asciz 8, '\\\\u000e\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0066303030755c5c                           // .asciz 8, '\\\\u000f\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0030313030755c5c                           // .asciz 8, '\\\\u0010\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0031313030755c5c                           // .asciz 8, '\\\\u0011\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0032313030755c5c                           // .asciz 8, '\\\\u0012\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0033313030755c5c                           // .asciz 8, '\\\\u0013\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0034313030755c5c                           // .asciz 8, '\\\\u0014\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0035313030755c5c                           // .asciz 8, '\\\\u0015\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0036313030755c5c                           // .asciz 8, '\\\\u0016\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0037313030755c5c                           // .asciz 8, '\\\\u0017\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0038313030755c5c                           // .asciz 8, '\\\\u0018\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0039313030755c5c                           // .asciz 8, '\\\\u0019\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0061313030755c5c                           // .asciz 8, '\\\\u001a\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0062313030755c5c                           // .asciz 8, '\\\\u001b\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0063313030755c5c                           // .asciz 8, '\\\\u001c\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0064313030755c5c                           // .asciz 8, '\\\\u001d\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0065313030755c5c                           // .asciz 8, '\\\\u001e\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0066313030755c5c                           // .asciz 8, '\\\\u001f\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000004                           // .quad 4
	QUAD $0x00000000225c5c5c                           // .asciz 8, '\\\\\\"\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000004                           // .quad 4
	QUAD $0x000000005c5c5c5c                           // .asciz 8, '\\\\\\\\\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

	// .p2align 4, 0x00
__EscTab:
	QUAD $0x0101010101010101; QUAD $0x0101010101010101     // .ascii 16, '\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01'
	QUAD $0x0101010101010101; QUAD $0x0101010101010101     // .ascii 16, '\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01'
	QUAD $0x0000000000010000; QUAD $0x0000000000000000     // .ascii 16, '\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; LONG $0x00000000; BYTE $0x01 // .ascii 13, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000     // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	WORD $0x0000; BYTE $0x00                               // .space 3, '\x00\x00\x00'

	// .p2align 4, 0x00
__UnquoteTab:
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000220000; QUAD $0x2f00000000000000 // .ascii 16, '\x00\x00"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00/'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000005c00000000 // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\\\x00\x00\x00'
	QUAD $0x000c000000080000; QUAD $0x000a000000000000 // .ascii 16, '\x00\x00\x08\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\n\x00'
	LONG $0x000d0000; WORD $0xff09                     // .ascii 6, '\x00\x00\r\x00\t\xff'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; WORD $0x0000             // .space 10, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

	// .p2align 4, 0x00
__HtmlQuoteTab:
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000036323030755c                           // .asciz 8, '\\u0026\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000063333030755c                           // .asciz 8, '\\u003c\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000065333030755c                           // .asciz 8, '\\u003e\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000038323032755c                           // .asciz 8, '\\u2028\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000039323032755c                           // .asciz 8, '\\u2029\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

	// .p2align 4, 0x00
_P10_TAB:
	QUAD $0x3ff0000000000000 // .quad 0x3ff0000000000000
	QUAD $0x4024000000000000 // .quad 0x4024000000000000
	QUAD $0x4059000000000000 // .quad 0x4059000000000000
	QUAD $0x408f400000000000 // .quad 0x408f400000000000
	QUAD $0x40c3880000000000 // .quad 0x40c3880000000000
	QUAD $0x40f86a0000000000 // .quad 0x40f86a0000000000
	QUAD $0x412e848000000000 // .quad 0x412e848000000000
	QUAD $0x416312d000000000 // .quad 0x416312d000000000
	QUAD $0x4197d78400000000 // .quad 0x4197d78400000000
	QUAD $0x41cdcd6500000000 // .quad 0x41cdcd6500000000
	QUAD $0x4202a05f20000000 // .quad 0x4202a05f20000000
	QUAD $0x42374876e8000000 // .quad 0x42374876e8000000
	QUAD $0x426d1a94a2000000 // .quad 0x426d1a94a2000000
	QUAD $0x42a2309ce5400000 // .quad 0x42a2309ce5400000
	QUAD $0x42d6bcc41e900000 // .quad 0x42d6bcc41e900000
	QUAD $0x430c6bf526340000 // .quad 0x430c6bf526340000
	QUAD $0x4341c37937e08000 // .quad 0x4341c37937e08000
	QUAD $0x4376345785d8a000 // .quad 0x4376345785d8a000
	QUAD $0x43abc16d674ec800 // .quad 0x43abc16d674ec800
	QUAD $0x43e158e460913d00 // .quad 0x43e158e460913d00
	QUAD $0x4415af1d78b58c40 // .quad 0x4415af1d78b58c40
	QUAD $0x444b1ae4d6e2ef50 // .quad 0x444b1ae4d6e2ef50
	QUAD $0x4480f0cf064dd592 // .quad 0x4480f0cf064dd592
	QUAD $0x0000000000000000 // .p2align 4, 0x00

_POW10_M128_TAB:
	QUAD $0x1732c869cd60e453                           // .quad 1671618768450675795
	QUAD $0xfa8fd5a0081c0288                           // .quad -391859759250406776
	QUAD $0x0e7fbd42205c8eb4                           // .quad 1044761730281672372
	QUAD $0x9c99e58405118195                           // .quad -7162441377172586091
	QUAD $0x521fac92a873b261                           // .quad 5917638181279478369
	QUAD $0xc3c05ee50655e1fa                           // .quad -4341365703038344710
	QUAD $0xe6a797b752909ef9                           // .quad -1826324310255427847
	QUAD $0xf4b0769e47eb5a78                           // .quad -815021110370542984
	QUAD $0x9028bed2939a635c                           // .quad -8058981721550724260
	QUAD $0x98ee4a22ecf3188b                           // .quad -7426917221622671221
	QUAD $0x7432ee873880fc33                           // .quad 8373016921771146291
	QUAD $0xbf29dcaba82fdeae                           // .quad -4671960508600951122
	QUAD $0x113faa2906a13b3f                           // .quad 1242899115359157055
	QUAD $0xeef453d6923bd65a                           // .quad -1228264617323800998
	QUAD $0x4ac7ca59a424c507                           // .quad 5388497965526861063
	QUAD $0x9558b4661b6565f8                           // .quad -7685194413468457480
	QUAD $0x5d79bcf00d2df649                           // .quad 6735622456908576329
	QUAD $0xbaaee17fa23ebf76                           // .quad -4994806998408183946
	QUAD $0xf4d82c2c107973dc                           // .quad -803843965719055396
	QUAD $0xe95a99df8ace6f53                           // .quad -1631822729582842029
	QUAD $0x79071b9b8a4be869                           // .quad 8720969558280366185
	QUAD $0x91d8a02bb6c10594                           // .quad -7937418233630358124
	QUAD $0x9748e2826cdee284                           // .quad -7545532125859093884
	QUAD $0xb64ec836a47146f9                           // .quad -5310086773610559751
	QUAD $0xfd1b1b2308169b25                           // .quad -208543120469091547
	QUAD $0xe3e27a444d8d98b7                           // .quad -2025922448585811785
	QUAD $0xfe30f0f5e50e20f7                           // .quad -130339450293182217
	QUAD $0x8e6d8c6ab0787f72                           // .quad -8183730558007214222
	QUAD $0xbdbd2d335e51a935                           // .quad -4774610331293865675
	QUAD $0xb208ef855c969f4f                           // .quad -5617977179081629873
	QUAD $0xad2c788035e61382                           // .quad -5968262914117332094
	QUAD $0xde8b2b66b3bc4723                           // .quad -2410785455424649437
	QUAD $0x4c3bcb5021afcc31                           // .quad 5493207715531443249
	QUAD $0x8b16fb203055ac76                           // .quad -8424269937281487754
	QUAD $0xdf4abe242a1bbf3d                           // .quad -2356862392440471747
	QUAD $0xaddcb9e83c6b1793                           // .quad -5918651403174471789
	QUAD $0xd71d6dad34a2af0d                           // .quad -2946077990550589683
	QUAD $0xd953e8624b85dd78                           // .quad -2786628235540701832
	QUAD $0x8672648c40e5ad68                           // .quad -8758827771735200408
	QUAD $0x87d4713d6f33aa6b                           // .quad -8659171674854020501
	QUAD $0x680efdaf511f18c2                           // .quad 7498209359040551106
	QUAD $0xa9c98d8ccb009506                           // .quad -6212278575140137722
	QUAD $0x0212bd1b2566def2                           // .quad 149389661945913074
	QUAD $0xd43bf0effdc0ba48                           // .quad -3153662200497784248
	QUAD $0x014bb630f7604b57                           // .quad 93368538716195671
	QUAD $0x84a57695fe98746d                           // .quad -8888567902952197011
	QUAD $0x419ea3bd35385e2d                           // .quad 4728396691822632493
	QUAD $0xa5ced43b7e3e9188                           // .quad -6499023860262858360
	QUAD $0x52064cac828675b9                           // .quad 5910495864778290617
	QUAD $0xcf42894a5dce35ea                           // .quad -3512093806901185046
	QUAD $0x7343efebd1940993                           // .quad 8305745933913819539
	QUAD $0x818995ce7aa0e1b2                           // .quad -9112587656954322510
	QUAD $0x1014ebe6c5f90bf8                           // .quad 1158810380537498616
	QUAD $0xa1ebfb4219491a1f                           // .quad -6779048552765515233
	QUAD $0xd41a26e077774ef6                           // .quad -3163173042755514634
	QUAD $0xca66fa129f9b60a6                           // .quad -3862124672529506138
	QUAD $0x8920b098955522b4                           // .quad -8565652321871781196
	QUAD $0xfd00b897478238d0                           // .quad -215969822234494768
	QUAD $0x55b46e5f5d5535b0                           // .quad 6175682344898606512
	QUAD $0x9e20735e8cb16382                           // .quad -7052510166537641086
	QUAD $0xeb2189f734aa831d                           // .quad -1503769105731517667
	QUAD $0xc5a890362fddbc62                           // .quad -4203951689744663454
	QUAD $0xa5e9ec7501d523e4                           // .quad -6491397400591784988
	QUAD $0xf712b443bbd52b7b                           // .quad -643253593753441413
	QUAD $0x47b233c92125366e                           // .quad 5166248661484910190
	QUAD $0x9a6bb0aa55653b2d                           // .quad -7319562523736982739
	QUAD $0x999ec0bb696e840a                           // .quad -7377247228426025974
	QUAD $0xc1069cd4eabe89f8                           // .quad -4537767136243840520
	QUAD $0xc00670ea43ca250d                           // .quad -4609873017105144563
	QUAD $0xf148440a256e2c76                           // .quad -1060522901877412746
	QUAD $0x380406926a5e5728                           // .quad 4036358391950366504
	QUAD $0x96cd2a865764dbca                           // .quad -7580355841314464822
	QUAD $0xc605083704f5ecf2                           // .quad -4177924046916817678
	QUAD $0xbc807527ed3e12bc                           // .quad -4863758783215693124
	QUAD $0xf7864a44c633682e                           // .quad -610719040218634194
	QUAD $0xeba09271e88d976b                           // .quad -1468012460592228501
	QUAD $0x7ab3ee6afbe0211d                           // .quad 8841672636718129437
	QUAD $0x93445b8731587ea3                           // .quad -7835036815511224669
	QUAD $0x5960ea05bad82964                           // .quad 6440404777470273892
	QUAD $0xb8157268fdae9e4c                           // .quad -5182110000961642932
	QUAD $0x6fb92487298e33bd                           // .quad 8050505971837842365
	QUAD $0xe61acf033d1a45df                           // .quad -1865951482774665761
	QUAD $0xa5d3b6d479f8e056                           // .quad -6497648813669818282
	QUAD $0x8fd0c16206306bab                           // .quad -8083748704375247957
	QUAD $0x8f48a4899877186c                           // .quad -8122061017087272852
	QUAD $0xb3c4f1ba87bc8696                           // .quad -5492999862041672042
	QUAD $0x331acdabfe94de87                           // .quad 3682481783923072647
	QUAD $0xe0b62e2929aba83c                           // .quad -2254563809124702148
	QUAD $0x9ff0c08b7f1d0b14                           // .quad -6921820921902855404
	QUAD $0x8c71dcd9ba0b4925                           // .quad -8326631408344020699
	QUAD $0x07ecf0ae5ee44dd9                           // .quad 571095884476206553
	QUAD $0xaf8e5410288e1b6f                           // .quad -5796603242002637969
	QUAD $0xc9e82cd9f69d6150                           // .quad -3897816162832129712
	QUAD $0xdb71e91432b1a24a                           // .quad -2634068034075909558
	QUAD $0xbe311c083a225cd2                           // .quad -4741978110983775022
	QUAD $0x892731ac9faf056e                           // .quad -8563821548938525330
	QUAD $0x6dbd630a48aaf406                           // .quad 7907585416552444934
	QUAD $0xab70fe17c79ac6ca                           // .quad -6093090917745768758
	QUAD $0x092cbbccdad5b108                           // .quad 661109733835780360
	QUAD $0xd64d3d9db981787d                           // .quad -3004677628754823043
	QUAD $0x25bbf56008c58ea5                           // .quad 2719036592861056677
	QUAD $0x85f0468293f0eb4e                           // .quad -8795452545612846258
	QUAD $0xaf2af2b80af6f24e                           // .quad -5824576295778454962
	QUAD $0xa76c582338ed2621                           // .quad -6382629663588669919
	QUAD $0x1af5af660db4aee1                           // .quad 1942651667131707105
	QUAD $0xd1476e2c07286faa                           // .quad -3366601061058449494
	QUAD $0x50d98d9fc890ed4d                           // .quad 5825843310384704845
	QUAD $0x82cca4db847945ca                           // .quad -9021654690802612790
	QUAD $0xe50ff107bab528a0                           // .quad -1941067898873894752
	QUAD $0xa37fce126597973c                           // .quad -6665382345075878084
	QUAD $0x1e53ed49a96272c8                           // .quad 2185351144835019464
	QUAD $0xcc5fc196fefd7d0c                           // .quad -3720041912917459700
	QUAD $0x25e8e89c13bb0f7a                           // .quad 2731688931043774330
	QUAD $0xff77b1fcbebcdc4f                           // .quad -38366372719436721
	QUAD $0x77b191618c54e9ac                           // .quad 8624834609543440812
	QUAD $0x9faacf3df73609b1                           // .quad -6941508010590729807
	QUAD $0xd59df5b9ef6a2417                           // .quad -3054014793352862697
	QUAD $0xc795830d75038c1d                           // .quad -4065198994811024355
	QUAD $0x4b0573286b44ad1d                           // .quad 5405853545163697437
	QUAD $0xf97ae3d0d2446f25                           // .quad -469812725086392539
	QUAD $0x4ee367f9430aec32                           // .quad 5684501474941004850
	QUAD $0x9becce62836ac577                           // .quad -7211161980820077193
	QUAD $0x229c41f793cda73f                           // .quad 2493940825248868159
	QUAD $0xc2e801fb244576d5                           // .quad -4402266457597708587
	QUAD $0x6b43527578c1110f                           // .quad 7729112049988473103
	QUAD $0xf3a20279ed56d48a                           // .quad -891147053569747830
	QUAD $0x830a13896b78aaa9                           // .quad -9004363024039368023
	QUAD $0x9845418c345644d6                           // .quad -7474495936122174250
	QUAD $0x23cc986bc656d553                           // .quad 2579604275232953683
	QUAD $0xbe5691ef416bd60c                           // .quad -4731433901725329908
	QUAD $0x2cbfbe86b7ec8aa8                           // .quad 3224505344041192104
	QUAD $0xedec366b11c6cb8f                           // .quad -1302606358729274481
	QUAD $0x7bf7d71432f3d6a9                           // .quad 8932844867666826921
	QUAD $0x94b3a202eb1c3f39                           // .quad -7731658001846878407
	QUAD $0xdaf5ccd93fb0cc53                           // .quad -2669001970698630061
	QUAD $0xb9e08a83a5e34f07                           // .quad -5052886483881210105
	QUAD $0xd1b3400f8f9cff68                           // .quad -3336252463373287576
	QUAD $0xe858ad248f5c22c9                           // .quad -1704422086424124727
	QUAD $0x23100809b9c21fa1                           // .quad 2526528228819083169
	QUAD $0x91376c36d99995be                           // .quad -7982792831656159810
	QUAD $0xabd40a0c2832a78a                           // .quad -6065211750830921846
	QUAD $0xb58547448ffffb2d                           // .quad -5366805021142811859
	QUAD $0x16c90c8f323f516c                           // .quad 1641857348316123500
	QUAD $0xe2e69915b3fff9f9                           // .quad -2096820258001126919
	QUAD $0xae3da7d97f6792e3                           // .quad -5891368184943504669
	QUAD $0x8dd01fad907ffc3b                           // .quad -8228041688891786181
	QUAD $0x99cd11cfdf41779c                           // .quad -7364210231179380836
	QUAD $0xb1442798f49ffb4a                           // .quad -5673366092687344822
	QUAD $0x40405643d711d583                           // .quad 4629795266307937667
	QUAD $0xdd95317f31c7fa1d                           // .quad -2480021597431793123
	QUAD $0x482835ea666b2572                           // .quad 5199465050656154994
	QUAD $0x8a7d3eef7f1cfc52                           // .quad -8467542526035952558
	QUAD $0xda3243650005eecf                           // .quad -2724040723534582065
	QUAD $0xad1c8eab5ee43b66                           // .quad -5972742139117552794
	QUAD $0x90bed43e40076a82                           // .quad -8016736922845615486
	QUAD $0xd863b256369d4a40                           // .quad -2854241655469553088
	QUAD $0x5a7744a6e804a291                           // .quad 6518754469289960081
	QUAD $0x873e4f75e2224e68                           // .quad -8701430062309552536
	QUAD $0x711515d0a205cb36                           // .quad 8148443086612450102
	QUAD $0xa90de3535aaae202                           // .quad -6265101559459552766
	QUAD $0x0d5a5b44ca873e03                           // .quad 962181821410786819
	QUAD $0xd3515c2831559a83                           // .quad -3219690930897053053
	QUAD $0xe858790afe9486c2                           // .quad -1704479370831952190
	QUAD $0x8412d9991ed58091                           // .quad -8929835859451740015
	QUAD $0x626e974dbe39a872                           // .quad 7092772823314835570
	QUAD $0xa5178fff668ae0b6                           // .quad -6550608805887287114
	QUAD $0xfb0a3d212dc8128f                           // .quad -357406007711231345
	QUAD $0xce5d73ff402d98e3                           // .quad -3576574988931720989
	QUAD $0x7ce66634bc9d0b99                           // .quad 8999993282035256217
	QUAD $0x80fa687f881c7f8e                           // .quad -9152888395723407474
	QUAD $0x1c1fffc1ebc44e80                           // .quad 2026619565689294464
	QUAD $0xa139029f6a239f72                           // .quad -6829424476226871438
	QUAD $0xa327ffb266b56220                           // .quad -6690097579743157728
	QUAD $0xc987434744ac874e                           // .quad -3925094576856201394
	QUAD $0x4bf1ff9f0062baa8                           // .quad 5472436080603216552
	QUAD $0xfbe9141915d7a922                           // .quad -294682202642863838
	QUAD $0x6f773fc3603db4a9                           // .quad 8031958568804398249
	QUAD $0x9d71ac8fada6c9b5                           // .quad -7101705404292871755
	QUAD $0xcb550fb4384d21d3                           // .quad -3795109844276665901
	QUAD $0xc4ce17b399107c22                           // .quad -4265445736938701790
	QUAD $0x7e2a53a146606a48                           // .quad 9091170749936331336
	QUAD $0xf6019da07f549b2b                           // .quad -720121152745989333
	QUAD $0x2eda7444cbfc426d                           // .quad 3376138709496513133
	QUAD $0x99c102844f94e0fb                           // .quad -7367604748107325189
	QUAD $0xfa911155fefb5308                           // .quad -391512631556746488
	QUAD $0xc0314325637a1939                           // .quad -4597819916706768583
	QUAD $0x793555ab7eba27ca                           // .quad 8733981247408842698
	QUAD $0xf03d93eebc589f88                           // .quad -1135588877456072824
	QUAD $0x4bc1558b2f3458de                           // .quad 5458738279630526686
	QUAD $0x96267c7535b763b5                           // .quad -7627272076051127371
	QUAD $0x9eb1aaedfb016f16                           // .quad -7011635205744005354
	QUAD $0xbbb01b9283253ca2                           // .quad -4922404076636521310
	QUAD $0x465e15a979c1cadc                           // .quad 5070514048102157020
	QUAD $0xea9c227723ee8bcb                           // .quad -1541319077368263733
	QUAD $0x0bfacd89ec191ec9                           // .quad 863228270850154185
	QUAD $0x92a1958a7675175f                           // .quad -7880853450996246689
	QUAD $0xcef980ec671f667b                           // .quad -3532650679864695173
	QUAD $0xb749faed14125d36                           // .quad -5239380795317920458
	QUAD $0x82b7e12780e7401a                           // .quad -9027499368258256870
	QUAD $0xe51c79a85916f484                           // .quad -1937539975720012668
	QUAD $0xd1b2ecb8b0908810                           // .quad -3336344095947716592
	QUAD $0x8f31cc0937ae58d2                           // .quad -8128491512466089774
	QUAD $0x861fa7e6dcb4aa15                           // .quad -8782116138362033643
	QUAD $0xb2fe3f0b8599ef07                           // .quad -5548928372155224313
	QUAD $0x67a791e093e1d49a                           // .quad 7469098900757009562
	QUAD $0xdfbdcece67006ac9                           // .quad -2324474446766642487
	QUAD $0xe0c8bb2c5c6d24e0                           // .quad -2249342214667950880
	QUAD $0x8bd6a141006042bd                           // .quad -8370325556870233411
	QUAD $0x58fae9f773886e18                           // .quad 6411694268519837208
	QUAD $0xaecc49914078536d                           // .quad -5851220927660403859
	QUAD $0xaf39a475506a899e                           // .quad -5820440219632367202
	QUAD $0xda7f5bf590966848                           // .quad -2702340141148116920
	QUAD $0x6d8406c952429603                           // .quad 7891439908798240259
	QUAD $0x888f99797a5e012d                           // .quad -8606491615858654931
	QUAD $0xc8e5087ba6d33b83                           // .quad -3970758169284363389
	QUAD $0xaab37fd7d8f58178                           // .quad -6146428501395930760
	QUAD $0xfb1e4a9a90880a64                           // .quad -351761693178066332
	QUAD $0xd5605fcdcf32e1d6                           // .quad -3071349608317525546
	QUAD $0x5cf2eea09a55067f                           // .quad 6697677969404790399
	QUAD $0x855c3be0a17fcd26                           // .quad -8837122532839535322
	QUAD $0xf42faa48c0ea481e                           // .quad -851274575098787810
	QUAD $0xa6b34ad8c9dfc06f                           // .quad -6434717147622031249
	QUAD $0xf13b94daf124da26                           // .quad -1064093218873484762
	QUAD $0xd0601d8efc57b08b                           // .quad -3431710416100151157
	QUAD $0x76c53d08d6b70858                           // .quad 8558313775058847832
	QUAD $0x823c12795db6ce57                           // .quad -9062348037703676329
	QUAD $0x54768c4b0c64ca6e                           // .quad 6086206200396171886
	QUAD $0xa2cb1717b52481ed                           // .quad -6716249028702207507
	QUAD $0xa9942f5dcf7dfd09                           // .quad -6227300304786948855
	QUAD $0xcb7ddcdda26da268                           // .quad -3783625267450371480
	QUAD $0xd3f93b35435d7c4c                           // .quad -3172439362556298164
	QUAD $0xfe5d54150b090b02                           // .quad -117845565885576446
	QUAD $0xc47bc5014a1a6daf                           // .quad -4288617610811380305
	QUAD $0x9efa548d26e5a6e1                           // .quad -6991182506319567135
	QUAD $0x359ab6419ca1091b                           // .quad 3862600023340550427
	QUAD $0xc6b8e9b0709f109a                           // .quad -4127292114472071014
	QUAD $0xc30163d203c94b62                           // .quad -4395122007679087774
	QUAD $0xf867241c8cc6d4c0                           // .quad -547429124662700864
	QUAD $0x79e0de63425dcf1d                           // .quad 8782263791269039901
	QUAD $0x9b407691d7fc44f8                           // .quad -7259672230555269896
	QUAD $0x985915fc12f542e4                           // .quad -7468914334623251740
	QUAD $0xc21094364dfb5636                           // .quad -4462904269766699466
	QUAD $0x3e6f5b7b17b2939d                           // .quad 4498915137003099037
	QUAD $0xf294b943e17a2bc4                           // .quad -966944318780986428
	QUAD $0xa705992ceecf9c42                           // .quad -6411550076227838910
	QUAD $0x979cf3ca6cec5b5a                           // .quad -7521869226879198374
	QUAD $0x50c6ff782a838353                           // .quad 5820620459997365075
	QUAD $0xbd8430bd08277231                           // .quad -4790650515171610063
	QUAD $0xa4f8bf5635246428                           // .quad -6559282480285457368
	QUAD $0xece53cec4a314ebd                           // .quad -1376627125537124675
	QUAD $0x871b7795e136be99                           // .quad -8711237568605798759
	QUAD $0x940f4613ae5ed136                           // .quad -7777920981101784778
	QUAD $0x28e2557b59846e3f                           // .quad 2946011094524915263
	QUAD $0xb913179899f68584                           // .quad -5110715207949843068
	QUAD $0x331aeada2fe589cf                           // .quad 3682513868156144079
	QUAD $0xe757dd7ec07426e5                           // .quad -1776707991509915931
	QUAD $0x3ff0d2c85def7621                           // .quad 4607414176811284001
	QUAD $0x9096ea6f3848984f                           // .quad -8027971522334779313
	QUAD $0x0fed077a756b53a9                           // .quad 1147581702586717097
	QUAD $0xb4bca50b065abe63                           // .quad -5423278384491086237
	QUAD $0xd3e8495912c62894                           // .quad -3177208890193991532
	QUAD $0xe1ebce4dc7f16dfb                           // .quad -2167411962186469893
	QUAD $0x64712dd7abbbd95c                           // .quad 7237616480483531100
	QUAD $0x8d3360f09cf6e4bd                           // .quad -8272161504007625539
	QUAD $0xbd8d794d96aacfb3                           // .quad -4788037454677749837
	QUAD $0xb080392cc4349dec                           // .quad -5728515861582144020
	QUAD $0xecf0d7a0fc5583a0                           // .quad -1373360799919799392
	QUAD $0xdca04777f541c567                           // .quad -2548958808550292121
	QUAD $0xf41686c49db57244                           // .quad -858350499949874620
	QUAD $0x89e42caaf9491b60                           // .quad -8510628282985014432
	QUAD $0x311c2875c522ced5                           // .quad 3538747893490044629
	QUAD $0xac5d37d5b79b6239                           // .quad -6026599335303880135
	QUAD $0x7d633293366b828b                           // .quad 9035120885289943691
	QUAD $0xd77485cb25823ac7                           // .quad -2921563150702462265
	QUAD $0xae5dff9c02033197                           // .quad -5882264492762254953
	QUAD $0x86a8d39ef77164bc                           // .quad -8743505996830120772
	QUAD $0xd9f57f830283fdfc                           // .quad -2741144597525430788
	QUAD $0xa8530886b54dbdeb                           // .quad -6317696477610263061
	QUAD $0xd072df63c324fd7b                           // .quad -3426430746906788485
	QUAD $0xd267caa862a12d66                           // .quad -3285434578585440922
	QUAD $0x4247cb9e59f71e6d                           // .quad 4776009810824339053
	QUAD $0x8380dea93da4bc60                           // .quad -8970925639256982432
	QUAD $0x52d9be85f074e608                           // .quad 5970012263530423816
	QUAD $0xa46116538d0deb78                           // .quad -6601971030643840136
	QUAD $0x67902e276c921f8b                           // .quad 7462515329413029771
	QUAD $0xcd795be870516656                           // .quad -3640777769877412266
	QUAD $0x00ba1cd8a3db53b6                           // .quad 52386062455755702
	QUAD $0x806bd9714632dff6                           // .quad -9193015133814464522
	QUAD $0x80e8a40eccd228a4                           // .quad -9157889458785081180
	QUAD $0xa086cfcd97bf97f3                           // .quad -6879582898840692749
	QUAD $0x6122cd128006b2cd                           // .quad 6999382250228200141
	QUAD $0xc8a883c0fdaf7df0                           // .quad -3987792605123478032
	QUAD $0x796b805720085f81                           // .quad 8749227812785250177
	QUAD $0xfad2a4b13d1b5d6c                           // .quad -373054737976959636
	QUAD $0xcbe3303674053bb0                           // .quad -3755104653863994448
	QUAD $0x9cc3a6eec6311a63                           // .quad -7150688238876681629
	QUAD $0xbedbfc4411068a9c                           // .quad -4693880817329993060
	QUAD $0xc3f490aa77bd60fc                           // .quad -4326674280168464132
	QUAD $0xee92fb5515482d44                           // .quad -1255665003235103420
	QUAD $0xf4f1b4d515acb93b                           // .quad -796656831783192261
	QUAD $0x751bdd152d4d1c4a                           // .quad 8438581409832836170
	QUAD $0x991711052d8bf3c5                           // .quad -7415439547505577019
	QUAD $0xd262d45a78a0635d                           // .quad -3286831292991118499
	QUAD $0xbf5cd54678eef0b6                           // .quad -4657613415954583370
	QUAD $0x86fb897116c87c34                           // .quad -8720225134666286028
	QUAD $0xef340a98172aace4                           // .quad -1210330751515841308
	QUAD $0xd45d35e6ae3d4da0                           // .quad -3144297699952734816
	QUAD $0x9580869f0e7aac0e                           // .quad -7673985747338482674
	QUAD $0x8974836059cca109                           // .quad -8542058143368306423
	QUAD $0xbae0a846d2195712                           // .quad -4980796165745715438
	QUAD $0x2bd1a438703fc94b                           // .quad 3157485376071780683
	QUAD $0xe998d258869facd7                           // .quad -1614309188754756393
	QUAD $0x7b6306a34627ddcf                           // .quad 8890957387685944783
	QUAD $0x91ff83775423cc06                           // .quad -7926472270612804602
	QUAD $0x1a3bc84c17b1d542                           // .quad 1890324697752655170
	QUAD $0xb67f6455292cbf08                           // .quad -5296404319838617848
	QUAD $0x20caba5f1d9e4a93                           // .quad 2362905872190818963
	QUAD $0xe41f3d6a7377eeca                           // .quad -2008819381370884406
	QUAD $0x547eb47b7282ee9c                           // .quad 6088502188546649756
	QUAD $0x8e938662882af53e                           // .quad -8173041140997884610
	QUAD $0xe99e619a4f23aa43                           // .quad -1612744301171463613
	QUAD $0xb23867fb2a35b28d                           // .quad -5604615407819967859
	QUAD $0x6405fa00e2ec94d4                           // .quad 7207441660390446292
	QUAD $0xdec681f9f4c31f31                           // .quad -2394083241347571919
	QUAD $0xde83bc408dd3dd04                           // .quad -2412877989897052924
	QUAD $0x8b3c113c38f9f37e                           // .quad -8413831053483314306
	QUAD $0x9624ab50b148d445                           // .quad -7627783505798704059
	QUAD $0xae0b158b4738705e                           // .quad -5905602798426754978
	QUAD $0x3badd624dd9b0957                           // .quad 4300328673033783639
	QUAD $0xd98ddaee19068c76                           // .quad -2770317479606055818
	QUAD $0xe54ca5d70a80e5d6                           // .quad -1923980597781273130
	QUAD $0x87f8a8d4cfa417c9                           // .quad -8648977452394866743
	QUAD $0x5e9fcf4ccd211f4c                           // .quad 6818396289628184396
	QUAD $0xa9f6d30a038d1dbc                           // .quad -6199535797066195524
	QUAD $0x7647c3200069671f                           // .quad 8522995362035230495
	QUAD $0xd47487cc8470652b                           // .quad -3137733727905356501
	QUAD $0x29ecd9f40041e073                           // .quad 3021029092058325107
	QUAD $0x84c8d4dfd2c63f3b                           // .quad -8878612607581929669
	QUAD $0xf468107100525890                           // .quad -835399653354481520
	QUAD $0xa5fb0a17c777cf09                           // .quad -6486579741050024183
	QUAD $0x7182148d4066eeb4                           // .quad 8179122470161673908
	QUAD $0xcf79cc9db955c2cc                           // .quad -3496538657885142324
	QUAD $0xc6f14cd848405530                           // .quad -4111420493003729616
	QUAD $0x81ac1fe293d599bf                           // .quad -9102865688819295809
	QUAD $0xb8ada00e5a506a7c                           // .quad -5139275616254662020
	QUAD $0xa21727db38cb002f                           // .quad -6766896092596731857
	QUAD $0xa6d90811f0e4851c                           // .quad -6424094520318327524
	QUAD $0xca9cf1d206fdc03b                           // .quad -3846934097318526917
	QUAD $0x908f4a166d1da663                           // .quad -8030118150397909405
	QUAD $0xfd442e4688bd304a                           // .quad -196981603220770742
	QUAD $0x9a598e4e043287fe                           // .quad -7324666853212387330
	QUAD $0x9e4a9cec15763e2e                           // .quad -7040642529654063570
	QUAD $0x40eff1e1853f29fd                           // .quad 4679224488766679549
	QUAD $0xc5dd44271ad3cdba                           // .quad -4189117143640191558
	QUAD $0xd12bee59e68ef47c                           // .quad -3374341425896426372
	QUAD $0xf7549530e188c128                           // .quad -624710411122851544
	QUAD $0x82bb74f8301958ce                           // .quad -9026492418826348338
	QUAD $0x9a94dd3e8cf578b9                           // .quad -7307973034592864071
	QUAD $0xe36a52363c1faf01                           // .quad -2059743486678159615
	QUAD $0xc13a148e3032d6e7                           // .quad -4523280274813692185
	QUAD $0xdc44e6c3cb279ac1                           // .quad -2574679358347699519
	QUAD $0xf18899b1bc3f8ca1                           // .quad -1042414325089727327
	QUAD $0x29ab103a5ef8c0b9                           // .quad 3002511419460075705
	QUAD $0x96f5600f15a7b7e5                           // .quad -7569037980822161435
	QUAD $0x7415d448f6b6f0e7                           // .quad 8364825292752482535
	QUAD $0xbcb2b812db11a5de                           // .quad -4849611457600313890
	QUAD $0x111b495b3464ad21                           // .quad 1232659579085827361
	QUAD $0xebdf661791d60f56                           // .quad -1450328303573004458
	QUAD $0xcab10dd900beec34                           // .quad -3841273781498745804
	QUAD $0x936b9fcebb25c995                           // .quad -7823984217374209643
	QUAD $0x3d5d514f40eea742                           // .quad 4421779809981343554
	QUAD $0xb84687c269ef3bfb                           // .quad -5168294253290374149
	QUAD $0x0cb4a5a3112a5112                           // .quad 915538744049291538
	QUAD $0xe65829b3046b0afa                           // .quad -1848681798185579782
	QUAD $0x47f0e785eaba72ab                           // .quad 5183897733458195115
	QUAD $0x8ff71a0fe2c2e6dc                           // .quad -8072955151507069220
	QUAD $0x59ed216765690f56                           // .quad 6479872166822743894
	QUAD $0xb3f4e093db73a093                           // .quad -5479507920956448621
	QUAD $0x306869c13ec3532c                           // .quad 3488154190101041964
	QUAD $0xe0f218b8d25088b8                           // .quad -2237698882768172872
	QUAD $0x1e414218c73a13fb                           // .quad 2180096368813151227
	QUAD $0x8c974f7383725573                           // .quad -8316090829371189901
	QUAD $0xe5d1929ef90898fa                           // .quad -1886565557410948870
	QUAD $0xafbd2350644eeacf                           // .quad -5783427518286599473
	QUAD $0xdf45f746b74abf39                           // .quad -2358206946763686087
	QUAD $0xdbac6c247d62a583                           // .quad -2617598379430861437
	QUAD $0x6b8bba8c328eb783                           // .quad 7749492695127472003
	QUAD $0x894bc396ce5da772                           // .quad -8553528014785370254
	QUAD $0x066ea92f3f326564                           // .quad 463493832054564196
	QUAD $0xab9eb47c81f5114f                           // .quad -6080224000054324913
	QUAD $0xc80a537b0efefebd                           // .quad -4032318728359182659
	QUAD $0xd686619ba27255a2                           // .quad -2988593981640518238
	QUAD $0xbd06742ce95f5f36                           // .quad -4826042214438183114
	QUAD $0x8613fd0145877585                           // .quad -8785400266166405755
	QUAD $0x2c48113823b73704                           // .quad 3190819268807046916
	QUAD $0xa798fc4196e952e7                           // .quad -6370064314280619289
	QUAD $0xf75a15862ca504c5                           // .quad -623161932418579259
	QUAD $0xd17f3b51fca3a7a0                           // .quad -3350894374423386208
	QUAD $0x9a984d73dbe722fb                           // .quad -7307005235402693893
	QUAD $0x82ef85133de648c4                           // .quad -9011838011655698236
	QUAD $0xc13e60d0d2e0ebba                           // .quad -4522070525825979462
	QUAD $0xa3ab66580d5fdaf5                           // .quad -6653111496142234891
	QUAD $0x318df905079926a8                           // .quad 3570783879572301480
	QUAD $0xcc963fee10b7d1b3                           // .quad -3704703351750405709
	QUAD $0xfdf17746497f7052                           // .quad -148206168962011054
	QUAD $0xffbbcfe994e5c61f                           // .quad -19193171260619233
	QUAD $0xfeb6ea8bedefa633                           // .quad -92628855601256909
	QUAD $0x9fd561f1fd0f9bd3                           // .quad -6929524759678968877
	QUAD $0xfe64a52ee96b8fc0                           // .quad -115786069501571136
	QUAD $0xc7caba6e7c5382c8                           // .quad -4050219931171323192
	QUAD $0x3dfdce7aa3c673b0                           // .quad 4466953431550423984
	QUAD $0xf9bd690a1b68637b                           // .quad -451088895536766085
	QUAD $0x06bea10ca65c084e                           // .quad 486002885505321038
	QUAD $0x9c1661a651213e2d                           // .quad -7199459587351560659
	QUAD $0x486e494fcff30a62                           // .quad 5219189625309039202
	QUAD $0xc31bfa0fe5698db8                           // .quad -4387638465762062920
	QUAD $0x5a89dba3c3efccfa                           // .quad 6523987031636299002
	QUAD $0xf3e2f893dec3f126                           // .quad -872862063775190746
	QUAD $0xf89629465a75e01c                           // .quad -534194123654701028
	QUAD $0x986ddb5c6b3a76b7                           // .quad -7463067817500576073
	QUAD $0xf6bbb397f1135823                           // .quad -667742654568376285
	QUAD $0xbe89523386091465                           // .quad -4717148753448332187
	QUAD $0x746aa07ded582e2c                           // .quad 8388693718644305452
	QUAD $0xee2ba6c0678b597f                           // .quad -1284749923383027329
	QUAD $0xa8c2a44eb4571cdc                           // .quad -6286281471915778852
	QUAD $0x94db483840b717ef                           // .quad -7720497729755473937
	QUAD $0x92f34d62616ce413                           // .quad -7857851839894723565
	QUAD $0xba121a4650e4ddeb                           // .quad -5038936143766954517
	QUAD $0x77b020baf9c81d17                           // .quad 8624429273841147159
	QUAD $0xe896a0d7e51e1566                           // .quad -1686984161281305242
	QUAD $0x0ace1474dc1d122e                           // .quad 778582277723329070
	QUAD $0x915e2486ef32cd60                           // .quad -7971894128441897632
	QUAD $0x0d819992132456ba                           // .quad 973227847154161338
	QUAD $0xb5b5ada8aaff80b8                           // .quad -5353181642124984136
	QUAD $0x10e1fff697ed6c69                           // .quad 1216534808942701673
	QUAD $0xe3231912d5bf60e6                           // .quad -2079791034228842266
	QUAD $0xca8d3ffa1ef463c1                           // .quad -3851351762838199359
	QUAD $0x8df5efabc5979c8f                           // .quad -8217398424034108273
	QUAD $0xbd308ff8a6b17cb2                           // .quad -4814189703547749198
	QUAD $0xb1736b96b6fd83b3                           // .quad -5660062011615247437
	QUAD $0xac7cb3f6d05ddbde                           // .quad -6017737129434686498
	QUAD $0xddd0467c64bce4a0                           // .quad -2463391496091671392
	QUAD $0x6bcdf07a423aa96b                           // .quad 7768129340171790699
	QUAD $0x8aa22c0dbef60ee4                           // .quad -8457148712698376476
	QUAD $0x86c16c98d2c953c6                           // .quad -8736582398494813242
	QUAD $0xad4ab7112eb3929d                           // .quad -5959749872445582691
	QUAD $0xe871c7bf077ba8b7                           // .quad -1697355961263740745
	QUAD $0xd89d64d57a607744                           // .quad -2838001322129590460
	QUAD $0x11471cd764ad4972                           // .quad 1244995533423855986
	QUAD $0x87625f056c7c4a8b                           // .quad -8691279853972075893
	QUAD $0xd598e40d3dd89bcf                           // .quad -3055441601647567921
	QUAD $0xa93af6c6c79b5d2d                           // .quad -6252413799037706963
	QUAD $0x4aff1d108d4ec2c3                           // .quad 5404070034795315907
	QUAD $0xd389b47879823479                           // .quad -3203831230369745799
	QUAD $0xcedf722a585139ba                           // .quad -3539985255894009414
	QUAD $0x843610cb4bf160cb                           // .quad -8919923546622172981
	QUAD $0xc2974eb4ee658828                           // .quad -4424981569867511768
	QUAD $0xa54394fe1eedb8fe                           // .quad -6538218414850328322
	QUAD $0x733d226229feea32                           // .quad 8303831092947774002
	QUAD $0xce947a3da6a9273e                           // .quad -3561087000135522498
	QUAD $0x0806357d5a3f525f                           // .quad 578208414664970847
	QUAD $0x811ccc668829b887                           // .quad -9143208402725783417
	QUAD $0xca07c2dcb0cf26f7                           // .quad -3888925500096174345
	QUAD $0xa163ff802a3426a8                           // .quad -6817324484979841368
	QUAD $0xfc89b393dd02f0b5                           // .quad -249470856692830027
	QUAD $0xc9bcff6034c13052                           // .quad -3909969587797413806
	QUAD $0xbbac2078d443ace2                           // .quad -4923524589293425438
	QUAD $0xfc2c3f3841f17c67                           // .quad -275775966319379353
	QUAD $0xd54b944b84aa4c0d                           // .quad -3077202868308390899
	QUAD $0x9d9ba7832936edc0                           // .quad -7089889006590693952
	QUAD $0x0a9e795e65d4df11                           // .quad 765182433041899281
	QUAD $0xc5029163f384a931                           // .quad -4250675239810979535
	QUAD $0x4d4617b5ff4a16d5                           // .quad 5568164059729762005
	QUAD $0xf64335bcf065d37d                           // .quad -701658031336336515
	QUAD $0x504bced1bf8e4e45                           // .quad 5785945546544795205
	QUAD $0x99ea0196163fa42e                           // .quad -7356065297226292178
	QUAD $0xe45ec2862f71e1d6                           // .quad -1990940103673781802
	QUAD $0xc06481fb9bcf8d39                           // .quad -4583395603105477319
	QUAD $0x5d767327bb4e5a4c                           // .quad 6734696907262548556
	QUAD $0xf07da27a82c37088                           // .quad -1117558485454458744
	QUAD $0x3a6a07f8d510f86f                           // .quad 4209185567039092847
	QUAD $0x964e858c91ba2655                           // .quad -7616003081050118571
	QUAD $0x890489f70a55368b                           // .quad -8573576096483297653
	QUAD $0xbbe226efb628afea                           // .quad -4908317832885260310
	QUAD $0x2b45ac74ccea842e                           // .quad 3118087934678041646
	QUAD $0xeadab0aba3b2dbe5                           // .quad -1523711272679187483
	QUAD $0x3b0b8bc90012929d                           // .quad 4254647968387469981
	QUAD $0x92c8ae6b464fc96f                           // .quad -7869848573065574033
	QUAD $0x09ce6ebb40173744                           // .quad 706623942056949572
	QUAD $0xb77ada0617e3bbcb                           // .quad -5225624697904579637
	QUAD $0xcc420a6a101d0515                           // .quad -3728406090856200939
	QUAD $0xe55990879ddcaabd                           // .quad -1920344853953336643
	QUAD $0x9fa946824a12232d                           // .quad -6941939825212513491
	QUAD $0x8f57fa54c2a9eab6                           // .quad -8117744561361917258
	QUAD $0x47939822dc96abf9                           // .quad 5157633273766521849
	QUAD $0xb32df8e9f3546564                           // .quad -5535494683275008668
	QUAD $0x59787e2b93bc56f7                           // .quad 6447041592208152311
	QUAD $0xdff9772470297ebd                           // .quad -2307682335666372931
	QUAD $0x57eb4edb3c55b65a                           // .quad 6335244004343789146
	QUAD $0x8bfbea76c619ef36                           // .quad -8359830487432564938
	QUAD $0xede622920b6b23f1                           // .quad -1304317031425039375
	QUAD $0xaefae51477a06b03                           // .quad -5838102090863318269
	QUAD $0xe95fab368e45eced                           // .quad -1630396289281299219
	QUAD $0xdab99e59958885c4                           // .quad -2685941595151759932
	QUAD $0x11dbcb0218ebb414                           // .quad 1286845328412881940
	QUAD $0x88b402f7fd75539b                           // .quad -8596242524610931813
	QUAD $0xd652bdc29f26a119                           // .quad -3003129357911285479
	QUAD $0xaae103b5fcd2a881                           // .quad -6133617137336276863
	QUAD $0x4be76d3346f0495f                           // .quad 5469460339465668959
	QUAD $0xd59944a37c0752a2                           // .quad -3055335403242958174
	QUAD $0x6f70a4400c562ddb                           // .quad 8030098730593431003
	QUAD $0x857fcae62d8493a5                           // .quad -8827113654667930715
	QUAD $0xcb4ccd500f6bb952                           // .quad -3797434642040374958
	QUAD $0xa6dfbd9fb8e5b88e                           // .quad -6422206049907525490
	QUAD $0x7e2000a41346a7a7                           // .quad 9088264752731695015
	QUAD $0xd097ad07a71f26b2                           // .quad -3416071543957018958
	QUAD $0x8ed400668c0c28c8                           // .quad -8154892584824854328
	QUAD $0x825ecc24c873782f                           // .quad -9052573742614218705
	QUAD $0x728900802f0f32fa                           // .quad 8253128342678483706
	QUAD $0xa2f67f2dfa90563b                           // .quad -6704031159840385477
	QUAD $0x4f2b40a03ad2ffb9                           // .quad 5704724409920716729
	QUAD $0xcbb41ef979346bca                           // .quad -3768352931373093942
	QUAD $0xe2f610c84987bfa8                           // .quad -2092466524453879896
	QUAD $0xfea126b7d78186bc                           // .quad -98755145788979524
	QUAD $0x0dd9ca7d2df4d7c9                           // .quad 998051431430019017
	QUAD $0x9f24b832e6b0f436                           // .quad -6979250993759194058
	QUAD $0x91503d1c79720dbb                           // .quad -7975807747567252037
	QUAD $0xc6ede63fa05d3143                           // .quad -4112377723771604669
	QUAD $0x75a44c6397ce912a                           // .quad 8476984389250486570
	QUAD $0xf8a95fcf88747d94                           // .quad -528786136287117932
	QUAD $0xc986afbe3ee11aba                           // .quad -3925256793573221702
	QUAD $0x9b69dbe1b548ce7c                           // .quad -7248020362820530564
	QUAD $0xfbe85badce996168                           // .quad -294884973539139224
	QUAD $0xc24452da229b021b                           // .quad -4448339435098275301
	QUAD $0xfae27299423fb9c3                           // .quad -368606216923924029
	QUAD $0xf2d56790ab41c2a2                           // .quad -948738275445456222
	QUAD $0xdccd879fc967d41a                           // .quad -2536221894791146470
	QUAD $0x97c560ba6b0919a5                           // .quad -7510490449794491995
	QUAD $0x5400e987bbc1c920                           // .quad 6053094668365842720
	QUAD $0xbdb6b8e905cb600f                           // .quad -4776427043815727089
	QUAD $0x290123e9aab23b68                           // .quad 2954682317029915496
	QUAD $0xed246723473e3813                           // .quad -1358847786342270957
	QUAD $0xf9a0b6720aaf6521                           // .quad -459166561069996767
	QUAD $0x9436c0760c86e30b                           // .quad -7766808894105001205
	QUAD $0xf808e40e8d5b3e69                           // .quad -573958201337495959
	QUAD $0xb94470938fa89bce                           // .quad -5096825099203863602
	QUAD $0xb60b1d1230b20e04                           // .quad -5329133770099257852
	QUAD $0xe7958cb87392c2c2                           // .quad -1759345355577441598
	QUAD $0xb1c6f22b5e6f48c2                           // .quad -5636551615525730110
	QUAD $0x90bd77f3483bb9b9                           // .quad -8017119874876982855
	QUAD $0x1e38aeb6360b1af3                           // .quad 2177682517447613171
	QUAD $0xb4ecd5f01a4aa828                           // .quad -5409713825168840664
	QUAD $0x25c6da63c38de1b0                           // .quad 2722103146809516464
	QUAD $0xe2280b6c20dd5232                           // .quad -2150456263033662926
	QUAD $0x579c487e5a38ad0e                           // .quad 6313000485183335694
	QUAD $0x8d590723948a535f                           // .quad -8261564192037121185
	QUAD $0x2d835a9df0c6d851                           // .quad 3279564588051781713
	QUAD $0xb0af48ec79ace837                           // .quad -5715269221619013577
	QUAD $0xf8e431456cf88e65                           // .quad -512230283362660763
	QUAD $0xdcdb1b2798182244                           // .quad -2532400508596379068
	QUAD $0x1b8e9ecb641b58ff                           // .quad 1985699082112030975
	QUAD $0x8a08f0f8bf0f156b                           // .quad -8500279345513818773
	QUAD $0xe272467e3d222f3f                           // .quad -2129562165787349185
	QUAD $0xac8b2d36eed2dac5                           // .quad -6013663163464885563
	QUAD $0x5b0ed81dcc6abb0f                           // .quad 6561419329620589327
	QUAD $0xd7adf884aa879177                           // .quad -2905392935903719049
	QUAD $0x98e947129fc2b4e9                           // .quad -7428327965055601431
	QUAD $0x86ccbb52ea94baea                           // .quad -8733399612580906262
	QUAD $0x3f2398d747b36224                           // .quad 4549648098962661924
	QUAD $0xa87fea27a539e9a5                           // .quad -6305063497298744923
	QUAD $0x8eec7f0d19a03aad                           // .quad -8147997931578836307
	QUAD $0xd29fe4b18e88640e                           // .quad -3269643353196043250
	QUAD $0x1953cf68300424ac                           // .quad 1825030320404309164
	QUAD $0x83a3eeeef9153e89                           // .quad -8961056123388608887
	QUAD $0x5fa8c3423c052dd7                           // .quad 6892973918932774359
	QUAD $0xa48ceaaab75a8e2b                           // .quad -6589634135808373205
	QUAD $0x3792f412cb06794d                           // .quad 4004531380238580045
	QUAD $0xcdb02555653131b6                           // .quad -3625356651333078602
	QUAD $0xe2bbd88bbee40bd0                           // .quad -2108853905778275376
	QUAD $0x808e17555f3ebf11                           // .quad -9183376934724255983
	QUAD $0x5b6aceaeae9d0ec4                           // .quad 6587304654631931588
	QUAD $0xa0b19d2ab70e6ed6                           // .quad -6867535149977932074
	QUAD $0xf245825a5a445275                           // .quad -989241218564861323
	QUAD $0xc8de047564d20a8b                           // .quad -3972732919045027189
	QUAD $0xeed6e2f0f0d56712                           // .quad -1236551523206076654
	QUAD $0xfb158592be068d2e                           // .quad -354230130378896082
	QUAD $0x55464dd69685606b                           // .quad 6144684325637283947
	QUAD $0x9ced737bb6c4183d                           // .quad -7138922859127891907
	QUAD $0xaa97e14c3c26b886                           // .quad -6154202648235558778
	QUAD $0xc428d05aa4751e4c                           // .quad -4311967555482476980
	QUAD $0xd53dd99f4b3066a8                           // .quad -3081067291867060568
	QUAD $0xf53304714d9265df                           // .quad -778273425925708321
	QUAD $0xe546a8038efe4029                           // .quad -1925667057416912855
	QUAD $0x993fe2c6d07b7fab                           // .quad -7403949918844649557
	QUAD $0xde98520472bdd033                           // .quad -2407083821771141069
	QUAD $0xbf8fdb78849a5f96                           // .quad -4643251380128424042
	QUAD $0x963e66858f6d4440                           // .quad -7620540795641314240
	QUAD $0xef73d256a5c0f77c                           // .quad -1192378206733142148
	QUAD $0xdde7001379a44aa8                           // .quad -2456994988062127448
	QUAD $0x95a8637627989aad                           // .quad -7662765406849295699
	QUAD $0x5560c018580d5d52                           // .quad 6152128301777116498
	QUAD $0xbb127c53b17ec159                           // .quad -4966770740134231719
	QUAD $0xaab8f01e6e10b4a6                           // .quad -6144897678060768090
	QUAD $0xe9d71b689dde71af                           // .quad -1596777406740401745
	QUAD $0xcab3961304ca70e8                           // .quad -3840561048787980056
	QUAD $0x9226712162ab070d                           // .quad -7915514906853832947
	QUAD $0x3d607b97c5fd0d22                           // .quad 4422670725869800738
	QUAD $0xb6b00d69bb55c8d1                           // .quad -5282707615139903279
	QUAD $0x8cb89a7db77c506a                           // .quad -8306719647944912790
	QUAD $0xe45c10c42a2b3b05                           // .quad -1991698500497491195
	QUAD $0x77f3608e92adb242                           // .quad 8643358275316593218
	QUAD $0x8eb98a7a9a5b04e3                           // .quad -8162340590452013853
	QUAD $0x55f038b237591ed3                           // .quad 6192511825718353619
	QUAD $0xb267ed1940f1c61c                           // .quad -5591239719637629412
	QUAD $0x6b6c46dec52f6688                           // .quad 7740639782147942024
	QUAD $0xdf01e85f912e37a3                           // .quad -2377363631119648861
	QUAD $0x2323ac4b3b3da015                           // .quad 2532056854628769813
	QUAD $0x8b61313bbabce2c6                           // .quad -8403381297090862394
	QUAD $0xabec975e0a0d081a                           // .quad -6058300968568813542
	QUAD $0xae397d8aa96c1b77                           // .quad -5892540602936190089
	QUAD $0x96e7bd358c904a21                           // .quad -7572876210711016927
	QUAD $0xd9c7dced53c72255                           // .quad -2753989735242849707
	QUAD $0x7e50d64177da2e54                           // .quad 9102010423587778132
	QUAD $0x881cea14545c7575                           // .quad -8638772612167862923
	QUAD $0xdde50bd1d5d0b9e9                           // .quad -2457545025797441047
	QUAD $0xaa242499697392d2                           // .quad -6186779746782440750
	QUAD $0x955e4ec64b44e864                           // .quad -7683617300674189212
	QUAD $0xd4ad2dbfc3d07787                           // .quad -3121788665050663033
	QUAD $0xbd5af13bef0b113e                           // .quad -4802260812921368258
	QUAD $0x84ec3c97da624ab4                           // .quad -8868646943297746252
	QUAD $0xecb1ad8aeacdd58e                           // .quad -1391139997724322418
	QUAD $0xa6274bbdd0fadd61                           // .quad -6474122660694794911
	QUAD $0x67de18eda5814af2                           // .quad 7484447039699372786
	QUAD $0xcfb11ead453994ba                           // .quad -3480967307441105734
	QUAD $0x80eacf948770ced7                           // .quad -9157278655470055721
	QUAD $0x81ceb32c4b43fcf4                           // .quad -9093133594791772940
	QUAD $0xa1258379a94d028d                           // .quad -6834912300910181747
	QUAD $0xa2425ff75e14fc31                           // .quad -6754730975062328271
	QUAD $0x096ee45813a04330                           // .quad 679731660717048624
	QUAD $0xcad2f7f5359a3b3e                           // .quad -3831727700400522434
	QUAD $0x8bca9d6e188853fc                           // .quad -8373707460958465028
	QUAD $0xfd87b5f28300ca0d                           // .quad -177973607073265139
	QUAD $0x775ea264cf55347d                           // .quad 8601490892183123069
	QUAD $0x9e74d1b791e07e48                           // .quad -7028762532061872568
	QUAD $0x95364afe032a819d                           // .quad -7694880458480647779
	QUAD $0xc612062576589dda                           // .quad -4174267146649952806
	QUAD $0x3a83ddbd83f52204                           // .quad 4216457482181353988
	QUAD $0xf79687aed3eec551                           // .quad -606147914885053103
	QUAD $0xc4926a9672793542                           // .quad -4282243101277735614
	QUAD $0x9abe14cd44753b52                           // .quad -7296371474444240046
	QUAD $0x75b7053c0f178293                           // .quad 8482254178684994195
	QUAD $0xc16d9a0095928a27                           // .quad -4508778324627912153
	QUAD $0x5324c68b12dd6338                           // .quad 5991131704928854840
	QUAD $0xf1c90080baf72cb1                           // .quad -1024286887357502287
	QUAD $0xd3f6fc16ebca5e03                           // .quad -3173071712060547581
	QUAD $0x971da05074da7bee                           // .quad -7557708332239520786
	QUAD $0x88f4bb1ca6bcf584                           // .quad -8578025658503072380
	QUAD $0xbce5086492111aea                           // .quad -4835449396872013078
	QUAD $0x2b31e9e3d06c32e5                           // .quad 3112525982153323237
	QUAD $0xec1e4a7db69561a5                           // .quad -1432625727662628443
	QUAD $0x3aff322e62439fcf                           // .quad 4251171748059520975
	QUAD $0x9392ee8e921d5d07                           // .quad -7812920107430224633
	QUAD $0x09befeb9fad487c2                           // .quad 702278666647013314
	QUAD $0xb877aa3236a4b449                           // .quad -5154464115860392887
	QUAD $0x4c2ebe687989a9b3                           // .quad 5489534351736154547
	QUAD $0xe69594bec44de15b                           // .quad -1831394126398103205
	QUAD $0x0f9d37014bf60a10                           // .quad 1125115960621402640
	QUAD $0x901d7cf73ab0acd9                           // .quad -8062150356639896359
	QUAD $0x538484c19ef38c94                           // .quad 6018080969204141204
	QUAD $0xb424dc35095cd80f                           // .quad -5466001927372482545
	QUAD $0x2865a5f206b06fb9                           // .quad 2910915193077788601
	QUAD $0xe12e13424bb40e13                           // .quad -2220816390788215277
	QUAD $0xf93f87b7442e45d3                           // .quad -486521013540076077
	QUAD $0x8cbccc096f5088cb                           // .quad -8305539271883716405
	QUAD $0xf78f69a51539d748                           // .quad -608151266925095096
	QUAD $0xafebff0bcb24aafe                           // .quad -5770238071427257602
	QUAD $0xb573440e5a884d1b                           // .quad -5371875102083756773
	QUAD $0xdbe6fecebdedd5be                           // .quad -2601111570856684098
	QUAD $0x31680a88f8953030                           // .quad 3560107088838733872
	QUAD $0x89705f4136b4a597                           // .quad -8543223759426509417
	QUAD $0xfdc20d2b36ba7c3d                           // .quad -161552157378970563
	QUAD $0xabcc77118461cefc                           // .quad -6067343680855748868
	QUAD $0x3d32907604691b4c                           // .quad 4409745821703674700
	QUAD $0xd6bf94d5e57a42bc                           // .quad -2972493582642298180
	QUAD $0xa63f9a49c2c1b10f                           // .quad -6467280898289979121
	QUAD $0x8637bd05af6c69b5                           // .quad -8775337516792518219
	QUAD $0x0fcf80dc33721d53                           // .quad 1139270913992301907
	QUAD $0xa7c5ac471b478423                           // .quad -6357485877563259869
	QUAD $0xd3c36113404ea4a8                           // .quad -3187597375937010520
	QUAD $0xd1b71758e219652b                           // .quad -3335171328526686933
	QUAD $0x645a1cac083126e9                           // .quad 7231123676894144233
	QUAD $0x83126e978d4fdf3b                           // .quad -9002011107970261189
	QUAD $0x3d70a3d70a3d70a3                           // .quad 4427218577690292387
	QUAD $0xa3d70a3d70a3d70a                           // .quad -6640827866535438582
	QUAD $0xcccccccccccccccc; QUAD $0xcccccccccccccccc // .space 16, '\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc\xcc'
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0x8000000000000000                           // .quad -9223372036854775808
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xa000000000000000                           // .quad -6917529027641081856
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xc800000000000000                           // .quad -4035225266123964416
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xfa00000000000000                           // .quad -432345564227567616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0x9c40000000000000                           // .quad -7187745005283311616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xc350000000000000                           // .quad -4372995238176751616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xf424000000000000                           // .quad -854558029293551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0x9896800000000000                           // .quad -7451627795949551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xbebc200000000000                           // .quad -4702848726509551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xee6b280000000000                           // .quad -1266874889709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0x9502f90000000000                           // .quad -7709325833709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xba43b74000000000                           // .quad -5024971273709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xe8d4a51000000000                           // .quad -1669528073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0x9184e72a00000000                           // .quad -7960984073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xb5e620f480000000                           // .quad -5339544073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xe35fa931a0000000                           // .quad -2062744073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0x8e1bc9bf04000000                           // .quad -8206744073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xb1a2bc2ec5000000                           // .quad -5646744073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xde0b6b3a76400000                           // .quad -2446744073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0x8ac7230489e80000                           // .quad -8446744073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xad78ebc5ac620000                           // .quad -5946744073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xd8d726b7177a8000                           // .quad -2821744073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0x878678326eac9000                           // .quad -8681119073709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xa968163f0a57b400                           // .quad -6239712823709551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xd3c21bcecceda100                           // .quad -3187955011209551616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0x84595161401484a0                           // .quad -8910000909647051616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xa56fa5b99019a5c8                           // .quad -6525815118631426616
	QUAD $0x0000000000000000                           // .quad 0
	QUAD $0xcecb8f27f4200f3a                           // .quad -3545582879861895366
	QUAD $0x4000000000000000                           // .quad 4611686018427387904
	QUAD $0x813f3978f8940984                           // .quad -9133518327554766460
	QUAD $0x5000000000000000                           // .quad 5764607523034234880
	QUAD $0xa18f07d736b90be5                           // .quad -6805211891016070171
	QUAD $0xa400000000000000                           // .quad -6629298651489370112
	QUAD $0xc9f2c9cd04674ede                           // .quad -3894828845342699810
	QUAD $0x4d00000000000000                           // .quad 5548434740920451072
	QUAD $0xfc6f7c4045812296                           // .quad -256850038250986858
	QUAD $0xf020000000000000                           // .quad -1143914305352105984
	QUAD $0x9dc5ada82b70b59d                           // .quad -7078060301547948643
	QUAD $0x6c28000000000000                           // .quad 7793479155164643328
	QUAD $0xc5371912364ce305                           // .quad -4235889358507547899
	QUAD $0xc732000000000000                           // .quad -4093209111326359552
	QUAD $0xf684df56c3e01bc6                           // .quad -683175679707046970
	QUAD $0x3c7f400000000000                           // .quad 4359273333062107136
	QUAD $0x9a130b963a6c115c                           // .quad -7344513827457986212
	QUAD $0x4b9f100000000000                           // .quad 5449091666327633920
	QUAD $0xc097ce7bc90715b3                           // .quad -4568956265895094861
	QUAD $0x1e86d40000000000                           // .quad 2199678564482154496
	QUAD $0xf0bdc21abb48db20                           // .quad -1099509313941480672
	QUAD $0x1314448000000000                           // .quad 1374799102801346560
	QUAD $0x96769950b50d88f4                           // .quad -7604722348854507276
	QUAD $0x17d955a000000000                           // .quad 1718498878501683200
	QUAD $0xbc143fa4e250eb31                           // .quad -4894216917640746191
	QUAD $0x5dcfab0800000000                           // .quad 6759809616554491904
	QUAD $0xeb194f8e1ae525fd                           // .quad -1506085128623544835
	QUAD $0x5aa1cae500000000                           // .quad 6530724019560251392
	QUAD $0x92efd1b8d0cf37be                           // .quad -7858832233030797378
	QUAD $0xf14a3d9e40000000                           // .quad -1059967012404461568
	QUAD $0xb7abc627050305ad                           // .quad -5211854272861108819
	QUAD $0x6d9ccd05d0000000                           // .quad 7898413271349198848
	QUAD $0xe596b7b0c643c719                           // .quad -1903131822648998119
	QUAD $0xe4820023a2000000                           // .quad -1981020733047832576
	QUAD $0x8f7e32ce7bea5c6f                           // .quad -8106986416796705681
	QUAD $0xdda2802c8a800000                           // .quad -2476275916309790720
	QUAD $0xb35dbf821ae4f38b                           // .quad -5522047002568494197
	QUAD $0xd50b2037ad200000                           // .quad -3095344895387238400
	QUAD $0xe0352f62a19e306e                           // .quad -2290872734783229842
	QUAD $0x4526f422cc340000                           // .quad 4982938468024057856
	QUAD $0x8c213d9da502de45                           // .quad -8349324486880600507
	QUAD $0x9670b12b7f410000                           // .quad -7606384970252091392
	QUAD $0xaf298d050e4395d6                           // .quad -5824969590173362730
	QUAD $0x3c0cdd765f114000                           // .quad 4327076842467049472
	QUAD $0xdaf3f04651d47b4c                           // .quad -2669525969289315508
	QUAD $0xa5880a69fb6ac800                           // .quad -6518949010312869888
	QUAD $0x88d8762bf324cd0f                           // .quad -8585982758446904049
	QUAD $0x8eea0d047a457a00                           // .quad -8148686262891087360
	QUAD $0xab0e93b6efee0053                           // .quad -6120792429631242157
	QUAD $0x72a4904598d6d880                           // .quad 8260886245095692416
	QUAD $0xd5d238a4abe98068                           // .quad -3039304518611664792
	QUAD $0x47a6da2b7f864750                           // .quad 5163053903184807760
	QUAD $0x85a36366eb71f041                           // .quad -8817094351773372351
	QUAD $0x999090b65f67d924                           // .quad -7381240676301154012
	QUAD $0xa70c3c40a64e6c51                           // .quad -6409681921289327535
	QUAD $0xfff4b4e3f741cf6d                           // .quad -3178808521666707
	QUAD $0xd0cf4b50cfe20765                           // .quad -3400416383184271515
	QUAD $0xbff8f10e7a8921a4                           // .quad -4613672773753429596
	QUAD $0x82818f1281ed449f                           // .quad -9042789267131251553
	QUAD $0xaff72d52192b6a0d                           // .quad -5767090967191786995
	QUAD $0xa321f2d7226895c7                           // .quad -6691800565486676537
	QUAD $0x9bf4f8a69f764490                           // .quad -7208863708989733744
	QUAD $0xcbea6f8ceb02bb39                           // .quad -3753064688430957767
	QUAD $0x02f236d04753d5b4                           // .quad 212292400617608628
	QUAD $0xfee50b7025c36a08                           // .quad -79644842111309304
	QUAD $0x01d762422c946590                           // .quad 132682750386005392
	QUAD $0x9f4f2726179a2245                           // .quad -6967307053960650171
	QUAD $0x424d3ad2b7b97ef5                           // .quad 4777539456409894645
	QUAD $0xc722f0ef9d80aad6                           // .quad -4097447799023424810
	QUAD $0xd2e0898765a7deb2                           // .quad -3251447716342407502
	QUAD $0xf8ebad2b84e0d58b                           // .quad -510123730351893109
	QUAD $0x63cc55f49f88eb2f                           // .quad 7191217214140771119
	QUAD $0x9b934c3b330c8577                           // .quad -7236356359111015049
	QUAD $0x3cbf6b71c76b25fb                           // .quad 4377335499248575995
	QUAD $0xc2781f49ffcfa6d5                           // .quad -4433759430461380907
	QUAD $0x8bef464e3945ef7a                           // .quad -8363388681221443718
	QUAD $0xf316271c7fc3908a                           // .quad -930513269649338230
	QUAD $0x97758bf0e3cbb5ac                           // .quad -7532960934977096276
	QUAD $0x97edd871cfda3a56                           // .quad -7499099821171918250
	QUAD $0x3d52eeed1cbea317                           // .quad 4418856886560793367
	QUAD $0xbde94e8e43d0c8ec                           // .quad -4762188758037509908
	QUAD $0x4ca7aaa863ee4bdd                           // .quad 5523571108200991709
	QUAD $0xed63a231d4c4fb27                           // .quad -1341049929119499481
	QUAD $0x8fe8caa93e74ef6a                           // .quad -8076983103442849942
	QUAD $0x945e455f24fb1cf8                           // .quad -7755685233340769032
	QUAD $0xb3e2fd538e122b44                           // .quad -5484542860876174524
	QUAD $0xb975d6b6ee39e436                           // .quad -5082920523248573386
	QUAD $0x60dbbca87196b616                           // .quad 6979379479186945558
	QUAD $0xe7d34c64a9c85d44                           // .quad -1741964635633328828
	QUAD $0xbc8955e946fe31cd                           // .quad -4861259862362934835
	QUAD $0x90e40fbeea1d3a4a                           // .quad -8006256924911912374
	QUAD $0x6babab6398bdbe41                           // .quad 7758483227328495169
	QUAD $0xb51d13aea4a488dd                           // .quad -5396135137712502563
	QUAD $0xc696963c7eed2dd1                           // .quad -4136954021121544751
	QUAD $0xe264589a4dcdab14                           // .quad -2133482903713240300
	QUAD $0xfc1e1de5cf543ca2                           // .quad -279753253987271518
	QUAD $0x8d7eb76070a08aec                           // .quad -8250955842461857044
	QUAD $0x3b25a55f43294bcb                           // .quad 4261994450943298507
	QUAD $0xb0de65388cc8ada8                           // .quad -5702008784649933400
	QUAD $0x49ef0eb713f39ebe                           // .quad 5327493063679123134
	QUAD $0xdd15fe86affad912                           // .quad -2515824962385028846
	QUAD $0x6e3569326c784337                           // .quad 7941369183226839863
	QUAD $0x8a2dbf142dfcc7ab                           // .quad -8489919629131724885
	QUAD $0x49c2c37f07965404                           // .quad 5315025460606161924
	QUAD $0xacb92ed9397bf996                           // .quad -6000713517987268202
	QUAD $0xdc33745ec97be906                           // .quad -2579590211097073402
	QUAD $0xd7e77a8f87daf7fb                           // .quad -2889205879056697349
	QUAD $0x69a028bb3ded71a3                           // .quad 7611128154919104931
	QUAD $0x86f0ac99b4e8dafd                           // .quad -8723282702051517699
	QUAD $0xc40832ea0d68ce0c                           // .quad -4321147861633282548
	QUAD $0xa8acd7c0222311bc                           // .quad -6292417359137009220
	QUAD $0xf50a3fa490c30190                           // .quad -789748808614215280
	QUAD $0xd2d80db02aabd62b                           // .quad -3253835680493873621
	QUAD $0x792667c6da79e0fa                           // .quad 8729779031470891258
	QUAD $0x83c7088e1aab65db                           // .quad -8951176327949752869
	QUAD $0x577001b891185938                           // .quad 6300537770911226168
	QUAD $0xa4b8cab1a1563f52                           // .quad -6577284391509803182
	QUAD $0xed4c0226b55e6f86                           // .quad -1347699823215743098
	QUAD $0xcde6fd5e09abcf26                           // .quad -3609919470959866074
	QUAD $0x544f8158315b05b4                           // .quad 6075216638131242420
	QUAD $0x80b05e5ac60b6178                           // .quad -9173728696990998152
	QUAD $0x696361ae3db1c721                           // .quad 7594020797664053025
	QUAD $0xa0dc75f1778e39d6                           // .quad -6855474852811359786
	QUAD $0x03bc3a19cd1e38e9                           // .quad 269153960225290473
	QUAD $0xc913936dd571c84c                           // .quad -3957657547586811828
	QUAD $0x04ab48a04065c723                           // .quad 336442450281613091
	QUAD $0xfb5878494ace3a5f                           // .quad -335385916056126881
	QUAD $0x62eb0d64283f9c76                           // .quad 7127805559067090038
	QUAD $0x9d174b2dcec0e47b                           // .quad -7127145225176161157
	QUAD $0x3ba5d0bd324f8394                           // .quad 4298070930406474644
	QUAD $0xc45d1df942711d9a                           // .quad -4297245513042813542
	QUAD $0xca8f44ec7ee36479                           // .quad -3850783373846682503
	QUAD $0xf5746577930d6500                           // .quad -759870872876129024
	QUAD $0x7e998b13cf4e1ecb                           // .quad 9122475437414293195
	QUAD $0x9968bf6abbe85f20                           // .quad -7392448323188662496
	QUAD $0x9e3fedd8c321a67e                           // .quad -7043649776941685122
	QUAD $0xbfc2ef456ae276e8                           // .quad -4628874385558440216
	QUAD $0xc5cfe94ef3ea101e                           // .quad -4192876202749718498
	QUAD $0xefb3ab16c59b14a2                           // .quad -1174406963520662366
	QUAD $0xbba1f1d158724a12                           // .quad -4926390635932268014
	QUAD $0x95d04aee3b80ece5                           // .quad -7651533379841495835
	QUAD $0x2a8a6e45ae8edc97                           // .quad 3065383741939440791
	QUAD $0xbb445da9ca61281f                           // .quad -4952730706374481889
	QUAD $0xf52d09d71a3293bd                           // .quad -779956341003086915
	QUAD $0xea1575143cf97226                           // .quad -1579227364540714458
	QUAD $0x593c2626705f9c56                           // .quad 6430056314514152534
	QUAD $0x924d692ca61be758                           // .quad -7904546130479028392
	QUAD $0x6f8b2fb00c77836c                           // .quad 8037570393142690668
	QUAD $0xb6e0c377cfa2e12e                           // .quad -5268996644671397586
	QUAD $0x0b6dfb9c0f956447                           // .quad 823590954573587527
	QUAD $0xe498f455c38b997a                           // .quad -1974559787411859078
	QUAD $0x4724bd4189bd5eac                           // .quad 5126430365035880108
	QUAD $0x8edf98b59a373fec                           // .quad -8151628894773493780
	QUAD $0x58edec91ec2cb657                           // .quad 6408037956294850135
	QUAD $0xb2977ee300c50fe7                           // .quad -5577850100039479321
	QUAD $0x2f2967b66737e3ed                           // .quad 3398361426941174765
	QUAD $0xdf3d5e9bc0f653e1                           // .quad -2360626606621961247
	QUAD $0xbd79e0d20082ee74                           // .quad -4793553135802847628
	QUAD $0x8b865b215899f46c                           // .quad -8392920656779807636
	QUAD $0xecd8590680a3aa11                           // .quad -1380255401326171631
	QUAD $0xae67f1e9aec07187                           // .quad -5879464802547371641
	QUAD $0xe80e6f4820cc9495                           // .quad -1725319251657714539
	QUAD $0xda01ee641a708de9                           // .quad -2737644984756826647
	QUAD $0x3109058d147fdcdd                           // .quad 3533361486141316317
	QUAD $0x884134fe908658b2                           // .quad -8628557143114098510
	QUAD $0xbd4b46f0599fd415                           // .quad -4806670179178130411
	QUAD $0xaa51823e34a7eede                           // .quad -6174010410465235234
	QUAD $0x6c9e18ac7007c91a                           // .quad 7826720331309500698
	QUAD $0xd4e5e2cdc1d1ea96                           // .quad -3105826994654156138
	QUAD $0x03e2cf6bc604ddb0                           // .quad 280014188641050032
	QUAD $0x850fadc09923329e                           // .quad -8858670899299929442
	QUAD $0x84db8346b786151c                           // .quad -8873354301053463268
	QUAD $0xa6539930bf6bff45                           // .quad -6461652605697523899
	QUAD $0xe612641865679a63                           // .quad -1868320839462053277
	QUAD $0xcfe87f7cef46ff16                           // .quad -3465379738694516970
	QUAD $0x4fcb7e8f3f60c07e                           // .quad 5749828502977298558
	QUAD $0x81f14fae158c5f6e                           // .quad -9083391364325154962
	QUAD $0xe3be5e330f38f09d                           // .quad -2036086408133152611
	QUAD $0xa26da3999aef7749                           // .quad -6742553186979055799
	QUAD $0x5cadf5bfd3072cc5                           // .quad 6678264026688335045
	QUAD $0xcb090c8001ab551c                           // .quad -3816505465296431844
	QUAD $0x73d9732fc7c8f7f6                           // .quad 8347830033360418806
	QUAD $0xfdcb4fa002162a63                           // .quad -158945813193151901
	QUAD $0x2867e7fddcdd9afa                           // .quad 2911550761636567802
	QUAD $0x9e9f11c4014dda7e                           // .quad -7016870160886801794
	QUAD $0xb281e1fd541501b8                           // .quad -5583933584809066056
	QUAD $0xc646d63501a1511d                           // .quad -4159401682681114339
	QUAD $0x1f225a7ca91a4226                           // .quad 2243455055843443238
	QUAD $0xf7d88bc24209a565                           // .quad -587566084924005019
	QUAD $0x3375788de9b06958                           // .quad 3708002419115845976
	QUAD $0x9ae757596946075f                           // .quad -7284757830718584993
	QUAD $0x0052d6b1641c83ae                           // .quad 23317005467419566
	QUAD $0xc1a12d2fc3978937                           // .quad -4494261269970843337
	QUAD $0xc0678c5dbd23a49a                           // .quad -4582539761593113446
	QUAD $0xf209787bb47d6b84                           // .quad -1006140569036166268
	QUAD $0xf840b7ba963646e0                           // .quad -558244341782001952
	QUAD $0x9745eb4d50ce6332                           // .quad -7546366883288685774
	QUAD $0xb650e5a93bc3d898                           // .quad -5309491445654890344
	QUAD $0xbd176620a501fbff                           // .quad -4821272585683469313
	QUAD $0xa3e51f138ab4cebe                           // .quad -6636864307068612930
	QUAD $0xec5d3fa8ce427aff                           // .quad -1414904713676948737
	QUAD $0xc66f336c36b10137                           // .quad -4148040191917883081
	QUAD $0x93ba47c980e98cdf                           // .quad -7801844473689174817
	QUAD $0xb80b0047445d4184                           // .quad -5185050239897353852
	QUAD $0xb8a8d9bbe123f017                           // .quad -5140619573684080617
	QUAD $0xa60dc059157491e5                           // .quad -6481312799871692315
	QUAD $0xe6d3102ad96cec1d                           // .quad -1814088448677712867
	QUAD $0x87c89837ad68db2f                           // .quad -8662506518347195601
	QUAD $0x9043ea1ac7e41392                           // .quad -8051334308064652398
	QUAD $0x29babe4598c311fb                           // .quad 3006924907348169211
	QUAD $0xb454e4a179dd1877                           // .quad -5452481866653427593
	QUAD $0xf4296dd6fef3d67a                           // .quad -853029884242176390
	QUAD $0xe16a1dc9d8545e94                           // .quad -2203916314889396588
	QUAD $0x1899e4a65f58660c                           // .quad 1772699331562333708
	QUAD $0x8ce2529e2734bb1d                           // .quad -8294976724446954723
	QUAD $0x5ec05dcff72e7f8f                           // .quad 6827560182880305039
	QUAD $0xb01ae745b101e9e4                           // .quad -5757034887131305500
	QUAD $0x76707543f4fa1f73                           // .quad 8534450228600381299
	QUAD $0xdc21a1171d42645d                           // .quad -2584607590486743971
	QUAD $0x6a06494a791c53a8                           // .quad 7639874402088932264
	QUAD $0x899504ae72497eba                           // .quad -8532908771695296838
	QUAD $0x0487db9d17636892                           // .quad 326470965756389522
	QUAD $0xabfa45da0edbde69                           // .quad -6054449946191733143
	QUAD $0x45a9d2845d3c42b6                           // .quad 5019774725622874806
	QUAD $0xd6f8d7509292d603                           // .quad -2956376414312278525
	QUAD $0x0b8a2392ba45a9b2                           // .quad 831516194300602802
	QUAD $0x865b86925b9bc5c2                           // .quad -8765264286586255934
	QUAD $0x8e6cac7768d7141e                           // .quad -8183976793979022306
	QUAD $0xa7f26836f282b732                           // .quad -6344894339805432014
	QUAD $0x3207d795430cd926                           // .quad 3605087062808385830
	QUAD $0xd1ef0244af2364ff                           // .quad -3319431906329402113
	QUAD $0x7f44e6bd49e807b8                           // .quad 9170708441896323000
	QUAD $0x8335616aed761f1f                           // .quad -8992173969096958177
	QUAD $0x5f16206c9c6209a6                           // .quad 6851699533943015846
	QUAD $0xa402b9c5a8d3a6e7                           // .quad -6628531442943809817
	QUAD $0x36dba887c37a8c0f                           // .quad 3952938399001381903
	QUAD $0xcd036837130890a1                           // .quad -3673978285252374367
	QUAD $0xc2494954da2c9789                           // .quad -4446942528265218167
	QUAD $0x802221226be55a64                           // .quad -9213765455923815836
	QUAD $0xf2db9baa10b7bd6c                           // .quad -946992141904134804
	QUAD $0xa02aa96b06deb0fd                           // .quad -6905520801477381891
	QUAD $0x6f92829494e5acc7                           // .quad 8039631859474607303
	QUAD $0xc83553c5c8965d3d                           // .quad -4020214983419339459
	QUAD $0xcb772339ba1f17f9                           // .quad -3785518230938904583
	QUAD $0xfa42a8b73abbf48c                           // .quad -413582710846786420
	QUAD $0xff2a760414536efb                           // .quad -60105885123121413
	QUAD $0x9c69a97284b578d7                           // .quad -7176018221920323369
	QUAD $0xfef5138519684aba                           // .quad -75132356403901766
	QUAD $0xc38413cf25e2d70d                           // .quad -4358336758973016307
	QUAD $0x7eb258665fc25d69                           // .quad 9129456591349898601
	QUAD $0xf46518c2ef5b8cd1                           // .quad -836234930288882479
	QUAD $0xef2f773ffbd97a61                           // .quad -1211618658047395231
	QUAD $0x98bf2f79d5993802                           // .quad -7440175859071633406
	QUAD $0xaafb550ffacfd8fa                           // .quad -6126209340986631942
	QUAD $0xbeeefb584aff8603                           // .quad -4688533805412153853
	QUAD $0x95ba2a53f983cf38                           // .quad -7657761676233289928
	QUAD $0xeeaaba2e5dbf6784                           // .quad -1248981238337804412
	QUAD $0xdd945a747bf26183                           // .quad -2480258038432112253
	QUAD $0x952ab45cfa97a0b2                           // .quad -7698142301602209614
	QUAD $0x94f971119aeef9e4                           // .quad -7712008566467528220
	QUAD $0xba756174393d88df                           // .quad -5010991858575374113
	QUAD $0x7a37cd5601aab85d                           // .quad 8806733365625141341
	QUAD $0xe912b9d1478ceb17                           // .quad -1652053804791829737
	QUAD $0xac62e055c10ab33a                           // .quad -6025006692552756422
	QUAD $0x91abb422ccb812ee                           // .quad -7950062655635975442
	QUAD $0x577b986b314d6009                           // .quad 6303799689591218185
	QUAD $0xb616a12b7fe617aa                           // .quad -5325892301117581398
	QUAD $0xed5a7e85fda0b80b                           // .quad -1343622424865753077
	QUAD $0xe39c49765fdf9d94                           // .quad -2045679357969588844
	QUAD $0x14588f13be847307                           // .quad 1466078993672598279
	QUAD $0x8e41ade9fbebc27d                           // .quad -8196078626372074883
	QUAD $0x596eb2d8ae258fc8                           // .quad 6444284760518135752
	QUAD $0xb1d219647ae6b31c                           // .quad -5633412264537705700
	QUAD $0x6fca5f8ed9aef3bb                           // .quad 8055355950647669691
	QUAD $0xde469fbd99a05fe3                           // .quad -2430079312244744221
	QUAD $0x25de7bb9480d5854                           // .quad 2728754459941099604
	QUAD $0x8aec23d680043bee                           // .quad -8436328597794046994
	QUAD $0xaf561aa79a10ae6a                           // .quad -5812428961928401302
	QUAD $0xada72ccc20054ae9                           // .quad -5933724728815170839
	QUAD $0x1b2ba1518094da04                           // .quad 1957835834444274180
	QUAD $0xd910f7ff28069da4                           // .quad -2805469892591575644
	QUAD $0x90fb44d2f05d0842                           // .quad -7999724640327104446
	QUAD $0x87aa9aff79042286                           // .quad -8670947710510816634
	QUAD $0x353a1607ac744a53                           // .quad 3835402254873283155
	QUAD $0xa99541bf57452b28                           // .quad -6226998619711132888
	QUAD $0x42889b8997915ce8                           // .quad 4794252818591603944
	QUAD $0xd3fa922f2d1675f2                           // .quad -3172062256211528206
	QUAD $0x69956135febada11                           // .quad 7608094030047140369
	QUAD $0x847c9b5d7c2e09b7                           // .quad -8900067937773286985
	QUAD $0x43fab9837e699095                           // .quad 4898431519131537557
	QUAD $0xa59bc234db398c25                           // .quad -6513398903789220827
	QUAD $0x94f967e45e03f4bb                           // .quad -7712018656367741765
	QUAD $0xcf02b2c21207ef2e                           // .quad -3530062611309138130
	QUAD $0x1d1be0eebac278f5                           // .quad 2097517367411243253
	QUAD $0x8161afb94b44f57d                           // .quad -9123818159709293187
	QUAD $0x6462d92a69731732                           // .quad 7233582727691441970
	QUAD $0xa1ba1ba79e1632dc                           // .quad -6793086681209228580
	QUAD $0x7d7b8f7503cfdcfe                           // .quad 9041978409614302462
	QUAD $0xca28a291859bbf93                           // .quad -3879672333084147821
	QUAD $0x5cda735244c3d43e                           // .quad 6690786993590490174
	QUAD $0xfcb2cb35e702af78                           // .quad -237904397927796872
	QUAD $0x3a0888136afa64a7                           // .quad 4181741870994056359
	QUAD $0x9defbf01b061adab                           // .quad -7066219276345954901
	QUAD $0x088aaa1845b8fdd0                           // .quad 615491320315182544
	QUAD $0xc56baec21c7a1916                           // .quad -4221088077005055722
	QUAD $0x8aad549e57273d45                           // .quad -8454007886460797627
	QUAD $0xf6c69a72a3989f5b                           // .quad -664674077828931749
	QUAD $0x36ac54e2f678864b                           // .quad 3939617107816777291
	QUAD $0x9a3c2087a63f6399                           // .quad -7332950326284164199
	QUAD $0x84576a1bb416a7dd                           // .quad -8910536670511192099
	QUAD $0xc0cb28a98fcf3c7f                           // .quad -4554501889427817345
	QUAD $0x656d44a2a11c51d5                           // .quad 7308573235570561493
	QUAD $0xf0fdf2d3f3c30b9f                           // .quad -1081441343357383777
	QUAD $0x9f644ae5a4b1b325                           // .quad -6961356773836868827
	QUAD $0x969eb7c47859e743                           // .quad -7593429867239446717
	QUAD $0x873d5d9f0dde1fee                           // .quad -8701695967296086034
	QUAD $0xbc4665b596706114                           // .quad -4880101315621920492
	QUAD $0xa90cb506d155a7ea                           // .quad -6265433940692719638
	QUAD $0xeb57ff22fc0c7959                           // .quad -1488440626100012711
	QUAD $0x09a7f12442d588f2                           // .quad 695789805494438130
	QUAD $0x9316ff75dd87cbd8                           // .quad -7847804418953589800
	QUAD $0x0c11ed6d538aeb2f                           // .quad 869737256868047663
	QUAD $0xb7dcbf5354e9bece                           // .quad -5198069505264599346
	QUAD $0x8f1668c8a86da5fa                           // .quad -8136200465769716230
	QUAD $0xe5d3ef282a242e81                           // .quad -1885900863153361279
	QUAD $0xf96e017d694487bc                           // .quad -473439272678684740
	QUAD $0x8fa475791a569d10                           // .quad -8096217067111932656
	QUAD $0x37c981dcc395a9ac                           // .quad 4019886927579031980
	QUAD $0xb38d92d760ec4455                           // .quad -5508585315462527915
	QUAD $0x85bbe253f47b1417                           // .quad -8810199395808373737
	QUAD $0xe070f78d3927556a                           // .quad -2274045625900771990
	QUAD $0x93956d7478ccec8e                           // .quad -7812217631593927538
	QUAD $0x8c469ab843b89562                           // .quad -8338807543829064350
	QUAD $0x387ac8d1970027b2                           // .quad 4069786015789754290
	QUAD $0xaf58416654a6babb                           // .quad -5811823411358942533
	QUAD $0x06997b05fcc0319e                           // .quad 475546501309804958
	QUAD $0xdb2e51bfe9d0696a                           // .quad -2653093245771290262
	QUAD $0x441fece3bdf81f03                           // .quad 4908902581746016003
	QUAD $0x88fcf317f22241e2                           // .quad -8575712306248138270
	QUAD $0xd527e81cad7626c3                           // .quad -3087243809672255805
	QUAD $0xab3c2fddeeaad25a                           // .quad -6107954364382784934
	QUAD $0x8a71e223d8d3b074                           // .quad -8470740780517707660
	QUAD $0xd60b3bd56a5586f1                           // .quad -3023256937051093263
	QUAD $0xf6872d5667844e49                           // .quad -682526969396179383
	QUAD $0x85c7056562757456                           // .quad -8807064613298015146
	QUAD $0xb428f8ac016561db                           // .quad -5464844730172612133
	QUAD $0xa738c6bebb12d16c                           // .quad -6397144748195131028
	QUAD $0xe13336d701beba52                           // .quad -2219369894288377262
	QUAD $0xd106f86e69d785c7                           // .quad -3384744916816525881
	QUAD $0xecc0024661173473                           // .quad -1387106183930235789
	QUAD $0x82a45b450226b39c                           // .quad -9032994600651410532
	QUAD $0x27f002d7f95d0190                           // .quad 2877803288514593168
	QUAD $0xa34d721642b06084                           // .quad -6679557232386875260
	QUAD $0x31ec038df7b441f4                           // .quad 3597254110643241460
	QUAD $0xcc20ce9bd35c78a5                           // .quad -3737760522056206171
	QUAD $0x7e67047175a15271                           // .quad 9108253656731439729
	QUAD $0xff290242c83396ce                           // .quad -60514634142869810
	QUAD $0x0f0062c6e984d386                           // .quad 1080972517029761926
	QUAD $0x9f79a169bd203e41                           // .quad -6955350673980375487
	QUAD $0x52c07b78a3e60868                           // .quad 5962901664714590312
	QUAD $0xc75809c42c684dd1                           // .quad -4082502324048081455
	QUAD $0xa7709a56ccdf8a82                           // .quad -6381430974388925822
	QUAD $0xf92e0c3537826145                           // .quad -491441886632713915
	QUAD $0x88a66076400bb691                           // .quad -8600080377420466543
	QUAD $0x9bbcc7a142b17ccb                           // .quad -7224680206786528053
	QUAD $0x6acff893d00ea435                           // .quad 7696643601933968437
	QUAD $0xc2abf989935ddbfe                           // .quad -4419164240055772162
	QUAD $0x0583f6b8c4124d43                           // .quad 397432465562684739
	QUAD $0xf356f7ebf83552fe                           // .quad -912269281642327298
	QUAD $0xc3727a337a8b704a                           // .quad -4363290727450709942
	QUAD $0x98165af37b2153de                           // .quad -7487697328667536418
	QUAD $0x744f18c0592e4c5c                           // .quad 8380944645968776284
	QUAD $0xbe1bf1b059e9a8d6                           // .quad -4747935642407032618
	QUAD $0x1162def06f79df73                           // .quad 1252808770606194547
	QUAD $0xeda2ee1c7064130c                           // .quad -1323233534581402868
	QUAD $0x8addcb5645ac2ba8                           // .quad -8440366555225904216
	QUAD $0x9485d4d1c63e8be7                           // .quad -7744549986754458649
	QUAD $0x6d953e2bd7173692                           // .quad 7896285879677171346
	QUAD $0xb9a74a0637ce2ee1                           // .quad -5069001465015685407
	QUAD $0xc8fa8db6ccdd0437                           // .quad -3964700705685699529
	QUAD $0xe8111c87c5c1ba99                           // .quad -1724565812842218855
	QUAD $0x1d9c9892400a22a2                           // .quad 2133748077373825698
	QUAD $0x910ab1d4db9914a0                           // .quad -7995382660667468640
	QUAD $0x2503beb6d00cab4b                           // .quad 2667185096717282123
	QUAD $0xb54d5e4a127f59c8                           // .quad -5382542307406947896
	QUAD $0x2e44ae64840fd61d                           // .quad 3333981370896602653
	QUAD $0xe2a0b5dc971f303a                           // .quad -2116491865831296966
	QUAD $0x5ceaecfed289e5d2                           // .quad 6695424375237764562
	QUAD $0x8da471a9de737e24                           // .quad -8240336443785642460
	QUAD $0x7425a83e872c5f47                           // .quad 8369280469047205703
	QUAD $0xb10d8e1456105dad                           // .quad -5688734536304665171
	QUAD $0xd12f124e28f77719                           // .quad -3373457468973156583
	QUAD $0xdd50f1996b947518                           // .quad -2499232151953443560
	QUAD $0x82bd6b70d99aaa6f                           // .quad -9025939945749304721
	QUAD $0x8a5296ffe33cc92f                           // .quad -8479549122611984081
	QUAD $0x636cc64d1001550b                           // .quad 7164319141522920715
	QUAD $0xace73cbfdc0bfb7b                           // .quad -5987750384837592197
	QUAD $0x3c47f7e05401aa4e                           // .quad 4343712908476262990
	QUAD $0xd8210befd30efa5a                           // .quad -2873001962619602342
	QUAD $0x65acfaec34810a71                           // .quad 7326506586225052273
	QUAD $0x8714a775e3e95c78                           // .quad -8713155254278333320
	QUAD $0x7f1839a741a14d0d                           // .quad 9158133232781315341
	QUAD $0xa8d9d1535ce3b396                           // .quad -6279758049420528746
	QUAD $0x1ede48111209a050                           // .quad 2224294504121868368
	QUAD $0xd31045a8341ca07c                           // .quad -3238011543348273028
	QUAD $0x934aed0aab460432                           // .quad -7833187971778608078
	QUAD $0x83ea2b892091e44d                           // .quad -8941286242233752499
	QUAD $0xf81da84d5617853f                           // .quad -568112927868484289
	QUAD $0xa4e4b66b68b65d60                           // .quad -6564921784364802720
	QUAD $0x36251260ab9d668e                           // .quad 3901544858591782542
	QUAD $0xce1de40642e3f4b9                           // .quad -3594466212028615495
	QUAD $0xc1d72b7c6b426019                           // .quad -4479063491021217767
	QUAD $0x80d2ae83e9ce78f3                           // .quad -9164070410158966541
	QUAD $0xb24cf65b8612f81f                           // .quad -5598829363776522209
	QUAD $0xa1075a24e4421730                           // .quad -6843401994271320272
	QUAD $0xdee033f26797b627                           // .quad -2386850686293264857
	QUAD $0xc94930ae1d529cfc                           // .quad -3942566474411762436
	QUAD $0x169840ef017da3b1                           // .quad 1628122660560806833
	QUAD $0xfb9b7cd9a4a7443c                           // .quad -316522074587315140
	QUAD $0x8e1f289560ee864e                           // .quad -8205795374004271538
	QUAD $0x9d412e0806e88aa5                           // .quad -7115355324258153819
	QUAD $0xf1a6f2bab92a27e2                           // .quad -1033872180650563614
	QUAD $0xc491798a08a2ad4e                           // .quad -4282508136895304370
	QUAD $0xae10af696774b1db                           // .quad -5904026244240592421
	QUAD $0xf5b5d7ec8acb58a2                           // .quad -741449152691742558
	QUAD $0xacca6da1e0a8ef29                           // .quad -5995859411864064215
	QUAD $0x9991a6f3d6bf1765                           // .quad -7380934748073420955
	QUAD $0x17fd090a58d32af3                           // .quad 1728547772024695539
	QUAD $0xbff610b0cc6edd3f                           // .quad -4614482416664388289
	QUAD $0xddfc4b4cef07f5b0                           // .quad -2451001303396518480
	QUAD $0xeff394dcff8a948e                           // .quad -1156417002403097458
	QUAD $0x4abdaf101564f98e                           // .quad 5385653213018257806
	QUAD $0x95f83d0a1fb69cd9                           // .quad -7640289654143017767
	QUAD $0x9d6d1ad41abe37f1                           // .quad -7102991539009341455
	QUAD $0xbb764c4ca7a4440f                           // .quad -4938676049251384305
	QUAD $0x84c86189216dc5ed                           // .quad -8878739423761676819
	QUAD $0xea53df5fd18d5513                           // .quad -1561659043136842477
	QUAD $0x32fd3cf5b4e49bb4                           // .quad 3674159897003727796
	QUAD $0x92746b9be2f8552c                           // .quad -7893565929601608404
	QUAD $0x3fbc8c33221dc2a1                           // .quad 4592699871254659745
	QUAD $0xb7118682dbb66a77                           // .quad -5255271393574622601
	QUAD $0x0fabaf3feaa5334a                           // .quad 1129188820640936778
	QUAD $0xe4d5e82392a40515                           // .quad -1957403223540890347
	QUAD $0x29cb4d87f2a7400e                           // .quad 3011586022114279438
	QUAD $0x8f05b1163ba6832d                           // .quad -8140906042354138323
	QUAD $0x743e20e9ef511012                           // .quad 8376168546070237202
	QUAD $0xb2c71d5bca9023f8                           // .quad -5564446534515285000
	QUAD $0x914da9246b255416                           // .quad -7976533391121755114
	QUAD $0xdf78e4b2bd342cf6                           // .quad -2343872149716718346
	QUAD $0x1ad089b6c2f7548e                           // .quad 1932195658189984910
	QUAD $0x8bab8eefb6409c1a                           // .quad -8382449121214030822
	QUAD $0xa184ac2473b529b1                           // .quad -6808127464117294671
	QUAD $0xae9672aba3d0c320                           // .quad -5866375383090150624
	QUAD $0xc9e5d72d90a2741e                           // .quad -3898473311719230434
	QUAD $0xda3c0f568cc4f3e8                           // .quad -2721283210435300376
	QUAD $0x7e2fa67c7a658892                           // .quad 9092669226243950738
	QUAD $0x8865899617fb1871                           // .quad -8618331034163144591
	QUAD $0xddbb901b98feeab7                           // .quad -2469221522477225289
	QUAD $0xaa7eebfb9df9de8d                           // .quad -6161227774276542835
	QUAD $0x552a74227f3ea565                           // .quad 6136845133758244197
	QUAD $0xd51ea6fa85785631                           // .quad -3089848699418290639
	QUAD $0xd53a88958f87275f                           // .quad -3082000819042179233
	QUAD $0x8533285c936b35de                           // .quad -8848684464777513506
	QUAD $0x8a892abaf368f137                           // .quad -8464187042230111945
	QUAD $0xa67ff273b8460356                           // .quad -6449169562544503978
	QUAD $0x2d2b7569b0432d85                           // .quad 3254824252494523781
	QUAD $0xd01fef10a657842c                           // .quad -3449775934753242068
	QUAD $0x9c3b29620e29fc73                           // .quad -7189106879045698445
	QUAD $0x8213f56a67f6b29b                           // .quad -9073638986861858149
	QUAD $0x8349f3ba91b47b8f                           // .quad -8986383598807123057
	QUAD $0xa298f2c501f45f42                           // .quad -6730362715149934782
	QUAD $0x241c70a936219a73                           // .quad 2602078556773259891
	QUAD $0xcb3f2f7642717713                           // .quad -3801267375510030573
	QUAD $0xed238cd383aa0110                           // .quad -1359087822460813040
	QUAD $0xfe0efb53d30dd4d7                           // .quad -139898200960150313
	QUAD $0xf4363804324a40aa                           // .quad -849429889038008150
	QUAD $0x9ec95d1463e8a506                           // .quad -7004965403241175802
	QUAD $0xb143c6053edcd0d5                           // .quad -5673473379724898091
	QUAD $0xc67bb4597ce2ce48                           // .quad -4144520735624081848
	QUAD $0xdd94b7868e94050a                           // .quad -2480155706228734710
	QUAD $0xf81aa16fdc1b81da                           // .quad -568964901102714406
	QUAD $0xca7cf2b4191c8326                           // .quad -3855940325606653146
	QUAD $0x9b10a4e5e9913128                           // .quad -7273132090830278360
	QUAD $0xfd1c2f611f63a3f0                           // .quad -208239388580928528
	QUAD $0xc1d4ce1f63f57d72                           // .quad -4479729095110460046
	QUAD $0xbc633b39673c8cec                           // .quad -4871985254153548564
	QUAD $0xf24a01a73cf2dccf                           // .quad -987975350460687153
	QUAD $0xd5be0503e085d813                           // .quad -3044990783845967853
	QUAD $0x976e41088617ca01                           // .quad -7535013621679011327
	QUAD $0x4b2d8644d8a74e18                           // .quad 5417133557047315992
	QUAD $0xbd49d14aa79dbc82                           // .quad -4807081008671376254
	QUAD $0xddf8e7d60ed1219e                           // .quad -2451955090545630818
	QUAD $0xec9c459d51852ba2                           // .quad -1397165242411832414
	QUAD $0xcabb90e5c942b503                           // .quad -3838314940804713213
	QUAD $0x93e1ab8252f33b45                           // .quad -7790757304148477115
	QUAD $0x3d6a751f3b936243                           // .quad 4425478360848884291
	QUAD $0xb8da1662e7b00a17                           // .quad -5126760611758208489
	QUAD $0x0cc512670a783ad4                           // .quad 920161932633717460
	QUAD $0xe7109bfba19c0c9d                           // .quad -1796764746270372707
	QUAD $0x27fb2b80668b24c5                           // .quad 2880944217109767365
	QUAD $0x906a617d450187e2                           // .quad -8040506994060064798
	QUAD $0xb1f9f660802dedf6                           // .quad -5622191765467566602
	QUAD $0xb484f9dc9641e9da                           // .quad -5438947724147693094
	QUAD $0x5e7873f8a0396973                           // .quad 6807318348447705459
	QUAD $0xe1a63853bbd26451                           // .quad -2186998636757228463
	QUAD $0xdb0b487b6423e1e8                           // .quad -2662955059861265944
	QUAD $0x8d07e33455637eb2                           // .quad -8284403175614349646
	QUAD $0x91ce1a9a3d2cda62                           // .quad -7940379843253970334
	QUAD $0xb049dc016abc5e5f                           // .quad -5743817951090549153
	QUAD $0x7641a140cc7810fb                           // .quad 8521269269642088699
	QUAD $0xdc5c5301c56b75f7                           // .quad -2568086420435798537
	QUAD $0xa9e904c87fcb0a9d                           // .quad -6203421752542164323
	QUAD $0x89b9b3e11b6329ba                           // .quad -8522583040413455942
	QUAD $0x546345fa9fbdcd44                           // .quad 6080780864604458308
	QUAD $0xac2820d9623bf429                           // .quad -6041542782089432023
	QUAD $0xa97c177947ad4095                           // .quad -6234081974526590827
	QUAD $0xd732290fbacaf133                           // .quad -2940242459184402125
	QUAD $0x49ed8eabcccc485d                           // .quad 5327070802775656541
	QUAD $0x867f59a9d4bed6c0                           // .quad -8755180564631333184
	QUAD $0x5c68f256bfff5a74                           // .quad 6658838503469570676
	QUAD $0xa81f301449ee8c70                           // .quad -6332289687361778576
	QUAD $0x73832eec6fff3111                           // .quad 8323548129336963345
	QUAD $0xd226fc195c6a2f8c                           // .quad -3303676090774835316
	QUAD $0xc831fd53c5ff7eab                           // .quad -4021154456019173717
	QUAD $0x83585d8fd9c25db7                           // .quad -8982326584375353929
	QUAD $0xba3e7ca8b77f5e55                           // .quad -5026443070023967147
	QUAD $0xa42e74f3d032f525                           // .quad -6616222212041804507
	QUAD $0x28ce1bd2e55f35eb                           // .quad 2940318199324816875
	QUAD $0xcd3a1230c43fb26f                           // .quad -3658591746624867729
	QUAD $0x7980d163cf5b81b3                           // .quad 8755227902219092403
	QUAD $0x80444b5e7aa7cf85                           // .quad -9204148869281624187
	QUAD $0xd7e105bcc332621f                           // .quad -2891023177508298209
	QUAD $0xa0555e361951c366                           // .quad -6893500068174642330
	QUAD $0x8dd9472bf3fefaa7                           // .quad -8225464990312760665
	QUAD $0xc86ab5c39fa63440                           // .quad -4005189066790915008
	QUAD $0xb14f98f6f0feb951                           // .quad -5670145219463562927
	QUAD $0xfa856334878fc150                           // .quad -394800315061255856
	QUAD $0x6ed1bf9a569f33d3                           // .quad 7985374283903742931
	QUAD $0x9c935e00d4b9d8d2                           // .quad -7164279224554366766
	QUAD $0x0a862f80ec4700c8                           // .quad 758345818024902856
	QUAD $0xc3b8358109e84f07                           // .quad -4343663012265570553
	QUAD $0xcd27bb612758c0fa                           // .quad -3663753745896259334
	QUAD $0xf4a642e14c6262c8                           // .quad -817892746904575288
	QUAD $0x8038d51cb897789c                           // .quad -9207375118826243940
	QUAD $0x98e7e9cccfbd7dbd                           // .quad -7428711994456441411
	QUAD $0xe0470a63e6bd56c3                           // .quad -2285846861678029117
	QUAD $0xbf21e44003acdd2c                           // .quad -4674203974643163860
	QUAD $0x1858ccfce06cac74                           // .quad 1754377441329851508
	QUAD $0xeeea5d5004981478                           // .quad -1231068949876566920
	QUAD $0x0f37801e0c43ebc8                           // .quad 1096485900831157192
	QUAD $0x95527a5202df0ccb                           // .quad -7686947121313936181
	QUAD $0xd30560258f54e6ba                           // .quad -3241078642388441414
	QUAD $0xbaa718e68396cffd                           // .quad -4996997883215032323
	QUAD $0x47c6b82ef32a2069                           // .quad 5172023733869224041
	QUAD $0xe950df20247c83fd                           // .quad -1634561335591402499
	QUAD $0x4cdc331d57fa5441                           // .quad 5538357842881958977
	QUAD $0x91d28b7416cdd27e                           // .quad -7939129862385708418
	QUAD $0xe0133fe4adf8e952                           // .quad -2300424733252327086
	QUAD $0xb6472e511c81471d                           // .quad -5312226309554747619
	QUAD $0x58180fddd97723a6                           // .quad 6347841120289366950
	QUAD $0xe3d8f9e563a198e5                           // .quad -2028596868516046619
	QUAD $0x570f09eaa7ea7648                           // .quad 6273243709394548296
	QUAD $0x8e679c2f5e44ff8f                           // .quad -8185402070463610993
	QUAD $0x2cd2cc6551e513da                           // .quad 3229868618315797466
	QUAD $0xb201833b35d63f73                           // .quad -5620066569652125837
	QUAD $0xf8077f7ea65e58d1                           // .quad -574350245532641071
	QUAD $0xde81e40a034bcf4f                           // .quad -2413397193637769393
	QUAD $0xfb04afaf27faf782                           // .quad -358968903457900670
	QUAD $0x8b112e86420f6191                           // .quad -8425902273664687727
	QUAD $0x79c5db9af1f9b563                           // .quad 8774660907532399971
	QUAD $0xadd57a27d29339f6                           // .quad -5920691823653471754
	QUAD $0x18375281ae7822bc                           // .quad 1744954097560724156
	QUAD $0xd94ad8b1c7380874                           // .quad -2789178761139451788
	QUAD $0x8f2293910d0b15b5                           // .quad -8132775725879323211
	QUAD $0x87cec76f1c830548                           // .quad -8660765753353239224
	QUAD $0xb2eb3875504ddb22                           // .quad -5554283638921766110
	QUAD $0xa9c2794ae3a3c69a                           // .quad -6214271173264161126
	QUAD $0x5fa60692a46151eb                           // .quad 6892203506629956075
	QUAD $0xd433179d9c8cb841                           // .quad -3156152948152813503
	QUAD $0xdbc7c41ba6bcd333                           // .quad -2609901835997359309
	QUAD $0x849feec281d7f328                           // .quad -8890124620236590296
	QUAD $0x12b9b522906c0800                           // .quad 1349308723430688768
	QUAD $0xa5c7ea73224deff3                           // .quad -6500969756868349965
	QUAD $0xd768226b34870a00                           // .quad -2925050114139026944
	QUAD $0xcf39e50feae16bef                           // .quad -3514526177658049553
	QUAD $0xe6a1158300d46640                           // .quad -1828156321336891840
	QUAD $0x81842f29f2cce375                           // .quad -9114107888677362827
	QUAD $0x60495ae3c1097fd0                           // .quad 6938176635183661008
	QUAD $0xa1e53af46f801c53                           // .quad -6780948842419315629
	QUAD $0x385bb19cb14bdfc4                           // .quad 4061034775552188356
	QUAD $0xca5e89b18b602368                           // .quad -3864500034596756632
	QUAD $0x46729e03dd9ed7b5                           // .quad 5076293469440235445
	QUAD $0xfcf62c1dee382c42                           // .quad -218939024818557886
	QUAD $0x6c07a2c26a8346d1                           // .quad 7784369436827535057
	QUAD $0x9e19db92b4e31ba9                           // .quad -7054365918152680535
	QUAD $0xc7098b7305241885                           // .quad -4104596259247744891
	QUAD $0xc5a05277621be293                           // .quad -4206271379263462765
	QUAD $0xb8cbee4fc66d1ea7                           // .quad -5130745324059681113
	QUAD $0xf70867153aa2db38                           // .quad -646153205651940552
	QUAD $0x737f74f1dc043328                           // .quad 8322499218531169064
	QUAD $0x9a65406d44a5c903                           // .quad -7321374781173544701
	QUAD $0x505f522e53053ff2                           // .quad 5791438004736573426
	QUAD $0xc0fe908895cf3b44                           // .quad -4540032458039542972
	QUAD $0x647726b9e7c68fef                           // .quad 7239297505920716783
	QUAD $0xf13e34aabb430a15                           // .quad -1063354554122040811
	QUAD $0x5eca783430dc19f5                           // .quad 6830403950414141941
	QUAD $0x96c6e0eab509e64d                           // .quad -7582125623967357363
	QUAD $0xb67d16413d132072                           // .quad -5297053117264486286
	QUAD $0xbc789925624c5fe0                           // .quad -4865971011531808800
	QUAD $0xe41c5bd18c57e88f                           // .quad -2009630378153219953
	QUAD $0xeb96bf6ebadf77d8                           // .quad -1470777745987373096
	QUAD $0x8e91b962f7b6f159                           // .quad -8173548013986844327
	QUAD $0x933e37a534cbaae7                           // .quad -7836765118883190041
	QUAD $0x723627bbb5a4adb0                           // .quad 8229809056225996208
	QUAD $0xb80dc58e81fe95a1                           // .quad -5184270380176599647
	QUAD $0xcec3b1aaa30dd91c                           // .quad -3547796734999668452
	QUAD $0xe61136f2227e3b09                           // .quad -1868651956793361655
	QUAD $0x213a4f0aa5e8a7b1                           // .quad 2394313059052595121
	QUAD $0x8fcac257558ee4e6                           // .quad -8085436500636932890
	QUAD $0xa988e2cd4f62d19d                           // .quad -6230480713039031907
	QUAD $0xb3bd72ed2af29e1f                           // .quad -5495109607368778209
	QUAD $0x93eb1b80a33b8605                           // .quad -7788100891298789883
	QUAD $0xe0accfa875af45a7                           // .quad -2257200990783584857
	QUAD $0xbc72f130660533c3                           // .quad -4867563057061743677
	QUAD $0x8c6c01c9498d8b88                           // .quad -8328279646880822392
	QUAD $0xeb8fad7c7f8680b4                           // .quad -1472767802899791692
	QUAD $0xaf87023b9bf0ee6a                           // .quad -5798663540173640086
	QUAD $0xa67398db9f6820e1                           // .quad -6452645772052127519
	QUAD $0xdb68c2ca82ed2a05                           // .quad -2636643406789662203
	QUAD $0x88083f8943a1148c                           // .quad -8644589625959967604
	QUAD $0x892179be91d43a43                           // .quad -8565431156884620733
	QUAD $0x6a0a4f6b948959b0                           // .quad 7641007041259592112
	QUAD $0xab69d82e364948d4                           // .quad -6095102927678388012
	QUAD $0x848ce34679abb01c                           // .quad -8895485272135061476
	QUAD $0xd6444e39c3db9b09                           // .quad -3007192641170597111
	QUAD $0xf2d80e0c0c0b4e11                           // .quad -947992276657025519
	QUAD $0x85eab0e41a6940e5                           // .quad -8797024428372705051
	QUAD $0x6f8e118f0f0e2195                           // .quad 8038381691033493909
	QUAD $0xa7655d1d2103911f                           // .quad -6384594517038493409
	QUAD $0x4b7195f2d2d1a9fb                           // .quad 5436291095364479483
	QUAD $0xd13eb46469447567                           // .quad -3369057127870728857
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

	// .p2align 4, 0x00
_POW_TAB:
	LONG $0x00000001                           // .long 1
	LONG $0x00000003                           // .long 3
	LONG $0x00000006                           // .long 6
	LONG $0x00000009                           // .long 9
	LONG $0x0000000d                           // .long 13
	LONG $0x00000010                           // .long 16
	LONG $0x00000013                           // .long 19
	LONG $0x00000017                           // .long 23
	LONG $0x0000001a                           // .long 26
	QUAD $0x0000000000000000; LONG $0x00000000 // .p2align 4, 0x00

_LSHIFT_TAB:
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000                           // .space 8, '\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000001                                   // .long 1
	QUAD $0x0000000000000035; QUAD $0x0000000000000000 // .asciz 16, '5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000001                                   // .long 1
	QUAD $0x0000000000003532; QUAD $0x0000000000000000 // .asciz 16, '25\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000001                                   // .long 1
	QUAD $0x0000000000353231; QUAD $0x0000000000000000 // .asciz 16, '125\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000002                                   // .long 2
	QUAD $0x0000000000353236; QUAD $0x0000000000000000 // .asciz 16, '625\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000002                                   // .long 2
	QUAD $0x0000000035323133; QUAD $0x0000000000000000 // .asciz 16, '3125\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000002                                   // .long 2
	QUAD $0x0000003532363531; QUAD $0x0000000000000000 // .asciz 16, '15625\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000003                                   // .long 3
	QUAD $0x0000003532313837; QUAD $0x0000000000000000 // .asciz 16, '78125\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000003                                   // .long 3
	QUAD $0x0000353236303933; QUAD $0x0000000000000000 // .asciz 16, '390625\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000003                                   // .long 3
	QUAD $0x0035323133353931; QUAD $0x0000000000000000 // .asciz 16, '1953125\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000004                                   // .long 4
	QUAD $0x0035323635363739; QUAD $0x0000000000000000 // .asciz 16, '9765625\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000004                                   // .long 4
	QUAD $0x3532313832383834; QUAD $0x0000000000000000 // .asciz 16, '48828125\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000004                                   // .long 4
	QUAD $0x3236303431343432; QUAD $0x0000000000000035 // .asciz 16, '244140625\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000004                                   // .long 4
	QUAD $0x3133303730323231; QUAD $0x0000000000003532 // .asciz 16, '1220703125\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000005                                   // .long 5
	QUAD $0x3635313533303136; QUAD $0x0000000000003532 // .asciz 16, '6103515625\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000005                                   // .long 5
	QUAD $0x3837353731353033; QUAD $0x0000000000353231 // .asciz 16, '30517578125\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000005                                   // .long 5
	QUAD $0x3938373835323531; QUAD $0x0000000035323630 // .asciz 16, '152587890625\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000006                                   // .long 6
	QUAD $0x3534393339323637; QUAD $0x0000000035323133 // .asciz 16, '762939453125\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000006                                   // .long 6
	QUAD $0x3237393634313833; QUAD $0x0000003532363536 // .asciz 16, '3814697265625\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000006                                   // .long 6
	QUAD $0x3638343337303931; QUAD $0x0000353231383233 // .asciz 16, '19073486328125\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000007                                   // .long 7
	QUAD $0x3133343736333539; QUAD $0x0000353236303436 // .asciz 16, '95367431640625\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000007                                   // .long 7
	QUAD $0x3531373338363734; QUAD $0x0035323133303238 // .asciz 16, '476837158203125\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000007                                   // .long 7
	QUAD $0x3735383134383332; QUAD $0x3532363531303139 // .asciz 16, '2384185791015625'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000007                                   // .long 7
	QUAD $0x3832393032393131; QUAD $0x3231383730353539 // .asciz 16, '1192092895507812'
	QUAD $0x0000000000000035; QUAD $0x0000000000000000 // .asciz 16, '5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000008                                   // .long 8
	QUAD $0x3434363430363935; QUAD $0x3236303933353737 // .asciz 16, '5960464477539062'
	QUAD $0x0000000000000035; QUAD $0x0000000000000000 // .asciz 16, '5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000008                                   // .long 8
	QUAD $0x3232333230383932; QUAD $0x3133353936373833 // .asciz 16, '2980232238769531'
	QUAD $0x0000000000003532; QUAD $0x0000000000000000 // .asciz 16, '25\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000008                                   // .long 8
	QUAD $0x3136313130393431; QUAD $0x3536373438333931 // .asciz 16, '1490116119384765'
	QUAD $0x0000000000353236; QUAD $0x0000000000000000 // .asciz 16, '625\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000009                                   // .long 9
	QUAD $0x3530383530353437; QUAD $0x3832383332393639 // .asciz 16, '7450580596923828'
	QUAD $0x0000000000353231; QUAD $0x0000000000000000 // .asciz 16, '125\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000009                                   // .long 9
	QUAD $0x3230393235323733; QUAD $0x3431393136343839 // .asciz 16, '3725290298461914'
	QUAD $0x0000000035323630; QUAD $0x0000000000000000 // .asciz 16, '0625\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000009                                   // .long 9
	QUAD $0x3135343632363831; QUAD $0x3735393033323934 // .asciz 16, '1862645149230957'
	QUAD $0x0000003532313330; QUAD $0x0000000000000000 // .asciz 16, '03125\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000a                                   // .long 10
	QUAD $0x3735323233313339; QUAD $0x3538373435313634 // .asciz 16, '9313225746154785'
	QUAD $0x0000003532363531; QUAD $0x0000000000000000 // .asciz 16, '15625\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000a                                   // .long 10
	QUAD $0x3832313636353634; QUAD $0x3239333737303337 // .asciz 16, '4656612873077392'
	QUAD $0x0000353231383735; QUAD $0x0000000000000000 // .asciz 16, '578125\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000a                                   // .long 10
	QUAD $0x3436303338323332; QUAD $0x3639363833353633 // .asciz 16, '2328306436538696'
	QUAD $0x0035323630393832; QUAD $0x0000000000000000 // .asciz 16, '2890625\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000a                                   // .long 10
	QUAD $0x3233353134363131; QUAD $0x3834333936323831 // .asciz 16, '1164153218269348'
	QUAD $0x3532313335343431; QUAD $0x0000000000000000 // .asciz 16, '14453125\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000b                                   // .long 11
	QUAD $0x3036363730323835; QUAD $0x3034373634333139 // .asciz 16, '5820766091346740'
	QUAD $0x3532363536323237; QUAD $0x0000000000000000 // .asciz 16, '72265625\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000b                                   // .long 11
	QUAD $0x3033383330313932; QUAD $0x3037333337363534 // .asciz 16, '2910383045673370'
	QUAD $0x3231383233313633; QUAD $0x0000000000000035 // .asciz 16, '361328125\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000b                                   // .long 11
	QUAD $0x3531393135353431; QUAD $0x3538363633383232 // .asciz 16, '1455191522836685'
	QUAD $0x3630343636303831; QUAD $0x0000000000003532 // .asciz 16, '1806640625\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000c                                   // .long 12
	QUAD $0x3637353935373237; QUAD $0x3532343338313431 // .asciz 16, '7275957614183425'
	QUAD $0x3133303233333039; QUAD $0x0000000000003532 // .asciz 16, '9033203125\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000c                                   // .long 12
	QUAD $0x3838373937333633; QUAD $0x3231373139303730 // .asciz 16, '3637978807091712'
	QUAD $0x3531303636313539; QUAD $0x0000000000353236 // .asciz 16, '95166015625\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000c                                   // .long 12
	QUAD $0x3439383938313831; QUAD $0x3635383534353330 // .asciz 16, '1818989403545856'
	QUAD $0x3730303338353734; QUAD $0x0000000035323138 // .asciz 16, '475830078125\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000d                                   // .long 13
	QUAD $0x3037343934393039; QUAD $0x3238323932373731 // .asciz 16, '9094947017729282'
	QUAD $0x3933303531393733; QUAD $0x0000000035323630 // .asciz 16, '379150390625\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000d                                   // .long 13
	QUAD $0x3533373437343534; QUAD $0x3134363436383830 // .asciz 16, '4547473508864641'
	QUAD $0x3931353735393831; QUAD $0x0000003532313335 // .asciz 16, '1895751953125\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000d                                   // .long 13
	QUAD $0x3736333733373232; QUAD $0x3032333233343435 // .asciz 16, '2273736754432320'
	QUAD $0x3935373837343935; QUAD $0x0000353236353637 // .asciz 16, '59478759765625\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000d                                   // .long 13
	QUAD $0x3338363836333131; QUAD $0x3036313631323737 // .asciz 16, '1136868377216160'
	QUAD $0x3937333933373932; QUAD $0x0035323138323838 // .asciz 16, '297393798828125\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000e                                   // .long 14
	QUAD $0x3831343334383635; QUAD $0x3130383038303638 // .asciz 16, '5684341886080801'
	QUAD $0x3939383639363834; QUAD $0x0035323630343134 // .asciz 16, '486968994140625\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000e                                   // .long 14
	QUAD $0x3930373132343832; QUAD $0x3030343034303334 // .asciz 16, '2842170943040400'
	QUAD $0x3934343834333437; QUAD $0x3532313330373037 // .asciz 16, '7434844970703125'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000e                                   // .long 14
	QUAD $0x3435383031323431; QUAD $0x3030323032353137 // .asciz 16, '1421085471520200'
	QUAD $0x3432323437313733; QUAD $0x3236353135333538 // .asciz 16, '3717422485351562'
	QUAD $0x0000000000000035; QUAD $0x0000000000000000 // .asciz 16, '5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000f                                   // .long 15
	QUAD $0x3337323435303137; QUAD $0x3130303130363735 // .asciz 16, '7105427357601001'
	QUAD $0x3432313137383538; QUAD $0x3231383735373632 // .asciz 16, '8587112426757812'
	QUAD $0x0000000000000035; QUAD $0x0000000000000000 // .asciz 16, '5\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000f                                   // .long 15
	QUAD $0x3633313732353533; QUAD $0x3030353030383837 // .asciz 16, '3552713678800500'
	QUAD $0x3236353533393239; QUAD $0x3630393837333331 // .asciz 16, '9293556213378906'
	QUAD $0x0000000000003532; QUAD $0x0000000000000000 // .asciz 16, '25\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x0000000f                                   // .long 15
	QUAD $0x3836353336373731; QUAD $0x3035323030343933 // .asciz 16, '1776356839400250'
	QUAD $0x3138373736343634; QUAD $0x3335343938363630 // .asciz 16, '4646778106689453'
	QUAD $0x0000000000353231; QUAD $0x0000000000000000 // .asciz 16, '125\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000010                                   // .long 16
	QUAD $0x3134383731383838; QUAD $0x3235323130303739 // .asciz 16, '8881784197001252'
	QUAD $0x3530393833333233; QUAD $0x3536323734343333 // .asciz 16, '3233890533447265'
	QUAD $0x0000000000353236; QUAD $0x0000000000000000 // .asciz 16, '625\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000010                                   // .long 16
	QUAD $0x3032393830343434; QUAD $0x3632363030353839 // .asciz 16, '4440892098500626'
	QUAD $0x3235343936313631; QUAD $0x3233363332373636 // .asciz 16, '1616945266723632'
	QUAD $0x0000000035323138; QUAD $0x0000000000000000 // .asciz 16, '8125\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000010                                   // .long 16
	QUAD $0x3036343430323232; QUAD $0x3331333035323934 // .asciz 16, '2220446049250313'
	QUAD $0x3632373438303830; QUAD $0x3631383136333333 // .asciz 16, '0808472633361816'
	QUAD $0x0000003532363034; QUAD $0x0000000000000000 // .asciz 16, '40625\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000010                                   // .long 16
	QUAD $0x3033323230313131; QUAD $0x3635313532363432 // .asciz 16, '1110223024625156'
	QUAD $0x3336333234303435; QUAD $0x3830393038363631 // .asciz 16, '5404236316680908'
	QUAD $0x0000353231333032; QUAD $0x0000000000000000 // .asciz 16, '203125\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000011                                   // .long 17
	QUAD $0x3135313131353535; QUAD $0x3238373532313332 // .asciz 16, '5551115123125782'
	QUAD $0x3531383131323037; QUAD $0x3134353430343338 // .asciz 16, '7021181583404541'
	QUAD $0x0000353236353130; QUAD $0x0000000000000000 // .asciz 16, '015625\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000011                                   // .long 17
	QUAD $0x3537353535373732; QUAD $0x3139383236353136 // .asciz 16, '2775557561562891'
	QUAD $0x3730393530313533; QUAD $0x3037323230373139 // .asciz 16, '3510590791702270'
	QUAD $0x0035323138373035; QUAD $0x0000000000000000 // .asciz 16, '5078125\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000011                                   // .long 17
	QUAD $0x3738373737383331; QUAD $0x3534343138373038 // .asciz 16, '1387778780781445'
	QUAD $0x3335393235353736; QUAD $0x3533313135383539 // .asciz 16, '6755295395851135'
	QUAD $0x3532363039333532; QUAD $0x0000000000000000 // .asciz 16, '25390625\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000012                                   // .long 18
	QUAD $0x3933393838333936; QUAD $0x3832323730393330 // .asciz 16, '6938893903907228'
	QUAD $0x3936373436373733; QUAD $0x3637363535323937 // .asciz 16, '3776476979255676'
	QUAD $0x3532313335393632; QUAD $0x0000000000000000 // .asciz 16, '26953125\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000012                                   // .long 18
	QUAD $0x3936343439363433; QUAD $0x3431363335393135 // .asciz 16, '3469446951953614'
	QUAD $0x3438333238383831; QUAD $0x3833383732363938 // .asciz 16, '1888238489627838'
	QUAD $0x3236353637343331; QUAD $0x0000000000000035 // .asciz 16, '134765625\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000012                                   // .long 18
	QUAD $0x3433323734333731; QUAD $0x3730383637393537 // .asciz 16, '1734723475976807'
	QUAD $0x3239313134343930; QUAD $0x3931393331383434 // .asciz 16, '0944119244813919'
	QUAD $0x3138323833373630; QUAD $0x0000000000003532 // .asciz 16, '0673828125\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	LONG $0x00000013                                   // .long 19
	QUAD $0x3337313633373638; QUAD $0x3533303438383937 // .asciz 16, '8673617379884035'
	QUAD $0x3236393530323734; QUAD $0x3539353936303432 // .asciz 16, '4720596224069595'
	QUAD $0x3630343139363333; QUAD $0x0000000000003532 // .asciz 16, '3369140625\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .asciz 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	LONG $0x00000000                                   // .asciz 4, '\x00\x00\x00\x00'
	QUAD $0x0000000000000000                           // .p2align 4, 0x00

_LB_206794c4: // _pow10_ceil_sig_f32.g
	QUAD $0x81ceb32c4b43fcf5 // .quad -9093133594791772939
	QUAD $0xa2425ff75e14fc32 // .quad -6754730975062328270
	QUAD $0xcad2f7f5359a3b3f // .quad -3831727700400522433
	QUAD $0xfd87b5f28300ca0e // .quad -177973607073265138
	QUAD $0x9e74d1b791e07e49 // .quad -7028762532061872567
	QUAD $0xc612062576589ddb // .quad -4174267146649952805
	QUAD $0xf79687aed3eec552 // .quad -606147914885053102
	QUAD $0x9abe14cd44753b53 // .quad -7296371474444240045
	QUAD $0xc16d9a0095928a28 // .quad -4508778324627912152
	QUAD $0xf1c90080baf72cb2 // .quad -1024286887357502286
	QUAD $0x971da05074da7bef // .quad -7557708332239520785
	QUAD $0xbce5086492111aeb // .quad -4835449396872013077
	QUAD $0xec1e4a7db69561a6 // .quad -1432625727662628442
	QUAD $0x9392ee8e921d5d08 // .quad -7812920107430224632
	QUAD $0xb877aa3236a4b44a // .quad -5154464115860392886
	QUAD $0xe69594bec44de15c // .quad -1831394126398103204
	QUAD $0x901d7cf73ab0acda // .quad -8062150356639896358
	QUAD $0xb424dc35095cd810 // .quad -5466001927372482544
	QUAD $0xe12e13424bb40e14 // .quad -2220816390788215276
	QUAD $0x8cbccc096f5088cc // .quad -8305539271883716404
	QUAD $0xafebff0bcb24aaff // .quad -5770238071427257601
	QUAD $0xdbe6fecebdedd5bf // .quad -2601111570856684097
	QUAD $0x89705f4136b4a598 // .quad -8543223759426509416
	QUAD $0xabcc77118461cefd // .quad -6067343680855748867
	QUAD $0xd6bf94d5e57a42bd // .quad -2972493582642298179
	QUAD $0x8637bd05af6c69b6 // .quad -8775337516792518218
	QUAD $0xa7c5ac471b478424 // .quad -6357485877563259868
	QUAD $0xd1b71758e219652c // .quad -3335171328526686932
	QUAD $0x83126e978d4fdf3c // .quad -9002011107970261188
	QUAD $0xa3d70a3d70a3d70b // .quad -6640827866535438581
	QUAD $0xcccccccccccccccd // .quad -3689348814741910323
	QUAD $0x8000000000000000 // .quad -9223372036854775808
	QUAD $0xa000000000000000 // .quad -6917529027641081856
	QUAD $0xc800000000000000 // .quad -4035225266123964416
	QUAD $0xfa00000000000000 // .quad -432345564227567616
	QUAD $0x9c40000000000000 // .quad -7187745005283311616
	QUAD $0xc350000000000000 // .quad -4372995238176751616
	QUAD $0xf424000000000000 // .quad -854558029293551616
	QUAD $0x9896800000000000 // .quad -7451627795949551616
	QUAD $0xbebc200000000000 // .quad -4702848726509551616
	QUAD $0xee6b280000000000 // .quad -1266874889709551616
	QUAD $0x9502f90000000000 // .quad -7709325833709551616
	QUAD $0xba43b74000000000 // .quad -5024971273709551616
	QUAD $0xe8d4a51000000000 // .quad -1669528073709551616
	QUAD $0x9184e72a00000000 // .quad -7960984073709551616
	QUAD $0xb5e620f480000000 // .quad -5339544073709551616
	QUAD $0xe35fa931a0000000 // .quad -2062744073709551616
	QUAD $0x8e1bc9bf04000000 // .quad -8206744073709551616
	QUAD $0xb1a2bc2ec5000000 // .quad -5646744073709551616
	QUAD $0xde0b6b3a76400000 // .quad -2446744073709551616
	QUAD $0x8ac7230489e80000 // .quad -8446744073709551616
	QUAD $0xad78ebc5ac620000 // .quad -5946744073709551616
	QUAD $0xd8d726b7177a8000 // .quad -2821744073709551616
	QUAD $0x878678326eac9000 // .quad -8681119073709551616
	QUAD $0xa968163f0a57b400 // .quad -6239712823709551616
	QUAD $0xd3c21bcecceda100 // .quad -3187955011209551616
	QUAD $0x84595161401484a0 // .quad -8910000909647051616
	QUAD $0xa56fa5b99019a5c8 // .quad -6525815118631426616
	QUAD $0xcecb8f27f4200f3a // .quad -3545582879861895366
	QUAD $0x813f3978f8940985 // .quad -9133518327554766459
	QUAD $0xa18f07d736b90be6 // .quad -6805211891016070170
	QUAD $0xc9f2c9cd04674edf // .quad -3894828845342699809
	QUAD $0xfc6f7c4045812297 // .quad -256850038250986857
	QUAD $0x9dc5ada82b70b59e // .quad -7078060301547948642
	QUAD $0xc5371912364ce306 // .quad -4235889358507547898
	QUAD $0xf684df56c3e01bc7 // .quad -683175679707046969
	QUAD $0x9a130b963a6c115d // .quad -7344513827457986211
	QUAD $0xc097ce7bc90715b4 // .quad -4568956265895094860
	QUAD $0xf0bdc21abb48db21 // .quad -1099509313941480671
	QUAD $0x96769950b50d88f5 // .quad -7604722348854507275
	QUAD $0xbc143fa4e250eb32 // .quad -4894216917640746190
	QUAD $0xeb194f8e1ae525fe // .quad -1506085128623544834
	QUAD $0x92efd1b8d0cf37bf // .quad -7858832233030797377
	QUAD $0xb7abc627050305ae // .quad -5211854272861108818
	QUAD $0xe596b7b0c643c71a // .quad -1903131822648998118
	QUAD $0x8f7e32ce7bea5c70 // .quad -8106986416796705680
	QUAD $0xb35dbf821ae4f38c // .quad -5522047002568494196

TEXT Â·__f32toa(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -48(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_f32toa:
	MOVQ  out+0(FP), DI
	MOVSD val+8(FP), X0
	CALL  Â·__native_entry__+51488(SB) // _f32toa
	MOVQ  AX, ret+16(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__f64toa(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -56(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_f64toa:
	MOVQ  out+0(FP), DI
	MOVSD val+8(FP), X0
	CALL  Â·__native_entry__+448(SB) // _f64toa
	MOVQ  AX, ret+16(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__get_by_path(SB), NOSPLIT | NOFRAME, $0 - 32
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -320(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_get_by_path:
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ path+16(FP), DX
	CALL Â·__native_entry__+44080(SB) // _get_by_path
	MOVQ AX, ret+24(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__html_escape(SB), NOSPLIT | NOFRAME, $0 - 40
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -64(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_html_escape:
	MOVQ sp+0(FP), DI
	MOVQ nb+8(FP), SI
	MOVQ dp+16(FP), DX
	MOVQ dn+24(FP), CX
	CALL Â·__native_entry__+10720(SB) // _html_escape
	MOVQ AX, ret+32(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__i64toa(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -16(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_i64toa:
	MOVQ out+0(FP), DI
	MOVQ val+8(FP), SI
	CALL Â·__native_entry__+5168(SB) // _i64toa
	MOVQ AX, ret+16(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__lspace(SB), NOSPLIT | NOFRAME, $0 - 32
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -8(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_lspace:
	MOVQ sp+0(FP), DI
	MOVQ nb+8(FP), SI
	MOVQ off+16(FP), DX
	CALL Â·__native_entry__+80(SB) // _lspace
	MOVQ AX, ret+24(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__quote(SB), NOSPLIT | NOFRAME, $0 - 48
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -56(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_quote:
	MOVQ sp+0(FP), DI
	MOVQ nb+8(FP), SI
	MOVQ dp+16(FP), DX
	MOVQ dn+24(FP), CX
	MOVQ flags+32(FP), R8
	CALL Â·__native_entry__+6560(SB) // _quote
	MOVQ AX, ret+40(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__skip_array(SB), NOSPLIT | NOFRAME, $0 - 40
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -120(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_skip_array:
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ m+16(FP), DX
	MOVQ flags+24(FP), CX
	CALL Â·__native_entry__+24320(SB) // _skip_array
	MOVQ AX, ret+32(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__skip_number(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -56(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_skip_number:
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	CALL Â·__native_entry__+34080(SB) // _skip_number
	MOVQ AX, ret+16(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__skip_object(SB), NOSPLIT | NOFRAME, $0 - 40
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -120(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_skip_object:
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ m+16(FP), DX
	MOVQ flags+24(FP), CX
	CALL Â·__native_entry__+26704(SB) // _skip_object
	MOVQ AX, ret+32(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__skip_one(SB), NOSPLIT | NOFRAME, $0 - 40
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -120(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_skip_one:
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ m+16(FP), DX
	MOVQ flags+24(FP), CX
	CALL Â·__native_entry__+35408(SB) // _skip_one
	MOVQ AX, ret+32(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__skip_one_fast(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -200(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_skip_one_fast:
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	CALL Â·__native_entry__+40272(SB) // _skip_one_fast
	MOVQ AX, ret+16(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__u64toa(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -8(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_u64toa:
	MOVQ out+0(FP), DI
	MOVQ val+8(FP), SI
	CALL Â·__native_entry__+5280(SB) // _u64toa
	MOVQ AX, ret+16(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__unquote(SB), NOSPLIT | NOFRAME, $0 - 48
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -88(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_unquote:
	MOVQ sp+0(FP), DI
	MOVQ nb+8(FP), SI
	MOVQ dp+16(FP), DX
	MOVQ ep+24(FP), CX
	MOVQ flags+32(FP), R8
	CALL Â·__native_entry__+8352(SB) // _unquote
	MOVQ AX, ret+40(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__validate_one(SB), NOSPLIT | NOFRAME, $0 - 32
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -104(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_validate_one:
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ m+16(FP), DX
	CALL Â·__native_entry__+37792(SB) // _validate_one
	MOVQ AX, ret+24(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__validate_utf8(SB), NOSPLIT | NOFRAME, $0 - 32
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -48(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_validate_utf8:
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ m+16(FP), DX
	CALL Â·__native_entry__+50224(SB) // _validate_utf8
	MOVQ AX, ret+24(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__validate_utf8_fast(SB), NOSPLIT | NOFRAME, $0 - 16
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -24(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_validate_utf8_fast:
	MOVQ s+0(FP), DI
	CALL Â·__native_entry__+50896(SB) // _validate_utf8_fast
	MOVQ AX, ret+8(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__value(SB), NOSPLIT | NOFRAME, $0 - 48
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -184(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_value:
	MOVQ s+0(FP), DI
	MOVQ n+8(FP), SI
	MOVQ p+16(FP), DX
	MOVQ v+24(FP), CX
	MOVQ flags+32(FP), R8
	CALL Â·__native_entry__+12000(SB) // _value
	MOVQ AX, ret+40(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__vnumber(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -128(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_vnumber:
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ v+16(FP), DX
	LEAQ Â·__native_entry__+16096(SB), AX // _vnumber
	JMP  AX

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__vsigned(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -16(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_vsigned:
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ v+16(FP), DX
	LEAQ Â·__native_entry__+23536(SB), AX // _vsigned
	JMP  AX

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__vstring(SB), NOSPLIT | NOFRAME, $0 - 32
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -104(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_vstring:
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ v+16(FP), DX
	MOVQ flags+24(FP), CX
	LEAQ Â·__native_entry__+13904(SB), AX // _vstring
	JMP  AX

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry

TEXT Â·__vunsigned(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -16(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_vunsigned:
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ v+16(FP), DX
	LEAQ Â·__native_entry__+23904(SB), AX // _vunsigned
	JMP  AX

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry
