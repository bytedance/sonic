// +build !noasm !appengine
// Code generated by asm2asm, DO NOT EDIT.

#include "go_asm.h"
#include "funcdata.h"
#include "textflag.h"

TEXT Â·__skip_one_fast_entry(SB), NOSPLIT, $128
	NO_LOCAL_POINTERS
	BYTE $0x00
	BYTE $0x00
	BYTE $0x00
	BYTE $0x00
	BYTE $0x00
	BYTE $0x00
	BYTE $0x00
	BYTE $0x00
	BYTE $0x00
	  // .p2align 4, 0x00
LCPI0_0:
	QUAD $0x2c2c2c2c2c2c2c2c; QUAD $0x2c2c2c2c2c2c2c2c  // .space 16, ',,,,,,,,,,,,,,,,'
LCPI0_1:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020  // .space 16, '                '
LCPI0_2:
	QUAD $0x7d7d7d7d7d7d7d7d; QUAD $0x7d7d7d7d7d7d7d7d  // .space 16, '}}}}}}}}}}}}}}}}'
LCPI0_3:
	QUAD $0x2222222222222222; QUAD $0x2222222222222222  // .space 16, '""""""""""""""""'
LCPI0_4:
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c  // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
LCPI0_5:
	QUAD $0x7b7b7b7b7b7b7b7b; QUAD $0x7b7b7b7b7b7b7b7b  // .space 16, '{{{{{{{{{{{{{{{{'
LCPI0_6:
	QUAD $0x5b5b5b5b5b5b5b5b; QUAD $0x5b5b5b5b5b5b5b5b  // .space 16, '[[[[[[[[[[[[[[[['
LCPI0_7:
	QUAD $0x5d5d5d5d5d5d5d5d; QUAD $0x5d5d5d5d5d5d5d5d  // .space 16, ']]]]]]]]]]]]]]]]'
	  // .p2align 4, 0x90
_skip_one_fast:
	BYTE $0x55  // pushq        %rbp
	WORD $0x8948; BYTE $0xe5  // movq         %rsp, %rbp
	WORD $0x5741  // pushq        %r15
	WORD $0x5641  // pushq        %r14
	WORD $0x5541  // pushq        %r13
	WORD $0x5441  // pushq        %r12
	BYTE $0x53  // pushq        %rbx
	LONG $0x58ec8348  // subq         $88, %rsp
	WORD $0x8b4c; BYTE $0x07  // movq         (%rdi), %r8
	LONG $0x084f8b4c  // movq         $8(%rdi), %r9
	WORD $0x8b48; BYTE $0x16  // movq         (%rsi), %rdx
	WORD $0x8948; BYTE $0xd0  // movq         %rdx, %rax
	WORD $0x294c; BYTE $0xc8  // subq         %r9, %rax
	LONG $0x002a830f; WORD $0x0000  // jae          LBB0_5, $42(%rip)
	LONG $0x100c8a41  // movb         (%r8,%rdx), %cl
	WORD $0xf980; BYTE $0x0d  // cmpb         $13, %cl
	LONG $0x001d840f; WORD $0x0000  // je           LBB0_5, $29(%rip)
	WORD $0xf980; BYTE $0x20  // cmpb         $32, %cl
	LONG $0x0014840f; WORD $0x0000  // je           LBB0_5, $20(%rip)
	WORD $0xc180; BYTE $0xf7  // addb         $-9, %cl
	WORD $0xf980; BYTE $0x01  // cmpb         $1, %cl
	LONG $0x0008860f; WORD $0x0000  // jbe          LBB0_5, $8(%rip)
	WORD $0x8949; BYTE $0xd6  // movq         %rdx, %r14
	LONG $0x00012ee9; BYTE $0x00  // jmp          LBB0_27, $302(%rip)
LBB0_5:
	LONG $0x01728d4c  // leaq         $1(%rdx), %r14
	WORD $0x394d; BYTE $0xce  // cmpq         %r9, %r14
	LONG $0x0022830f; WORD $0x0000  // jae          LBB0_9, $34(%rip)
	LONG $0x300c8a43  // movb         (%r8,%r14), %cl
	WORD $0xf980; BYTE $0x0d  // cmpb         $13, %cl
	LONG $0x0015840f; WORD $0x0000  // je           LBB0_9, $21(%rip)
	WORD $0xf980; BYTE $0x20  // cmpb         $32, %cl
	LONG $0x000c840f; WORD $0x0000  // je           LBB0_9, $12(%rip)
	WORD $0xc180; BYTE $0xf7  // addb         $-9, %cl
	WORD $0xf980; BYTE $0x01  // cmpb         $1, %cl
	LONG $0x00ff870f; WORD $0x0000  // ja           LBB0_27, $255(%rip)
LBB0_9:
	LONG $0x02728d4c  // leaq         $2(%rdx), %r14
	WORD $0x394d; BYTE $0xce  // cmpq         %r9, %r14
	LONG $0x0022830f; WORD $0x0000  // jae          LBB0_13, $34(%rip)
	LONG $0x300c8a43  // movb         (%r8,%r14), %cl
	WORD $0xf980; BYTE $0x0d  // cmpb         $13, %cl
	LONG $0x0015840f; WORD $0x0000  // je           LBB0_13, $21(%rip)
	WORD $0xf980; BYTE $0x20  // cmpb         $32, %cl
	LONG $0x000c840f; WORD $0x0000  // je           LBB0_13, $12(%rip)
	WORD $0xc180; BYTE $0xf7  // addb         $-9, %cl
	WORD $0xf980; BYTE $0x01  // cmpb         $1, %cl
	LONG $0x00d0870f; WORD $0x0000  // ja           LBB0_27, $208(%rip)
LBB0_13:
	LONG $0x03728d4c  // leaq         $3(%rdx), %r14
	WORD $0x394d; BYTE $0xce  // cmpq         %r9, %r14
	LONG $0x0022830f; WORD $0x0000  // jae          LBB0_17, $34(%rip)
	LONG $0x300c8a43  // movb         (%r8,%r14), %cl
	WORD $0xf980; BYTE $0x0d  // cmpb         $13, %cl
	LONG $0x0015840f; WORD $0x0000  // je           LBB0_17, $21(%rip)
	WORD $0xf980; BYTE $0x20  // cmpb         $32, %cl
	LONG $0x000c840f; WORD $0x0000  // je           LBB0_17, $12(%rip)
	WORD $0xc180; BYTE $0xf7  // addb         $-9, %cl
	WORD $0xf980; BYTE $0x01  // cmpb         $1, %cl
	LONG $0x00a1870f; WORD $0x0000  // ja           LBB0_27, $161(%rip)
LBB0_17:
	LONG $0x044a8d48  // leaq         $4(%rdx), %rcx
	WORD $0x3949; BYTE $0xc9  // cmpq         %rcx, %r9
	LONG $0x004e860f; WORD $0x0000  // jbe          LBB0_23, $78(%rip)
	WORD $0x3949; BYTE $0xc9  // cmpq         %rcx, %r9
	LONG $0x0054840f; WORD $0x0000  // je           LBB0_24, $84(%rip)
	LONG $0x080c8d4b  // leaq         (%r8,%r9), %rcx
	LONG $0x04c08348  // addq         $4, %rax
	LONG $0x02748d4e; BYTE $0x05  // leaq         $5(%rdx,%r8), %r14
	QUAD $0x000100002600ba48; WORD $0x0000  // movabsq      $4294977024, %rdx
	LONG $0x90909090; BYTE $0x90  // .p2align 4, 0x90
LBB0_20:
	LONG $0x5ebe0f41; BYTE $0xff  // movsbl       $-1(%r14), %ebx
	WORD $0xfb83; BYTE $0x20  // cmpl         $32, %ebx
	LONG $0x0048870f; WORD $0x0000  // ja           LBB0_26, $72(%rip)
	LONG $0xdaa30f48  // btq          %rbx, %rdx
	LONG $0x003e830f; WORD $0x0000  // jae          LBB0_26, $62(%rip)
	WORD $0xff49; BYTE $0xc6  // incq         %r14
	WORD $0xff48; BYTE $0xc0  // incq         %rax
	LONG $0xffdc850f; WORD $0xffff  // jne          LBB0_20, $-36(%rip)
	LONG $0x000012e9; BYTE $0x00  // jmp          LBB0_25, $18(%rip)
LBB0_23:
	WORD $0x8948; BYTE $0x0e  // movq         %rcx, (%rsi)
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff  // movq         $-1, %rax
	LONG $0x00014ae9; BYTE $0x00  // jmp          LBB0_45, $330(%rip)
LBB0_24:
	WORD $0x014c; BYTE $0xc1  // addq         %r8, %rcx
LBB0_25:
	WORD $0x294c; BYTE $0xc1  // subq         %r8, %rcx
	WORD $0x8949; BYTE $0xce  // movq         %rcx, %r14
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff  // movq         $-1, %rax
	WORD $0x394d; BYTE $0xce  // cmpq         %r9, %r14
	LONG $0x001e820f; WORD $0x0000  // jb           LBB0_27, $30(%rip)
	LONG $0x00012ce9; BYTE $0x00  // jmp          LBB0_45, $300(%rip)
LBB0_26:
	WORD $0x894c; BYTE $0xc0  // movq         %r8, %rax
	WORD $0xf748; BYTE $0xd0  // notq         %rax
	WORD $0x0149; BYTE $0xc6  // addq         %rax, %r14
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff  // movq         $-1, %rax
	WORD $0x394d; BYTE $0xce  // cmpq         %r9, %r14
	LONG $0x0113830f; WORD $0x0000  // jae          LBB0_45, $275(%rip)
LBB0_27:
	LONG $0x015e8d49  // leaq         $1(%r14), %rbx
	WORD $0x8948; BYTE $0x1e  // movq         %rbx, (%rsi)
	LONG $0x0cbe0f43; BYTE $0x30  // movsbl       (%r8,%r14), %ecx
	WORD $0xf983; BYTE $0x7b  // cmpl         $123, %ecx
	LONG $0x0120870f; WORD $0x0000  // ja           LBB0_47, $288(%rip)
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff  // movq         $-1, %rax
	LONG $0xaa158d48; WORD $0x000b; BYTE $0x00  // leaq         $2986(%rip), %rdx  /* LJTI0_0+0(%rip) */
	LONG $0x8a0c6348  // movslq       (%rdx,%rcx,4), %rcx
	WORD $0x0148; BYTE $0xd1  // addq         %rdx, %rcx
	JMP CX
LBB0_29:
	LONG $0x084f8b48  // movq         $8(%rdi), %rcx
	WORD $0x8948; BYTE $0xc8  // movq         %rcx, %rax
	WORD $0x2948; BYTE $0xd8  // subq         %rbx, %rax
	WORD $0x014c; BYTE $0xc3  // addq         %r8, %rbx
	LONG $0x10f88348  // cmpq         $16, %rax
	LONG $0x007b820f; WORD $0x0000  // jb           LBB0_34, $123(%rip)
	WORD $0x294c; BYTE $0xf1  // subq         %r14, %rcx
	LONG $0xefc18348  // addq         $-17, %rcx
	WORD $0x8948; BYTE $0xca  // movq         %rcx, %rdx
	LONG $0xf0e28348  // andq         $-16, %rdx
	WORD $0x014c; BYTE $0xf2  // addq         %r14, %rdx
	LONG $0x10548d49; BYTE $0x11  // leaq         $17(%r8,%rdx), %rdx
	WORD $0xe183; BYTE $0x0f  // andl         $15, %ecx
	QUAD $0xfffffd9d056f0ff3  // movdqu       $-611(%rip), %xmm0  /* LCPI0_0+0(%rip) */
	QUAD $0xfffffda50d6f0ff3  // movdqu       $-603(%rip), %xmm1  /* LCPI0_1+0(%rip) */
	QUAD $0xfffffdad156f0ff3  // movdqu       $-595(%rip), %xmm2  /* LCPI0_2+0(%rip) */
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90  // .p2align 4, 0x90
LBB0_31:
	LONG $0x1b6f0ff3  // movdqu       (%rbx), %xmm3
	LONG $0xe36f0f66  // movdqa       %xmm3, %xmm4
	LONG $0xe0740f66  // pcmpeqb      %xmm0, %xmm4
	LONG $0xd9eb0f66  // por          %xmm1, %xmm3
	LONG $0xda740f66  // pcmpeqb      %xmm2, %xmm3
	LONG $0xdceb0f66  // por          %xmm4, %xmm3
	LONG $0xfbd70f66  // pmovmskb     %xmm3, %edi
	WORD $0x8566; BYTE $0xff  // testw        %di, %di
	LONG $0x005a850f; WORD $0x0000  // jne          LBB0_42, $90(%rip)
	LONG $0x10c38348  // addq         $16, %rbx
	LONG $0xf0c08348  // addq         $-16, %rax
	LONG $0x0ff88348  // cmpq         $15, %rax
	LONG $0xffc9870f; WORD $0xffff  // ja           LBB0_31, $-55(%rip)
	WORD $0x8948; BYTE $0xc8  // movq         %rcx, %rax
	WORD $0x8948; BYTE $0xd3  // movq         %rdx, %rbx
LBB0_34:
	WORD $0x8548; BYTE $0xc0  // testq        %rax, %rax
	LONG $0x0031840f; WORD $0x0000  // je           LBB0_41, $49(%rip)
	LONG $0x030c8d48  // leaq         (%rbx,%rax), %rcx
LBB0_36:
	WORD $0xb60f; BYTE $0x13  // movzbl       (%rbx), %edx
	WORD $0xfa80; BYTE $0x2c  // cmpb         $44, %dl
	LONG $0x0021840f; WORD $0x0000  // je           LBB0_41, $33(%rip)
	WORD $0xfa80; BYTE $0x7d  // cmpb         $125, %dl
	LONG $0x0018840f; WORD $0x0000  // je           LBB0_41, $24(%rip)
	WORD $0xfa80; BYTE $0x5d  // cmpb         $93, %dl
	LONG $0x000f840f; WORD $0x0000  // je           LBB0_41, $15(%rip)
	WORD $0xff48; BYTE $0xc3  // incq         %rbx
	WORD $0xff48; BYTE $0xc8  // decq         %rax
	LONG $0xffd6850f; WORD $0xffff  // jne          LBB0_36, $-42(%rip)
	WORD $0x8948; BYTE $0xcb  // movq         %rcx, %rbx
LBB0_41:
	WORD $0x294c; BYTE $0xc3  // subq         %r8, %rbx
	LONG $0x00000de9; BYTE $0x00  // jmp          LBB0_43, $13(%rip)
LBB0_42:
	WORD $0xb70f; BYTE $0xc7  // movzwl       %di, %eax
	LONG $0xc0bc0f48  // bsfq         %rax, %rax
	WORD $0x294c; BYTE $0xc3  // subq         %r8, %rbx
	WORD $0x0148; BYTE $0xc3  // addq         %rax, %rbx
LBB0_43:
	WORD $0x8948; BYTE $0x1e  // movq         %rbx, (%rsi)
LBB0_44:
	WORD $0x894c; BYTE $0xf0  // movq         %r14, %rax
LBB0_45:
	LONG $0x58c48348  // addq         $88, %rsp
	BYTE $0x5b  // popq         %rbx
	WORD $0x5c41  // popq         %r12
	WORD $0x5d41  // popq         %r13
	WORD $0x5e41  // popq         %r14
	WORD $0x5f41  // popq         %r15
	BYTE $0x5d  // popq         %rbp
	BYTE $0xc3  // retq         
LBB0_46:
	LONG $0x044e8d49  // leaq         $4(%r14), %rcx
	LONG $0x084f3b48  // cmpq         $8(%rdi), %rcx
	LONG $0xffe3870f; WORD $0xffff  // ja           LBB0_45, $-29(%rip)
	LONG $0x00056ae9; BYTE $0x00  // jmp          LBB0_83, $1386(%rip)
LBB0_47:
	WORD $0x894c; BYTE $0x36  // movq         %r14, (%rsi)
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff  // movq         $-2, %rax
	LONG $0xffffcfe9; BYTE $0xff  // jmp          LBB0_45, $-49(%rip)
LBB0_48:
	LONG $0x084f8b4c  // movq         $8(%rdi), %r9
	WORD $0x894d; BYTE $0xcf  // movq         %r9, %r15
	WORD $0x2949; BYTE $0xdf  // subq         %rbx, %r15
	LONG $0x20ff8349  // cmpq         $32, %r15
	LONG $0x0a3e8c0f; WORD $0x0000  // jl           LBB0_117, $2622(%rip)
	LONG $0xffffba41; WORD $0xffff  // movl         $4294967295, %r10d
	LONG $0x301c8d4f  // leaq         (%r8,%r14), %r11
	WORD $0x294d; BYTE $0xf1  // subq         %r14, %r9
	LONG $0x001fbd41; WORD $0x0000  // movl         $31, %r13d
	WORD $0x3145; BYTE $0xff  // xorl         %r15d, %r15d
	QUAD $0xfffffcbb056f0ff3  // movdqu       $-837(%rip), %xmm0  /* LCPI0_3+0(%rip) */
	QUAD $0xfffffcc30d6f0ff3  // movdqu       $-829(%rip), %xmm1  /* LCPI0_4+0(%rip) */
	WORD $0x3145; BYTE $0xe4  // xorl         %r12d, %r12d
	LONG $0x00002de9; BYTE $0x00  // jmp          LBB0_50, $45(%rip)
	QUAD $0x9090909090909090; WORD $0x9090; BYTE $0x90  // .p2align 4, 0x90
LBB0_52:
	WORD $0x3145; BYTE $0xe4  // xorl         %r12d, %r12d
	WORD $0xc985  // testl        %ecx, %ecx
	LONG $0x00a6850f; WORD $0x0000  // jne          LBB0_110, $166(%rip)
LBB0_53:
	LONG $0x20c78349  // addq         $32, %r15
	LONG $0x294c8d4b; BYTE $0xe0  // leaq         $-32(%r9,%r13), %rcx
	LONG $0xe0c58349  // addq         $-32, %r13
	LONG $0x3ff98348  // cmpq         $63, %rcx
	LONG $0x09608e0f; WORD $0x0000  // jle          LBB0_54, $2400(%rip)
LBB0_50:
	LONG $0x6f0f43f3; WORD $0x3b54; BYTE $0x01  // movdqu       $1(%r11,%r15), %xmm2
	LONG $0x6f0f43f3; WORD $0x3b5c; BYTE $0x11  // movdqu       $17(%r11,%r15), %xmm3
	LONG $0xe26f0f66  // movdqa       %xmm2, %xmm4
	LONG $0xe0740f66  // pcmpeqb      %xmm0, %xmm4
	LONG $0xfcd70f66  // pmovmskb     %xmm4, %edi
	LONG $0xe36f0f66  // movdqa       %xmm3, %xmm4
	LONG $0xe0740f66  // pcmpeqb      %xmm0, %xmm4
	LONG $0xccd70f66  // pmovmskb     %xmm4, %ecx
	LONG $0x10e1c148  // shlq         $16, %rcx
	WORD $0x0948; BYTE $0xf9  // orq          %rdi, %rcx
	LONG $0xd1740f66  // pcmpeqb      %xmm1, %xmm2
	LONG $0xdad70f66  // pmovmskb     %xmm2, %ebx
	LONG $0xd9740f66  // pcmpeqb      %xmm1, %xmm3
	LONG $0xfbd70f66  // pmovmskb     %xmm3, %edi
	LONG $0x10e7c148  // shlq         $16, %rdi
	WORD $0x0948; BYTE $0xdf  // orq          %rbx, %rdi
	WORD $0x8948; BYTE $0xfb  // movq         %rdi, %rbx
	WORD $0x094c; BYTE $0xe3  // orq          %r12, %rbx
	LONG $0xff8e840f; WORD $0xffff  // je           LBB0_52, $-114(%rip)
	WORD $0x8944; BYTE $0xe3  // movl         %r12d, %ebx
	WORD $0x3144; BYTE $0xd3  // xorl         %r10d, %ebx
	WORD $0xdf21  // andl         %ebx, %edi
	WORD $0x1c8d; BYTE $0x3f  // leal         (%rdi,%rdi), %ebx
	WORD $0x0944; BYTE $0xe3  // orl          %r12d, %ebx
	LONG $0xab928d41; WORD $0xaaaa; BYTE $0xaa  // leal         $-1431655765(%r10), %edx
	WORD $0xda31  // xorl         %ebx, %edx
	WORD $0xfa21  // andl         %edi, %edx
	LONG $0xaaaae281; WORD $0xaaaa  // andl         $-1431655766, %edx
	WORD $0x3145; BYTE $0xe4  // xorl         %r12d, %r12d
	WORD $0xfa01  // addl         %edi, %edx
	LONG $0xc4920f41  // setb         %r12b
	WORD $0xd201  // addl         %edx, %edx
	LONG $0x5555f281; WORD $0x5555  // xorl         $1431655765, %edx
	WORD $0xda21  // andl         %ebx, %edx
	WORD $0x3144; BYTE $0xd2  // xorl         %r10d, %edx
	WORD $0xd121  // andl         %edx, %ecx
	WORD $0xc985  // testl        %ecx, %ecx
	LONG $0xff5a840f; WORD $0xffff  // je           LBB0_53, $-166(%rip)
LBB0_110:
	LONG $0xc1bc0f48  // bsfq         %rcx, %rax
	WORD $0x0149; BYTE $0xc3  // addq         %rax, %r11
	WORD $0x014d; BYTE $0xfb  // addq         %r15, %r11
	WORD $0x294d; BYTE $0xc3  // subq         %r8, %r11
	LONG $0x02c38349  // addq         $2, %r11
	WORD $0x894c; BYTE $0x1e  // movq         %r11, (%rsi)
	LONG $0xfffeb5e9; BYTE $0xff  // jmp          LBB0_44, $-331(%rip)
LBB0_57:
	QUAD $0x555555555555bd49; WORD $0x5555  // movabsq      $6148914691236517205, %r13
	LONG $0x084f8b48  // movq         $8(%rdi), %rcx
	WORD $0x2948; BYTE $0xd9  // subq         %rbx, %rcx
	WORD $0x0149; BYTE $0xd8  // addq         %rbx, %r8
	WORD $0x3145; BYTE $0xff  // xorl         %r15d, %r15d
	QUAD $0xfffbb6156f0f44f3; BYTE $0xff  // movdqu       $-1098(%rip), %xmm10  /* LCPI0_3+0(%rip) */
	QUAD $0xfffffbbe0d6f0ff3  // movdqu       $-1090(%rip), %xmm1  /* LCPI0_4+0(%rip) */
	LONG $0x760f4566; BYTE $0xc9  // pcmpeqd      %xmm9, %xmm9
	QUAD $0xfffffbd11d6f0ff3  // movdqu       $-1071(%rip), %xmm3  /* LCPI0_6+0(%rip) */
	QUAD $0xfffffbd9256f0ff3  // movdqu       $-1063(%rip), %xmm4  /* LCPI0_7+0(%rip) */
	LONG $0xc0570f45  // xorps        %xmm8, %xmm8
	WORD $0x3145; BYTE $0xd2  // xorl         %r10d, %r10d
	WORD $0xd231  // xorl         %edx, %edx
	LONG $0xc0558948  // movq         %rdx, $-64(%rbp)
	WORD $0x3145; BYTE $0xdb  // xorl         %r11d, %r11d
	LONG $0x000060e9; BYTE $0x00  // jmp          LBB0_59, $96(%rip)
LBB0_58:
	LONG $0x3ff9c149  // sarq         $63, %r9
	WORD $0x894c; BYTE $0xf9  // movq         %r15, %rcx
	WORD $0xd148; BYTE $0xe9  // shrq         %rcx
	WORD $0x214c; BYTE $0xe9  // andq         %r13, %rcx
	WORD $0x2949; BYTE $0xcf  // subq         %rcx, %r15
	WORD $0x894c; BYTE $0xf9  // movq         %r15, %rcx
	WORD $0x214c; BYTE $0xd1  // andq         %r10, %rcx
	LONG $0x02efc149  // shrq         $2, %r15
	WORD $0x214d; BYTE $0xd7  // andq         %r10, %r15
	WORD $0x0149; BYTE $0xcf  // addq         %rcx, %r15
	WORD $0x894c; BYTE $0xf9  // movq         %r15, %rcx
	LONG $0x04e9c148  // shrq         $4, %rcx
	WORD $0x014c; BYTE $0xf9  // addq         %r15, %rcx
	QUAD $0x0f0f0f0f0f0fba48; WORD $0x0f0f  // movabsq      $1085102592571150095, %rdx
	WORD $0x2148; BYTE $0xd1  // andq         %rdx, %rcx
	QUAD $0x010101010101ba48; WORD $0x0101  // movabsq      $72340172838076673, %rdx
	LONG $0xcaaf0f48  // imulq        %rdx, %rcx
	LONG $0x38e9c148  // shrq         $56, %rcx
	LONG $0xc04d0148  // addq         %rcx, $-64(%rbp)
	LONG $0x40c08349  // addq         $64, %r8
	LONG $0xd04d8b48  // movq         $-48(%rbp), %rcx
	LONG $0xc0c18348  // addq         $-64, %rcx
	WORD $0x894d; BYTE $0xcf  // movq         %r9, %r15
	LONG $0xc8558b4c  // movq         $-56(%rbp), %r10
LBB0_59:
	LONG $0x40f98348  // cmpq         $64, %rcx
	LONG $0xd04d8948  // movq         %rcx, $-48(%rbp)
	LONG $0x02348c0f; WORD $0x0000  // jl           LBB0_66, $564(%rip)
LBB0_60:
	LONG $0x6f0f41f3; BYTE $0x00  // movdqu       (%r8), %xmm0
	LONG $0x6f0f41f3; WORD $0x1068  // movdqu       $16(%r8), %xmm5
	LONG $0x6f0f41f3; WORD $0x2078  // movdqu       $32(%r8), %xmm7
	LONG $0x6f0f41f3; WORD $0x3070  // movdqu       $48(%r8), %xmm6
	LONG $0xd06f0f66  // movdqa       %xmm0, %xmm2
	LONG $0x740f4166; BYTE $0xd2  // pcmpeqb      %xmm10, %xmm2
	LONG $0xd70f4466; BYTE $0xca  // pmovmskb     %xmm2, %r9d
	LONG $0xd56f0f66  // movdqa       %xmm5, %xmm2
	LONG $0x740f4166; BYTE $0xd2  // pcmpeqb      %xmm10, %xmm2
	LONG $0xcad70f66  // pmovmskb     %xmm2, %ecx
	LONG $0xd76f0f66  // movdqa       %xmm7, %xmm2
	LONG $0x740f4166; BYTE $0xd2  // pcmpeqb      %xmm10, %xmm2
	LONG $0xdad70f66  // pmovmskb     %xmm2, %ebx
	LONG $0xd66f0f66  // movdqa       %xmm6, %xmm2
	LONG $0x740f4166; BYTE $0xd2  // pcmpeqb      %xmm10, %xmm2
	LONG $0xd2d70f66  // pmovmskb     %xmm2, %edx
	LONG $0x30e2c148  // shlq         $48, %rdx
	LONG $0x20e3c148  // shlq         $32, %rbx
	LONG $0x10e1c148  // shlq         $16, %rcx
	WORD $0x0949; BYTE $0xc9  // orq          %rcx, %r9
	WORD $0x0949; BYTE $0xd9  // orq          %rbx, %r9
	WORD $0x0949; BYTE $0xd1  // orq          %rdx, %r9
	LONG $0xd06f0f66  // movdqa       %xmm0, %xmm2
	LONG $0xd1740f66  // pcmpeqb      %xmm1, %xmm2
	LONG $0xcad70f66  // pmovmskb     %xmm2, %ecx
	LONG $0xd56f0f66  // movdqa       %xmm5, %xmm2
	LONG $0xd1740f66  // pcmpeqb      %xmm1, %xmm2
	LONG $0xd70f4466; BYTE $0xe2  // pmovmskb     %xmm2, %r12d
	LONG $0xd76f0f66  // movdqa       %xmm7, %xmm2
	LONG $0xd1740f66  // pcmpeqb      %xmm1, %xmm2
	LONG $0xdad70f66  // pmovmskb     %xmm2, %ebx
	LONG $0xd66f0f66  // movdqa       %xmm6, %xmm2
	LONG $0xd1740f66  // pcmpeqb      %xmm1, %xmm2
	LONG $0xd2d70f66  // pmovmskb     %xmm2, %edx
	LONG $0x30e2c148  // shlq         $48, %rdx
	LONG $0x20e3c148  // shlq         $32, %rbx
	LONG $0x10e4c149  // shlq         $16, %r12
	WORD $0x094c; BYTE $0xe1  // orq          %r12, %rcx
	WORD $0x0948; BYTE $0xd9  // orq          %rbx, %rcx
	WORD $0x0948; BYTE $0xd1  // orq          %rdx, %rcx
	WORD $0x8948; BYTE $0xca  // movq         %rcx, %rdx
	WORD $0x094c; BYTE $0xd2  // orq          %r10, %rdx
	LONG $0x0043840f; WORD $0x0000  // je           LBB0_62, $67(%rip)
	WORD $0x894c; BYTE $0xd2  // movq         %r10, %rdx
	WORD $0xf748; BYTE $0xd2  // notq         %rdx
	WORD $0x2148; BYTE $0xca  // andq         %rcx, %rdx
	LONG $0x12248d4c  // leaq         (%rdx,%rdx), %r12
	WORD $0x094d; BYTE $0xd4  // orq          %r10, %r12
	WORD $0x894d; BYTE $0xe2  // movq         %r12, %r10
	QUAD $0xaaaaaaaaaaaabb48; WORD $0xaaaa  // movabsq      $-6148914691236517206, %rbx
	WORD $0x3149; BYTE $0xda  // xorq         %rbx, %r10
	WORD $0x2148; BYTE $0xd9  // andq         %rbx, %rcx
	WORD $0x214c; BYTE $0xd1  // andq         %r10, %rcx
	WORD $0xdb31  // xorl         %ebx, %ebx
	WORD $0x0148; BYTE $0xd1  // addq         %rdx, %rcx
	WORD $0x920f; BYTE $0xc3  // setb         %bl
	LONG $0xc85d8948  // movq         %rbx, $-56(%rbp)
	WORD $0x0148; BYTE $0xc9  // addq         %rcx, %rcx
	WORD $0x314c; BYTE $0xe9  // xorq         %r13, %rcx
	WORD $0x214c; BYTE $0xe1  // andq         %r12, %rcx
	WORD $0xf748; BYTE $0xd1  // notq         %rcx
	LONG $0x00000de9; BYTE $0x00  // jmp          LBB0_63, $13(%rip)
LBB0_62:
	LONG $0xffc1c748; WORD $0xffff; BYTE $0xff  // movq         $-1, %rcx
	WORD $0xd231  // xorl         %edx, %edx
	LONG $0xc8558948  // movq         %rdx, $-56(%rbp)
LBB0_63:
	WORD $0x214c; BYTE $0xc9  // andq         %r9, %rcx
	LONG $0x6e0f4866; BYTE $0xd1  // movq         %rcx, %xmm2
	LONG $0x3a0f4166; WORD $0xd144; BYTE $0x00  // pclmulqdq    $0, %xmm9, %xmm2
	LONG $0x7e0f4966; BYTE $0xd1  // movq         %xmm2, %r9
	WORD $0x314d; BYTE $0xf9  // xorq         %r15, %r9
	LONG $0xd06f0f66  // movdqa       %xmm0, %xmm2
	LONG $0xd3740f66  // pcmpeqb      %xmm3, %xmm2
	LONG $0xd70f4466; BYTE $0xfa  // pmovmskb     %xmm2, %r15d
	LONG $0xd56f0f66  // movdqa       %xmm5, %xmm2
	LONG $0xd3740f66  // pcmpeqb      %xmm3, %xmm2
	LONG $0xd70f4466; BYTE $0xe2  // pmovmskb     %xmm2, %r12d
	LONG $0xd76f0f66  // movdqa       %xmm7, %xmm2
	LONG $0xd3740f66  // pcmpeqb      %xmm3, %xmm2
	LONG $0xdad70f66  // pmovmskb     %xmm2, %ebx
	LONG $0xd66f0f66  // movdqa       %xmm6, %xmm2
	LONG $0xd3740f66  // pcmpeqb      %xmm3, %xmm2
	LONG $0xcad70f66  // pmovmskb     %xmm2, %ecx
	LONG $0x30e1c148  // shlq         $48, %rcx
	LONG $0x20e3c148  // shlq         $32, %rbx
	LONG $0x10e4c149  // shlq         $16, %r12
	WORD $0x094d; BYTE $0xe7  // orq          %r12, %r15
	WORD $0x0949; BYTE $0xdf  // orq          %rbx, %r15
	WORD $0x0949; BYTE $0xcf  // orq          %rcx, %r15
	WORD $0x894c; BYTE $0xc9  // movq         %r9, %rcx
	WORD $0xf748; BYTE $0xd1  // notq         %rcx
	WORD $0x2149; BYTE $0xcf  // andq         %rcx, %r15
	LONG $0xc4740f66  // pcmpeqb      %xmm4, %xmm0
	LONG $0xd70f4466; BYTE $0xe0  // pmovmskb     %xmm0, %r12d
	LONG $0xec740f66  // pcmpeqb      %xmm4, %xmm5
	LONG $0xddd70f66  // pmovmskb     %xmm5, %ebx
	LONG $0xfc740f66  // pcmpeqb      %xmm4, %xmm7
	LONG $0xd70f4466; BYTE $0xd7  // pmovmskb     %xmm7, %r10d
	LONG $0xf4740f66  // pcmpeqb      %xmm4, %xmm6
	LONG $0xd70f4466; BYTE $0xee  // pmovmskb     %xmm6, %r13d
	LONG $0x30e5c149  // shlq         $48, %r13
	LONG $0x20e2c149  // shlq         $32, %r10
	LONG $0x10e3c148  // shlq         $16, %rbx
	WORD $0x0949; BYTE $0xdc  // orq          %rbx, %r12
	WORD $0x094d; BYTE $0xd4  // orq          %r10, %r12
	WORD $0x094d; BYTE $0xec  // orq          %r13, %r12
	QUAD $0x555555555555bd49; WORD $0x5555  // movabsq      $6148914691236517205, %r13
	QUAD $0x333333333333ba49; WORD $0x3333  // movabsq      $3689348814741910323, %r10
	WORD $0x2149; BYTE $0xcc  // andq         %rcx, %r12
	LONG $0xfdd3840f; WORD $0xffff  // je           LBB0_58, $-557(%rip)
	LONG $0x90909090; WORD $0x9090; BYTE $0x90  // .p2align 4, 0x90
LBB0_64:
	LONG $0x24548d49; BYTE $0xff  // leaq         $-1(%r12), %rdx
	WORD $0x8948; BYTE $0xd3  // movq         %rdx, %rbx
	WORD $0x214c; BYTE $0xfb  // andq         %r15, %rbx
	WORD $0x8948; BYTE $0xd9  // movq         %rbx, %rcx
	WORD $0xd148; BYTE $0xe9  // shrq         %rcx
	WORD $0x214c; BYTE $0xe9  // andq         %r13, %rcx
	WORD $0x2948; BYTE $0xcb  // subq         %rcx, %rbx
	WORD $0x8948; BYTE $0xd9  // movq         %rbx, %rcx
	WORD $0x214c; BYTE $0xd1  // andq         %r10, %rcx
	LONG $0x02ebc148  // shrq         $2, %rbx
	WORD $0x214c; BYTE $0xd3  // andq         %r10, %rbx
	WORD $0x0148; BYTE $0xcb  // addq         %rcx, %rbx
	WORD $0x8948; BYTE $0xd9  // movq         %rbx, %rcx
	LONG $0x04e9c148  // shrq         $4, %rcx
	WORD $0x0148; BYTE $0xd9  // addq         %rbx, %rcx
	QUAD $0x0f0f0f0f0f0fbb48; WORD $0x0f0f  // movabsq      $1085102592571150095, %rbx
	WORD $0x2148; BYTE $0xd9  // andq         %rbx, %rcx
	QUAD $0x010101010101bb48; WORD $0x0101  // movabsq      $72340172838076673, %rbx
	LONG $0xcbaf0f48  // imulq        %rbx, %rcx
	LONG $0x38e9c148  // shrq         $56, %rcx
	LONG $0xc04d0348  // addq         $-64(%rbp), %rcx
	WORD $0x394c; BYTE $0xd9  // cmpq         %r11, %rcx
	LONG $0x05a3860f; WORD $0x0000  // jbe          LBB0_109, $1443(%rip)
	WORD $0xff49; BYTE $0xc3  // incq         %r11
	WORD $0x2149; BYTE $0xd4  // andq         %rdx, %r12
	LONG $0xff97850f; WORD $0xffff  // jne          LBB0_64, $-105(%rip)
	LONG $0xfffd5ee9; BYTE $0xff  // jmp          LBB0_58, $-674(%rip)
LBB0_66:
	WORD $0x8548; BYTE $0xc9  // testq        %rcx, %rcx
	LONG $0x06468e0f; WORD $0x0000  // jle          LBB0_118, $1606(%rip)
	WORD $0x894c; BYTE $0xd3  // movq         %r10, %rbx
	LONG $0x45110f44; BYTE $0xb0  // movups       %xmm8, $-80(%rbp)
	LONG $0x45110f44; BYTE $0xa0  // movups       %xmm8, $-96(%rbp)
	LONG $0x45110f44; BYTE $0x90  // movups       %xmm8, $-112(%rbp)
	LONG $0x45110f44; BYTE $0x80  // movups       %xmm8, $-128(%rbp)
	WORD $0x8944; BYTE $0xc1  // movl         %r8d, %ecx
	LONG $0x0fffe181; WORD $0x0000  // andl         $4095, %ecx
	LONG $0x0fc1f981; WORD $0x0000  // cmpl         $4033, %ecx
	LONG $0x0031820f; WORD $0x0000  // jb           LBB0_70, $49(%rip)
	LONG $0xd07d8348; BYTE $0x20  // cmpq         $32, $-48(%rbp)
	LONG $0x0038820f; WORD $0x0000  // jb           LBB0_71, $56(%rip)
	LONG $0x00100f41  // movups       (%r8), %xmm0
	LONG $0x8045110f  // movups       %xmm0, $-128(%rbp)
	LONG $0x40100f41; BYTE $0x10  // movups       $16(%r8), %xmm0
	LONG $0x9045110f  // movups       %xmm0, $-112(%rbp)
	LONG $0x20c08349  // addq         $32, %r8
	LONG $0xd04d8b48  // movq         $-48(%rbp), %rcx
	LONG $0xe0518d48  // leaq         $-32(%rcx), %rdx
	LONG $0xa04d8d4c  // leaq         $-96(%rbp), %r9
	LONG $0x00001ae9; BYTE $0x00  // jmp          LBB0_72, $26(%rip)
LBB0_70:
	QUAD $0x555555555555bd49; WORD $0x5555  // movabsq      $6148914691236517205, %r13
	WORD $0x8949; BYTE $0xda  // movq         %rbx, %r10
	LONG $0xfffd54e9; BYTE $0xff  // jmp          LBB0_60, $-684(%rip)
LBB0_71:
	LONG $0x804d8d4c  // leaq         $-128(%rbp), %r9
	LONG $0xd0558b48  // movq         $-48(%rbp), %rdx
LBB0_72:
	LONG $0x10fa8348  // cmpq         $16, %rdx
	LONG $0x0049820f; WORD $0x0000  // jb           LBB0_73, $73(%rip)
	LONG $0x00100f41  // movups       (%r8), %xmm0
	LONG $0x01110f41  // movups       %xmm0, (%r9)
	LONG $0x10c08349  // addq         $16, %r8
	LONG $0x10c18349  // addq         $16, %r9
	LONG $0xf0c28348  // addq         $-16, %rdx
	LONG $0x08fa8348  // cmpq         $8, %rdx
	LONG $0x0035830f; WORD $0x0000  // jae          LBB0_80, $53(%rip)
LBB0_74:
	LONG $0x04fa8348  // cmpq         $4, %rdx
	LONG $0x00478c0f; WORD $0x0000  // jl           LBB0_75, $71(%rip)
LBB0_81:
	WORD $0x8b41; BYTE $0x08  // movl         (%r8), %ecx
	WORD $0x8941; BYTE $0x09  // movl         %ecx, (%r9)
	LONG $0x04c08349  // addq         $4, %r8
	LONG $0x04c18349  // addq         $4, %r9
	LONG $0xfcc28348  // addq         $-4, %rdx
	LONG $0x02fa8348  // cmpq         $2, %rdx
	LONG $0x0035830f; WORD $0x0000  // jae          LBB0_76, $53(%rip)
	LONG $0x000044e9; BYTE $0x00  // jmp          LBB0_77, $68(%rip)
LBB0_73:
	LONG $0x08fa8348  // cmpq         $8, %rdx
	LONG $0xffcb820f; WORD $0xffff  // jb           LBB0_74, $-53(%rip)
LBB0_80:
	WORD $0x8b49; BYTE $0x08  // movq         (%r8), %rcx
	WORD $0x8949; BYTE $0x09  // movq         %rcx, (%r9)
	LONG $0x08c08349  // addq         $8, %r8
	LONG $0x08c18349  // addq         $8, %r9
	LONG $0xf8c28348  // addq         $-8, %rdx
	LONG $0x04fa8348  // cmpq         $4, %rdx
	LONG $0xffb98d0f; WORD $0xffff  // jge          LBB0_81, $-71(%rip)
LBB0_75:
	LONG $0x02fa8348  // cmpq         $2, %rdx
	LONG $0x0014820f; WORD $0x0000  // jb           LBB0_77, $20(%rip)
LBB0_76:
	LONG $0x08b70f41  // movzwl       (%r8), %ecx
	LONG $0x09894166  // movw         %cx, (%r9)
	LONG $0x02c08349  // addq         $2, %r8
	LONG $0x02c18349  // addq         $2, %r9
	LONG $0xfec28348  // addq         $-2, %rdx
LBB0_77:
	WORD $0x894c; BYTE $0xc1  // movq         %r8, %rcx
	LONG $0x80458d4c  // leaq         $-128(%rbp), %r8
	WORD $0x8548; BYTE $0xd2  // testq        %rdx, %rdx
	QUAD $0x555555555555bd49; WORD $0x5555  // movabsq      $6148914691236517205, %r13
	WORD $0x8949; BYTE $0xda  // movq         %rbx, %r10
	LONG $0xfc98840f; WORD $0xffff  // je           LBB0_60, $-872(%rip)
	WORD $0x098a  // movb         (%rcx), %cl
	WORD $0x8841; BYTE $0x09  // movb         %cl, (%r9)
	LONG $0x80458d4c  // leaq         $-128(%rbp), %r8
	LONG $0xfffc8ae9; BYTE $0xff  // jmp          LBB0_60, $-886(%rip)
LBB0_82:
	LONG $0x054e8d49  // leaq         $5(%r14), %rcx
	LONG $0x084f3b48  // cmpq         $8(%rdi), %rcx
	LONG $0xfa74870f; WORD $0xffff  // ja           LBB0_45, $-1420(%rip)
LBB0_83:
	WORD $0x8948; BYTE $0x0e  // movq         %rcx, (%rsi)
	LONG $0xfffa69e9; BYTE $0xff  // jmp          LBB0_44, $-1431(%rip)
LBB0_84:
	QUAD $0x555555555555bd49; WORD $0x5555  // movabsq      $6148914691236517205, %r13
	LONG $0x084f8b48  // movq         $8(%rdi), %rcx
	WORD $0x2948; BYTE $0xd9  // subq         %rbx, %rcx
	WORD $0x0149; BYTE $0xd8  // addq         %rbx, %r8
	WORD $0x3145; BYTE $0xff  // xorl         %r15d, %r15d
	QUAD $0xfff76a156f0f44f3; BYTE $0xff  // movdqu       $-2198(%rip), %xmm10  /* LCPI0_3+0(%rip) */
	QUAD $0xfffff7720d6f0ff3  // movdqu       $-2190(%rip), %xmm1  /* LCPI0_4+0(%rip) */
	LONG $0x760f4566; BYTE $0xc9  // pcmpeqd      %xmm9, %xmm9
	QUAD $0xfffff7751d6f0ff3  // movdqu       $-2187(%rip), %xmm3  /* LCPI0_5+0(%rip) */
	QUAD $0xfffff73d256f0ff3  // movdqu       $-2243(%rip), %xmm4  /* LCPI0_2+0(%rip) */
	LONG $0xc0570f45  // xorps        %xmm8, %xmm8
	WORD $0x3145; BYTE $0xd2  // xorl         %r10d, %r10d
	WORD $0xd231  // xorl         %edx, %edx
	LONG $0xc0558948  // movq         %rdx, $-64(%rbp)
	WORD $0x3145; BYTE $0xdb  // xorl         %r11d, %r11d
	LONG $0x000060e9; BYTE $0x00  // jmp          LBB0_86, $96(%rip)
LBB0_85:
	LONG $0x3ff9c149  // sarq         $63, %r9
	WORD $0x894c; BYTE $0xf9  // movq         %r15, %rcx
	WORD $0xd148; BYTE $0xe9  // shrq         %rcx
	WORD $0x214c; BYTE $0xe9  // andq         %r13, %rcx
	WORD $0x2949; BYTE $0xcf  // subq         %rcx, %r15
	WORD $0x894c; BYTE $0xf9  // movq         %r15, %rcx
	WORD $0x214c; BYTE $0xd1  // andq         %r10, %rcx
	LONG $0x02efc149  // shrq         $2, %r15
	WORD $0x214d; BYTE $0xd7  // andq         %r10, %r15
	WORD $0x0149; BYTE $0xcf  // addq         %rcx, %r15
	WORD $0x894c; BYTE $0xf9  // movq         %r15, %rcx
	LONG $0x04e9c148  // shrq         $4, %rcx
	WORD $0x014c; BYTE $0xf9  // addq         %r15, %rcx
	QUAD $0x0f0f0f0f0f0fba48; WORD $0x0f0f  // movabsq      $1085102592571150095, %rdx
	WORD $0x2148; BYTE $0xd1  // andq         %rdx, %rcx
	QUAD $0x010101010101ba48; WORD $0x0101  // movabsq      $72340172838076673, %rdx
	LONG $0xcaaf0f48  // imulq        %rdx, %rcx
	LONG $0x38e9c148  // shrq         $56, %rcx
	LONG $0xc04d0148  // addq         %rcx, $-64(%rbp)
	LONG $0x40c08349  // addq         $64, %r8
	LONG $0xd04d8b48  // movq         $-48(%rbp), %rcx
	LONG $0xc0c18348  // addq         $-64, %rcx
	WORD $0x894d; BYTE $0xcf  // movq         %r9, %r15
	LONG $0xc8558b4c  // movq         $-56(%rbp), %r10
LBB0_86:
	LONG $0x40f98348  // cmpq         $64, %rcx
	LONG $0xd04d8948  // movq         %rcx, $-48(%rbp)
	LONG $0x02388c0f; WORD $0x0000  // jl           LBB0_93, $568(%rip)
LBB0_87:
	LONG $0x6f0f41f3; BYTE $0x00  // movdqu       (%r8), %xmm0
	LONG $0x6f0f41f3; WORD $0x1068  // movdqu       $16(%r8), %xmm5
	LONG $0x6f0f41f3; WORD $0x2078  // movdqu       $32(%r8), %xmm7
	LONG $0x6f0f41f3; WORD $0x3070  // movdqu       $48(%r8), %xmm6
	LONG $0xd06f0f66  // movdqa       %xmm0, %xmm2
	LONG $0x740f4166; BYTE $0xd2  // pcmpeqb      %xmm10, %xmm2
	LONG $0xd70f4466; BYTE $0xca  // pmovmskb     %xmm2, %r9d
	LONG $0xd56f0f66  // movdqa       %xmm5, %xmm2
	LONG $0x740f4166; BYTE $0xd2  // pcmpeqb      %xmm10, %xmm2
	LONG $0xcad70f66  // pmovmskb     %xmm2, %ecx
	LONG $0xd76f0f66  // movdqa       %xmm7, %xmm2
	LONG $0x740f4166; BYTE $0xd2  // pcmpeqb      %xmm10, %xmm2
	LONG $0xdad70f66  // pmovmskb     %xmm2, %ebx
	LONG $0xd66f0f66  // movdqa       %xmm6, %xmm2
	LONG $0x740f4166; BYTE $0xd2  // pcmpeqb      %xmm10, %xmm2
	LONG $0xd2d70f66  // pmovmskb     %xmm2, %edx
	LONG $0x30e2c148  // shlq         $48, %rdx
	LONG $0x20e3c148  // shlq         $32, %rbx
	LONG $0x10e1c148  // shlq         $16, %rcx
	WORD $0x0949; BYTE $0xc9  // orq          %rcx, %r9
	WORD $0x0949; BYTE $0xd9  // orq          %rbx, %r9
	WORD $0x0949; BYTE $0xd1  // orq          %rdx, %r9
	LONG $0xd06f0f66  // movdqa       %xmm0, %xmm2
	LONG $0xd1740f66  // pcmpeqb      %xmm1, %xmm2
	LONG $0xcad70f66  // pmovmskb     %xmm2, %ecx
	LONG $0xd56f0f66  // movdqa       %xmm5, %xmm2
	LONG $0xd1740f66  // pcmpeqb      %xmm1, %xmm2
	LONG $0xd70f4466; BYTE $0xe2  // pmovmskb     %xmm2, %r12d
	LONG $0xd76f0f66  // movdqa       %xmm7, %xmm2
	LONG $0xd1740f66  // pcmpeqb      %xmm1, %xmm2
	LONG $0xdad70f66  // pmovmskb     %xmm2, %ebx
	LONG $0xd66f0f66  // movdqa       %xmm6, %xmm2
	LONG $0xd1740f66  // pcmpeqb      %xmm1, %xmm2
	LONG $0xd2d70f66  // pmovmskb     %xmm2, %edx
	LONG $0x30e2c148  // shlq         $48, %rdx
	LONG $0x20e3c148  // shlq         $32, %rbx
	LONG $0x10e4c149  // shlq         $16, %r12
	WORD $0x094c; BYTE $0xe1  // orq          %r12, %rcx
	WORD $0x0948; BYTE $0xd9  // orq          %rbx, %rcx
	WORD $0x0948; BYTE $0xd1  // orq          %rdx, %rcx
	WORD $0x8948; BYTE $0xca  // movq         %rcx, %rdx
	WORD $0x094c; BYTE $0xd2  // orq          %r10, %rdx
	LONG $0x0043840f; WORD $0x0000  // je           LBB0_89, $67(%rip)
	WORD $0x894c; BYTE $0xd2  // movq         %r10, %rdx
	WORD $0xf748; BYTE $0xd2  // notq         %rdx
	WORD $0x2148; BYTE $0xca  // andq         %rcx, %rdx
	LONG $0x12248d4c  // leaq         (%rdx,%rdx), %r12
	WORD $0x094d; BYTE $0xd4  // orq          %r10, %r12
	WORD $0x894d; BYTE $0xe2  // movq         %r12, %r10
	QUAD $0xaaaaaaaaaaaabb48; WORD $0xaaaa  // movabsq      $-6148914691236517206, %rbx
	WORD $0x3149; BYTE $0xda  // xorq         %rbx, %r10
	WORD $0x2148; BYTE $0xd9  // andq         %rbx, %rcx
	WORD $0x214c; BYTE $0xd1  // andq         %r10, %rcx
	WORD $0xdb31  // xorl         %ebx, %ebx
	WORD $0x0148; BYTE $0xd1  // addq         %rdx, %rcx
	WORD $0x920f; BYTE $0xc3  // setb         %bl
	LONG $0xc85d8948  // movq         %rbx, $-56(%rbp)
	WORD $0x0148; BYTE $0xc9  // addq         %rcx, %rcx
	WORD $0x314c; BYTE $0xe9  // xorq         %r13, %rcx
	WORD $0x214c; BYTE $0xe1  // andq         %r12, %rcx
	WORD $0xf748; BYTE $0xd1  // notq         %rcx
	LONG $0x00000de9; BYTE $0x00  // jmp          LBB0_90, $13(%rip)
LBB0_89:
	LONG $0xffc1c748; WORD $0xffff; BYTE $0xff  // movq         $-1, %rcx
	WORD $0xd231  // xorl         %edx, %edx
	LONG $0xc8558948  // movq         %rdx, $-56(%rbp)
LBB0_90:
	WORD $0x214c; BYTE $0xc9  // andq         %r9, %rcx
	LONG $0x6e0f4866; BYTE $0xd1  // movq         %rcx, %xmm2
	LONG $0x3a0f4166; WORD $0xd144; BYTE $0x00  // pclmulqdq    $0, %xmm9, %xmm2
	LONG $0x7e0f4966; BYTE $0xd1  // movq         %xmm2, %r9
	WORD $0x314d; BYTE $0xf9  // xorq         %r15, %r9
	LONG $0xd06f0f66  // movdqa       %xmm0, %xmm2
	LONG $0xd3740f66  // pcmpeqb      %xmm3, %xmm2
	LONG $0xd70f4466; BYTE $0xfa  // pmovmskb     %xmm2, %r15d
	LONG $0xd56f0f66  // movdqa       %xmm5, %xmm2
	LONG $0xd3740f66  // pcmpeqb      %xmm3, %xmm2
	LONG $0xd70f4466; BYTE $0xe2  // pmovmskb     %xmm2, %r12d
	LONG $0xd76f0f66  // movdqa       %xmm7, %xmm2
	LONG $0xd3740f66  // pcmpeqb      %xmm3, %xmm2
	LONG $0xdad70f66  // pmovmskb     %xmm2, %ebx
	LONG $0xd66f0f66  // movdqa       %xmm6, %xmm2
	LONG $0xd3740f66  // pcmpeqb      %xmm3, %xmm2
	LONG $0xcad70f66  // pmovmskb     %xmm2, %ecx
	LONG $0x30e1c148  // shlq         $48, %rcx
	LONG $0x20e3c148  // shlq         $32, %rbx
	LONG $0x10e4c149  // shlq         $16, %r12
	WORD $0x094d; BYTE $0xe7  // orq          %r12, %r15
	WORD $0x0949; BYTE $0xdf  // orq          %rbx, %r15
	WORD $0x0949; BYTE $0xcf  // orq          %rcx, %r15
	WORD $0x894c; BYTE $0xc9  // movq         %r9, %rcx
	WORD $0xf748; BYTE $0xd1  // notq         %rcx
	WORD $0x2149; BYTE $0xcf  // andq         %rcx, %r15
	LONG $0xc4740f66  // pcmpeqb      %xmm4, %xmm0
	LONG $0xd70f4466; BYTE $0xe0  // pmovmskb     %xmm0, %r12d
	LONG $0xec740f66  // pcmpeqb      %xmm4, %xmm5
	LONG $0xddd70f66  // pmovmskb     %xmm5, %ebx
	LONG $0xfc740f66  // pcmpeqb      %xmm4, %xmm7
	LONG $0xd70f4466; BYTE $0xd7  // pmovmskb     %xmm7, %r10d
	LONG $0xf4740f66  // pcmpeqb      %xmm4, %xmm6
	LONG $0xd70f4466; BYTE $0xee  // pmovmskb     %xmm6, %r13d
	LONG $0x30e5c149  // shlq         $48, %r13
	LONG $0x20e2c149  // shlq         $32, %r10
	LONG $0x10e3c148  // shlq         $16, %rbx
	WORD $0x0949; BYTE $0xdc  // orq          %rbx, %r12
	WORD $0x094d; BYTE $0xd4  // orq          %r10, %r12
	WORD $0x094d; BYTE $0xec  // orq          %r13, %r12
	QUAD $0x555555555555bd49; WORD $0x5555  // movabsq      $6148914691236517205, %r13
	QUAD $0x333333333333ba49; WORD $0x3333  // movabsq      $3689348814741910323, %r10
	WORD $0x2149; BYTE $0xcc  // andq         %rcx, %r12
	LONG $0xfdd3840f; WORD $0xffff  // je           LBB0_85, $-557(%rip)
	QUAD $0x9090909090909090; WORD $0x9090; BYTE $0x90  // .p2align 4, 0x90
LBB0_91:
	LONG $0x24548d49; BYTE $0xff  // leaq         $-1(%r12), %rdx
	WORD $0x8948; BYTE $0xd3  // movq         %rdx, %rbx
	WORD $0x214c; BYTE $0xfb  // andq         %r15, %rbx
	WORD $0x8948; BYTE $0xd9  // movq         %rbx, %rcx
	WORD $0xd148; BYTE $0xe9  // shrq         %rcx
	WORD $0x214c; BYTE $0xe9  // andq         %r13, %rcx
	WORD $0x2948; BYTE $0xcb  // subq         %rcx, %rbx
	WORD $0x8948; BYTE $0xd9  // movq         %rbx, %rcx
	WORD $0x214c; BYTE $0xd1  // andq         %r10, %rcx
	LONG $0x02ebc148  // shrq         $2, %rbx
	WORD $0x214c; BYTE $0xd3  // andq         %r10, %rbx
	WORD $0x0148; BYTE $0xcb  // addq         %rcx, %rbx
	WORD $0x8948; BYTE $0xd9  // movq         %rbx, %rcx
	LONG $0x04e9c148  // shrq         $4, %rcx
	WORD $0x0148; BYTE $0xd9  // addq         %rbx, %rcx
	QUAD $0x0f0f0f0f0f0fbb48; WORD $0x0f0f  // movabsq      $1085102592571150095, %rbx
	WORD $0x2148; BYTE $0xd9  // andq         %rbx, %rcx
	QUAD $0x010101010101bb48; WORD $0x0101  // movabsq      $72340172838076673, %rbx
	LONG $0xcbaf0f48  // imulq        %rbx, %rcx
	LONG $0x38e9c148  // shrq         $56, %rcx
	LONG $0xc04d0348  // addq         $-64(%rbp), %rcx
	WORD $0x394c; BYTE $0xd9  // cmpq         %r11, %rcx
	LONG $0x0153860f; WORD $0x0000  // jbe          LBB0_109, $339(%rip)
	WORD $0xff49; BYTE $0xc3  // incq         %r11
	WORD $0x2149; BYTE $0xd4  // andq         %rdx, %r12
	LONG $0xff97850f; WORD $0xffff  // jne          LBB0_91, $-105(%rip)
	LONG $0xfffd5ae9; BYTE $0xff  // jmp          LBB0_85, $-678(%rip)
LBB0_93:
	WORD $0x8548; BYTE $0xc9  // testq        %rcx, %rcx
	LONG $0x01f68e0f; WORD $0x0000  // jle          LBB0_118, $502(%rip)
	WORD $0x894c; BYTE $0xd3  // movq         %r10, %rbx
	LONG $0x45110f44; BYTE $0xb0  // movups       %xmm8, $-80(%rbp)
	LONG $0x45110f44; BYTE $0xa0  // movups       %xmm8, $-96(%rbp)
	LONG $0x45110f44; BYTE $0x90  // movups       %xmm8, $-112(%rbp)
	LONG $0x45110f44; BYTE $0x80  // movups       %xmm8, $-128(%rbp)
	WORD $0x8944; BYTE $0xc1  // movl         %r8d, %ecx
	LONG $0x0fffe181; WORD $0x0000  // andl         $4095, %ecx
	LONG $0x0fc1f981; WORD $0x0000  // cmpl         $4033, %ecx
	LONG $0x0031820f; WORD $0x0000  // jb           LBB0_97, $49(%rip)
	LONG $0xd07d8348; BYTE $0x20  // cmpq         $32, $-48(%rbp)
	LONG $0x0038820f; WORD $0x0000  // jb           LBB0_98, $56(%rip)
	LONG $0x00100f41  // movups       (%r8), %xmm0
	LONG $0x8045110f  // movups       %xmm0, $-128(%rbp)
	LONG $0x40100f41; BYTE $0x10  // movups       $16(%r8), %xmm0
	LONG $0x9045110f  // movups       %xmm0, $-112(%rbp)
	LONG $0x20c08349  // addq         $32, %r8
	LONG $0xd04d8b48  // movq         $-48(%rbp), %rcx
	LONG $0xe0518d48  // leaq         $-32(%rcx), %rdx
	LONG $0xa04d8d4c  // leaq         $-96(%rbp), %r9
	LONG $0x00001ae9; BYTE $0x00  // jmp          LBB0_99, $26(%rip)
LBB0_97:
	QUAD $0x555555555555bd49; WORD $0x5555  // movabsq      $6148914691236517205, %r13
	WORD $0x8949; BYTE $0xda  // movq         %rbx, %r10
	LONG $0xfffd50e9; BYTE $0xff  // jmp          LBB0_87, $-688(%rip)
LBB0_98:
	LONG $0x804d8d4c  // leaq         $-128(%rbp), %r9
	LONG $0xd0558b48  // movq         $-48(%rbp), %rdx
LBB0_99:
	LONG $0x10fa8348  // cmpq         $16, %rdx
	LONG $0x0049820f; WORD $0x0000  // jb           LBB0_100, $73(%rip)
	LONG $0x00100f41  // movups       (%r8), %xmm0
	LONG $0x01110f41  // movups       %xmm0, (%r9)
	LONG $0x10c08349  // addq         $16, %r8
	LONG $0x10c18349  // addq         $16, %r9
	LONG $0xf0c28348  // addq         $-16, %rdx
	LONG $0x08fa8348  // cmpq         $8, %rdx
	LONG $0x0035830f; WORD $0x0000  // jae          LBB0_107, $53(%rip)
LBB0_101:
	LONG $0x04fa8348  // cmpq         $4, %rdx
	LONG $0x00478c0f; WORD $0x0000  // jl           LBB0_102, $71(%rip)
LBB0_108:
	WORD $0x8b41; BYTE $0x08  // movl         (%r8), %ecx
	WORD $0x8941; BYTE $0x09  // movl         %ecx, (%r9)
	LONG $0x04c08349  // addq         $4, %r8
	LONG $0x04c18349  // addq         $4, %r9
	LONG $0xfcc28348  // addq         $-4, %rdx
	LONG $0x02fa8348  // cmpq         $2, %rdx
	LONG $0x0035830f; WORD $0x0000  // jae          LBB0_103, $53(%rip)
	LONG $0x000044e9; BYTE $0x00  // jmp          LBB0_104, $68(%rip)
LBB0_100:
	LONG $0x08fa8348  // cmpq         $8, %rdx
	LONG $0xffcb820f; WORD $0xffff  // jb           LBB0_101, $-53(%rip)
LBB0_107:
	WORD $0x8b49; BYTE $0x08  // movq         (%r8), %rcx
	WORD $0x8949; BYTE $0x09  // movq         %rcx, (%r9)
	LONG $0x08c08349  // addq         $8, %r8
	LONG $0x08c18349  // addq         $8, %r9
	LONG $0xf8c28348  // addq         $-8, %rdx
	LONG $0x04fa8348  // cmpq         $4, %rdx
	LONG $0xffb98d0f; WORD $0xffff  // jge          LBB0_108, $-71(%rip)
LBB0_102:
	LONG $0x02fa8348  // cmpq         $2, %rdx
	LONG $0x0014820f; WORD $0x0000  // jb           LBB0_104, $20(%rip)
LBB0_103:
	LONG $0x08b70f41  // movzwl       (%r8), %ecx
	LONG $0x09894166  // movw         %cx, (%r9)
	LONG $0x02c08349  // addq         $2, %r8
	LONG $0x02c18349  // addq         $2, %r9
	LONG $0xfec28348  // addq         $-2, %rdx
LBB0_104:
	WORD $0x894c; BYTE $0xc1  // movq         %r8, %rcx
	LONG $0x80458d4c  // leaq         $-128(%rbp), %r8
	WORD $0x8548; BYTE $0xd2  // testq        %rdx, %rdx
	QUAD $0x555555555555bd49; WORD $0x5555  // movabsq      $6148914691236517205, %r13
	WORD $0x8949; BYTE $0xda  // movq         %rbx, %r10
	LONG $0xfc94840f; WORD $0xffff  // je           LBB0_87, $-876(%rip)
	WORD $0x098a  // movb         (%rcx), %cl
	WORD $0x8841; BYTE $0x09  // movb         %cl, (%r9)
	LONG $0x80458d4c  // leaq         $-128(%rbp), %r8
	LONG $0xfffc86e9; BYTE $0xff  // jmp          LBB0_87, $-890(%rip)
LBB0_109:
	LONG $0x08478b48  // movq         $8(%rdi), %rax
	LONG $0xccbc0f49  // bsfq         %r12, %rcx
	LONG $0xd04d2b48  // subq         $-48(%rbp), %rcx
	LONG $0x01448d48; BYTE $0x01  // leaq         $1(%rcx,%rax), %rax
	WORD $0x8948; BYTE $0x06  // movq         %rax, (%rsi)
	LONG $0x084f8b48  // movq         $8(%rdi), %rcx
	WORD $0x3948; BYTE $0xc8  // cmpq         %rcx, %rax
	LONG $0xc1470f48  // cmovaq       %rcx, %rax
	WORD $0x8948; BYTE $0x06  // movq         %rax, (%rsi)
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff  // movq         $-1, %rax
	LONG $0xf0470f4c  // cmovaq       %rax, %r14
	LONG $0xfff5fde9; BYTE $0xff  // jmp          LBB0_44, $-2563(%rip)
LBB0_54:
	WORD $0x854d; BYTE $0xe4  // testq        %r12, %r12
	LONG $0x008e850f; WORD $0x0000  // jne          LBB0_119, $142(%rip)
	LONG $0x1f5c8d4b; BYTE $0x01  // leaq         $1(%r15,%r11), %rbx
	WORD $0xf749; BYTE $0xd7  // notq         %r15
	WORD $0x014d; BYTE $0xcf  // addq         %r9, %r15
LBB0_56:
	WORD $0x854d; BYTE $0xff  // testq        %r15, %r15
	LONG $0x00248f0f; WORD $0x0000  // jg           LBB0_113, $36(%rip)
	LONG $0xfff5dee9; BYTE $0xff  // jmp          LBB0_45, $-2594(%rip)
LBB0_111:
	LONG $0xfec1c748; WORD $0xffff; BYTE $0xff  // movq         $-2, %rcx
	LONG $0x000002b8; BYTE $0x00  // movl         $2, %eax
	WORD $0x0148; BYTE $0xc3  // addq         %rax, %rbx
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff  // movq         $-1, %rax
	WORD $0x0149; BYTE $0xcf  // addq         %rcx, %r15
	LONG $0xf5bf8e0f; WORD $0xffff  // jle          LBB0_45, $-2625(%rip)
LBB0_113:
	WORD $0xb60f; BYTE $0x03  // movzbl       (%rbx), %eax
	WORD $0x5c3c  // cmpb         $92, %al
	LONG $0xffd6840f; WORD $0xffff  // je           LBB0_111, $-42(%rip)
	WORD $0x223c  // cmpb         $34, %al
	LONG $0x0024840f; WORD $0x0000  // je           LBB0_116, $36(%rip)
	LONG $0xffc1c748; WORD $0xffff; BYTE $0xff  // movq         $-1, %rcx
	LONG $0x000001b8; BYTE $0x00  // movl         $1, %eax
	WORD $0x0148; BYTE $0xc3  // addq         %rax, %rbx
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff  // movq         $-1, %rax
	WORD $0x0149; BYTE $0xcf  // addq         %rcx, %r15
	LONG $0xffce8f0f; WORD $0xffff  // jg           LBB0_113, $-50(%rip)
	LONG $0xfff588e9; BYTE $0xff  // jmp          LBB0_45, $-2680(%rip)
LBB0_116:
	WORD $0x294c; BYTE $0xc3  // subq         %r8, %rbx
	WORD $0xff48; BYTE $0xc3  // incq         %rbx
	LONG $0xfff577e9; BYTE $0xff  // jmp          LBB0_43, $-2697(%rip)
LBB0_117:
	WORD $0x014c; BYTE $0xc3  // addq         %r8, %rbx
	LONG $0xffff89e9; BYTE $0xff  // jmp          LBB0_56, $-119(%rip)
LBB0_118:
	LONG $0x084f8b48  // movq         $8(%rdi), %rcx
	WORD $0x8948; BYTE $0x0e  // movq         %rcx, (%rsi)
	LONG $0xfff569e9; BYTE $0xff  // jmp          LBB0_45, $-2711(%rip)
LBB0_119:
	LONG $0xff498d49  // leaq         $-1(%r9), %rcx
	WORD $0x394c; BYTE $0xf9  // cmpq         %r15, %rcx
	LONG $0xf55c840f; WORD $0xffff  // je           LBB0_45, $-2724(%rip)
	LONG $0x1f5c8d4b; BYTE $0x02  // leaq         $2(%r15,%r11), %rbx
	WORD $0x294d; BYTE $0xf9  // subq         %r15, %r9
	LONG $0xfec18349  // addq         $-2, %r9
	WORD $0x894d; BYTE $0xcf  // movq         %r9, %r15
	LONG $0xffff5ce9; BYTE $0xff  // jmp          LBB0_56, $-164(%rip)
	WORD $0x9090  // .p2align 2, 0x90
	// .set L0_0_set_45, LBB0_45-LJTI0_0
	// .set L0_0_set_47, LBB0_47-LJTI0_0
	// .set L0_0_set_48, LBB0_48-LJTI0_0
	// .set L0_0_set_29, LBB0_29-LJTI0_0
	// .set L0_0_set_57, LBB0_57-LJTI0_0
	// .set L0_0_set_82, LBB0_82-LJTI0_0
	// .set L0_0_set_46, LBB0_46-LJTI0_0
	// .set L0_0_set_84, LBB0_84-LJTI0_0
LJTI0_0:
	LONG $0xfffff546  // .long L0_0_set_45
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff577  // .long L0_0_set_48
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff45f  // .long L0_0_set_29
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff45f  // .long L0_0_set_29
	LONG $0xfffff45f  // .long L0_0_set_29
	LONG $0xfffff45f  // .long L0_0_set_29
	LONG $0xfffff45f  // .long L0_0_set_29
	LONG $0xfffff45f  // .long L0_0_set_29
	LONG $0xfffff45f  // .long L0_0_set_29
	LONG $0xfffff45f  // .long L0_0_set_29
	LONG $0xfffff45f  // .long L0_0_set_29
	LONG $0xfffff45f  // .long L0_0_set_29
	LONG $0xfffff45f  // .long L0_0_set_29
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff68e  // .long L0_0_set_57
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffffac4  // .long L0_0_set_82
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff555  // .long L0_0_set_46
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff555  // .long L0_0_set_46
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffff568  // .long L0_0_set_47
	LONG $0xfffffada  // .long L0_0_set_84
	  // .p2align 2, 0x00
_MASK_USE_NUMBER:
	LONG $0x00000002  // .long 2

TEXT Â·__skip_one_fast(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -136(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_skip_one_fast:
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	CALL Â·__skip_one_fast_entry+160(SB)  // _skip_one_fast
	MOVQ AX, ret+16(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry
