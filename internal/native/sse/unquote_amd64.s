// +build !noasm !appengine
// Code generated by asm2asm, DO NOT EDIT.

#include "go_asm.h"
#include "funcdata.h"
#include "textflag.h"

TEXT Â·__unquote_entry(SB), NOSPLIT, $80
	NO_LOCAL_POINTERS
	LONG $0xf20d8d4c; WORD $0xffff; BYTE $0xff  // leaq         $-14(%rip), %r9
	LONG $0x244c894c; BYTE $0x60  // movq         %r9, $96(%rsp)
	BYTE $0xc3  // retq         
	BYTE $0x00
	BYTE $0x00
	BYTE $0x00
	BYTE $0x00
	BYTE $0x00
	  // .p2align 4, 0x00
LCPI0_0:
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c  // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
	  // .p2align 4, 0x90
_unquote:
	BYTE $0x55  // pushq        %rbp
	WORD $0x8948; BYTE $0xe5  // movq         %rsp, %rbp
	WORD $0x5741  // pushq        %r15
	WORD $0x5641  // pushq        %r14
	WORD $0x5541  // pushq        %r13
	WORD $0x5441  // pushq        %r12
	BYTE $0x53  // pushq        %rbx
	LONG $0x28ec8348  // subq         $40, %rsp
	WORD $0x8548; BYTE $0xf6  // testq        %rsi, %rsi
	LONG $0x066e840f; WORD $0x0000  // je           LBB0_82, $1646(%rip)
	WORD $0x8949; BYTE $0xf3  // movq         %rsi, %r11
	LONG $0xc84d8948  // movq         %rcx, $-56(%rbp)
	WORD $0x894c; BYTE $0xc0  // movq         %r8, %rax
	LONG $0xb845894c  // movq         %r8, $-72(%rbp)
	WORD $0x8945; BYTE $0xc2  // movl         %r8d, %r10d
	LONG $0x01e28341  // andl         $1, %r10d
	LONG $0xaa058d4c; WORD $0x0008; BYTE $0x00  // leaq         $2218(%rip), %r8  /* __UnquoteTab+0(%rip) */
	QUAD $0xffffffb2056f0ff3  // movdqu       $-78(%rip), %xmm0  /* LCPI0_0+0(%rip) */
	WORD $0x8949; BYTE $0xf9  // movq         %rdi, %r9
	WORD $0x8949; BYTE $0xf5  // movq         %rsi, %r13
	WORD $0x8948; BYTE $0xd0  // movq         %rdx, %rax
LBB0_2:
	LONG $0x5c398041  // cmpb         $92, (%r9)
	LONG $0x000f850f; WORD $0x0000  // jne          LBB0_4, $15(%rip)
	WORD $0xf631  // xorl         %esi, %esi
	LONG $0x0000c8e9; BYTE $0x00  // jmp          LBB0_13, $200(%rip)
	QUAD $0x9090909090909090  // .p2align 4, 0x90
LBB0_4:
	WORD $0x894d; BYTE $0xef  // movq         %r13, %r15
	WORD $0x8948; BYTE $0xc6  // movq         %rax, %rsi
	WORD $0x894d; BYTE $0xce  // movq         %r9, %r14
	LONG $0x10fd8349  // cmpq         $16, %r13
	LONG $0x003d8c0f; WORD $0x0000  // jl           LBB0_7, $61(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90  // .p2align 4, 0x90
LBB0_5:
	LONG $0x6f0f41f3; BYTE $0x0e  // movdqu       (%r14), %xmm1
	LONG $0x0e7f0ff3  // movdqu       %xmm1, (%rsi)
	LONG $0xc8740f66  // pcmpeqb      %xmm0, %xmm1
	LONG $0xd9d70f66  // pmovmskb     %xmm1, %ebx
	WORD $0x8566; BYTE $0xdb  // testw        %bx, %bx
	LONG $0x0060850f; WORD $0x0000  // jne          LBB0_12, $96(%rip)
	LONG $0x10c68349  // addq         $16, %r14
	LONG $0x10c68348  // addq         $16, %rsi
	LONG $0x1fff8349  // cmpq         $31, %r15
	LONG $0xf07f8d4d  // leaq         $-16(%r15), %r15
	LONG $0xffd08f0f; WORD $0xffff  // jg           LBB0_5, $-48(%rip)
LBB0_7:
	WORD $0x854d; BYTE $0xff  // testq        %r15, %r15
	LONG $0x05d5840f; WORD $0x0000  // je           LBB0_83, $1493(%rip)
	WORD $0xdb31  // xorl         %ebx, %ebx
	LONG $0x90909090; BYTE $0x90  // .p2align 4, 0x90
LBB0_9:
	LONG $0x0cb60f41; BYTE $0x1e  // movzbl       (%r14,%rbx), %ecx
	WORD $0xf980; BYTE $0x5c  // cmpb         $92, %cl
	LONG $0x0014840f; WORD $0x0000  // je           LBB0_11, $20(%rip)
	WORD $0x0c88; BYTE $0x1e  // movb         %cl, (%rsi,%rbx)
	WORD $0xff48; BYTE $0xc3  // incq         %rbx
	WORD $0x3949; BYTE $0xdf  // cmpq         %rbx, %r15
	LONG $0xffe3850f; WORD $0xffff  // jne          LBB0_9, $-29(%rip)
	LONG $0x0005ace9; BYTE $0x00  // jmp          LBB0_83, $1452(%rip)
LBB0_11:
	WORD $0x0149; BYTE $0xde  // addq         %rbx, %r14
	WORD $0x294d; BYTE $0xce  // subq         %r9, %r14
	WORD $0x894c; BYTE $0xf6  // movq         %r14, %rsi
	LONG $0xfffe8348  // cmpq         $-1, %rsi
	LONG $0x002b850f; WORD $0x0000  // jne          LBB0_13, $43(%rip)
	LONG $0x000594e9; BYTE $0x00  // jmp          LBB0_83, $1428(%rip)
LBB0_12:
	WORD $0xb70f; BYTE $0xcb  // movzwl       %bx, %ecx
	WORD $0x294d; BYTE $0xce  // subq         %r9, %r14
	LONG $0xf1bc0f48  // bsfq         %rcx, %rsi
	WORD $0x014c; BYTE $0xf6  // addq         %r14, %rsi
	LONG $0xfffe8348  // cmpq         $-1, %rsi
	LONG $0x057d840f; WORD $0x0000  // je           LBB0_83, $1405(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090; BYTE $0x90  // .p2align 4, 0x90
LBB0_13:
	LONG $0x024e8d48  // leaq         $2(%rsi), %rcx
	WORD $0x2949; BYTE $0xcd  // subq         %rcx, %r13
	LONG $0x062a880f; WORD $0x0000  // js           LBB0_94, $1578(%rip)
	LONG $0x314c8d4d; BYTE $0x02  // leaq         $2(%r9,%rsi), %r9
	WORD $0x854d; BYTE $0xd2  // testq        %r10, %r10
	LONG $0x03e5850f; WORD $0x0000  // jne          LBB0_58, $997(%rip)
LBB0_15:
	WORD $0x0148; BYTE $0xf0  // addq         %rsi, %rax
	LONG $0x49b60f41; BYTE $0xff  // movzbl       $-1(%r9), %ecx
	LONG $0x010c8a42  // movb         (%rcx,%r8), %cl
	WORD $0xf980; BYTE $0xff  // cmpb         $-1, %cl
	LONG $0x0020840f; WORD $0x0000  // je           LBB0_18, $32(%rip)
	WORD $0xc984  // testb        %cl, %cl
	LONG $0x0612840f; WORD $0x0000  // je           LBB0_95, $1554(%rip)
	WORD $0x0888  // movb         %cl, (%rax)
	WORD $0xff48; BYTE $0xc0  // incq         %rax
	LONG $0x0003b0e9; BYTE $0x00  // jmp          LBB0_57, $944(%rip)
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090  // .p2align 4, 0x90
LBB0_18:
	LONG $0x03fd8349  // cmpq         $3, %r13
	LONG $0x05dd8e0f; WORD $0x0000  // jle          LBB0_94, $1501(%rip)
	WORD $0x8b41; BYTE $0x31  // movl         (%r9), %esi
	WORD $0xf189  // movl         %esi, %ecx
	WORD $0xd1f7  // notl         %ecx
	LONG $0xcfd09e8d; WORD $0xcfcf  // leal         $-808464432(%rsi), %ebx
	LONG $0x8080e181; WORD $0x8080  // andl         $-2139062144, %ecx
	WORD $0xd985  // testl        %ebx, %ecx
	LONG $0x050e850f; WORD $0x0000  // jne          LBB0_85, $1294(%rip)
	LONG $0x19199e8d; WORD $0x1919  // leal         $421075225(%rsi), %ebx
	WORD $0xf309  // orl          %esi, %ebx
	LONG $0x8080c3f7; WORD $0x8080  // testl        $-2139062144, %ebx
	LONG $0x04fa850f; WORD $0x0000  // jne          LBB0_85, $1274(%rip)
	WORD $0xf389  // movl         %esi, %ebx
	LONG $0x7f7fe381; WORD $0x7f7f  // andl         $2139062143, %ebx
	LONG $0xc0c0be41; WORD $0xc0c0  // movl         $-1061109568, %r14d
	WORD $0x2941; BYTE $0xde  // subl         %ebx, %r14d
	LONG $0x46bb8d44; WORD $0x4646; BYTE $0x46  // leal         $1179010630(%rbx), %r15d
	WORD $0x2141; BYTE $0xce  // andl         %ecx, %r14d
	WORD $0x8545; BYTE $0xfe  // testl        %r15d, %r14d
	LONG $0x04d6850f; WORD $0x0000  // jne          LBB0_85, $1238(%rip)
	LONG $0xe0e0be41; WORD $0xe0e0  // movl         $-522133280, %r14d
	WORD $0x2941; BYTE $0xde  // subl         %ebx, %r14d
	LONG $0x3939c381; WORD $0x3939  // addl         $960051513, %ebx
	WORD $0x2144; BYTE $0xf1  // andl         %r14d, %ecx
	WORD $0xd985  // testl        %ebx, %ecx
	LONG $0x04bc850f; WORD $0x0000  // jne          LBB0_85, $1212(%rip)
	WORD $0xce0f  // bswapl       %esi
	WORD $0xf189  // movl         %esi, %ecx
	WORD $0xe9c1; BYTE $0x04  // shrl         $4, %ecx
	WORD $0xd1f7  // notl         %ecx
	LONG $0x0101e181; WORD $0x0101  // andl         $16843009, %ecx
	WORD $0x0c8d; BYTE $0xc9  // leal         (%rcx,%rcx,8), %ecx
	LONG $0x0f0fe681; WORD $0x0f0f  // andl         $252645135, %esi
	WORD $0xce01  // addl         %ecx, %esi
	WORD $0xf189  // movl         %esi, %ecx
	WORD $0xe9c1; BYTE $0x04  // shrl         $4, %ecx
	WORD $0xf109  // orl          %esi, %ecx
	LONG $0xf9b60f44  // movzbl       %cl, %r15d
	WORD $0xe9c1; BYTE $0x08  // shrl         $8, %ecx
	LONG $0xff00e181; WORD $0x0000  // andl         $65280, %ecx
	WORD $0x0941; BYTE $0xcf  // orl          %ecx, %r15d
	LONG $0xfc758d4d  // leaq         $-4(%r13), %r14
	LONG $0x80ff8141; WORD $0x0000; BYTE $0x00  // cmpl         $128, %r15d
	LONG $0x0346820f; WORD $0x0000  // jb           LBB0_66, $838(%rip)
	WORD $0x3145; BYTE $0xe4  // xorl         %r12d, %r12d
	WORD $0x854d; BYTE $0xd2  // testq        %r10, %r10
	LONG $0x015b840f; WORD $0x0000  // je           LBB0_40, $347(%rip)
LBB0_25:
	LONG $0x00ff8141; WORD $0x0008; BYTE $0x00  // cmpl         $2048, %r15d
	LONG $0x033c820f; WORD $0x0000  // jb           LBB0_68, $828(%rip)
	WORD $0x8944; BYTE $0xf9  // movl         %r15d, %ecx
	LONG $0xf800e181; WORD $0xffff  // andl         $-2048, %ecx
	LONG $0xd800f981; WORD $0x0000  // cmpl         $55296, %ecx
	LONG $0x0289850f; WORD $0x0000  // jne          LBB0_54, $649(%rip)
	WORD $0x854d; BYTE $0xf6  // testq        %r14, %r14
	LONG $0x036b8e0f; WORD $0x0000  // jle          LBB0_72, $875(%rip)
	LONG $0x217c8043; WORD $0x5c04  // cmpb         $92, $4(%r9,%r12)
	LONG $0x036e850f; WORD $0x0000  // jne          LBB0_73, $878(%rip)
	LONG $0xffff8141; WORD $0x00db; BYTE $0x00  // cmpl         $56319, %r15d
	LONG $0x0334870f; WORD $0x0000  // ja           LBB0_70, $820(%rip)
	LONG $0x07fe8349  // cmpq         $7, %r14
	LONG $0x032a8c0f; WORD $0x0000  // jl           LBB0_70, $810(%rip)
	LONG $0x217c8043; WORD $0x5c05  // cmpb         $92, $5(%r9,%r12)
	LONG $0x031e850f; WORD $0x0000  // jne          LBB0_70, $798(%rip)
	LONG $0x217c8043; WORD $0x7506  // cmpb         $117, $6(%r9,%r12)
	LONG $0x0312850f; WORD $0x0000  // jne          LBB0_70, $786(%rip)
	LONG $0x21748b43; BYTE $0x07  // movl         $7(%r9,%r12), %esi
	WORD $0xf189  // movl         %esi, %ecx
	WORD $0xd1f7  // notl         %ecx
	LONG $0xcfd09e8d; WORD $0xcfcf  // leal         $-808464432(%rsi), %ebx
	LONG $0x8080e181; WORD $0x8080  // andl         $-2139062144, %ecx
	WORD $0xd985  // testl        %ebx, %ecx
	LONG $0x04e8850f; WORD $0x0000  // jne          LBB0_99, $1256(%rip)
	LONG $0x19199e8d; WORD $0x1919  // leal         $421075225(%rsi), %ebx
	WORD $0xf309  // orl          %esi, %ebx
	LONG $0x8080c3f7; WORD $0x8080  // testl        $-2139062144, %ebx
	LONG $0x04d4850f; WORD $0x0000  // jne          LBB0_99, $1236(%rip)
	WORD $0xf389  // movl         %esi, %ebx
	LONG $0x7f7fe381; WORD $0x7f7f  // andl         $2139062143, %ebx
	LONG $0xc0d445c7; WORD $0xc0c0; BYTE $0xc0  // movl         $-1061109568, $-44(%rbp)
	WORD $0x5d29; BYTE $0xd4  // subl         %ebx, $-44(%rbp)
	LONG $0xb0758948  // movq         %rsi, $-80(%rbp)
	LONG $0x4646b38d; WORD $0x4646  // leal         $1179010630(%rbx), %esi
	WORD $0x7589; BYTE $0xc4  // movl         %esi, $-60(%rbp)
	WORD $0x4d21; BYTE $0xd4  // andl         %ecx, $-44(%rbp)
	WORD $0x758b; BYTE $0xc4  // movl         $-60(%rbp), %esi
	WORD $0x7585; BYTE $0xd4  // testl        %esi, $-44(%rbp)
	LONG $0xb0758b48  // movq         $-80(%rbp), %rsi
	LONG $0x04a2850f; WORD $0x0000  // jne          LBB0_99, $1186(%rip)
	LONG $0xe0d445c7; WORD $0xe0e0; BYTE $0xe0  // movl         $-522133280, $-44(%rbp)
	WORD $0x5d29; BYTE $0xd4  // subl         %ebx, $-44(%rbp)
	LONG $0x3939c381; WORD $0x3939  // addl         $960051513, %ebx
	WORD $0x4d23; BYTE $0xd4  // andl         $-44(%rbp), %ecx
	WORD $0xd985  // testl        %ebx, %ecx
	LONG $0x0487850f; WORD $0x0000  // jne          LBB0_99, $1159(%rip)
	WORD $0xce0f  // bswapl       %esi
	WORD $0xf189  // movl         %esi, %ecx
	WORD $0xe9c1; BYTE $0x04  // shrl         $4, %ecx
	WORD $0xd1f7  // notl         %ecx
	LONG $0x0101e181; WORD $0x0101  // andl         $16843009, %ecx
	WORD $0x0c8d; BYTE $0xc9  // leal         (%rcx,%rcx,8), %ecx
	LONG $0x0f0fe681; WORD $0x0f0f  // andl         $252645135, %esi
	WORD $0xce01  // addl         %ecx, %esi
	WORD $0xf189  // movl         %esi, %ecx
	WORD $0xe9c1; BYTE $0x04  // shrl         $4, %ecx
	WORD $0xf109  // orl          %esi, %ecx
	WORD $0xce89  // movl         %ecx, %esi
	WORD $0xeec1; BYTE $0x08  // shrl         $8, %esi
	LONG $0xff00e681; WORD $0x0000  // andl         $65280, %esi
	WORD $0xb60f; BYTE $0xd9  // movzbl       %cl, %ebx
	WORD $0xf309  // orl          %esi, %ebx
	LONG $0x0000e181; WORD $0x00fc  // andl         $16515072, %ecx
	LONG $0x0000f981; WORD $0x00dc  // cmpl         $14417920, %ecx
	LONG $0x02ac840f; WORD $0x0000  // je           LBB0_77, $684(%rip)
	LONG $0x02b845f6  // testb        $2, $-72(%rbp)
	LONG $0x0541840f; WORD $0x0000  // je           LBB0_114, $1345(%rip)
	LONG $0xf9c68349  // addq         $-7, %r14
	LONG $0xef00c766; BYTE $0xbf  // movw         $-16401, (%rax)
	LONG $0xbd0240c6  // movb         $-67, $2(%rax)
	LONG $0x03c08348  // addq         $3, %rax
	LONG $0x07c48349  // addq         $7, %r12
	WORD $0x8941; BYTE $0xdf  // movl         %ebx, %r15d
	WORD $0xfb83; BYTE $0x7f  // cmpl         $127, %ebx
	LONG $0xfeae870f; WORD $0xffff  // ja           LBB0_25, $-338(%rip)
	LONG $0x000144e9; BYTE $0x00  // jmp          LBB0_53, $324(%rip)
	LONG $0x90909090  // .p2align 4, 0x90
LBB0_40:
	LONG $0x00ff8141; WORD $0x0008; BYTE $0x00  // cmpl         $2048, %r15d
	LONG $0x01e1820f; WORD $0x0000  // jb           LBB0_68, $481(%rip)
	WORD $0x8944; BYTE $0xf9  // movl         %r15d, %ecx
	LONG $0xf800e181; WORD $0xffff  // andl         $-2048, %ecx
	LONG $0xd800f981; WORD $0x0000  // cmpl         $55296, %ecx
	LONG $0x012e850f; WORD $0x0000  // jne          LBB0_54, $302(%rip)
	LONG $0xffff8141; WORD $0x00db; BYTE $0x00  // cmpl         $56319, %r15d
	LONG $0x01e4870f; WORD $0x0000  // ja           LBB0_69, $484(%rip)
	LONG $0x06fe8349  // cmpq         $6, %r14
	LONG $0x01da8c0f; WORD $0x0000  // jl           LBB0_69, $474(%rip)
	LONG $0x217c8043; WORD $0x5c04  // cmpb         $92, $4(%r9,%r12)
	LONG $0x01ce850f; WORD $0x0000  // jne          LBB0_69, $462(%rip)
	LONG $0x217c8043; WORD $0x7505  // cmpb         $117, $5(%r9,%r12)
	LONG $0x01c2850f; WORD $0x0000  // jne          LBB0_69, $450(%rip)
	LONG $0x21748b43; BYTE $0x06  // movl         $6(%r9,%r12), %esi
	WORD $0xf189  // movl         %esi, %ecx
	WORD $0xd1f7  // notl         %ecx
	LONG $0xcfd09e8d; WORD $0xcfcf  // leal         $-808464432(%rsi), %ebx
	LONG $0x8080e181; WORD $0x8080  // andl         $-2139062144, %ecx
	WORD $0xd985  // testl        %ebx, %ecx
	LONG $0x0398850f; WORD $0x0000  // jne          LBB0_98, $920(%rip)
	LONG $0x19199e8d; WORD $0x1919  // leal         $421075225(%rsi), %ebx
	WORD $0xf309  // orl          %esi, %ebx
	LONG $0x8080c3f7; WORD $0x8080  // testl        $-2139062144, %ebx
	LONG $0x0384850f; WORD $0x0000  // jne          LBB0_98, $900(%rip)
	WORD $0xf389  // movl         %esi, %ebx
	LONG $0x7f7fe381; WORD $0x7f7f  // andl         $2139062143, %ebx
	LONG $0xc0d445c7; WORD $0xc0c0; BYTE $0xc0  // movl         $-1061109568, $-44(%rbp)
	WORD $0x5d29; BYTE $0xd4  // subl         %ebx, $-44(%rbp)
	LONG $0xb0758948  // movq         %rsi, $-80(%rbp)
	LONG $0x4646b38d; WORD $0x4646  // leal         $1179010630(%rbx), %esi
	WORD $0x7589; BYTE $0xc4  // movl         %esi, $-60(%rbp)
	WORD $0x4d21; BYTE $0xd4  // andl         %ecx, $-44(%rbp)
	WORD $0x758b; BYTE $0xc4  // movl         $-60(%rbp), %esi
	WORD $0x7585; BYTE $0xd4  // testl        %esi, $-44(%rbp)
	LONG $0xb0758b48  // movq         $-80(%rbp), %rsi
	LONG $0x0352850f; WORD $0x0000  // jne          LBB0_98, $850(%rip)
	LONG $0xe0d445c7; WORD $0xe0e0; BYTE $0xe0  // movl         $-522133280, $-44(%rbp)
	WORD $0x5d29; BYTE $0xd4  // subl         %ebx, $-44(%rbp)
	LONG $0x3939c381; WORD $0x3939  // addl         $960051513, %ebx
	WORD $0x4d23; BYTE $0xd4  // andl         $-44(%rbp), %ecx
	WORD $0xd985  // testl        %ebx, %ecx
	LONG $0x0337850f; WORD $0x0000  // jne          LBB0_98, $823(%rip)
	WORD $0xce0f  // bswapl       %esi
	WORD $0xf189  // movl         %esi, %ecx
	WORD $0xe9c1; BYTE $0x04  // shrl         $4, %ecx
	WORD $0xd1f7  // notl         %ecx
	LONG $0x0101e181; WORD $0x0101  // andl         $16843009, %ecx
	WORD $0x0c8d; BYTE $0xc9  // leal         (%rcx,%rcx,8), %ecx
	LONG $0x0f0fe681; WORD $0x0f0f  // andl         $252645135, %esi
	WORD $0xce01  // addl         %ecx, %esi
	WORD $0xf189  // movl         %esi, %ecx
	WORD $0xe9c1; BYTE $0x04  // shrl         $4, %ecx
	WORD $0xf109  // orl          %esi, %ecx
	WORD $0xce89  // movl         %ecx, %esi
	WORD $0xeec1; BYTE $0x08  // shrl         $8, %esi
	LONG $0xff00e681; WORD $0x0000  // andl         $65280, %esi
	WORD $0xb60f; BYTE $0xd9  // movzbl       %cl, %ebx
	WORD $0xf309  // orl          %esi, %ebx
	LONG $0x0000e181; WORD $0x00fc  // andl         $16515072, %ecx
	LONG $0x0000f981; WORD $0x00dc  // cmpl         $14417920, %ecx
	LONG $0x0155840f; WORD $0x0000  // je           LBB0_76, $341(%rip)
	LONG $0x02b845f6  // testb        $2, $-72(%rbp)
	LONG $0x03f1840f; WORD $0x0000  // je           LBB0_113, $1009(%rip)
	LONG $0xfac68349  // addq         $-6, %r14
	LONG $0xef00c766; BYTE $0xbf  // movw         $-16401, (%rax)
	LONG $0xbd0240c6  // movb         $-67, $2(%rax)
	LONG $0x03c08348  // addq         $3, %rax
	LONG $0x06c48349  // addq         $6, %r12
	WORD $0x8941; BYTE $0xdf  // movl         %ebx, %r15d
	LONG $0x0080fb81; WORD $0x0000  // cmpl         $128, %ebx
	LONG $0xfec0830f; WORD $0xffff  // jae          LBB0_40, $-320(%rip)
LBB0_53:
	LONG $0x214c8d4f; BYTE $0x04  // leaq         $4(%r9,%r12), %r9
	WORD $0x8941; BYTE $0xdf  // movl         %ebx, %r15d
	LONG $0x000096e9; BYTE $0x00  // jmp          LBB0_67, $150(%rip)
	WORD $0x9090; BYTE $0x90  // .p2align 4, 0x90
LBB0_54:
	LONG $0x214c8d4f; BYTE $0x04  // leaq         $4(%r9,%r12), %r9
	WORD $0x8944; BYTE $0xf9  // movl         %r15d, %ecx
	WORD $0xe9c1; BYTE $0x0c  // shrl         $12, %ecx
	WORD $0xc980; BYTE $0xe0  // orb          $-32, %cl
	WORD $0x0888  // movb         %cl, (%rax)
	WORD $0x8944; BYTE $0xf9  // movl         %r15d, %ecx
	WORD $0xe9c1; BYTE $0x06  // shrl         $6, %ecx
	WORD $0xe180; BYTE $0x3f  // andb         $63, %cl
	WORD $0xc980; BYTE $0x80  // orb          $-128, %cl
	WORD $0x4888; BYTE $0x01  // movb         %cl, $1(%rax)
	LONG $0x3fe78041  // andb         $63, %r15b
	LONG $0x80cf8041  // orb          $-128, %r15b
	LONG $0x02788844  // movb         %r15b, $2(%rax)
LBB0_55:
	LONG $0x03c08348  // addq         $3, %rax
LBB0_56:
	WORD $0x894d; BYTE $0xf5  // movq         %r14, %r13
LBB0_57:
	WORD $0x854d; BYTE $0xed  // testq        %r13, %r13
	LONG $0xfb2c850f; WORD $0xffff  // jne          LBB0_2, $-1236(%rip)
	LONG $0x000263e9; BYTE $0x00  // jmp          LBB0_96, $611(%rip)
LBB0_58:
	WORD $0x8545; BYTE $0xed  // testl        %r13d, %r13d
	LONG $0x022e840f; WORD $0x0000  // je           LBB0_94, $558(%rip)
	LONG $0xff798041; BYTE $0x5c  // cmpb         $92, $-1(%r9)
	LONG $0x0257850f; WORD $0x0000  // jne          LBB0_97, $599(%rip)
	LONG $0x5c398041  // cmpb         $92, (%r9)
	LONG $0x0026850f; WORD $0x0000  // jne          LBB0_65, $38(%rip)
	LONG $0x01fd8341  // cmpl         $1, %r13d
	LONG $0x020f8e0f; WORD $0x0000  // jle          LBB0_94, $527(%rip)
	LONG $0x01498a41  // movb         $1(%r9), %cl
	WORD $0xf980; BYTE $0x22  // cmpb         $34, %cl
	LONG $0x0009840f; WORD $0x0000  // je           LBB0_64, $9(%rip)
	WORD $0xf980; BYTE $0x5c  // cmpb         $92, %cl
	LONG $0x030c850f; WORD $0x0000  // jne          LBB0_109, $780(%rip)
LBB0_64:
	WORD $0xff49; BYTE $0xc1  // incq         %r9
	WORD $0xff49; BYTE $0xcd  // decq         %r13
LBB0_65:
	WORD $0xff49; BYTE $0xc1  // incq         %r9
	WORD $0xff49; BYTE $0xcd  // decq         %r13
	LONG $0xfffbcce9; BYTE $0xff  // jmp          LBB0_15, $-1076(%rip)
LBB0_66:
	LONG $0x04c18349  // addq         $4, %r9
LBB0_67:
	WORD $0x8844; BYTE $0x38  // movb         %r15b, (%rax)
	WORD $0xff48; BYTE $0xc0  // incq         %rax
	LONG $0xffff91e9; BYTE $0xff  // jmp          LBB0_56, $-111(%rip)
LBB0_68:
	LONG $0x214c8d4f; BYTE $0x04  // leaq         $4(%r9,%r12), %r9
	WORD $0x8944; BYTE $0xf9  // movl         %r15d, %ecx
	WORD $0xe9c1; BYTE $0x06  // shrl         $6, %ecx
	WORD $0xc980; BYTE $0xc0  // orb          $-64, %cl
	WORD $0x0888  // movb         %cl, (%rax)
	LONG $0x3fe78041  // andb         $63, %r15b
	LONG $0x80cf8041  // orb          $-128, %r15b
	LONG $0x01788844  // movb         %r15b, $1(%rax)
	LONG $0x02c08348  // addq         $2, %rax
	LONG $0xffff6ce9; BYTE $0xff  // jmp          LBB0_56, $-148(%rip)
LBB0_69:
	LONG $0x214c8d4f; BYTE $0x04  // leaq         $4(%r9,%r12), %r9
	LONG $0x00000fe9; BYTE $0x00  // jmp          LBB0_71, $15(%rip)
LBB0_70:
	LONG $0x214c8d4f; BYTE $0x05  // leaq         $5(%r9,%r12), %r9
	WORD $0x294d; BYTE $0xe5  // subq         %r12, %r13
	LONG $0xfbc58349  // addq         $-5, %r13
	WORD $0x894d; BYTE $0xee  // movq         %r13, %r14
LBB0_71:
	LONG $0x02b845f6  // testb        $2, $-72(%rbp)
	LONG $0x0023850f; WORD $0x0000  // jne          LBB0_75, $35(%rip)
	LONG $0x0002fbe9; BYTE $0x00  // jmp          LBB0_116, $763(%rip)
LBB0_72:
	LONG $0x02b845f6  // testb        $2, $-72(%rbp)
	LONG $0x000f850f; WORD $0x0000  // jne          LBB0_74, $15(%rip)
	LONG $0x00017de9; BYTE $0x00  // jmp          LBB0_94, $381(%rip)
LBB0_73:
	LONG $0x02b845f6  // testb        $2, $-72(%rbp)
	LONG $0x02ef840f; WORD $0x0000  // je           LBB0_117, $751(%rip)
LBB0_74:
	LONG $0x214c8d4f; BYTE $0x04  // leaq         $4(%r9,%r12), %r9
LBB0_75:
	LONG $0xef00c766; BYTE $0xbf  // movw         $-16401, (%rax)
	LONG $0xbd0240c6  // movb         $-67, $2(%rax)
	LONG $0xffff14e9; BYTE $0xff  // jmp          LBB0_55, $-236(%rip)
LBB0_76:
	LONG $0x214c8d4f; BYTE $0x0a  // leaq         $10(%r9,%r12), %r9
	WORD $0x294d; BYTE $0xe5  // subq         %r12, %r13
	LONG $0xf6c58349  // addq         $-10, %r13
	LONG $0x00000ce9; BYTE $0x00  // jmp          LBB0_78, $12(%rip)
LBB0_77:
	LONG $0x214c8d4f; BYTE $0x0b  // leaq         $11(%r9,%r12), %r9
	WORD $0x294d; BYTE $0xe5  // subq         %r12, %r13
	LONG $0xf5c58349  // addq         $-11, %r13
LBB0_78:
	LONG $0x0ae7c141  // shll         $10, %r15d
	QUAD $0xfca024001f8c8d41  // leal         $-56613888(%r15,%rbx), %ecx
	LONG $0x0000f981; WORD $0x0011  // cmpl         $1114112, %ecx
	LONG $0x001c820f; WORD $0x0000  // jb           LBB0_81, $28(%rip)
	LONG $0x02b845f6  // testb        $2, $-72(%rbp)
	LONG $0x024d840f; WORD $0x0000  // je           LBB0_111, $589(%rip)
	LONG $0xef00c766; BYTE $0xbf  // movw         $-16401, (%rax)
	LONG $0xbd0240c6  // movb         $-67, $2(%rax)
	LONG $0x03c08348  // addq         $3, %rax
	LONG $0xfffecae9; BYTE $0xff  // jmp          LBB0_57, $-310(%rip)
LBB0_81:
	WORD $0xce89  // movl         %ecx, %esi
	WORD $0xeec1; BYTE $0x12  // shrl         $18, %esi
	LONG $0xf0ce8040  // orb          $-16, %sil
	WORD $0x8840; BYTE $0x30  // movb         %sil, (%rax)
	WORD $0xce89  // movl         %ecx, %esi
	WORD $0xeec1; BYTE $0x0c  // shrl         $12, %esi
	LONG $0x3fe68040  // andb         $63, %sil
	LONG $0x80ce8040  // orb          $-128, %sil
	LONG $0x01708840  // movb         %sil, $1(%rax)
	WORD $0xce89  // movl         %ecx, %esi
	WORD $0xeec1; BYTE $0x06  // shrl         $6, %esi
	LONG $0x3fe68040  // andb         $63, %sil
	LONG $0x80ce8040  // orb          $-128, %sil
	LONG $0x02708840  // movb         %sil, $2(%rax)
	WORD $0xe180; BYTE $0x3f  // andb         $63, %cl
	WORD $0xc980; BYTE $0x80  // orb          $-128, %cl
	WORD $0x4888; BYTE $0x03  // movb         %cl, $3(%rax)
	LONG $0x04c08348  // addq         $4, %rax
	LONG $0xfffe8ae9; BYTE $0xff  // jmp          LBB0_57, $-374(%rip)
LBB0_82:
	WORD $0x3145; BYTE $0xed  // xorl         %r13d, %r13d
	WORD $0x8948; BYTE $0xd0  // movq         %rdx, %rax
LBB0_83:
	WORD $0x014c; BYTE $0xe8  // addq         %r13, %rax
	WORD $0x2948; BYTE $0xd0  // subq         %rdx, %rax
LBB0_84:
	LONG $0x28c48348  // addq         $40, %rsp
	BYTE $0x5b  // popq         %rbx
	WORD $0x5c41  // popq         %r12
	WORD $0x5d41  // popq         %r13
	WORD $0x5e41  // popq         %r14
	WORD $0x5f41  // popq         %r15
	BYTE $0x5d  // popq         %rbp
	BYTE $0xc3  // retq         
LBB0_85:
	WORD $0x894c; BYTE $0xca  // movq         %r9, %rdx
	WORD $0x2948; BYTE $0xfa  // subq         %rdi, %rdx
	LONG $0xc87d8b48  // movq         $-56(%rbp), %rdi
	WORD $0x8948; BYTE $0x17  // movq         %rdx, (%rdi)
	WORD $0x8a41; BYTE $0x09  // movb         (%r9), %cl
	WORD $0x718d; BYTE $0xd0  // leal         $-48(%rcx), %esi
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff  // movq         $-2, %rax
	LONG $0x0afe8040  // cmpb         $10, %sil
	LONG $0x000f820f; WORD $0x0000  // jb           LBB0_87, $15(%rip)
	WORD $0xe180; BYTE $0xdf  // andb         $-33, %cl
	WORD $0xc180; BYTE $0xbf  // addb         $-65, %cl
	WORD $0xf980; BYTE $0x05  // cmpb         $5, %cl
	LONG $0xffbe870f; WORD $0xffff  // ja           LBB0_84, $-66(%rip)
LBB0_87:
	LONG $0x014a8d48  // leaq         $1(%rdx), %rcx
	WORD $0x8948; BYTE $0x0f  // movq         %rcx, (%rdi)
	LONG $0x01498a41  // movb         $1(%r9), %cl
	WORD $0x718d; BYTE $0xd0  // leal         $-48(%rcx), %esi
	LONG $0x0afe8040  // cmpb         $10, %sil
	LONG $0x000f820f; WORD $0x0000  // jb           LBB0_89, $15(%rip)
	WORD $0xe180; BYTE $0xdf  // andb         $-33, %cl
	WORD $0xc180; BYTE $0xbf  // addb         $-65, %cl
	WORD $0xf980; BYTE $0x05  // cmpb         $5, %cl
	LONG $0xff97870f; WORD $0xffff  // ja           LBB0_84, $-105(%rip)
LBB0_89:
	LONG $0x024a8d48  // leaq         $2(%rdx), %rcx
	WORD $0x8948; BYTE $0x0f  // movq         %rcx, (%rdi)
	LONG $0x02498a41  // movb         $2(%r9), %cl
	WORD $0x718d; BYTE $0xd0  // leal         $-48(%rcx), %esi
	LONG $0x0afe8040  // cmpb         $10, %sil
	LONG $0x000f820f; WORD $0x0000  // jb           LBB0_91, $15(%rip)
	WORD $0xe180; BYTE $0xdf  // andb         $-33, %cl
	WORD $0xc180; BYTE $0xbf  // addb         $-65, %cl
	WORD $0xf980; BYTE $0x05  // cmpb         $5, %cl
	LONG $0xff70870f; WORD $0xffff  // ja           LBB0_84, $-144(%rip)
LBB0_91:
	LONG $0x034a8d48  // leaq         $3(%rdx), %rcx
	WORD $0x8948; BYTE $0x0f  // movq         %rcx, (%rdi)
	LONG $0x03498a41  // movb         $3(%r9), %cl
	WORD $0x718d; BYTE $0xd0  // leal         $-48(%rcx), %esi
	LONG $0x0afe8040  // cmpb         $10, %sil
	LONG $0x000f820f; WORD $0x0000  // jb           LBB0_93, $15(%rip)
	WORD $0xe180; BYTE $0xdf  // andb         $-33, %cl
	WORD $0xc180; BYTE $0xbf  // addb         $-65, %cl
	WORD $0xf980; BYTE $0x05  // cmpb         $5, %cl
	LONG $0xff49870f; WORD $0xffff  // ja           LBB0_84, $-183(%rip)
LBB0_93:
	LONG $0x04c28348  // addq         $4, %rdx
	WORD $0x8948; BYTE $0x17  // movq         %rdx, (%rdi)
	LONG $0xffff3de9; BYTE $0xff  // jmp          LBB0_84, $-195(%rip)
LBB0_94:
	LONG $0xc8458b48  // movq         $-56(%rbp), %rax
	WORD $0x894c; BYTE $0x18  // movq         %r11, (%rax)
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff  // movq         $-1, %rax
	LONG $0xffff2ae9; BYTE $0xff  // jmp          LBB0_84, $-214(%rip)
LBB0_95:
	WORD $0xf748; BYTE $0xd7  // notq         %rdi
	WORD $0x0149; BYTE $0xf9  // addq         %rdi, %r9
	LONG $0xc8458b48  // movq         $-56(%rbp), %rax
	WORD $0x894c; BYTE $0x08  // movq         %r9, (%rax)
	LONG $0xfdc0c748; WORD $0xffff; BYTE $0xff  // movq         $-3, %rax
	LONG $0xffff11e9; BYTE $0xff  // jmp          LBB0_84, $-239(%rip)
LBB0_96:
	WORD $0x3145; BYTE $0xed  // xorl         %r13d, %r13d
	LONG $0xffff03e9; BYTE $0xff  // jmp          LBB0_83, $-253(%rip)
LBB0_97:
	WORD $0xf748; BYTE $0xd7  // notq         %rdi
	WORD $0x0149; BYTE $0xf9  // addq         %rdi, %r9
	LONG $0x0000dae9; BYTE $0x00  // jmp          LBB0_110, $218(%rip)
LBB0_98:
	LONG $0x21748d4b; BYTE $0x04  // leaq         $4(%r9,%r12), %rsi
	LONG $0x000005e9; BYTE $0x00  // jmp          LBB0_100, $5(%rip)
LBB0_99:
	LONG $0x21748d4b; BYTE $0x05  // leaq         $5(%r9,%r12), %rsi
LBB0_100:
	WORD $0x8948; BYTE $0xf2  // movq         %rsi, %rdx
	WORD $0x2948; BYTE $0xfa  // subq         %rdi, %rdx
	LONG $0x02c28348  // addq         $2, %rdx
	LONG $0xc8458b48  // movq         $-56(%rbp), %rax
	WORD $0x8948; BYTE $0x10  // movq         %rdx, (%rax)
	WORD $0x4e8a; BYTE $0x02  // movb         $2(%rsi), %cl
	WORD $0x798d; BYTE $0xd0  // leal         $-48(%rcx), %edi
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff  // movq         $-2, %rax
	LONG $0x0aff8040  // cmpb         $10, %dil
	LONG $0x000f820f; WORD $0x0000  // jb           LBB0_102, $15(%rip)
	WORD $0xe180; BYTE $0xdf  // andb         $-33, %cl
	WORD $0xc180; BYTE $0xbf  // addb         $-65, %cl
	WORD $0xf980; BYTE $0x05  // cmpb         $5, %cl
	LONG $0xfeb8870f; WORD $0xffff  // ja           LBB0_84, $-328(%rip)
LBB0_102:
	LONG $0x014a8d48  // leaq         $1(%rdx), %rcx
	LONG $0xc87d8b48  // movq         $-56(%rbp), %rdi
	WORD $0x8948; BYTE $0x0f  // movq         %rcx, (%rdi)
	WORD $0x4e8a; BYTE $0x03  // movb         $3(%rsi), %cl
	WORD $0x798d; BYTE $0xd0  // leal         $-48(%rcx), %edi
	LONG $0x0aff8040  // cmpb         $10, %dil
	LONG $0x000f820f; WORD $0x0000  // jb           LBB0_104, $15(%rip)
	WORD $0xe180; BYTE $0xdf  // andb         $-33, %cl
	WORD $0xc180; BYTE $0xbf  // addb         $-65, %cl
	WORD $0xf980; BYTE $0x05  // cmpb         $5, %cl
	LONG $0xfe8e870f; WORD $0xffff  // ja           LBB0_84, $-370(%rip)
LBB0_104:
	LONG $0x024a8d48  // leaq         $2(%rdx), %rcx
	LONG $0xc87d8b48  // movq         $-56(%rbp), %rdi
	WORD $0x8948; BYTE $0x0f  // movq         %rcx, (%rdi)
	WORD $0x4e8a; BYTE $0x04  // movb         $4(%rsi), %cl
	WORD $0x798d; BYTE $0xd0  // leal         $-48(%rcx), %edi
	LONG $0x0aff8040  // cmpb         $10, %dil
	LONG $0x000f820f; WORD $0x0000  // jb           LBB0_106, $15(%rip)
	WORD $0xe180; BYTE $0xdf  // andb         $-33, %cl
	WORD $0xc180; BYTE $0xbf  // addb         $-65, %cl
	WORD $0xf980; BYTE $0x05  // cmpb         $5, %cl
	LONG $0xfe64870f; WORD $0xffff  // ja           LBB0_84, $-412(%rip)
LBB0_106:
	LONG $0x034a8d48  // leaq         $3(%rdx), %rcx
	LONG $0xc87d8b48  // movq         $-56(%rbp), %rdi
	WORD $0x8948; BYTE $0x0f  // movq         %rcx, (%rdi)
	WORD $0x4e8a; BYTE $0x05  // movb         $5(%rsi), %cl
	WORD $0x718d; BYTE $0xd0  // leal         $-48(%rcx), %esi
	LONG $0x0afe8040  // cmpb         $10, %sil
	LONG $0x000f820f; WORD $0x0000  // jb           LBB0_108, $15(%rip)
	WORD $0xe180; BYTE $0xdf  // andb         $-33, %cl
	WORD $0xc180; BYTE $0xbf  // addb         $-65, %cl
	WORD $0xf980; BYTE $0x05  // cmpb         $5, %cl
	LONG $0xfe3a870f; WORD $0xffff  // ja           LBB0_84, $-454(%rip)
LBB0_108:
	LONG $0x04c28348  // addq         $4, %rdx
	LONG $0xc84d8b48  // movq         $-56(%rbp), %rcx
	WORD $0x8948; BYTE $0x11  // movq         %rdx, (%rcx)
	LONG $0xfffe2ae9; BYTE $0xff  // jmp          LBB0_84, $-470(%rip)
LBB0_109:
	WORD $0x2949; BYTE $0xf9  // subq         %rdi, %r9
	WORD $0xff49; BYTE $0xc1  // incq         %r9
LBB0_110:
	LONG $0xc8458b48  // movq         $-56(%rbp), %rax
	WORD $0x894c; BYTE $0x08  // movq         %r9, (%rax)
	LONG $0xfec0c748; WORD $0xffff; BYTE $0xff  // movq         $-2, %rax
	LONG $0xfffe11e9; BYTE $0xff  // jmp          LBB0_84, $-495(%rip)
LBB0_111:
	WORD $0x2949; BYTE $0xf9  // subq         %rdi, %r9
	LONG $0xfcc18349  // addq         $-4, %r9
LBB0_112:
	LONG $0xc8458b48  // movq         $-56(%rbp), %rax
	WORD $0x894c; BYTE $0x08  // movq         %r9, (%rax)
	LONG $0xfcc0c748; WORD $0xffff; BYTE $0xff  // movq         $-4, %rax
	LONG $0xfffdf7e9; BYTE $0xff  // jmp          LBB0_84, $-521(%rip)
LBB0_113:
	LONG $0x21448d4b; BYTE $0x0a  // leaq         $10(%r9,%r12), %rax
	LONG $0x000005e9; BYTE $0x00  // jmp          LBB0_115, $5(%rip)
LBB0_114:
	LONG $0x21448d4b; BYTE $0x0b  // leaq         $11(%r9,%r12), %rax
LBB0_115:
	WORD $0x2948; BYTE $0xf8  // subq         %rdi, %rax
	LONG $0xfcc08348  // addq         $-4, %rax
	LONG $0xc84d8b48  // movq         $-56(%rbp), %rcx
	WORD $0x8948; BYTE $0x01  // movq         %rax, (%rcx)
	LONG $0xfcc0c748; WORD $0xffff; BYTE $0xff  // movq         $-4, %rax
	LONG $0xfffdcee9; BYTE $0xff  // jmp          LBB0_84, $-562(%rip)
LBB0_116:
	LONG $0x3a448d49; BYTE $0x04  // leaq         $4(%r10,%rdi), %rax
	WORD $0x2949; BYTE $0xc1  // subq         %rax, %r9
	LONG $0xffffb7e9; BYTE $0xff  // jmp          LBB0_112, $-73(%rip)
LBB0_117:
	WORD $0x014d; BYTE $0xe1  // addq         %r12, %r9
	WORD $0x2949; BYTE $0xf9  // subq         %rdi, %r9
	LONG $0xfffface9; BYTE $0xff  // jmp          LBB0_112, $-84(%rip)
	WORD $0x0000  // .p2align 4, 0x00
__UnquoteTab:
	QUAD $0x0000000000000000; QUAD $0x0000000000000000  // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000  // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000220000; QUAD $0x2f00000000000000  // .ascii 16, '\x00\x00"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00/'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000  // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000  // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000005c00000000  // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\\\x00\x00\x00'
	QUAD $0x000c000000080000; QUAD $0x000a000000000000  // .ascii 16, '\x00\x00\x08\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\n\x00'
	LONG $0x000d0000; WORD $0xff09  // .ascii 6, '\x00\x00\r\x00\t\xff'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000  // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000  // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000  // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000  // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000  // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000  // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000  // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000  // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; WORD $0x0000  // .space 10, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

TEXT Â·__unquote(SB), NOSPLIT | NOFRAME, $0 - 48
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -88(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_unquote:
	MOVQ sp+0(FP), DI
	MOVQ nb+8(FP), SI
	MOVQ dp+16(FP), DX
	MOVQ ep+24(FP), CX
	MOVQ flags+32(FP), R8
	CALL Â·__unquote_entry+48(SB)  // _unquote
	MOVQ AX, ret+40(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry
