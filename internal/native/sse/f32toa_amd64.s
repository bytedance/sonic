// +build !noasm !appengine
// Code generated by asm2asm, DO NOT EDIT.

#include "go_asm.h"
#include "funcdata.h"
#include "textflag.h"

TEXT Â·__f32toa_entry(SB), NOSPLIT, $40
	NO_LOCAL_POINTERS
	LONG $0xf9058d48; WORD $0xffff; BYTE $0xff  // leaq         $-7(%rip), %rax
	LONG $0x24448948; BYTE $0x08  // movq         %rax, $8(%rsp)
	BYTE $0xc3  // retq         
	WORD $0x0000; BYTE $0x00  // .p2align 4, 0x00
LCPI0_0:
	QUAD $0x3030303030303030; QUAD $0x3030303030303030  // .space 16, '0000000000000000'
	  // .p2align 4, 0x90
_f32toa:
	BYTE $0x55  // pushq        %rbp
	WORD $0x8948; BYTE $0xe5  // movq         %rsp, %rbp
	WORD $0x5741  // pushq        %r15
	WORD $0x5641  // pushq        %r14
	WORD $0x5541  // pushq        %r13
	WORD $0x5441  // pushq        %r12
	BYTE $0x53  // pushq        %rbx
	LONG $0xc07e0f66  // movd         %xmm0, %eax
	WORD $0xc189  // movl         %eax, %ecx
	WORD $0xe9c1; BYTE $0x17  // shrl         $23, %ecx
	WORD $0xb60f; BYTE $0xd9  // movzbl       %cl, %ebx
	LONG $0x00fffb81; WORD $0x0000  // cmpl         $255, %ebx
	LONG $0x0cbc840f; WORD $0x0000  // je           LBB0_139, $3260(%rip)
	WORD $0x07c6; BYTE $0x2d  // movb         $45, (%rdi)
	WORD $0x8941; BYTE $0xc1  // movl         %eax, %r9d
	LONG $0x1fe9c141  // shrl         $31, %r9d
	LONG $0x0f048d4e  // leaq         (%rdi,%r9), %r8
	LONG $0xffffffa9; BYTE $0x7f  // testl        $2147483647, %eax
	LONG $0x01c6840f; WORD $0x0000  // je           LBB0_14, $454(%rip)
	LONG $0x7fffff25; BYTE $0x00  // andl         $8388607, %eax
	WORD $0xdb85  // testl        %ebx, %ebx
	LONG $0x0c9e840f; WORD $0x0000  // je           LBB0_140, $3230(%rip)
	LONG $0x0000b08d; WORD $0x0080  // leal         $8388608(%rax), %esi
	LONG $0x6abb8d44; WORD $0xffff; BYTE $0xff  // leal         $-150(%rbx), %r15d
	WORD $0x4b8d; BYTE $0x81  // leal         $-127(%rbx), %ecx
	WORD $0xf983; BYTE $0x17  // cmpl         $23, %ecx
	LONG $0x001b870f; WORD $0x0000  // ja           LBB0_5, $27(%rip)
	LONG $0x000096b9; BYTE $0x00  // movl         $150, %ecx
	WORD $0xd929  // subl         %ebx, %ecx
	LONG $0xffc2c748; WORD $0xffff; BYTE $0xff  // movq         $-1, %rdx
	WORD $0xd348; BYTE $0xe2  // shlq         %cl, %rdx
	WORD $0xd2f7  // notl         %edx
	WORD $0xf285  // testl        %esi, %edx
	LONG $0x0412840f; WORD $0x0000  // je           LBB0_32, $1042(%rip)
LBB0_5:
	WORD $0x8941; BYTE $0xf6  // movl         %esi, %r14d
	LONG $0x01e68341  // andl         $1, %r14d
	WORD $0xc085  // testl        %eax, %eax
	WORD $0x940f; BYTE $0xc0  // sete         %al
	WORD $0xfb83; BYTE $0x01  // cmpl         $1, %ebx
	WORD $0x970f; BYTE $0xc1  // seta         %cl
	WORD $0xc120  // andb         %al, %cl
	WORD $0xb60f; BYTE $0xc9  // movzbl       %cl, %ecx
	WORD $0x8941; BYTE $0xf2  // movl         %esi, %r10d
	LONG $0x02e2c141  // shll         $2, %r10d
	LONG $0xfeb1448d  // leal         $-2(%rcx,%rsi,4), %eax
	LONG $0x13df6945; WORD $0x1344; BYTE $0x00  // imull        $1262611, %r15d, %r11d
	WORD $0xd231  // xorl         %edx, %edx
	WORD $0xc984  // testb        %cl, %cl
	LONG $0x07feffb9; BYTE $0x00  // movl         $524031, %ecx
	WORD $0x440f; BYTE $0xca  // cmovel       %edx, %ecx
	WORD $0x2941; BYTE $0xcb  // subl         %ecx, %r11d
	LONG $0x16fbc141  // sarl         $22, %r11d
	LONG $0xb1cb6941; WORD $0xe56c; BYTE $0xff  // imull        $-1741647, %r11d, %ecx
	WORD $0xe9c1; BYTE $0x13  // shrl         $19, %ecx
	WORD $0x0144; BYTE $0xf9  // addl         %r15d, %ecx
	LONG $0x00001fba; BYTE $0x00  // movl         $31, %edx
	WORD $0x2944; BYTE $0xda  // subl         %r11d, %edx
	WORD $0x6348; BYTE $0xd2  // movslq       %edx, %rdx
	LONG $0xf61d8d48; WORD $0x000c; BYTE $0x00  // leaq         $3318(%rip), %rbx  /* _pow10_ceil_sig_f32.g+0(%rip) */
	WORD $0xc1fe  // incb         %cl
	WORD $0xe0d3  // shll         %cl, %eax
	LONG $0xd3248b4c  // movq         (%rbx,%rdx,8), %r12
	WORD $0xf749; BYTE $0xe4  // mulq         %r12
	LONG $0x20e8c148  // shrq         $32, %rax
	WORD $0xdb31  // xorl         %ebx, %ebx
	WORD $0xf883; BYTE $0x01  // cmpl         $1, %eax
	WORD $0x970f; BYTE $0xc3  // seta         %bl
	WORD $0xd341; BYTE $0xe2  // shll         %cl, %r10d
	WORD $0xd309  // orl          %edx, %ebx
	WORD $0x894c; BYTE $0xd0  // movq         %r10, %rax
	WORD $0xf749; BYTE $0xe4  // mulq         %r12
	WORD $0x8949; BYTE $0xd2  // movq         %rdx, %r10
	LONG $0x20e8c148  // shrq         $32, %rax
	WORD $0x3145; BYTE $0xff  // xorl         %r15d, %r15d
	WORD $0xf883; BYTE $0x01  // cmpl         $1, %eax
	LONG $0xc7970f41  // seta         %r15b
	LONG $0x02b5048d; WORD $0x0000; BYTE $0x00  // leal         $2(,%rsi,4), %eax
	WORD $0xe0d3  // shll         %cl, %eax
	WORD $0x0945; BYTE $0xd7  // orl          %r10d, %r15d
	WORD $0xf749; BYTE $0xe4  // mulq         %r12
	LONG $0x20e8c148  // shrq         $32, %rax
	WORD $0xc931  // xorl         %ecx, %ecx
	WORD $0xf883; BYTE $0x01  // cmpl         $1, %eax
	WORD $0x970f; BYTE $0xc1  // seta         %cl
	WORD $0xd109  // orl          %edx, %ecx
	WORD $0x0144; BYTE $0xf3  // addl         %r14d, %ebx
	WORD $0x2944; BYTE $0xf1  // subl         %r14d, %ecx
	LONG $0x28ff8341  // cmpl         $40, %r15d
	LONG $0x009a820f; WORD $0x0000  // jb           LBB0_12, $154(%rip)
	WORD $0x8944; BYTE $0xd2  // movl         %r10d, %edx
	LONG $0xcccccdb8; BYTE $0xcc  // movl         $3435973837, %eax
	LONG $0xc2af0f48  // imulq        %rdx, %rax
	LONG $0x25e8c148  // shrq         $37, %rax
	WORD $0x8941; BYTE $0xde  // movl         %ebx, %r14d
	QUAD $0x00000000c5348d48  // leaq         (,%rax,8), %rsi
	LONG $0xb6148d48  // leaq         (%rsi,%rsi,4), %rdx
	WORD $0x394c; BYTE $0xf2  // cmpq         %r14, %rdx
	LONG $0xc4930f41  // setae        %r12b
	LONG $0xb6748d4c; BYTE $0x28  // leaq         $40(%rsi,%rsi,4), %r14
	WORD $0xce89  // movl         %ecx, %esi
	WORD $0x3949; BYTE $0xf6  // cmpq         %rsi, %r14
	WORD $0x960f; BYTE $0xc2  // setbe        %dl
	WORD $0x3841; BYTE $0xd4  // cmpb         %dl, %r12b
	LONG $0x005e840f; WORD $0x0000  // je           LBB0_12, $94(%rip)
	WORD $0x3145; BYTE $0xed  // xorl         %r13d, %r13d
	WORD $0x3949; BYTE $0xf6  // cmpq         %rsi, %r14
	LONG $0xc5960f41  // setbe        %r13b
	WORD $0x0141; BYTE $0xc5  // addl         %eax, %r13d
	WORD $0xff41; BYTE $0xc3  // incl         %r11d
	LONG $0xa0fd8141; WORD $0x0186; BYTE $0x00  // cmpl         $100000, %r13d
	LONG $0x00b0830f; WORD $0x0000  // jae          LBB0_18, $176(%rip)
LBB0_8:
	LONG $0x000001b8; BYTE $0x00  // movl         $1, %eax
	LONG $0x0afd8341  // cmpl         $10, %r13d
	LONG $0x00d4820f; WORD $0x0000  // jb           LBB0_22, $212(%rip)
	LONG $0x000002b8; BYTE $0x00  // movl         $2, %eax
	LONG $0x64fd8341  // cmpl         $100, %r13d
	LONG $0x00c5820f; WORD $0x0000  // jb           LBB0_22, $197(%rip)
	LONG $0x000003b8; BYTE $0x00  // movl         $3, %eax
	LONG $0xe8fd8141; WORD $0x0003; BYTE $0x00  // cmpl         $1000, %r13d
	LONG $0x00b3820f; WORD $0x0000  // jb           LBB0_22, $179(%rip)
	LONG $0x10fd8141; WORD $0x0027; BYTE $0x00  // cmpl         $10000, %r13d
	LONG $0x000005b8; BYTE $0x00  // movl         $5, %eax
	LONG $0x00009fe9; BYTE $0x00  // jmp          LBB0_21, $159(%rip)
LBB0_12:
	WORD $0x894d; BYTE $0xd6  // movq         %r10, %r14
	LONG $0x02eec149  // shrq         $2, %r14
	WORD $0x8944; BYTE $0xd6  // movl         %r10d, %esi
	WORD $0xe683; BYTE $0xfc  // andl         $-4, %esi
	WORD $0xf339  // cmpl         %esi, %ebx
	WORD $0x960f; BYTE $0xc2  // setbe        %dl
	WORD $0x5e8d; BYTE $0x04  // leal         $4(%rsi), %ebx
	WORD $0xcb39  // cmpl         %ecx, %ebx
	WORD $0x960f; BYTE $0xc0  // setbe        %al
	WORD $0xc238  // cmpb         %al, %dl
	LONG $0x001d840f; WORD $0x0000  // je           LBB0_15, $29(%rip)
	WORD $0x3145; BYTE $0xed  // xorl         %r13d, %r13d
	WORD $0xcb39  // cmpl         %ecx, %ebx
	LONG $0xc5960f41  // setbe        %r13b
	LONG $0x00002fe9; BYTE $0x00  // jmp          LBB0_17, $47(%rip)
LBB0_14:
	LONG $0x3000c641  // movb         $48, (%r8)
	WORD $0x2941; BYTE $0xf8  // subl         %edi, %r8d
	WORD $0xff41; BYTE $0xc0  // incl         %r8d
	LONG $0x000ac0e9; BYTE $0x00  // jmp          LBB0_138, $2752(%rip)
LBB0_15:
	WORD $0xce83; BYTE $0x02  // orl          $2, %esi
	LONG $0x0001bd41; WORD $0x0000  // movl         $1, %r13d
	WORD $0x3941; BYTE $0xf7  // cmpl         %esi, %r15d
	LONG $0x000e870f; WORD $0x0000  // ja           LBB0_17, $14(%rip)
	WORD $0x940f; BYTE $0xc0  // sete         %al
	LONG $0x02eac041  // shrb         $2, %r10b
	WORD $0x2041; BYTE $0xc2  // andb         %al, %r10b
	LONG $0xeab60f45  // movzbl       %r10b, %r13d
LBB0_17:
	WORD $0x0145; BYTE $0xf5  // addl         %r14d, %r13d
	LONG $0xa0fd8141; WORD $0x0186; BYTE $0x00  // cmpl         $100000, %r13d
	LONG $0xff50820f; WORD $0xffff  // jb           LBB0_8, $-176(%rip)
LBB0_18:
	LONG $0x000006b8; BYTE $0x00  // movl         $6, %eax
	LONG $0x40fd8141; WORD $0x0f42; BYTE $0x00  // cmpl         $1000000, %r13d
	LONG $0x0021820f; WORD $0x0000  // jb           LBB0_22, $33(%rip)
	LONG $0x000007b8; BYTE $0x00  // movl         $7, %eax
	LONG $0x80fd8141; WORD $0x9896; BYTE $0x00  // cmpl         $10000000, %r13d
	LONG $0x000f820f; WORD $0x0000  // jb           LBB0_22, $15(%rip)
	LONG $0x00fd8141; WORD $0xf5e1; BYTE $0x05  // cmpl         $100000000, %r13d
	LONG $0x000009b8; BYTE $0x00  // movl         $9, %eax
LBB0_21:
	WORD $0xd883; BYTE $0x00  // sbbl         $0, %eax
LBB0_22:
	LONG $0x18148d46  // leal         (%rax,%r11), %r10d
	LONG $0x184c8d42; BYTE $0x05  // leal         $5(%rax,%r11), %ecx
	WORD $0xf983; BYTE $0x1b  // cmpl         $27, %ecx
	LONG $0x0077820f; WORD $0x0000  // jb           LBB0_26, $119(%rip)
	WORD $0xc089  // movl         %eax, %eax
	LONG $0x005c8d49; BYTE $0x01  // leaq         $1(%r8,%rax), %rbx
	LONG $0x10fd8141; WORD $0x0027; BYTE $0x00  // cmpl         $10000, %r13d
	LONG $0x00d9820f; WORD $0x0000  // jb           LBB0_30, $217(%rip)
	WORD $0x8944; BYTE $0xe8  // movl         %r13d, %eax
	LONG $0x1759be41; WORD $0xd1b7  // movl         $3518437209, %r14d
	LONG $0xf0af0f4c  // imulq        %rax, %r14
	LONG $0x2deec149  // shrq         $45, %r14
	LONG $0xf0c66941; WORD $0xffd8; BYTE $0xff  // imull        $-10000, %r14d, %eax
	WORD $0x0144; BYTE $0xe8  // addl         %r13d, %eax
	LONG $0x04a3840f; WORD $0x0000  // je           LBB0_62, $1187(%rip)
	WORD $0xc189  // movl         %eax, %ecx
	LONG $0x1fc96948; WORD $0xeb85; BYTE $0x51  // imulq        $1374389535, %rcx, %rcx
	LONG $0x25e9c148  // shrq         $37, %rcx
	WORD $0xd16b; BYTE $0x64  // imull        $100, %ecx, %edx
	WORD $0xd029  // subl         %edx, %eax
	LONG $0x2a158d48; WORD $0x000a; BYTE $0x00  // leaq         $2602(%rip), %rdx  /* _Digits+0(%rip) */
	LONG $0x4204b70f  // movzwl       (%rdx,%rax,2), %eax
	LONG $0xfe438966  // movw         %ax, $-2(%rbx)
	LONG $0x4a04b70f  // movzwl       (%rdx,%rcx,2), %eax
	LONG $0xfc438966  // movw         %ax, $-4(%rbx)
	WORD $0x3145; BYTE $0xc9  // xorl         %r9d, %r9d
	LONG $0xfc4b8d48  // leaq         $-4(%rbx), %rcx
	LONG $0x64fe8341  // cmpl         $100, %r14d
	LONG $0x0091830f; WORD $0x0000  // jae          LBB0_64, $145(%rip)
LBB0_31:
	WORD $0x8944; BYTE $0xf2  // movl         %r14d, %edx
	LONG $0x0000d4e9; BYTE $0x00  // jmp          LBB0_66, $212(%rip)
LBB0_26:
	WORD $0x8941; BYTE $0xc4  // movl         %eax, %r12d
	WORD $0x8545; BYTE $0xdb  // testl        %r11d, %r11d
	LONG $0x021d880f; WORD $0x0000  // js           LBB0_38, $541(%rip)
	LONG $0x20348d4b  // leaq         (%r8,%r12), %rsi
	LONG $0x10fd8141; WORD $0x0027; BYTE $0x00  // cmpl         $10000, %r13d
	LONG $0x02a8820f; WORD $0x0000  // jb           LBB0_43, $680(%rip)
	WORD $0x8944; BYTE $0xe8  // movl         %r13d, %eax
	LONG $0xb71759b9; BYTE $0xd1  // movl         $3518437209, %ecx
	LONG $0xc8af0f48  // imulq        %rax, %rcx
	LONG $0x2de9c148  // shrq         $45, %rcx
	LONG $0xd8f0c169; WORD $0xffff  // imull        $-10000, %ecx, %eax
	WORD $0x0144; BYTE $0xe8  // addl         %r13d, %eax
	LONG $0x1fd06948; WORD $0xeb85; BYTE $0x51  // imulq        $1374389535, %rax, %rdx
	LONG $0x25eac148  // shrq         $37, %rdx
	WORD $0xda6b; BYTE $0x64  // imull        $100, %edx, %ebx
	WORD $0xd829  // subl         %ebx, %eax
	LONG $0xb41d8d48; WORD $0x0009; BYTE $0x00  // leaq         $2484(%rip), %rbx  /* _Digits+0(%rip) */
	LONG $0x4304b70f  // movzwl       (%rbx,%rax,2), %eax
	LONG $0xfe468966  // movw         %ax, $-2(%rsi)
	LONG $0xfc468d48  // leaq         $-4(%rsi), %rax
	LONG $0x5314b70f  // movzwl       (%rbx,%rdx,2), %edx
	LONG $0xfc568966  // movw         %dx, $-4(%rsi)
	WORD $0x8941; BYTE $0xcd  // movl         %ecx, %r13d
	LONG $0x64fd8341  // cmpl         $100, %r13d
	LONG $0x0264830f; WORD $0x0000  // jae          LBB0_44, $612(%rip)
LBB0_29:
	WORD $0x8944; BYTE $0xe9  // movl         %r13d, %ecx
	LONG $0x00029ee9; BYTE $0x00  // jmp          LBB0_46, $670(%rip)
LBB0_30:
	WORD $0x3145; BYTE $0xc9  // xorl         %r9d, %r9d
	WORD $0x8948; BYTE $0xd9  // movq         %rbx, %rcx
	WORD $0x8945; BYTE $0xee  // movl         %r13d, %r14d
	LONG $0x64fe8341  // cmpl         $100, %r14d
	LONG $0xff6f820f; WORD $0xffff  // jb           LBB0_31, $-145(%rip)
LBB0_64:
	WORD $0xff48; BYTE $0xc9  // decq         %rcx
	LONG $0x6e1d8d4c; WORD $0x0009; BYTE $0x00  // leaq         $2414(%rip), %r11  /* _Digits+0(%rip) */
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090  // .p2align 4, 0x90
LBB0_65:
	WORD $0x8944; BYTE $0xf2  // movl         %r14d, %edx
	LONG $0x1fd26948; WORD $0xeb85; BYTE $0x51  // imulq        $1374389535, %rdx, %rdx
	LONG $0x25eac148  // shrq         $37, %rdx
	WORD $0xc26b; BYTE $0x64  // imull        $100, %edx, %eax
	WORD $0x8944; BYTE $0xf6  // movl         %r14d, %esi
	WORD $0xc629  // subl         %eax, %esi
	LONG $0x04b70f41; BYTE $0x73  // movzwl       (%r11,%rsi,2), %eax
	LONG $0xff418966  // movw         %ax, $-1(%rcx)
	LONG $0xfec18348  // addq         $-2, %rcx
	LONG $0x0ffe8141; WORD $0x0027; BYTE $0x00  // cmpl         $9999, %r14d
	WORD $0x8941; BYTE $0xd6  // movl         %edx, %r14d
	LONG $0xffcd870f; WORD $0xffff  // ja           LBB0_65, $-51(%rip)
LBB0_66:
	LONG $0x01708d49  // leaq         $1(%r8), %rsi
	WORD $0xfa83; BYTE $0x0a  // cmpl         $10, %edx
	LONG $0x001d820f; WORD $0x0000  // jb           LBB0_68, $29(%rip)
	WORD $0xd089  // movl         %edx, %eax
	LONG $0x170d8d48; WORD $0x0009; BYTE $0x00  // leaq         $2327(%rip), %rcx  /* _Digits+0(%rip) */
	WORD $0x148a; BYTE $0x41  // movb         (%rcx,%rax,2), %dl
	LONG $0x0141448a  // movb         $1(%rcx,%rax,2), %al
	LONG $0x01508841  // movb         %dl, $1(%r8)
	LONG $0x02408841  // movb         %al, $2(%r8)
	LONG $0x000005e9; BYTE $0x00  // jmp          LBB0_69, $5(%rip)
LBB0_68:
	WORD $0xc280; BYTE $0x30  // addb         $48, %dl
	WORD $0x1688  // movb         %dl, (%rsi)
LBB0_69:
	WORD $0x294c; BYTE $0xcb  // subq         %r9, %rbx
	QUAD $0x9090909090909090; WORD $0x9090; BYTE $0x90  // .p2align 4, 0x90
LBB0_70:
	LONG $0x30ff7b80  // cmpb         $48, $-1(%rbx)
	LONG $0xff5b8d48  // leaq         $-1(%rbx), %rbx
	LONG $0xfff2840f; WORD $0xffff  // je           LBB0_70, $-14(%rip)
	WORD $0x8841; BYTE $0x10  // movb         %dl, (%r8)
	LONG $0x01438d48  // leaq         $1(%rbx), %rax
	WORD $0x8948; BYTE $0xc1  // movq         %rax, %rcx
	WORD $0x2948; BYTE $0xf1  // subq         %rsi, %rcx
	LONG $0x02f98348  // cmpq         $2, %rcx
	LONG $0x00068c0f; WORD $0x0000  // jl           LBB0_73, $6(%rip)
	WORD $0x06c6; BYTE $0x2e  // movb         $46, (%rsi)
	WORD $0x8948; BYTE $0xc3  // movq         %rax, %rbx
LBB0_73:
	WORD $0x03c6; BYTE $0x65  // movb         $101, (%rbx)
	WORD $0x8545; BYTE $0xd2  // testl        %r10d, %r10d
	LONG $0x01428e0f; WORD $0x0000  // jle          LBB0_76, $322(%rip)
	WORD $0xff41; BYTE $0xca  // decl         %r10d
	LONG $0x2b0143c6  // movb         $43, $1(%rbx)
	WORD $0x8944; BYTE $0xd0  // movl         %r10d, %eax
	WORD $0xf883; BYTE $0x64  // cmpl         $100, %eax
	LONG $0x01448c0f; WORD $0x0000  // jl           LBB0_77, $324(%rip)
LBB0_75:
	WORD $0xc189  // movl         %eax, %ecx
	LONG $0xcccccdba; BYTE $0xcc  // movl         $3435973837, %edx
	LONG $0xd1af0f48  // imulq        %rcx, %rdx
	LONG $0x23eac148  // shrq         $35, %rdx
	WORD $0x0c8d; BYTE $0x12  // leal         (%rdx,%rdx), %ecx
	WORD $0x0c8d; BYTE $0x89  // leal         (%rcx,%rcx,4), %ecx
	WORD $0xc829  // subl         %ecx, %eax
	LONG $0x880d8d48; WORD $0x0008; BYTE $0x00  // leaq         $2184(%rip), %rcx  /* _Digits+0(%rip) */
	LONG $0x510cb70f  // movzwl       (%rcx,%rdx,2), %ecx
	LONG $0x024b8966  // movw         %cx, $2(%rbx)
	WORD $0x300c  // orb          $48, %al
	WORD $0x4388; BYTE $0x04  // movb         %al, $4(%rbx)
	LONG $0x05c38348  // addq         $5, %rbx
	WORD $0x8949; BYTE $0xd8  // movq         %rbx, %r8
	LONG $0x00083fe9; BYTE $0x00  // jmp          LBB0_137, $2111(%rip)
LBB0_32:
	WORD $0xeed3  // shrl         %cl, %esi
	LONG $0x86a0fe81; WORD $0x0001  // cmpl         $100000, %esi
	LONG $0x0217820f; WORD $0x0000  // jb           LBB0_52, $535(%rip)
	LONG $0x000006b8; BYTE $0x00  // movl         $6, %eax
	LONG $0x4240fe81; WORD $0x000f  // cmpl         $1000000, %esi
	LONG $0x0020820f; WORD $0x0000  // jb           LBB0_36, $32(%rip)
	LONG $0x000007b8; BYTE $0x00  // movl         $7, %eax
	LONG $0x9680fe81; WORD $0x0098  // cmpl         $10000000, %esi
	LONG $0x000f820f; WORD $0x0000  // jb           LBB0_36, $15(%rip)
	LONG $0xe100fe81; WORD $0x05f5  // cmpl         $100000000, %esi
	LONG $0x000009b8; BYTE $0x00  // movl         $9, %eax
	LONG $0x00d88348  // sbbq         $0, %rax
LBB0_36:
	WORD $0x014c; BYTE $0xc0  // addq         %r8, %rax
LBB0_37:
	WORD $0xf189  // movl         %esi, %ecx
	LONG $0xb71759ba; BYTE $0xd1  // movl         $3518437209, %edx
	LONG $0xd1af0f48  // imulq        %rcx, %rdx
	LONG $0x2deac148  // shrq         $45, %rdx
	LONG $0xd8f0ca69; WORD $0xffff  // imull        $-10000, %edx, %ecx
	WORD $0xf101  // addl         %esi, %ecx
	LONG $0x1ff16948; WORD $0xeb85; BYTE $0x51  // imulq        $1374389535, %rcx, %rsi
	LONG $0x25eec148  // shrq         $37, %rsi
	WORD $0xde6b; BYTE $0x64  // imull        $100, %esi, %ebx
	WORD $0xd929  // subl         %ebx, %ecx
	LONG $0xff1d8d48; WORD $0x0007; BYTE $0x00  // leaq         $2047(%rip), %rbx  /* _Digits+0(%rip) */
	LONG $0x4b0cb70f  // movzwl       (%rbx,%rcx,2), %ecx
	LONG $0xfe488966  // movw         %cx, $-2(%rax)
	LONG $0x730cb70f  // movzwl       (%rbx,%rsi,2), %ecx
	LONG $0xfc488966  // movw         %cx, $-4(%rax)
	WORD $0x8949; BYTE $0xc1  // movq         %rax, %r9
	LONG $0xfcc08348  // addq         $-4, %rax
	WORD $0xd689  // movl         %edx, %esi
	WORD $0xfe83; BYTE $0x64  // cmpl         $100, %esi
	LONG $0x01d2830f; WORD $0x0000  // jae          LBB0_56, $466(%rip)
	LONG $0x000207e9; BYTE $0x00  // jmp          LBB0_58, $519(%rip)
LBB0_38:
	WORD $0x8545; BYTE $0xd2  // testl        %r10d, %r10d
	LONG $0x04708f0f; WORD $0x0000  // jg           LBB0_98, $1136(%rip)
	LONG $0x00c74166; WORD $0x2e30  // movw         $11824, (%r8)
	LONG $0x02c08349  // addq         $2, %r8
	WORD $0x8545; BYTE $0xd2  // testl        %r10d, %r10d
	LONG $0x045d890f; WORD $0x0000  // jns          LBB0_98, $1117(%rip)
	WORD $0xf631  // xorl         %esi, %esi
	LONG $0xe0fa8341  // cmpl         $-32, %r10d
	LONG $0x0433870f; WORD $0x0000  // ja           LBB0_96, $1075(%rip)
	WORD $0x8945; BYTE $0xd3  // movl         %r10d, %r11d
	WORD $0xf741; BYTE $0xd3  // notl         %r11d
	WORD $0xff49; BYTE $0xc3  // incq         %r11
	WORD $0x894c; BYTE $0xde  // movq         %r11, %rsi
	LONG $0xe0e68348  // andq         $-32, %rsi
	LONG $0xe04e8d48  // leaq         $-32(%rsi), %rcx
	WORD $0x8948; BYTE $0xc8  // movq         %rcx, %rax
	LONG $0x05e8c148  // shrq         $5, %rax
	WORD $0xff48; BYTE $0xc0  // incq         %rax
	WORD $0x8941; BYTE $0xc6  // movl         %eax, %r14d
	LONG $0x07e68341  // andl         $7, %r14d
	LONG $0xe0f98148; WORD $0x0000; BYTE $0x00  // cmpq         $224, %rcx
	LONG $0x0327830f; WORD $0x0000  // jae          LBB0_90, $807(%rip)
	WORD $0xc031  // xorl         %eax, %eax
	LONG $0x0003bce9; BYTE $0x00  // jmp          LBB0_92, $956(%rip)
LBB0_76:
	LONG $0x2d0143c6  // movb         $45, $1(%rbx)
	LONG $0x000001b8; BYTE $0x00  // movl         $1, %eax
	WORD $0x2944; BYTE $0xd0  // subl         %r10d, %eax
	WORD $0xf883; BYTE $0x64  // cmpl         $100, %eax
	LONG $0xfebc8d0f; WORD $0xffff  // jge          LBB0_75, $-324(%rip)
LBB0_77:
	WORD $0xf883; BYTE $0x0a  // cmpl         $10, %eax
	LONG $0x00fe8c0f; WORD $0x0000  // jl           LBB0_79, $254(%rip)
	WORD $0x9848  // cltq         
	LONG $0x500d8d48; WORD $0x0007; BYTE $0x00  // leaq         $1872(%rip), %rcx  /* _Digits+0(%rip) */
	LONG $0x4104b70f  // movzwl       (%rcx,%rax,2), %eax
	LONG $0x02438966  // movw         %ax, $2(%rbx)
	LONG $0x04c38348  // addq         $4, %rbx
	WORD $0x8949; BYTE $0xd8  // movq         %rbx, %r8
	LONG $0x00070ce9; BYTE $0x00  // jmp          LBB0_137, $1804(%rip)
LBB0_43:
	WORD $0x8948; BYTE $0xf0  // movq         %rsi, %rax
	LONG $0x64fd8341  // cmpl         $100, %r13d
	LONG $0xfd9c820f; WORD $0xffff  // jb           LBB0_29, $-612(%rip)
LBB0_44:
	WORD $0xff48; BYTE $0xc8  // decq         %rax
	LONG $0x251d8d4c; WORD $0x0007; BYTE $0x00  // leaq         $1829(%rip), %r11  /* _Digits+0(%rip) */
	LONG $0x90909090; BYTE $0x90  // .p2align 4, 0x90
LBB0_45:
	WORD $0x8944; BYTE $0xe9  // movl         %r13d, %ecx
	LONG $0x1fc96948; WORD $0xeb85; BYTE $0x51  // imulq        $1374389535, %rcx, %rcx
	LONG $0x25e9c148  // shrq         $37, %rcx
	WORD $0xd96b; BYTE $0x64  // imull        $100, %ecx, %ebx
	WORD $0x8944; BYTE $0xea  // movl         %r13d, %edx
	WORD $0xda29  // subl         %ebx, %edx
	LONG $0x14b70f41; BYTE $0x53  // movzwl       (%r11,%rdx,2), %edx
	LONG $0xff508966  // movw         %dx, $-1(%rax)
	LONG $0xfec08348  // addq         $-2, %rax
	LONG $0x0ffd8141; WORD $0x0027; BYTE $0x00  // cmpl         $9999, %r13d
	WORD $0x8941; BYTE $0xcd  // movl         %ecx, %r13d
	LONG $0xffcd870f; WORD $0xffff  // ja           LBB0_45, $-51(%rip)
LBB0_46:
	WORD $0x6349; BYTE $0xc2  // movslq       %r10d, %rax
	WORD $0xf983; BYTE $0x0a  // cmpl         $10, %ecx
	LONG $0x0022820f; WORD $0x0000  // jb           LBB0_48, $34(%rip)
	WORD $0xc989  // movl         %ecx, %ecx
	LONG $0xd8158d48; WORD $0x0006; BYTE $0x00  // leaq         $1752(%rip), %rdx  /* _Digits+0(%rip) */
	LONG $0x4a0cb70f  // movzwl       (%rdx,%rcx,2), %ecx
	LONG $0x08894166  // movw         %cx, (%r8)
	WORD $0x0149; BYTE $0xc0  // addq         %rax, %r8
	WORD $0x3949; BYTE $0xc4  // cmpq         %rax, %r12
	LONG $0x00178c0f; WORD $0x0000  // jl           LBB0_49, $23(%rip)
	LONG $0x00068fe9; BYTE $0x00  // jmp          LBB0_137, $1679(%rip)
LBB0_48:
	WORD $0xc180; BYTE $0x30  // addb         $48, %cl
	WORD $0x8841; BYTE $0x08  // movb         %cl, (%r8)
	WORD $0x0149; BYTE $0xc0  // addq         %rax, %r8
	WORD $0x3949; BYTE $0xc4  // cmpq         %rax, %r12
	LONG $0x067d8d0f; WORD $0x0000  // jge          LBB0_137, $1661(%rip)
LBB0_49:
	LONG $0x21048d4b  // leaq         (%r9,%r12), %rax
	LONG $0x075c8d4c; BYTE $0x01  // leaq         $1(%rdi,%rax), %r11
	WORD $0x394d; BYTE $0xc3  // cmpq         %r8, %r11
	LONG $0xd8460f4d  // cmovbeq      %r8, %r11
	LONG $0x0f0c8d4a  // leaq         (%rdi,%r9), %rcx
	WORD $0x014c; BYTE $0xe1  // addq         %r12, %rcx
	WORD $0x2949; BYTE $0xcb  // subq         %rcx, %r11
	LONG $0x20fb8349  // cmpq         $32, %r11
	LONG $0x01f9820f; WORD $0x0000  // jb           LBB0_87, $505(%rip)
	WORD $0x894d; BYTE $0xda  // movq         %r11, %r10
	LONG $0xe0e28349  // andq         $-32, %r10
	LONG $0xe04a8d49  // leaq         $-32(%r10), %rcx
	WORD $0x8948; BYTE $0xcb  // movq         %rcx, %rbx
	LONG $0x05ebc148  // shrq         $5, %rbx
	WORD $0xff48; BYTE $0xc3  // incq         %rbx
	WORD $0xda89  // movl         %ebx, %edx
	WORD $0xe283; BYTE $0x07  // andl         $7, %edx
	LONG $0xe0f98148; WORD $0x0000; BYTE $0x00  // cmpq         $224, %rcx
	LONG $0x00db830f; WORD $0x0000  // jae          LBB0_80, $219(%rip)
	WORD $0xc031  // xorl         %eax, %eax
	LONG $0x00016fe9; BYTE $0x00  // jmp          LBB0_82, $367(%rip)
LBB0_79:
	WORD $0x3004  // addb         $48, %al
	WORD $0x4388; BYTE $0x02  // movb         %al, $2(%rbx)
	LONG $0x03c38348  // addq         $3, %rbx
	WORD $0x8949; BYTE $0xd8  // movq         %rbx, %r8
	LONG $0x00061ae9; BYTE $0x00  // jmp          LBB0_137, $1562(%rip)
LBB0_52:
	LONG $0x0001b941; WORD $0x0000  // movl         $1, %r9d
	WORD $0xfe83; BYTE $0x0a  // cmpl         $10, %esi
	LONG $0x0021820f; WORD $0x0000  // jb           LBB0_55, $33(%rip)
	LONG $0x0002b941; WORD $0x0000  // movl         $2, %r9d
	WORD $0xfe83; BYTE $0x64  // cmpl         $100, %esi
	LONG $0x0012820f; WORD $0x0000  // jb           LBB0_55, $18(%rip)
	LONG $0x0003b941; WORD $0x0000  // movl         $3, %r9d
	LONG $0x03e8fe81; WORD $0x0000  // cmpl         $1000, %esi
	LONG $0x019e830f; WORD $0x0000  // jae          LBB0_88, $414(%rip)
LBB0_55:
	WORD $0x014d; BYTE $0xc1  // addq         %r8, %r9
	WORD $0x894c; BYTE $0xc8  // movq         %r9, %rax
	WORD $0xfe83; BYTE $0x64  // cmpl         $100, %esi
	LONG $0x003a820f; WORD $0x0000  // jb           LBB0_58, $58(%rip)
LBB0_56:
	WORD $0xff48; BYTE $0xc8  // decq         %rax
	LONG $0x01158d4c; WORD $0x0006; BYTE $0x00  // leaq         $1537(%rip), %r10  /* _Digits+0(%rip) */
	BYTE $0x90  // .p2align 4, 0x90
LBB0_57:
	WORD $0xf389  // movl         %esi, %ebx
	WORD $0xf689  // movl         %esi, %esi
	LONG $0x1ff66948; WORD $0xeb85; BYTE $0x51  // imulq        $1374389535, %rsi, %rsi
	LONG $0x25eec148  // shrq         $37, %rsi
	WORD $0xce6b; BYTE $0x64  // imull        $100, %esi, %ecx
	WORD $0xda89  // movl         %ebx, %edx
	WORD $0xca29  // subl         %ecx, %edx
	LONG $0x0cb70f41; BYTE $0x52  // movzwl       (%r10,%rdx,2), %ecx
	LONG $0xff488966  // movw         %cx, $-1(%rax)
	LONG $0xfec08348  // addq         $-2, %rax
	LONG $0x270ffb81; WORD $0x0000  // cmpl         $9999, %ebx
	LONG $0xffd1870f; WORD $0xffff  // ja           LBB0_57, $-47(%rip)
LBB0_58:
	WORD $0xfe83; BYTE $0x0a  // cmpl         $10, %esi
	LONG $0x0016820f; WORD $0x0000  // jb           LBB0_60, $22(%rip)
	WORD $0xf089  // movl         %esi, %eax
	LONG $0xbf0d8d48; WORD $0x0005; BYTE $0x00  // leaq         $1471(%rip), %rcx  /* _Digits+0(%rip) */
	LONG $0x4104b70f  // movzwl       (%rcx,%rax,2), %eax
	LONG $0x00894166  // movw         %ax, (%r8)
	LONG $0x000007e9; BYTE $0x00  // jmp          LBB0_61, $7(%rip)
LBB0_60:
	LONG $0x30c68040  // addb         $48, %sil
	WORD $0x8841; BYTE $0x30  // movb         %sil, (%r8)
LBB0_61:
	WORD $0x2941; BYTE $0xf9  // subl         %edi, %r9d
	WORD $0x8945; BYTE $0xc8  // movl         %r9d, %r8d
	LONG $0x000573e9; BYTE $0x00  // jmp          LBB0_138, $1395(%rip)
LBB0_62:
	LONG $0x0004b941; WORD $0x0000  // movl         $4, %r9d
	LONG $0xfc4b8d48  // leaq         $-4(%rbx), %rcx
	LONG $0x64fe8341  // cmpl         $100, %r14d
	LONG $0xfb83820f; WORD $0xffff  // jb           LBB0_31, $-1149(%rip)
	LONG $0xfffc0fe9; BYTE $0xff  // jmp          LBB0_64, $-1009(%rip)
LBB0_80:
	WORD $0x2948; BYTE $0xd3  // subq         %rdx, %rbx
	QUAD $0x000000f0078c8d48  // leaq         $240(%rdi,%rax), %rcx
	WORD $0xc031  // xorl         %eax, %eax
	QUAD $0xfffff862056f0ff3  // movdqu       $-1950(%rip), %xmm0  /* LCPI0_0+0(%rip) */
	WORD $0x9090  // .p2align 4, 0x90
LBB0_81:
	QUAD $0xffff1001847f0ff3; BYTE $0xff  // movdqu       %xmm0, $-240(%rcx,%rax)
	QUAD $0xffff2001847f0ff3; BYTE $0xff  // movdqu       %xmm0, $-224(%rcx,%rax)
	QUAD $0xffff3001847f0ff3; BYTE $0xff  // movdqu       %xmm0, $-208(%rcx,%rax)
	QUAD $0xffff4001847f0ff3; BYTE $0xff  // movdqu       %xmm0, $-192(%rcx,%rax)
	QUAD $0xffff5001847f0ff3; BYTE $0xff  // movdqu       %xmm0, $-176(%rcx,%rax)
	QUAD $0xffff6001847f0ff3; BYTE $0xff  // movdqu       %xmm0, $-160(%rcx,%rax)
	QUAD $0xffff7001847f0ff3; BYTE $0xff  // movdqu       %xmm0, $-144(%rcx,%rax)
	LONG $0x447f0ff3; WORD $0x8001  // movdqu       %xmm0, $-128(%rcx,%rax)
	LONG $0x447f0ff3; WORD $0x9001  // movdqu       %xmm0, $-112(%rcx,%rax)
	LONG $0x447f0ff3; WORD $0xa001  // movdqu       %xmm0, $-96(%rcx,%rax)
	LONG $0x447f0ff3; WORD $0xb001  // movdqu       %xmm0, $-80(%rcx,%rax)
	LONG $0x447f0ff3; WORD $0xc001  // movdqu       %xmm0, $-64(%rcx,%rax)
	LONG $0x447f0ff3; WORD $0xd001  // movdqu       %xmm0, $-48(%rcx,%rax)
	LONG $0x447f0ff3; WORD $0xe001  // movdqu       %xmm0, $-32(%rcx,%rax)
	LONG $0x447f0ff3; WORD $0xf001  // movdqu       %xmm0, $-16(%rcx,%rax)
	LONG $0x047f0ff3; BYTE $0x01  // movdqu       %xmm0, (%rcx,%rax)
	LONG $0x01000548; WORD $0x0000  // addq         $256, %rax
	LONG $0xf8c38348  // addq         $-8, %rbx
	LONG $0xff7c850f; WORD $0xffff  // jne          LBB0_81, $-132(%rip)
LBB0_82:
	WORD $0x8548; BYTE $0xd2  // testq        %rdx, %rdx
	LONG $0x0039840f; WORD $0x0000  // je           LBB0_85, $57(%rip)
	WORD $0x014c; BYTE $0xc8  // addq         %r9, %rax
	WORD $0x014c; BYTE $0xe0  // addq         %r12, %rax
	LONG $0x07448d48; BYTE $0x10  // leaq         $16(%rdi,%rax), %rax
	WORD $0xf748; BYTE $0xda  // negq         %rdx
	QUAD $0xfffff7bd056f0ff3  // movdqu       $-2115(%rip), %xmm0  /* LCPI0_0+0(%rip) */
	QUAD $0x9090909090909090; LONG $0x90909090; BYTE $0x90  // .p2align 4, 0x90
LBB0_84:
	LONG $0x407f0ff3; BYTE $0xf0  // movdqu       %xmm0, $-16(%rax)
	LONG $0x007f0ff3  // movdqu       %xmm0, (%rax)
	LONG $0x20c08348  // addq         $32, %rax
	WORD $0xff48; BYTE $0xc2  // incq         %rdx
	LONG $0xffea850f; WORD $0xffff  // jne          LBB0_84, $-22(%rip)
LBB0_85:
	WORD $0x394d; BYTE $0xda  // cmpq         %r11, %r10
	LONG $0x0471840f; WORD $0x0000  // je           LBB0_137, $1137(%rip)
	WORD $0x014c; BYTE $0xd6  // addq         %r10, %rsi
	QUAD $0x9090909090909090; LONG $0x90909090; WORD $0x9090  // .p2align 4, 0x90
LBB0_87:
	WORD $0x06c6; BYTE $0x30  // movb         $48, (%rsi)
	WORD $0xff48; BYTE $0xc6  // incq         %rsi
	WORD $0x394c; BYTE $0xc6  // cmpq         %r8, %rsi
	LONG $0xfff1820f; WORD $0xffff  // jb           LBB0_87, $-15(%rip)
	LONG $0x00044ce9; BYTE $0x00  // jmp          LBB0_137, $1100(%rip)
LBB0_88:
	LONG $0x2710fe81; WORD $0x0000  // cmpl         $10000, %esi
	WORD $0x894c; BYTE $0xc0  // movq         %r8, %rax
	LONG $0x00d88348  // sbbq         $0, %rax
	LONG $0x05c08348  // addq         $5, %rax
	LONG $0x2710fe81; WORD $0x0000  // cmpl         $10000, %esi
	LONG $0xfc32830f; WORD $0xffff  // jae          LBB0_37, $-974(%rip)
	WORD $0x8949; BYTE $0xc1  // movq         %rax, %r9
	LONG $0xfffe4ce9; BYTE $0xff  // jmp          LBB0_56, $-436(%rip)
LBB0_90:
	QUAD $0x000000f2399c8d49  // leaq         $242(%r9,%rdi), %rbx
	WORD $0x894d; BYTE $0xf7  // movq         %r14, %r15
	WORD $0x2949; BYTE $0xc7  // subq         %rax, %r15
	WORD $0xc031  // xorl         %eax, %eax
	QUAD $0xfffff72f056f0ff3  // movdqu       $-2257(%rip), %xmm0  /* LCPI0_0+0(%rip) */
LBB0_91:
	QUAD $0xffff1003847f0ff3; BYTE $0xff  // movdqu       %xmm0, $-240(%rbx,%rax)
	QUAD $0xffff2003847f0ff3; BYTE $0xff  // movdqu       %xmm0, $-224(%rbx,%rax)
	QUAD $0xffff3003847f0ff3; BYTE $0xff  // movdqu       %xmm0, $-208(%rbx,%rax)
	QUAD $0xffff4003847f0ff3; BYTE $0xff  // movdqu       %xmm0, $-192(%rbx,%rax)
	QUAD $0xffff5003847f0ff3; BYTE $0xff  // movdqu       %xmm0, $-176(%rbx,%rax)
	QUAD $0xffff6003847f0ff3; BYTE $0xff  // movdqu       %xmm0, $-160(%rbx,%rax)
	QUAD $0xffff7003847f0ff3; BYTE $0xff  // movdqu       %xmm0, $-144(%rbx,%rax)
	LONG $0x447f0ff3; WORD $0x8003  // movdqu       %xmm0, $-128(%rbx,%rax)
	LONG $0x447f0ff3; WORD $0x9003  // movdqu       %xmm0, $-112(%rbx,%rax)
	LONG $0x447f0ff3; WORD $0xa003  // movdqu       %xmm0, $-96(%rbx,%rax)
	LONG $0x447f0ff3; WORD $0xb003  // movdqu       %xmm0, $-80(%rbx,%rax)
	LONG $0x447f0ff3; WORD $0xc003  // movdqu       %xmm0, $-64(%rbx,%rax)
	LONG $0x447f0ff3; WORD $0xd003  // movdqu       %xmm0, $-48(%rbx,%rax)
	LONG $0x447f0ff3; WORD $0xe003  // movdqu       %xmm0, $-32(%rbx,%rax)
	LONG $0x447f0ff3; WORD $0xf003  // movdqu       %xmm0, $-16(%rbx,%rax)
	LONG $0x047f0ff3; BYTE $0x03  // movdqu       %xmm0, (%rbx,%rax)
	LONG $0x01000548; WORD $0x0000  // addq         $256, %rax
	LONG $0x08c78349  // addq         $8, %r15
	LONG $0xff7c850f; WORD $0xffff  // jne          LBB0_91, $-132(%rip)
LBB0_92:
	WORD $0x854d; BYTE $0xf6  // testq        %r14, %r14
	LONG $0x0029840f; WORD $0x0000  // je           LBB0_95, $41(%rip)
	WORD $0x014c; BYTE $0xc8  // addq         %r9, %rax
	LONG $0x07448d48; BYTE $0x12  // leaq         $18(%rdi,%rax), %rax
	WORD $0xf749; BYTE $0xde  // negq         %r14
	QUAD $0xfffff68f056f0ff3  // movdqu       $-2417(%rip), %xmm0  /* LCPI0_0+0(%rip) */
LBB0_94:
	LONG $0x407f0ff3; BYTE $0xf0  // movdqu       %xmm0, $-16(%rax)
	LONG $0x007f0ff3  // movdqu       %xmm0, (%rax)
	LONG $0x20c08348  // addq         $32, %rax
	WORD $0xff49; BYTE $0xc6  // incq         %r14
	LONG $0xffea850f; WORD $0xffff  // jne          LBB0_94, $-22(%rip)
LBB0_95:
	WORD $0x0149; BYTE $0xf0  // addq         %rsi, %r8
	WORD $0x3949; BYTE $0xf3  // cmpq         %rsi, %r11
	LONG $0x001e840f; WORD $0x0000  // je           LBB0_98, $30(%rip)
LBB0_96:
	WORD $0x8944; BYTE $0xd0  // movl         %r10d, %eax
	WORD $0xd8f7  // negl         %eax
	QUAD $0x9090909090909090  // .p2align 4, 0x90
LBB0_97:
	LONG $0x3000c641  // movb         $48, (%r8)
	WORD $0xff49; BYTE $0xc0  // incq         %r8
	WORD $0xc6ff  // incl         %esi
	WORD $0xc639  // cmpl         %eax, %esi
	LONG $0xffef8c0f; WORD $0xffff  // jl           LBB0_97, $-17(%rip)
LBB0_98:
	LONG $0x20048d4b  // leaq         (%r8,%r12), %rax
	LONG $0x10fd8141; WORD $0x0027; BYTE $0x00  // cmpl         $10000, %r13d
	LONG $0x0063820f; WORD $0x0000  // jb           LBB0_101, $99(%rip)
	WORD $0x8944; BYTE $0xe9  // movl         %r13d, %ecx
	LONG $0x1759bb41; WORD $0xd1b7  // movl         $3518437209, %r11d
	LONG $0xd9af0f4c  // imulq        %rcx, %r11
	LONG $0x2debc149  // shrq         $45, %r11
	LONG $0xf0cb6941; WORD $0xffd8; BYTE $0xff  // imull        $-10000, %r11d, %ecx
	WORD $0x0144; BYTE $0xe9  // addl         %r13d, %ecx
	LONG $0x0187840f; WORD $0x0000  // je           LBB0_103, $391(%rip)
	WORD $0xca89  // movl         %ecx, %edx
	LONG $0x1fd26948; WORD $0xeb85; BYTE $0x51  // imulq        $1374389535, %rdx, %rdx
	LONG $0x25eac148  // shrq         $37, %rdx
	WORD $0xda6b; BYTE $0x64  // imull        $100, %edx, %ebx
	WORD $0xd929  // subl         %ebx, %ecx
	LONG $0x141d8d48; WORD $0x0003; BYTE $0x00  // leaq         $788(%rip), %rbx  /* _Digits+0(%rip) */
	LONG $0x4b0cb70f  // movzwl       (%rbx,%rcx,2), %ecx
	LONG $0xfe488966  // movw         %cx, $-2(%rax)
	LONG $0x530cb70f  // movzwl       (%rbx,%rdx,2), %ecx
	LONG $0xfc488966  // movw         %cx, $-4(%rax)
	WORD $0x3145; BYTE $0xc9  // xorl         %r9d, %r9d
	LONG $0xfcc08348  // addq         $-4, %rax
	LONG $0x64fb8341  // cmpl         $100, %r11d
	LONG $0x0018830f; WORD $0x0000  // jae          LBB0_105, $24(%rip)
LBB0_102:
	WORD $0x8944; BYTE $0xd9  // movl         %r11d, %ecx
	LONG $0x00004de9; BYTE $0x00  // jmp          LBB0_107, $77(%rip)
LBB0_101:
	WORD $0x3145; BYTE $0xc9  // xorl         %r9d, %r9d
	WORD $0x8945; BYTE $0xeb  // movl         %r13d, %r11d
	LONG $0x64fb8341  // cmpl         $100, %r11d
	LONG $0xffe8820f; WORD $0xffff  // jb           LBB0_102, $-24(%rip)
LBB0_105:
	WORD $0xff48; BYTE $0xc8  // decq         %rax
	LONG $0xd1158d48; WORD $0x0002; BYTE $0x00  // leaq         $721(%rip), %rdx  /* _Digits+0(%rip) */
	BYTE $0x90  // .p2align 4, 0x90
LBB0_106:
	WORD $0x8944; BYTE $0xd9  // movl         %r11d, %ecx
	LONG $0x1fc96948; WORD $0xeb85; BYTE $0x51  // imulq        $1374389535, %rcx, %rcx
	LONG $0x25e9c148  // shrq         $37, %rcx
	WORD $0xd96b; BYTE $0x64  // imull        $100, %ecx, %ebx
	WORD $0x8944; BYTE $0xde  // movl         %r11d, %esi
	WORD $0xde29  // subl         %ebx, %esi
	LONG $0x7234b70f  // movzwl       (%rdx,%rsi,2), %esi
	LONG $0xff708966  // movw         %si, $-1(%rax)
	LONG $0xfec08348  // addq         $-2, %rax
	LONG $0x0ffb8141; WORD $0x0027; BYTE $0x00  // cmpl         $9999, %r11d
	WORD $0x8941; BYTE $0xcb  // movl         %ecx, %r11d
	LONG $0xffce870f; WORD $0xffff  // ja           LBB0_106, $-50(%rip)
LBB0_107:
	WORD $0xf983; BYTE $0x0a  // cmpl         $10, %ecx
	LONG $0x0016820f; WORD $0x0000  // jb           LBB0_109, $22(%rip)
	WORD $0xc889  // movl         %ecx, %eax
	LONG $0x8c0d8d48; WORD $0x0002; BYTE $0x00  // leaq         $652(%rip), %rcx  /* _Digits+0(%rip) */
	LONG $0x4104b70f  // movzwl       (%rcx,%rax,2), %eax
	LONG $0x00894166  // movw         %ax, (%r8)
	LONG $0x000006e9; BYTE $0x00  // jmp          LBB0_110, $6(%rip)
LBB0_109:
	WORD $0xc180; BYTE $0x30  // addb         $48, %cl
	WORD $0x8841; BYTE $0x08  // movb         %cl, (%r8)
LBB0_110:
	WORD $0x294d; BYTE $0xcc  // subq         %r9, %r12
	LONG $0x24748d49; BYTE $0x01  // leaq         $1(%r12), %rsi
	LONG $0x24548d49; BYTE $0x11  // leaq         $17(%r12), %rdx
	LONG $0x24448d49; BYTE $0x02  // leaq         $2(%r12), %rax
	LONG $0x90909090; WORD $0x9090; BYTE $0x90  // .p2align 4, 0x90
LBB0_111:
	WORD $0xff48; BYTE $0xca  // decq         %rdx
	WORD $0xff48; BYTE $0xce  // decq         %rsi
	WORD $0xff48; BYTE $0xc8  // decq         %rax
	LONG $0x207c8043; WORD $0x30ff  // cmpb         $48, $-1(%r8,%r12)
	LONG $0x24648d4d; BYTE $0xff  // leaq         $-1(%r12), %r12
	LONG $0xffe6840f; WORD $0xffff  // je           LBB0_111, $-26(%rip)
	LONG $0x300c8d4d  // leaq         (%r8,%rsi), %r9
	WORD $0x8545; BYTE $0xd2  // testl        %r10d, %r10d
	LONG $0x008b8e0f; WORD $0x0000  // jle          LBB0_116, $139(%rip)
	WORD $0x8944; BYTE $0xc9  // movl         %r9d, %ecx
	WORD $0x2944; BYTE $0xc1  // subl         %r8d, %ecx
	WORD $0x3941; BYTE $0xca  // cmpl         %ecx, %r10d
	LONG $0x00238d0f; WORD $0x0000  // jge          LBB0_117, $35(%rip)
	LONG $0x020c8d43  // leal         (%r10,%r8), %ecx
	WORD $0x2941; BYTE $0xc9  // subl         %ecx, %r9d
	LONG $0xff498d49  // leaq         $-1(%r9), %rcx
	WORD $0x8945; BYTE $0xcb  // movl         %r9d, %r11d
	LONG $0x03e38341  // andl         $3, %r11d
	LONG $0x03f98348  // cmpq         $3, %rcx
	LONG $0x0081830f; WORD $0x0000  // jae          LBB0_121, $129(%rip)
	WORD $0xc931  // xorl         %ecx, %ecx
	LONG $0x0000a3e9; BYTE $0x00  // jmp          LBB0_124, $163(%rip)
LBB0_117:
	LONG $0x00538e0f; WORD $0x0000  // jle          LBB0_116, $83(%rip)
	WORD $0x0145; BYTE $0xc2  // addl         %r8d, %r10d
	WORD $0x8945; BYTE $0xcf  // movl         %r9d, %r15d
	WORD $0xf741; BYTE $0xd7  // notl         %r15d
	WORD $0x0145; BYTE $0xd7  // addl         %r10d, %r15d
	WORD $0x3145; BYTE $0xf6  // xorl         %r14d, %r14d
	WORD $0x894d; BYTE $0xcb  // movq         %r9, %r11
	LONG $0x1eff8341  // cmpl         $30, %r15d
	LONG $0x019b860f; WORD $0x0000  // jbe          LBB0_135, $411(%rip)
	WORD $0xff49; BYTE $0xc7  // incq         %r15
	WORD $0x894d; BYTE $0xfe  // movq         %r15, %r14
	LONG $0xe0e68349  // andq         $-32, %r14
	LONG $0x301c8d4f  // leaq         (%r8,%r14), %r11
	LONG $0xe05e8d49  // leaq         $-32(%r14), %rbx
	WORD $0x8948; BYTE $0xd8  // movq         %rbx, %rax
	LONG $0x05e8c148  // shrq         $5, %rax
	WORD $0xff48; BYTE $0xc0  // incq         %rax
	WORD $0x8941; BYTE $0xc4  // movl         %eax, %r12d
	LONG $0x07e48341  // andl         $7, %r12d
	LONG $0xe0fb8148; WORD $0x0000; BYTE $0x00  // cmpq         $224, %rbx
	LONG $0x008f830f; WORD $0x0000  // jae          LBB0_129, $143(%rip)
	WORD $0xc031  // xorl         %eax, %eax
	LONG $0x000123e9; BYTE $0x00  // jmp          LBB0_131, $291(%rip)
LBB0_116:
	WORD $0x894d; BYTE $0xc8  // movq         %r9, %r8
	LONG $0x000176e9; BYTE $0x00  // jmp          LBB0_137, $374(%rip)
LBB0_103:
	LONG $0x0004b941; WORD $0x0000  // movl         $4, %r9d
	LONG $0xfcc08348  // addq         $-4, %rax
	LONG $0x64fb8341  // cmpl         $100, %r11d
	LONG $0xfe9f820f; WORD $0xffff  // jb           LBB0_102, $-353(%rip)
	LONG $0xfffeb2e9; BYTE $0xff  // jmp          LBB0_105, $-334(%rip)
LBB0_121:
	WORD $0x894d; BYTE $0xde  // movq         %r11, %r14
	WORD $0x294d; BYTE $0xce  // subq         %r9, %r14
	WORD $0xc931  // xorl         %ecx, %ecx
	LONG $0x90909090; BYTE $0x90  // .p2align 4, 0x90
LBB0_122:
	LONG $0x081c8d49  // leaq         (%r8,%rcx), %rbx
	LONG $0xfc1e548b  // movl         $-4(%rsi,%rbx), %edx
	LONG $0xfd1e5489  // movl         %edx, $-3(%rsi,%rbx)
	LONG $0xfcc18348  // addq         $-4, %rcx
	WORD $0x3949; BYTE $0xce  // cmpq         %rcx, %r14
	LONG $0xffe7850f; WORD $0xffff  // jne          LBB0_122, $-25(%rip)
	WORD $0xf748; BYTE $0xd9  // negq         %rcx
LBB0_124:
	WORD $0x854d; BYTE $0xdb  // testq        %r11, %r11
	LONG $0x0025840f; WORD $0x0000  // je           LBB0_127, $37(%rip)
	WORD $0xf749; BYTE $0xdb  // negq         %r11
	WORD $0x894c; BYTE $0xc2  // movq         %r8, %rdx
	WORD $0x2948; BYTE $0xca  // subq         %rcx, %rdx
	WORD $0xc931  // xorl         %ecx, %ecx
	  // .p2align 4, 0x90
LBB0_126:
	LONG $0x0a348d48  // leaq         (%rdx,%rcx), %rsi
	LONG $0x1cb60f41; BYTE $0x34  // movzbl       (%r12,%rsi), %ebx
	LONG $0x345c8841; BYTE $0x01  // movb         %bl, $1(%r12,%rsi)
	WORD $0xff48; BYTE $0xc9  // decq         %rcx
	WORD $0x3949; BYTE $0xcb  // cmpq         %rcx, %r11
	LONG $0xffe6850f; WORD $0xffff  // jne          LBB0_126, $-26(%rip)
LBB0_127:
	WORD $0x6349; BYTE $0xca  // movslq       %r10d, %rcx
	LONG $0x0804c641; BYTE $0x2e  // movb         $46, (%r8,%rcx)
	WORD $0x0149; BYTE $0xc0  // addq         %rax, %r8
	LONG $0x0000f6e9; BYTE $0x00  // jmp          LBB0_137, $246(%rip)
LBB0_129:
	WORD $0x894c; BYTE $0xe3  // movq         %r12, %rbx
	WORD $0x2948; BYTE $0xc3  // subq         %rax, %rbx
	WORD $0xc031  // xorl         %eax, %eax
	QUAD $0xfffff406056f0ff3  // movdqu       $-3066(%rip), %xmm0  /* LCPI0_0+0(%rip) */
LBB0_130:
	LONG $0x000c8d49  // leaq         (%r8,%rax), %rcx
	LONG $0x047f0ff3; BYTE $0x0e  // movdqu       %xmm0, (%rsi,%rcx)
	LONG $0x447f0ff3; WORD $0x100e  // movdqu       %xmm0, $16(%rsi,%rcx)
	LONG $0x447f0ff3; WORD $0x200e  // movdqu       %xmm0, $32(%rsi,%rcx)
	LONG $0x447f0ff3; WORD $0x300e  // movdqu       %xmm0, $48(%rsi,%rcx)
	LONG $0x447f0ff3; WORD $0x400e  // movdqu       %xmm0, $64(%rsi,%rcx)
	LONG $0x447f0ff3; WORD $0x500e  // movdqu       %xmm0, $80(%rsi,%rcx)
	LONG $0x447f0ff3; WORD $0x600e  // movdqu       %xmm0, $96(%rsi,%rcx)
	LONG $0x447f0ff3; WORD $0x700e  // movdqu       %xmm0, $112(%rsi,%rcx)
	QUAD $0x0000800e847f0ff3; BYTE $0x00  // movdqu       %xmm0, $128(%rsi,%rcx)
	QUAD $0x0000900e847f0ff3; BYTE $0x00  // movdqu       %xmm0, $144(%rsi,%rcx)
	QUAD $0x0000a00e847f0ff3; BYTE $0x00  // movdqu       %xmm0, $160(%rsi,%rcx)
	QUAD $0x0000b00e847f0ff3; BYTE $0x00  // movdqu       %xmm0, $176(%rsi,%rcx)
	QUAD $0x0000c00e847f0ff3; BYTE $0x00  // movdqu       %xmm0, $192(%rsi,%rcx)
	QUAD $0x0000d00e847f0ff3; BYTE $0x00  // movdqu       %xmm0, $208(%rsi,%rcx)
	QUAD $0x0000e00e847f0ff3; BYTE $0x00  // movdqu       %xmm0, $224(%rsi,%rcx)
	QUAD $0x0000f00e847f0ff3; BYTE $0x00  // movdqu       %xmm0, $240(%rsi,%rcx)
	LONG $0x01000548; WORD $0x0000  // addq         $256, %rax
	LONG $0x08c38348  // addq         $8, %rbx
	LONG $0xff75850f; WORD $0xffff  // jne          LBB0_130, $-139(%rip)
LBB0_131:
	WORD $0x0149; BYTE $0xf3  // addq         %rsi, %r11
	WORD $0x854d; BYTE $0xe4  // testq        %r12, %r12
	LONG $0x0029840f; WORD $0x0000  // je           LBB0_134, $41(%rip)
	WORD $0x0149; BYTE $0xc0  // addq         %rax, %r8
	WORD $0x0149; BYTE $0xd0  // addq         %rdx, %r8
	WORD $0xf749; BYTE $0xdc  // negq         %r12
	QUAD $0xfffff35e056f0ff3  // movdqu       $-3234(%rip), %xmm0  /* LCPI0_0+0(%rip) */
LBB0_133:
	LONG $0x7f0f41f3; WORD $0xf040  // movdqu       %xmm0, $-16(%r8)
	LONG $0x7f0f41f3; BYTE $0x00  // movdqu       %xmm0, (%r8)
	LONG $0x20c08349  // addq         $32, %r8
	WORD $0xff49; BYTE $0xc4  // incq         %r12
	LONG $0xffe8850f; WORD $0xffff  // jne          LBB0_133, $-24(%rip)
LBB0_134:
	WORD $0x894d; BYTE $0xd8  // movq         %r11, %r8
	WORD $0x394d; BYTE $0xf7  // cmpq         %r14, %r15
	LONG $0x001a840f; WORD $0x0000  // je           LBB0_137, $26(%rip)
LBB0_135:
	WORD $0x2945; BYTE $0xf2  // subl         %r14d, %r10d
	WORD $0x2945; BYTE $0xca  // subl         %r9d, %r10d
	WORD $0x894d; BYTE $0xd8  // movq         %r11, %r8
	BYTE $0x90  // .p2align 4, 0x90
LBB0_136:
	LONG $0x3000c641  // movb         $48, (%r8)
	WORD $0xff49; BYTE $0xc0  // incq         %r8
	WORD $0xff41; BYTE $0xca  // decl         %r10d
	LONG $0xfff0850f; WORD $0xffff  // jne          LBB0_136, $-16(%rip)
LBB0_137:
	WORD $0x2941; BYTE $0xf8  // subl         %edi, %r8d
LBB0_138:
	WORD $0x8944; BYTE $0xc0  // movl         %r8d, %eax
	BYTE $0x5b  // popq         %rbx
	WORD $0x5c41  // popq         %r12
	WORD $0x5d41  // popq         %r13
	WORD $0x5e41  // popq         %r14
	WORD $0x5f41  // popq         %r15
	BYTE $0x5d  // popq         %rbp
	BYTE $0xc3  // retq         
LBB0_139:
	WORD $0x3145; BYTE $0xc0  // xorl         %r8d, %r8d
	LONG $0xffffeae9; BYTE $0xff  // jmp          LBB0_138, $-22(%rip)
LBB0_140:
	LONG $0xff6bbf41; WORD $0xffff  // movl         $-149, %r15d
	WORD $0xc689  // movl         %eax, %esi
	LONG $0xfff389e9; BYTE $0xff  // jmp          LBB0_5, $-3191(%rip)
	QUAD $0x0000000000000000; WORD $0x0000  // .p2align 4, 0x00
_Digits:
	QUAD $0x3330323031303030; QUAD $0x3730363035303430  // .ascii 16, '0001020304050607'
	QUAD $0x3131303139303830; QUAD $0x3531343133313231  // .ascii 16, '0809101112131415'
	QUAD $0x3931383137313631; QUAD $0x3332323231323032  // .ascii 16, '1617181920212223'
	QUAD $0x3732363235323432; QUAD $0x3133303339323832  // .ascii 16, '2425262728293031'
	QUAD $0x3533343333333233; QUAD $0x3933383337333633  // .ascii 16, '3233343536373839'
	QUAD $0x3334323431343034; QUAD $0x3734363435343434  // .ascii 16, '4041424344454647'
	QUAD $0x3135303539343834; QUAD $0x3535343533353235  // .ascii 16, '4849505152535455'
	QUAD $0x3935383537353635; QUAD $0x3336323631363036  // .ascii 16, '5657585960616263'
	QUAD $0x3736363635363436; QUAD $0x3137303739363836  // .ascii 16, '6465666768697071'
	QUAD $0x3537343733373237; QUAD $0x3937383737373637  // .ascii 16, '7273747576777879'
	QUAD $0x3338323831383038; QUAD $0x3738363835383438  // .ascii 16, '8081828384858687'
	QUAD $0x3139303939383838; QUAD $0x3539343933393239  // .ascii 16, '8889909192939495'
	QUAD $0x3939383937393639  // .ascii 8, '96979899'
	QUAD $0x0000000000000000  // .p2align 4, 0x00
_LB_34fc27ed: // _pow10_ceil_sig_f32.g
	QUAD $0x81ceb32c4b43fcf5  // .quad -9093133594791772939
	QUAD $0xa2425ff75e14fc32  // .quad -6754730975062328270
	QUAD $0xcad2f7f5359a3b3f  // .quad -3831727700400522433
	QUAD $0xfd87b5f28300ca0e  // .quad -177973607073265138
	QUAD $0x9e74d1b791e07e49  // .quad -7028762532061872567
	QUAD $0xc612062576589ddb  // .quad -4174267146649952805
	QUAD $0xf79687aed3eec552  // .quad -606147914885053102
	QUAD $0x9abe14cd44753b53  // .quad -7296371474444240045
	QUAD $0xc16d9a0095928a28  // .quad -4508778324627912152
	QUAD $0xf1c90080baf72cb2  // .quad -1024286887357502286
	QUAD $0x971da05074da7bef  // .quad -7557708332239520785
	QUAD $0xbce5086492111aeb  // .quad -4835449396872013077
	QUAD $0xec1e4a7db69561a6  // .quad -1432625727662628442
	QUAD $0x9392ee8e921d5d08  // .quad -7812920107430224632
	QUAD $0xb877aa3236a4b44a  // .quad -5154464115860392886
	QUAD $0xe69594bec44de15c  // .quad -1831394126398103204
	QUAD $0x901d7cf73ab0acda  // .quad -8062150356639896358
	QUAD $0xb424dc35095cd810  // .quad -5466001927372482544
	QUAD $0xe12e13424bb40e14  // .quad -2220816390788215276
	QUAD $0x8cbccc096f5088cc  // .quad -8305539271883716404
	QUAD $0xafebff0bcb24aaff  // .quad -5770238071427257601
	QUAD $0xdbe6fecebdedd5bf  // .quad -2601111570856684097
	QUAD $0x89705f4136b4a598  // .quad -8543223759426509416
	QUAD $0xabcc77118461cefd  // .quad -6067343680855748867
	QUAD $0xd6bf94d5e57a42bd  // .quad -2972493582642298179
	QUAD $0x8637bd05af6c69b6  // .quad -8775337516792518218
	QUAD $0xa7c5ac471b478424  // .quad -6357485877563259868
	QUAD $0xd1b71758e219652c  // .quad -3335171328526686932
	QUAD $0x83126e978d4fdf3c  // .quad -9002011107970261188
	QUAD $0xa3d70a3d70a3d70b  // .quad -6640827866535438581
	QUAD $0xcccccccccccccccd  // .quad -3689348814741910323
	QUAD $0x8000000000000000  // .quad -9223372036854775808
	QUAD $0xa000000000000000  // .quad -6917529027641081856
	QUAD $0xc800000000000000  // .quad -4035225266123964416
	QUAD $0xfa00000000000000  // .quad -432345564227567616
	QUAD $0x9c40000000000000  // .quad -7187745005283311616
	QUAD $0xc350000000000000  // .quad -4372995238176751616
	QUAD $0xf424000000000000  // .quad -854558029293551616
	QUAD $0x9896800000000000  // .quad -7451627795949551616
	QUAD $0xbebc200000000000  // .quad -4702848726509551616
	QUAD $0xee6b280000000000  // .quad -1266874889709551616
	QUAD $0x9502f90000000000  // .quad -7709325833709551616
	QUAD $0xba43b74000000000  // .quad -5024971273709551616
	QUAD $0xe8d4a51000000000  // .quad -1669528073709551616
	QUAD $0x9184e72a00000000  // .quad -7960984073709551616
	QUAD $0xb5e620f480000000  // .quad -5339544073709551616
	QUAD $0xe35fa931a0000000  // .quad -2062744073709551616
	QUAD $0x8e1bc9bf04000000  // .quad -8206744073709551616
	QUAD $0xb1a2bc2ec5000000  // .quad -5646744073709551616
	QUAD $0xde0b6b3a76400000  // .quad -2446744073709551616
	QUAD $0x8ac7230489e80000  // .quad -8446744073709551616
	QUAD $0xad78ebc5ac620000  // .quad -5946744073709551616
	QUAD $0xd8d726b7177a8000  // .quad -2821744073709551616
	QUAD $0x878678326eac9000  // .quad -8681119073709551616
	QUAD $0xa968163f0a57b400  // .quad -6239712823709551616
	QUAD $0xd3c21bcecceda100  // .quad -3187955011209551616
	QUAD $0x84595161401484a0  // .quad -8910000909647051616
	QUAD $0xa56fa5b99019a5c8  // .quad -6525815118631426616
	QUAD $0xcecb8f27f4200f3a  // .quad -3545582879861895366
	QUAD $0x813f3978f8940985  // .quad -9133518327554766459
	QUAD $0xa18f07d736b90be6  // .quad -6805211891016070170
	QUAD $0xc9f2c9cd04674edf  // .quad -3894828845342699809
	QUAD $0xfc6f7c4045812297  // .quad -256850038250986857
	QUAD $0x9dc5ada82b70b59e  // .quad -7078060301547948642
	QUAD $0xc5371912364ce306  // .quad -4235889358507547898
	QUAD $0xf684df56c3e01bc7  // .quad -683175679707046969
	QUAD $0x9a130b963a6c115d  // .quad -7344513827457986211
	QUAD $0xc097ce7bc90715b4  // .quad -4568956265895094860
	QUAD $0xf0bdc21abb48db21  // .quad -1099509313941480671
	QUAD $0x96769950b50d88f5  // .quad -7604722348854507275
	QUAD $0xbc143fa4e250eb32  // .quad -4894216917640746190
	QUAD $0xeb194f8e1ae525fe  // .quad -1506085128623544834
	QUAD $0x92efd1b8d0cf37bf  // .quad -7858832233030797377
	QUAD $0xb7abc627050305ae  // .quad -5211854272861108818
	QUAD $0xe596b7b0c643c71a  // .quad -1903131822648998118
	QUAD $0x8f7e32ce7bea5c70  // .quad -8106986416796705680
	QUAD $0xb35dbf821ae4f38c  // .quad -5522047002568494196

TEXT Â·__f32toa(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -48(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_f32toa:
	MOVQ out+0(FP), DI
	MOVSD val+8(FP), X0
	CALL Â·__f32toa_entry+46(SB)  // _f32toa
	MOVQ AX, ret+16(FP)
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry
