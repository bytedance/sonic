// +build !noasm !appengine
// Code generated by asm2asm, DO NOT EDIT.

#include "go_asm.h"
#include "funcdata.h"
#include "textflag.h"

TEXT 路__vsigned_entry(SB), NOSPLIT, $8
	NO_LOCAL_POINTERS
	BYTE $0x00
	BYTE $0x00
	  // .p2align 4, 0x90
_vsigned:
	BYTE $0x55  // pushq        %rbp
	WORD $0x8948; BYTE $0xe5  // movq         %rsp, %rbp
	BYTE $0x53  // pushq        %rbx
	WORD $0x8b48; BYTE $0x1e  // movq         (%rsi), %rbx
	WORD $0x8b4c; BYTE $0x07  // movq         (%rdi), %r8
	LONG $0x08578b4c  // movq         $8(%rdi), %r10
	LONG $0x0902c748; WORD $0x0000; BYTE $0x00  // movq         $9, (%rdx)
	QUAD $0x000000000842c748  // movq         $0, $8(%rdx)
	QUAD $0x000000001042c748  // movq         $0, $16(%rdx)
	WORD $0x8b48; BYTE $0x0e  // movq         (%rsi), %rcx
	LONG $0x184a8948  // movq         %rcx, $24(%rdx)
	WORD $0x394c; BYTE $0xd3  // cmpq         %r10, %rbx
	LONG $0x0044830f; WORD $0x0000  // jae          LBB0_1, $68(%rip)
	LONG $0x180c8a41  // movb         (%r8,%rbx), %cl
	LONG $0x0001b941; WORD $0x0000  // movl         $1, %r9d
	WORD $0xf980; BYTE $0x2d  // cmpb         $45, %cl
	LONG $0x0017850f; WORD $0x0000  // jne          LBB0_5, $23(%rip)
	WORD $0xff48; BYTE $0xc3  // incq         %rbx
	WORD $0x394c; BYTE $0xd3  // cmpq         %r10, %rbx
	LONG $0x0025830f; WORD $0x0000  // jae          LBB0_1, $37(%rip)
	LONG $0x180c8a41  // movb         (%r8,%rbx), %cl
	LONG $0xffc1c749; WORD $0xffff; BYTE $0xff  // movq         $-1, %r9
LBB0_5:
	WORD $0x798d; BYTE $0xd0  // leal         $-48(%rcx), %edi
	LONG $0x0aff8040  // cmpb         $10, %dil
	LONG $0x001a820f; WORD $0x0000  // jb           LBB0_7, $26(%rip)
	WORD $0x8948; BYTE $0x1e  // movq         %rbx, (%rsi)
	LONG $0xfe02c748; WORD $0xffff; BYTE $0xff  // movq         $-2, (%rdx)
	BYTE $0x5b  // popq         %rbx
	BYTE $0x5d  // popq         %rbp
	BYTE $0xc3  // retq         
LBB0_1:
	WORD $0x894c; BYTE $0x16  // movq         %r10, (%rsi)
	LONG $0xff02c748; WORD $0xffff; BYTE $0xff  // movq         $-1, (%rdx)
	BYTE $0x5b  // popq         %rbx
	BYTE $0x5d  // popq         %rbp
	BYTE $0xc3  // retq         
LBB0_7:
	WORD $0xf980; BYTE $0x30  // cmpb         $48, %cl
	LONG $0x0035850f; WORD $0x0000  // jne          LBB0_8, $53(%rip)
	LONG $0x017b8d48  // leaq         $1(%rbx), %rdi
	WORD $0x394c; BYTE $0xd3  // cmpq         %r10, %rbx
	LONG $0x007a830f; WORD $0x0000  // jae          LBB0_17, $122(%rip)
	LONG $0x380c8a41  // movb         (%r8,%rdi), %cl
	WORD $0xc180; BYTE $0xd2  // addb         $-46, %cl
	WORD $0xf980; BYTE $0x37  // cmpb         $55, %cl
	LONG $0x006a870f; WORD $0x0000  // ja           LBB0_17, $106(%rip)
	LONG $0xd9b60f44  // movzbl       %cl, %r11d
	QUAD $0x000000800001b948; WORD $0x0080  // movabsq      $36028797027352577, %rcx
	LONG $0xd9a30f4c  // btq          %r11, %rcx
	LONG $0x0052830f; WORD $0x0000  // jae          LBB0_17, $82(%rip)
LBB0_8:
	WORD $0xff31  // xorl         %edi, %edi
	QUAD $0x9090909090909090; BYTE $0x90  // .p2align 4, 0x90
LBB0_9:
	WORD $0x394c; BYTE $0xd3  // cmpq         %r10, %rbx
	LONG $0x006c830f; WORD $0x0000  // jae          LBB0_22, $108(%rip)
	LONG $0x0cbe0f49; BYTE $0x18  // movsbq       (%r8,%rbx), %rcx
	WORD $0x418d; BYTE $0xd0  // leal         $-48(%rcx), %eax
	WORD $0x093c  // cmpb         $9, %al
	LONG $0x0034870f; WORD $0x0000  // ja           LBB0_18, $52(%rip)
	LONG $0x0aff6b48  // imulq        $10, %rdi, %rdi
	LONG $0x0014800f; WORD $0x0000  // jo           LBB0_13, $20(%rip)
	WORD $0xff48; BYTE $0xc3  // incq         %rbx
	LONG $0xd0c18348  // addq         $-48, %rcx
	LONG $0xc9af0f49  // imulq        %r9, %rcx
	WORD $0x0148; BYTE $0xcf  // addq         %rcx, %rdi
	LONG $0xffc9810f; WORD $0xffff  // jno          LBB0_9, $-55(%rip)
LBB0_13:
	WORD $0xff48; BYTE $0xcb  // decq         %rbx
	WORD $0x8948; BYTE $0x1e  // movq         %rbx, (%rsi)
	LONG $0xfb02c748; WORD $0xffff; BYTE $0xff  // movq         $-5, (%rdx)
	BYTE $0x5b  // popq         %rbx
	BYTE $0x5d  // popq         %rbp
	BYTE $0xc3  // retq         
LBB0_17:
	WORD $0x8948; BYTE $0x3e  // movq         %rdi, (%rsi)
	BYTE $0x5b  // popq         %rbx
	BYTE $0x5d  // popq         %rbp
	BYTE $0xc3  // retq         
LBB0_18:
	WORD $0xf980; BYTE $0x65  // cmpb         $101, %cl
	LONG $0x0012840f; WORD $0x0000  // je           LBB0_21, $18(%rip)
	WORD $0xf980; BYTE $0x45  // cmpb         $69, %cl
	LONG $0x0009840f; WORD $0x0000  // je           LBB0_21, $9(%rip)
	WORD $0xf980; BYTE $0x2e  // cmpb         $46, %cl
	LONG $0x000d850f; WORD $0x0000  // jne          LBB0_22, $13(%rip)
LBB0_21:
	WORD $0x8948; BYTE $0x1e  // movq         %rbx, (%rsi)
	LONG $0xfa02c748; WORD $0xffff; BYTE $0xff  // movq         $-6, (%rdx)
	BYTE $0x5b  // popq         %rbx
	BYTE $0x5d  // popq         %rbp
	BYTE $0xc3  // retq         
LBB0_22:
	WORD $0x8948; BYTE $0x1e  // movq         %rbx, (%rsi)
	LONG $0x107a8948  // movq         %rdi, $16(%rdx)
	BYTE $0x5b  // popq         %rbx
	BYTE $0x5d  // popq         %rbp
	BYTE $0xc3  // retq         
	BYTE $0x00  // .p2align 2, 0x00
_MASK_USE_NUMBER:
	LONG $0x00000002  // .long 2

TEXT 路__vsigned(SB), NOSPLIT | NOFRAME, $0 - 24
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -16(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_vsigned:
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ v+16(FP), DX
	CALL 路__vsigned_entry+16(SB)  // _vsigned
	RET

_stack_grow:
	CALL runtime路morestack_noctxt<>(SB)
	JMP  _entry
