// +build !noasm !appengine
// Code generated by asm2asm, DO NOT EDIT.

#include "go_asm.h"
#include "funcdata.h"
#include "textflag.h"

TEXT Â·__vstring_entry(SB), NOSPLIT, $80
	NO_LOCAL_POINTERS
	LONG $0xeb0d8d4c; WORD $0xffff; BYTE $0xff  // leaq         $-21(%rip), %r9
	LONG $0x244c894c; BYTE $0x60  // movq         %r9, $96(%rsp)
	LONG $0x58c48348  // addq         $88, %rsp
	BYTE $0xc3  // retq         
	BYTE $0x00
	  // .p2align 4, 0x00
LCPI0_0:
	QUAD $0x2222222222222222; QUAD $0x2222222222222222  // .space 16, '""""""""""""""""'
LCPI0_1:
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c  // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
LCPI0_2:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020  // .space 16, '                '
	  // .p2align 4, 0x90
_vstring:
	BYTE $0x55  // pushq        %rbp
	WORD $0x8948; BYTE $0xe5  // movq         %rsp, %rbp
	WORD $0x5741  // pushq        %r15
	WORD $0x5641  // pushq        %r14
	WORD $0x5541  // pushq        %r13
	WORD $0x5441  // pushq        %r12
	BYTE $0x53  // pushq        %rbx
	LONG $0x28ec8348  // subq         $40, %rsp
	WORD $0x8948; BYTE $0xd3  // movq         %rdx, %rbx
	WORD $0x8b4c; BYTE $0x16  // movq         (%rsi), %r10
	WORD $0xc1f6; BYTE $0x20  // testb        $32, %cl
	LONG $0xb8558948  // movq         %rdx, $-72(%rbp)
	LONG $0xc0758948  // movq         %rsi, $-64(%rbp)
	LONG $0x01c1850f; WORD $0x0000  // jne          LBB0_12, $449(%rip)
	LONG $0x084f8b48  // movq         $8(%rdi), %rcx
	WORD $0x8948; BYTE $0xc8  // movq         %rcx, %rax
	WORD $0x294c; BYTE $0xd0  // subq         %r10, %rax
	LONG $0x06d5840f; WORD $0x0000  // je           LBB0_55, $1749(%rip)
	LONG $0xc84d8948  // movq         %rcx, $-56(%rbp)
	WORD $0x8b48; BYTE $0x37  // movq         (%rdi), %rsi
	LONG $0x160c8d4a  // leaq         (%rsi,%r10), %rcx
	LONG $0x40f88348  // cmpq         $64, %rax
	LONG $0xd0758948  // movq         %rsi, $-48(%rbp)
	LONG $0x06c8820f; WORD $0x0000  // jb           LBB0_56, $1736(%rip)
	WORD $0x8941; BYTE $0xc5  // movl         %eax, %r13d
	LONG $0x3fe58341  // andl         $63, %r13d
	LONG $0xc0508d48  // leaq         $-64(%rax), %rdx
	LONG $0xc0e28348  // andq         $-64, %rdx
	WORD $0x014c; BYTE $0xd2  // addq         %r10, %rdx
	LONG $0x16548d48; BYTE $0x40  // leaq         $64(%rsi,%rdx), %rdx
	LONG $0xb0558948  // movq         %rdx, $-80(%rbp)
	LONG $0xffc3c749; WORD $0xffff; BYTE $0xff  // movq         $-1, %r11
	WORD $0x3145; BYTE $0xc0  // xorl         %r8d, %r8d
	QUAD $0xffffff52056f0ff3  // movdqu       $-174(%rip), %xmm0  /* LCPI0_0+0(%rip) */
	QUAD $0xffffff5a0d6f0ff3  // movdqu       $-166(%rip), %xmm1  /* LCPI0_1+0(%rip) */
	QUAD $0x9090909090909090; WORD $0x9090  // .p2align 4, 0x90
LBB0_4:
	LONG $0x116f0ff3  // movdqu       (%rcx), %xmm2
	LONG $0x596f0ff3; BYTE $0x10  // movdqu       $16(%rcx), %xmm3
	LONG $0x616f0ff3; BYTE $0x20  // movdqu       $32(%rcx), %xmm4
	LONG $0x696f0ff3; BYTE $0x30  // movdqu       $48(%rcx), %xmm5
	LONG $0xf26f0f66  // movdqa       %xmm2, %xmm6
	LONG $0xf0740f66  // pcmpeqb      %xmm0, %xmm6
	LONG $0xded70f66  // pmovmskb     %xmm6, %ebx
	LONG $0xf36f0f66  // movdqa       %xmm3, %xmm6
	LONG $0xf0740f66  // pcmpeqb      %xmm0, %xmm6
	LONG $0xd6d70f66  // pmovmskb     %xmm6, %edx
	LONG $0xf46f0f66  // movdqa       %xmm4, %xmm6
	LONG $0xf0740f66  // pcmpeqb      %xmm0, %xmm6
	LONG $0xf6d70f66  // pmovmskb     %xmm6, %esi
	LONG $0xf56f0f66  // movdqa       %xmm5, %xmm6
	LONG $0xf0740f66  // pcmpeqb      %xmm0, %xmm6
	LONG $0xfed70f66  // pmovmskb     %xmm6, %edi
	LONG $0xd1740f66  // pcmpeqb      %xmm1, %xmm2
	LONG $0xd70f4466; BYTE $0xfa  // pmovmskb     %xmm2, %r15d
	LONG $0xd9740f66  // pcmpeqb      %xmm1, %xmm3
	LONG $0xd70f4466; BYTE $0xe3  // pmovmskb     %xmm3, %r12d
	LONG $0xe1740f66  // pcmpeqb      %xmm1, %xmm4
	LONG $0xd70f4466; BYTE $0xf4  // pmovmskb     %xmm4, %r14d
	LONG $0xe9740f66  // pcmpeqb      %xmm1, %xmm5
	LONG $0xd70f4466; BYTE $0xcd  // pmovmskb     %xmm5, %r9d
	LONG $0x30e7c148  // shlq         $48, %rdi
	LONG $0x20e6c148  // shlq         $32, %rsi
	LONG $0x10e2c148  // shlq         $16, %rdx
	WORD $0x0948; BYTE $0xd3  // orq          %rdx, %rbx
	WORD $0x0948; BYTE $0xf3  // orq          %rsi, %rbx
	LONG $0x30e1c149  // shlq         $48, %r9
	LONG $0x20e6c149  // shlq         $32, %r14
	LONG $0x10e4c149  // shlq         $16, %r12
	WORD $0x094d; BYTE $0xe7  // orq          %r12, %r15
	WORD $0x094d; BYTE $0xf7  // orq          %r14, %r15
	WORD $0x094d; BYTE $0xcf  // orq          %r9, %r15
	LONG $0xfffb8349  // cmpq         $-1, %r11
	LONG $0x0009850f; WORD $0x0000  // jne          LBB0_6, $9(%rip)
	WORD $0x854d; BYTE $0xff  // testq        %r15, %r15
	LONG $0x002f850f; WORD $0x0000  // jne          LBB0_9, $47(%rip)
LBB0_6:
	WORD $0x0948; BYTE $0xfb  // orq          %rdi, %rbx
	WORD $0x894c; BYTE $0xfa  // movq         %r15, %rdx
	WORD $0x094c; BYTE $0xc2  // orq          %r8, %rdx
	LONG $0x003d850f; WORD $0x0000  // jne          LBB0_10, $61(%rip)
LBB0_7:
	WORD $0x8548; BYTE $0xdb  // testq        %rbx, %rbx
	LONG $0x0086850f; WORD $0x0000  // jne          LBB0_11, $134(%rip)
LBB0_8:
	LONG $0xc0c08348  // addq         $-64, %rax
	LONG $0x40c18348  // addq         $64, %rcx
	LONG $0x3ff88348  // cmpq         $63, %rax
	LONG $0xff35870f; WORD $0xffff  // ja           LBB0_4, $-203(%rip)
	LONG $0x000333e9; BYTE $0x00  // jmp          LBB0_29, $819(%rip)
LBB0_9:
	WORD $0x8948; BYTE $0xca  // movq         %rcx, %rdx
	LONG $0xd0552b48  // subq         $-48(%rbp), %rdx
	LONG $0xdfbc0f4d  // bsfq         %r15, %r11
	WORD $0x0149; BYTE $0xd3  // addq         %rdx, %r11
	WORD $0x0948; BYTE $0xfb  // orq          %rdi, %rbx
	WORD $0x894c; BYTE $0xfa  // movq         %r15, %rdx
	WORD $0x094c; BYTE $0xc2  // orq          %r8, %rdx
	LONG $0xffc3840f; WORD $0xffff  // je           LBB0_7, $-61(%rip)
LBB0_10:
	WORD $0x894c; BYTE $0xc2  // movq         %r8, %rdx
	WORD $0xf748; BYTE $0xd2  // notq         %rdx
	WORD $0x214c; BYTE $0xfa  // andq         %r15, %rdx
	LONG $0x120c8d4c  // leaq         (%rdx,%rdx), %r9
	WORD $0x094d; BYTE $0xc1  // orq          %r8, %r9
	WORD $0x894c; BYTE $0xcf  // movq         %r9, %rdi
	WORD $0xf748; BYTE $0xd7  // notq         %rdi
	WORD $0x214c; BYTE $0xff  // andq         %r15, %rdi
	QUAD $0xaaaaaaaaaaaabe48; WORD $0xaaaa  // movabsq      $-6148914691236517206, %rsi
	WORD $0x2148; BYTE $0xf7  // andq         %rsi, %rdi
	WORD $0x3145; BYTE $0xc0  // xorl         %r8d, %r8d
	WORD $0x0148; BYTE $0xd7  // addq         %rdx, %rdi
	LONG $0xc0920f41  // setb         %r8b
	WORD $0x0148; BYTE $0xff  // addq         %rdi, %rdi
	QUAD $0x555555555555ba48; WORD $0x5555  // movabsq      $6148914691236517205, %rdx
	WORD $0x3148; BYTE $0xd7  // xorq         %rdx, %rdi
	WORD $0x214c; BYTE $0xcf  // andq         %r9, %rdi
	WORD $0xf748; BYTE $0xd7  // notq         %rdi
	WORD $0x2148; BYTE $0xfb  // andq         %rdi, %rbx
	WORD $0x8548; BYTE $0xdb  // testq        %rbx, %rbx
	LONG $0xff7a840f; WORD $0xffff  // je           LBB0_8, $-134(%rip)
LBB0_11:
	LONG $0xc3bc0f48  // bsfq         %rbx, %rax
	LONG $0xd04d2b48  // subq         $-48(%rbp), %rcx
	LONG $0x017c8d48; BYTE $0x01  // leaq         $1(%rcx,%rax), %rdi
	LONG $0xb85d8b48  // movq         $-72(%rbp), %rbx
	LONG $0xc0758b48  // movq         $-64(%rbp), %rsi
	LONG $0x00027ce9; BYTE $0x00  // jmp          LBB0_27, $636(%rip)
LBB0_12:
	LONG $0x084f8b48  // movq         $8(%rdi), %rcx
	WORD $0x8948; BYTE $0xc8  // movq         %rcx, %rax
	WORD $0x294c; BYTE $0xd0  // subq         %r10, %rax
	LONG $0x0514840f; WORD $0x0000  // je           LBB0_55, $1300(%rip)
	LONG $0xc84d8948  // movq         %rcx, $-56(%rbp)
	WORD $0x8b48; BYTE $0x3f  // movq         (%rdi), %rdi
	LONG $0x170c8d4a  // leaq         (%rdi,%r10), %rcx
	LONG $0x40f88348  // cmpq         $64, %rax
	LONG $0xd07d8948  // movq         %rdi, $-48(%rbp)
	LONG $0x0574820f; WORD $0x0000  // jb           LBB0_60, $1396(%rip)
	WORD $0x8941; BYTE $0xc5  // movl         %eax, %r13d
	LONG $0x3fe58341  // andl         $63, %r13d
	LONG $0xc0508d48  // leaq         $-64(%rax), %rdx
	LONG $0xc0e28348  // andq         $-64, %rdx
	WORD $0x014c; BYTE $0xd2  // addq         %r10, %rdx
	LONG $0x17548d48; BYTE $0x40  // leaq         $64(%rdi,%rdx), %rdx
	LONG $0xb0558948  // movq         %rdx, $-80(%rbp)
	LONG $0xffc3c749; WORD $0xffff; BYTE $0xff  // movq         $-1, %r11
	WORD $0x3145; BYTE $0xc9  // xorl         %r9d, %r9d
	QUAD $0xfffd90056f0f44f3; BYTE $0xff  // movdqu       $-624(%rip), %xmm8  /* LCPI0_0+0(%rip) */
	QUAD $0xfffffd980d6f0ff3  // movdqu       $-616(%rip), %xmm1  /* LCPI0_1+0(%rip) */
	QUAD $0xfffffda0156f0ff3  // movdqu       $-608(%rip), %xmm2  /* LCPI0_2+0(%rip) */
	LONG $0xdb760f66  // pcmpeqd      %xmm3, %xmm3
	QUAD $0x9090909090909090; LONG $0x90909090  // .p2align 4, 0x90
LBB0_15:
	LONG $0x396f0ff3  // movdqu       (%rcx), %xmm7
	LONG $0x716f0ff3; BYTE $0x10  // movdqu       $16(%rcx), %xmm6
	LONG $0x696f0ff3; BYTE $0x20  // movdqu       $32(%rcx), %xmm5
	LONG $0x616f0ff3; BYTE $0x30  // movdqu       $48(%rcx), %xmm4
	LONG $0xc76f0f66  // movdqa       %xmm7, %xmm0
	LONG $0x740f4166; BYTE $0xc0  // pcmpeqb      %xmm8, %xmm0
	LONG $0xd8d70f66  // pmovmskb     %xmm0, %ebx
	LONG $0xc66f0f66  // movdqa       %xmm6, %xmm0
	LONG $0x740f4166; BYTE $0xc0  // pcmpeqb      %xmm8, %xmm0
	LONG $0xf0d70f66  // pmovmskb     %xmm0, %esi
	LONG $0xc56f0f66  // movdqa       %xmm5, %xmm0
	LONG $0x740f4166; BYTE $0xc0  // pcmpeqb      %xmm8, %xmm0
	LONG $0xd0d70f66  // pmovmskb     %xmm0, %edx
	LONG $0xc46f0f66  // movdqa       %xmm4, %xmm0
	LONG $0x740f4166; BYTE $0xc0  // pcmpeqb      %xmm8, %xmm0
	LONG $0xd70f4466; BYTE $0xe0  // pmovmskb     %xmm0, %r12d
	LONG $0xc76f0f66  // movdqa       %xmm7, %xmm0
	LONG $0xc1740f66  // pcmpeqb      %xmm1, %xmm0
	LONG $0xd70f4466; BYTE $0xf8  // pmovmskb     %xmm0, %r15d
	LONG $0xc66f0f66  // movdqa       %xmm6, %xmm0
	LONG $0xc1740f66  // pcmpeqb      %xmm1, %xmm0
	LONG $0xf8d70f66  // pmovmskb     %xmm0, %edi
	LONG $0xc56f0f66  // movdqa       %xmm5, %xmm0
	LONG $0xc1740f66  // pcmpeqb      %xmm1, %xmm0
	LONG $0x10e6c148  // shlq         $16, %rsi
	WORD $0x0948; BYTE $0xf3  // orq          %rsi, %rbx
	LONG $0xf0d70f66  // pmovmskb     %xmm0, %esi
	LONG $0xc46f0f66  // movdqa       %xmm4, %xmm0
	LONG $0xc1740f66  // pcmpeqb      %xmm1, %xmm0
	LONG $0x20e2c148  // shlq         $32, %rdx
	WORD $0x0948; BYTE $0xd3  // orq          %rdx, %rbx
	LONG $0xd0d70f66  // pmovmskb     %xmm0, %edx
	LONG $0xc26f0f66  // movdqa       %xmm2, %xmm0
	LONG $0xc7640f66  // pcmpgtb      %xmm7, %xmm0
	LONG $0xfb640f66  // pcmpgtb      %xmm3, %xmm7
	LONG $0xf8db0f66  // pand         %xmm0, %xmm7
	LONG $0x10e7c148  // shlq         $16, %rdi
	WORD $0x0949; BYTE $0xff  // orq          %rdi, %r15
	LONG $0xd70f4466; BYTE $0xf7  // pmovmskb     %xmm7, %r14d
	LONG $0xc26f0f66  // movdqa       %xmm2, %xmm0
	LONG $0xc6640f66  // pcmpgtb      %xmm6, %xmm0
	LONG $0xf3640f66  // pcmpgtb      %xmm3, %xmm6
	LONG $0xf0db0f66  // pand         %xmm0, %xmm6
	LONG $0x20e6c148  // shlq         $32, %rsi
	WORD $0x0949; BYTE $0xf7  // orq          %rsi, %r15
	LONG $0xf6d70f66  // pmovmskb     %xmm6, %esi
	LONG $0xc26f0f66  // movdqa       %xmm2, %xmm0
	LONG $0xc5640f66  // pcmpgtb      %xmm5, %xmm0
	LONG $0xeb640f66  // pcmpgtb      %xmm3, %xmm5
	LONG $0xe8db0f66  // pand         %xmm0, %xmm5
	LONG $0x30e2c148  // shlq         $48, %rdx
	WORD $0x0949; BYTE $0xd7  // orq          %rdx, %r15
	LONG $0xd5d70f66  // pmovmskb     %xmm5, %edx
	LONG $0xc26f0f66  // movdqa       %xmm2, %xmm0
	LONG $0xc4640f66  // pcmpgtb      %xmm4, %xmm0
	LONG $0xe3640f66  // pcmpgtb      %xmm3, %xmm4
	LONG $0xe0db0f66  // pand         %xmm0, %xmm4
	LONG $0x10e6c148  // shlq         $16, %rsi
	WORD $0x0949; BYTE $0xf6  // orq          %rsi, %r14
	LONG $0xd70f4466; BYTE $0xc4  // pmovmskb     %xmm4, %r8d
	LONG $0x30e4c149  // shlq         $48, %r12
	LONG $0x20e2c148  // shlq         $32, %rdx
	LONG $0xfffb8349  // cmpq         $-1, %r11
	LONG $0x0009850f; WORD $0x0000  // jne          LBB0_17, $9(%rip)
	WORD $0x854d; BYTE $0xff  // testq        %r15, %r15
	LONG $0x009c850f; WORD $0x0000  // jne          LBB0_22, $156(%rip)
LBB0_17:
	LONG $0x30e0c149  // shlq         $48, %r8
	WORD $0x0949; BYTE $0xd6  // orq          %rdx, %r14
	WORD $0x094c; BYTE $0xe3  // orq          %r12, %rbx
	WORD $0x894c; BYTE $0xfa  // movq         %r15, %rdx
	WORD $0x094c; BYTE $0xca  // orq          %r9, %rdx
	LONG $0x002c850f; WORD $0x0000  // jne          LBB0_21, $44(%rip)
	WORD $0x094d; BYTE $0xc6  // orq          %r8, %r14
	WORD $0x8548; BYTE $0xdb  // testq        %rbx, %rbx
	LONG $0x008d850f; WORD $0x0000  // jne          LBB0_23, $141(%rip)
LBB0_19:
	WORD $0x854d; BYTE $0xf6  // testq        %r14, %r14
	LONG $0x018f850f; WORD $0x0000  // jne          LBB0_35, $399(%rip)
	LONG $0xc0c08348  // addq         $-64, %rax
	LONG $0x40c18348  // addq         $64, %rcx
	LONG $0x3ff88348  // cmpq         $63, %rax
	LONG $0xfeb3870f; WORD $0xffff  // ja           LBB0_15, $-333(%rip)
	LONG $0x000190e9; BYTE $0x00  // jmp          LBB0_37, $400(%rip)
LBB0_21:
	WORD $0x894c; BYTE $0xca  // movq         %r9, %rdx
	WORD $0xf748; BYTE $0xd2  // notq         %rdx
	WORD $0x214c; BYTE $0xfa  // andq         %r15, %rdx
	LONG $0x12248d4c  // leaq         (%rdx,%rdx), %r12
	WORD $0x094d; BYTE $0xcc  // orq          %r9, %r12
	WORD $0x894c; BYTE $0xe7  // movq         %r12, %rdi
	WORD $0xf748; BYTE $0xd7  // notq         %rdi
	WORD $0x214c; BYTE $0xff  // andq         %r15, %rdi
	QUAD $0xaaaaaaaaaaaabe48; WORD $0xaaaa  // movabsq      $-6148914691236517206, %rsi
	WORD $0x2148; BYTE $0xf7  // andq         %rsi, %rdi
	WORD $0x3145; BYTE $0xc9  // xorl         %r9d, %r9d
	WORD $0x0148; BYTE $0xd7  // addq         %rdx, %rdi
	LONG $0xc1920f41  // setb         %r9b
	WORD $0x0148; BYTE $0xff  // addq         %rdi, %rdi
	QUAD $0x555555555555ba48; WORD $0x5555  // movabsq      $6148914691236517205, %rdx
	WORD $0x3148; BYTE $0xd7  // xorq         %rdx, %rdi
	WORD $0x214c; BYTE $0xe7  // andq         %r12, %rdi
	WORD $0xf748; BYTE $0xd7  // notq         %rdi
	WORD $0x2148; BYTE $0xfb  // andq         %rdi, %rbx
	WORD $0x094d; BYTE $0xc6  // orq          %r8, %r14
	WORD $0x8548; BYTE $0xdb  // testq        %rbx, %rbx
	LONG $0xff8b840f; WORD $0xffff  // je           LBB0_19, $-117(%rip)
	LONG $0x000013e9; BYTE $0x00  // jmp          LBB0_23, $19(%rip)
LBB0_22:
	WORD $0x8948; BYTE $0xce  // movq         %rcx, %rsi
	LONG $0xd0752b48  // subq         $-48(%rbp), %rsi
	LONG $0xdfbc0f4d  // bsfq         %r15, %r11
	WORD $0x0149; BYTE $0xf3  // addq         %rsi, %r11
	LONG $0xffff51e9; BYTE $0xff  // jmp          LBB0_17, $-175(%rip)
LBB0_23:
	LONG $0xc3bc0f48  // bsfq         %rbx, %rax
	WORD $0x854d; BYTE $0xf6  // testq        %r14, %r14
	LONG $0x001a840f; WORD $0x0000  // je           LBB0_25, $26(%rip)
	LONG $0xd6bc0f49  // bsfq         %r14, %rdx
	LONG $0xb85d8b48  // movq         $-72(%rbp), %rbx
	LONG $0xc0758b48  // movq         $-64(%rbp), %rsi
	WORD $0x3948; BYTE $0xc2  // cmpq         %rax, %rdx
	LONG $0x001b830f; WORD $0x0000  // jae          LBB0_26, $27(%rip)
	LONG $0x000491e9; BYTE $0x00  // jmp          LBB0_80, $1169(%rip)
LBB0_25:
	LONG $0x000040ba; BYTE $0x00  // movl         $64, %edx
	LONG $0xb85d8b48  // movq         $-72(%rbp), %rbx
	LONG $0xc0758b48  // movq         $-64(%rbp), %rsi
	WORD $0x3948; BYTE $0xc2  // cmpq         %rax, %rdx
	LONG $0x047b820f; WORD $0x0000  // jb           LBB0_80, $1147(%rip)
LBB0_26:
	LONG $0xd04d2b48  // subq         $-48(%rbp), %rcx
	LONG $0x017c8d48; BYTE $0x01  // leaq         $1(%rcx,%rax), %rdi
LBB0_27:
	WORD $0x8548; BYTE $0xff  // testq        %rdi, %rdi
	LONG $0x0470880f; WORD $0x0000  // js           LBB0_81, $1136(%rip)
	WORD $0x8948; BYTE $0x3e  // movq         %rdi, (%rsi)
	LONG $0x1053894c  // movq         %r10, $16(%rbx)
	LONG $0x0703c748; WORD $0x0000; BYTE $0x00  // movq         $7, (%rbx)
	WORD $0x3949; BYTE $0xfb  // cmpq         %rdi, %r11
	LONG $0xffc0c748; WORD $0xffff; BYTE $0xff  // movq         $-1, %rax
	LONG $0xc34c0f49  // cmovlq       %r11, %rax
	LONG $0x18438948  // movq         %rax, $24(%rbx)
	LONG $0x000455e9; BYTE $0x00  // jmp          LBB0_83, $1109(%rip)
LBB0_29:
	LONG $0xb04d8b48  // movq         $-80(%rbp), %rcx
	WORD $0x894c; BYTE $0xe8  // movq         %r13, %rax
	LONG $0x20f88348  // cmpq         $32, %rax
	LONG $0x0289820f; WORD $0x0000  // jb           LBB0_57, $649(%rip)
LBB0_30:
	LONG $0x016f0ff3  // movdqu       (%rcx), %xmm0
	LONG $0x496f0ff3; BYTE $0x10  // movdqu       $16(%rcx), %xmm1
	QUAD $0xfffffb1b156f0ff3  // movdqu       $-1253(%rip), %xmm2  /* LCPI0_0+0(%rip) */
	QUAD $0xfffffb231d6f0ff3  // movdqu       $-1245(%rip), %xmm3  /* LCPI0_1+0(%rip) */
	LONG $0xe06f0f66  // movdqa       %xmm0, %xmm4
	LONG $0xe2740f66  // pcmpeqb      %xmm2, %xmm4
	LONG $0xd4d70f66  // pmovmskb     %xmm4, %edx
	LONG $0xd1740f66  // pcmpeqb      %xmm1, %xmm2
	LONG $0xd70f4466; BYTE $0xfa  // pmovmskb     %xmm2, %r15d
	LONG $0xc3740f66  // pcmpeqb      %xmm3, %xmm0
	LONG $0xd70f4466; BYTE $0xf0  // pmovmskb     %xmm0, %r14d
	LONG $0xcb740f66  // pcmpeqb      %xmm3, %xmm1
	LONG $0xf9d70f66  // pmovmskb     %xmm1, %edi
	LONG $0x10e7c149  // shlq         $16, %r15
	LONG $0x10e7c148  // shlq         $16, %rdi
	WORD $0x0949; BYTE $0xfe  // orq          %rdi, %r14
	LONG $0xfffb8349  // cmpq         $-1, %r11
	LONG $0x011b850f; WORD $0x0000  // jne          LBB0_43, $283(%rip)
	WORD $0x854d; BYTE $0xf6  // testq        %r14, %r14
	LONG $0xb85d8b48  // movq         $-72(%rbp), %rbx
	LONG $0xc0758b48  // movq         $-64(%rbp), %rsi
	LONG $0x03ee850f; WORD $0x0000  // jne          LBB0_84, $1006(%rip)
	WORD $0x0949; BYTE $0xd7  // orq          %rdx, %r15
	WORD $0x894c; BYTE $0xf2  // movq         %r14, %rdx
	WORD $0x094c; BYTE $0xc2  // orq          %r8, %rdx
	LONG $0x0112850f; WORD $0x0000  // jne          LBB0_44, $274(%rip)
LBB0_33:
	WORD $0x854d; BYTE $0xff  // testq        %r15, %r15
	LONG $0x014b840f; WORD $0x0000  // je           LBB0_45, $331(%rip)
LBB0_34:
	LONG $0xc7bc0f49  // bsfq         %r15, %rax
	LONG $0xffff32e9; BYTE $0xff  // jmp          LBB0_26, $-206(%rip)
LBB0_35:
	LONG $0xfec7c748; WORD $0xffff; BYTE $0xff  // movq         $-2, %rdi
LBB0_36:
	LONG $0xc8558b4c  // movq         $-56(%rbp), %r10
	LONG $0xb85d8b48  // movq         $-72(%rbp), %rbx
	LONG $0xc0758b48  // movq         $-64(%rbp), %rsi
	LONG $0x0003a0e9; BYTE $0x00  // jmp          LBB0_82, $928(%rip)
LBB0_37:
	LONG $0xb04d8b48  // movq         $-80(%rbp), %rcx
	WORD $0x894c; BYTE $0xe8  // movq         %r13, %rax
	LONG $0xb85d8b48  // movq         $-72(%rbp), %rbx
	LONG $0xc0758b48  // movq         $-64(%rbp), %rsi
	LONG $0x20f88348  // cmpq         $32, %rax
	LONG $0x02c0820f; WORD $0x0000  // jb           LBB0_68, $704(%rip)
LBB0_38:
	LONG $0x016f0ff3  // movdqu       (%rcx), %xmm0
	LONG $0x496f0ff3; BYTE $0x10  // movdqu       $16(%rcx), %xmm1
	QUAD $0xfffffa64156f0ff3  // movdqu       $-1436(%rip), %xmm2  /* LCPI0_0+0(%rip) */
	LONG $0xd86f0f66  // movdqa       %xmm0, %xmm3
	LONG $0xda740f66  // pcmpeqb      %xmm2, %xmm3
	LONG $0xd70f4466; BYTE $0xe3  // pmovmskb     %xmm3, %r12d
	LONG $0xd1740f66  // pcmpeqb      %xmm1, %xmm2
	LONG $0xfad70f66  // pmovmskb     %xmm2, %edi
	QUAD $0xfffffa57156f0ff3  // movdqu       $-1449(%rip), %xmm2  /* LCPI0_1+0(%rip) */
	LONG $0xd86f0f66  // movdqa       %xmm0, %xmm3
	LONG $0xda740f66  // pcmpeqb      %xmm2, %xmm3
	LONG $0xd70f4466; BYTE $0xfb  // pmovmskb     %xmm3, %r15d
	LONG $0xd1740f66  // pcmpeqb      %xmm1, %xmm2
	LONG $0xd2d70f66  // pmovmskb     %xmm2, %edx
	QUAD $0xfffffa4a156f0ff3  // movdqu       $-1462(%rip), %xmm2  /* LCPI0_2+0(%rip) */
	LONG $0xda6f0f66  // movdqa       %xmm2, %xmm3
	LONG $0xd8640f66  // pcmpgtb      %xmm0, %xmm3
	LONG $0xe4760f66  // pcmpeqd      %xmm4, %xmm4
	LONG $0xc4640f66  // pcmpgtb      %xmm4, %xmm0
	LONG $0xc3db0f66  // pand         %xmm3, %xmm0
	LONG $0xd1640f66  // pcmpgtb      %xmm1, %xmm2
	LONG $0xcc640f66  // pcmpgtb      %xmm4, %xmm1
	LONG $0xcadb0f66  // pand         %xmm2, %xmm1
	LONG $0xd70f4466; BYTE $0xf1  // pmovmskb     %xmm1, %r14d
	LONG $0x10e7c148  // shlq         $16, %rdi
	LONG $0x10e2c148  // shlq         $16, %rdx
	WORD $0x0949; BYTE $0xd7  // orq          %rdx, %r15
	LONG $0xfffb8349  // cmpq         $-1, %r11
	LONG $0x0009850f; WORD $0x0000  // jne          LBB0_40, $9(%rip)
	WORD $0x854d; BYTE $0xff  // testq        %r15, %r15
	LONG $0x0330850f; WORD $0x0000  // jne          LBB0_85, $816(%rip)
LBB0_40:
	LONG $0xd70f4466; BYTE $0xc0  // pmovmskb     %xmm0, %r8d
	WORD $0x094c; BYTE $0xe7  // orq          %r12, %rdi
	WORD $0x894c; BYTE $0xfa  // movq         %r15, %rdx
	WORD $0x094c; BYTE $0xca  // orq          %r9, %rdx
	LONG $0x01a2850f; WORD $0x0000  // jne          LBB0_61, $418(%rip)
	LONG $0x10e6c149  // shlq         $16, %r14
	WORD $0x8548; BYTE $0xff  // testq        %rdi, %rdi
	LONG $0x01dd840f; WORD $0x0000  // je           LBB0_62, $477(%rip)
LBB0_42:
	LONG $0xd7bc0f48  // bsfq         %rdi, %rdx
	LONG $0x0001d9e9; BYTE $0x00  // jmp          LBB0_63, $473(%rip)
LBB0_43:
	LONG $0xb85d8b48  // movq         $-72(%rbp), %rbx
	LONG $0xc0758b48  // movq         $-64(%rbp), %rsi
	WORD $0x0949; BYTE $0xd7  // orq          %rdx, %r15
	WORD $0x894c; BYTE $0xf2  // movq         %r14, %rdx
	WORD $0x094c; BYTE $0xc2  // orq          %r8, %rdx
	LONG $0xfeee840f; WORD $0xffff  // je           LBB0_33, $-274(%rip)
LBB0_44:
	WORD $0x8944; BYTE $0xc2  // movl         %r8d, %edx
	WORD $0xd2f7  // notl         %edx
	WORD $0x2144; BYTE $0xf2  // andl         %r14d, %edx
	LONG $0x120c8d44  // leal         (%rdx,%rdx), %r9d
	WORD $0x0945; BYTE $0xc1  // orl          %r8d, %r9d
	LONG $0xaaaaaabf; BYTE $0xaa  // movl         $2863311530, %edi
	WORD $0x3144; BYTE $0xcf  // xorl         %r9d, %edi
	WORD $0x2144; BYTE $0xf7  // andl         %r14d, %edi
	LONG $0xaaaae781; WORD $0xaaaa  // andl         $-1431655766, %edi
	WORD $0x3145; BYTE $0xc0  // xorl         %r8d, %r8d
	WORD $0xd701  // addl         %edx, %edi
	LONG $0xc0920f41  // setb         %r8b
	WORD $0xff01  // addl         %edi, %edi
	LONG $0x5555f781; WORD $0x5555  // xorl         $1431655765, %edi
	WORD $0x2144; BYTE $0xcf  // andl         %r9d, %edi
	WORD $0xd7f7  // notl         %edi
	WORD $0x2141; BYTE $0xff  // andl         %edi, %r15d
	WORD $0x854d; BYTE $0xff  // testq        %r15, %r15
	LONG $0xfeb5850f; WORD $0xffff  // jne          LBB0_34, $-331(%rip)
LBB0_45:
	LONG $0x20c18348  // addq         $32, %rcx
	LONG $0xe0c08348  // addq         $-32, %rax
	WORD $0x854d; BYTE $0xc0  // testq        %r8, %r8
	LONG $0x00c1850f; WORD $0x0000  // jne          LBB0_58, $193(%rip)
LBB0_46:
	WORD $0x894d; BYTE $0xd8  // movq         %r11, %r8
	LONG $0xffc7c748; WORD $0xffff; BYTE $0xff  // movq         $-1, %rdi
	WORD $0x8548; BYTE $0xc0  // testq        %rax, %rax
	LONG $0x024e840f; WORD $0x0000  // je           LBB0_81, $590(%rip)
LBB0_47:
	LONG $0xd0758b4c  // movq         $-48(%rbp), %r14
	WORD $0xf749; BYTE $0xd6  // notq         %r14
LBB0_48:
	LONG $0x01798d4c  // leaq         $1(%rcx), %r15
	WORD $0xb60f; BYTE $0x11  // movzbl       (%rcx), %edx
	WORD $0xfa80; BYTE $0x22  // cmpb         $34, %dl
	LONG $0x005a840f; WORD $0x0000  // je           LBB0_53, $90(%rip)
	LONG $0xff488d4c  // leaq         $-1(%rax), %r9
	WORD $0xfa80; BYTE $0x5c  // cmpb         $92, %dl
	LONG $0x0014840f; WORD $0x0000  // je           LBB0_51, $20(%rip)
	WORD $0x894c; BYTE $0xc8  // movq         %r9, %rax
	WORD $0x894c; BYTE $0xf9  // movq         %r15, %rcx
	WORD $0x854d; BYTE $0xc9  // testq        %r9, %r9
	LONG $0xffd4850f; WORD $0xffff  // jne          LBB0_48, $-44(%rip)
	LONG $0x000216e9; BYTE $0x00  // jmp          LBB0_81, $534(%rip)
LBB0_51:
	WORD $0x854d; BYTE $0xc9  // testq        %r9, %r9
	LONG $0xfe60840f; WORD $0xffff  // je           LBB0_36, $-416(%rip)
	WORD $0x014d; BYTE $0xf7  // addq         %r14, %r15
	LONG $0xfff88349  // cmpq         $-1, %r8
	LONG $0xdf440f4d  // cmoveq       %r15, %r11
	LONG $0xc7440f4d  // cmoveq       %r15, %r8
	LONG $0x02c18348  // addq         $2, %rcx
	LONG $0xfec08348  // addq         $-2, %rax
	WORD $0x8949; BYTE $0xc1  // movq         %rax, %r9
	LONG $0xb85d8b48  // movq         $-72(%rbp), %rbx
	LONG $0xc0758b48  // movq         $-64(%rbp), %rsi
	WORD $0x854d; BYTE $0xc9  // testq        %r9, %r9
	LONG $0xff9b850f; WORD $0xffff  // jne          LBB0_48, $-101(%rip)
	LONG $0x0001dde9; BYTE $0x00  // jmp          LBB0_81, $477(%rip)
LBB0_53:
	LONG $0xd07d2b4c  // subq         $-48(%rbp), %r15
	WORD $0x894c; BYTE $0xff  // movq         %r15, %rdi
	LONG $0xfffd58e9; BYTE $0xff  // jmp          LBB0_27, $-680(%rip)
LBB0_55:
	LONG $0xffc7c748; WORD $0xffff; BYTE $0xff  // movq         $-1, %rdi
	LONG $0x0001c9e9; BYTE $0x00  // jmp          LBB0_82, $457(%rip)
LBB0_56:
	LONG $0xffc3c749; WORD $0xffff; BYTE $0xff  // movq         $-1, %r11
	WORD $0x3145; BYTE $0xc0  // xorl         %r8d, %r8d
	LONG $0x20f88348  // cmpq         $32, %rax
	LONG $0xfd77830f; WORD $0xffff  // jae          LBB0_30, $-649(%rip)
LBB0_57:
	LONG $0xb85d8b48  // movq         $-72(%rbp), %rbx
	LONG $0xc0758b48  // movq         $-64(%rbp), %rsi
	WORD $0x854d; BYTE $0xc0  // testq        %r8, %r8
	LONG $0xff3f840f; WORD $0xffff  // je           LBB0_46, $-193(%rip)
LBB0_58:
	WORD $0x8548; BYTE $0xc0  // testq        %rax, %rax
	LONG $0x0225840f; WORD $0x0000  // je           LBB0_88, $549(%rip)
	LONG $0xd0458b4c  // movq         $-48(%rbp), %r8
	WORD $0xf749; BYTE $0xd0  // notq         %r8
	WORD $0x0149; BYTE $0xc8  // addq         %rcx, %r8
	LONG $0xfffb8349  // cmpq         $-1, %r11
	WORD $0x894c; BYTE $0xda  // movq         %r11, %rdx
	LONG $0xd0440f49  // cmoveq       %r8, %rdx
	LONG $0xc3450f4d  // cmovneq      %r11, %r8
	WORD $0xff48; BYTE $0xc1  // incq         %rcx
	WORD $0xff48; BYTE $0xc8  // decq         %rax
	WORD $0x8949; BYTE $0xd3  // movq         %rdx, %r11
	LONG $0xb85d8b48  // movq         $-72(%rbp), %rbx
	LONG $0xc0758b48  // movq         $-64(%rbp), %rsi
	LONG $0xffc7c748; WORD $0xffff; BYTE $0xff  // movq         $-1, %rdi
	WORD $0x8548; BYTE $0xc0  // testq        %rax, %rax
	LONG $0xff0f850f; WORD $0xffff  // jne          LBB0_47, $-241(%rip)
	LONG $0x000158e9; BYTE $0x00  // jmp          LBB0_81, $344(%rip)
LBB0_60:
	LONG $0xffc3c749; WORD $0xffff; BYTE $0xff  // movq         $-1, %r11
	WORD $0x3145; BYTE $0xc9  // xorl         %r9d, %r9d
	LONG $0x20f88348  // cmpq         $32, %rax
	LONG $0xfdc1830f; WORD $0xffff  // jae          LBB0_38, $-575(%rip)
	LONG $0x00007ce9; BYTE $0x00  // jmp          LBB0_68, $124(%rip)
LBB0_61:
	WORD $0x8945; BYTE $0xcd  // movl         %r9d, %r13d
	WORD $0xf741; BYTE $0xd5  // notl         %r13d
	WORD $0x2145; BYTE $0xfd  // andl         %r15d, %r13d
	LONG $0x2d648d47; BYTE $0x00  // leal         (%r13,%r13), %r12d
	WORD $0x0945; BYTE $0xcc  // orl          %r9d, %r12d
	LONG $0xaaaaaaba; BYTE $0xaa  // movl         $2863311530, %edx
	WORD $0x3144; BYTE $0xe2  // xorl         %r12d, %edx
	WORD $0x2144; BYTE $0xfa  // andl         %r15d, %edx
	LONG $0xaaaae281; WORD $0xaaaa  // andl         $-1431655766, %edx
	WORD $0x3145; BYTE $0xc9  // xorl         %r9d, %r9d
	WORD $0x0144; BYTE $0xea  // addl         %r13d, %edx
	LONG $0xc1920f41  // setb         %r9b
	WORD $0xd201  // addl         %edx, %edx
	LONG $0x5555f281; WORD $0x5555  // xorl         $1431655765, %edx
	WORD $0x2144; BYTE $0xe2  // andl         %r12d, %edx
	WORD $0xd2f7  // notl         %edx
	WORD $0xd721  // andl         %edx, %edi
	LONG $0x10e6c149  // shlq         $16, %r14
	WORD $0x8548; BYTE $0xff  // testq        %rdi, %rdi
	LONG $0xfe23850f; WORD $0xffff  // jne          LBB0_42, $-477(%rip)
LBB0_62:
	LONG $0x000040ba; BYTE $0x00  // movl         $64, %edx
LBB0_63:
	WORD $0x094d; BYTE $0xc6  // orq          %r8, %r14
	WORD $0x8548; BYTE $0xff  // testq        %rdi, %rdi
	LONG $0x0012840f; WORD $0x0000  // je           LBB0_66, $18(%rip)
	WORD $0x854d; BYTE $0xf6  // testq        %r14, %r14
	LONG $0x00ab840f; WORD $0x0000  // je           LBB0_76, $171(%rip)
	LONG $0xc6bc0f49  // bsfq         %r14, %rax
	LONG $0x0000a7e9; BYTE $0x00  // jmp          LBB0_77, $167(%rip)
LBB0_66:
	WORD $0x854d; BYTE $0xf6  // testq        %r14, %r14
	LONG $0x00c4850f; WORD $0x0000  // jne          LBB0_80, $196(%rip)
	LONG $0x20c18348  // addq         $32, %rcx
	LONG $0xe0c08348  // addq         $-32, %rax
LBB0_68:
	WORD $0x854d; BYTE $0xc9  // testq        %r9, %r9
	LONG $0x0108850f; WORD $0x0000  // jne          LBB0_86, $264(%rip)
	WORD $0x894d; BYTE $0xd8  // movq         %r11, %r8
	LONG $0xffc7c748; WORD $0xffff; BYTE $0xff  // movq         $-1, %rdi
	WORD $0x8548; BYTE $0xc0  // testq        %rax, %rax
	LONG $0x00a7840f; WORD $0x0000  // je           LBB0_81, $167(%rip)
LBB0_70:
	WORD $0xb60f; BYTE $0x11  // movzbl       (%rcx), %edx
	WORD $0xfa80; BYTE $0x22  // cmpb         $34, %dl
	LONG $0x0085840f; WORD $0x0000  // je           LBB0_79, $133(%rip)
	WORD $0xfa80; BYTE $0x5c  // cmpb         $92, %dl
	LONG $0x0026840f; WORD $0x0000  // je           LBB0_74, $38(%rip)
	WORD $0xfa80; BYTE $0x20  // cmpb         $32, %dl
	LONG $0x0082820f; WORD $0x0000  // jb           LBB0_80, $130(%rip)
	LONG $0xffc1c749; WORD $0xffff; BYTE $0xff  // movq         $-1, %r9
	LONG $0x000001ba; BYTE $0x00  // movl         $1, %edx
	WORD $0x0148; BYTE $0xd1  // addq         %rdx, %rcx
	WORD $0x014c; BYTE $0xc8  // addq         %r9, %rax
	LONG $0xffca850f; WORD $0xffff  // jne          LBB0_70, $-54(%rip)
	LONG $0x00006ce9; BYTE $0x00  // jmp          LBB0_81, $108(%rip)
LBB0_74:
	LONG $0x01f88348  // cmpq         $1, %rax
	LONG $0x0062840f; WORD $0x0000  // je           LBB0_81, $98(%rip)
	WORD $0x8948; BYTE $0xca  // movq         %rcx, %rdx
	LONG $0xd0552b48  // subq         $-48(%rbp), %rdx
	LONG $0xfff88349  // cmpq         $-1, %r8
	LONG $0xda440f4c  // cmoveq       %rdx, %r11
	LONG $0xc2440f4c  // cmoveq       %rdx, %r8
	LONG $0xfec1c749; WORD $0xffff; BYTE $0xff  // movq         $-2, %r9
	LONG $0x000002ba; BYTE $0x00  // movl         $2, %edx
	WORD $0x0148; BYTE $0xd1  // addq         %rdx, %rcx
	WORD $0x014c; BYTE $0xc8  // addq         %r9, %rax
	LONG $0xff90850f; WORD $0xffff  // jne          LBB0_70, $-112(%rip)
	LONG $0x000032e9; BYTE $0x00  // jmp          LBB0_81, $50(%rip)
LBB0_76:
	LONG $0x000040b8; BYTE $0x00  // movl         $64, %eax
LBB0_77:
	WORD $0x3948; BYTE $0xd0  // cmpq         %rdx, %rax
	LONG $0x001d820f; WORD $0x0000  // jb           LBB0_80, $29(%rip)
	LONG $0xd04d2b48  // subq         $-48(%rbp), %rcx
	LONG $0x117c8d48; BYTE $0x01  // leaq         $1(%rcx,%rdx), %rdi
	LONG $0xfffb9de9; BYTE $0xff  // jmp          LBB0_27, $-1123(%rip)
LBB0_79:
	LONG $0xd04d2b48  // subq         $-48(%rbp), %rcx
	WORD $0xff48; BYTE $0xc1  // incq         %rcx
	WORD $0x8948; BYTE $0xcf  // movq         %rcx, %rdi
	LONG $0xfffb8ee9; BYTE $0xff  // jmp          LBB0_27, $-1138(%rip)
LBB0_80:
	LONG $0xfec7c748; WORD $0xffff; BYTE $0xff  // movq         $-2, %rdi
LBB0_81:
	LONG $0xc8558b4c  // movq         $-56(%rbp), %r10
LBB0_82:
	WORD $0x894c; BYTE $0x16  // movq         %r10, (%rsi)
	WORD $0x8948; BYTE $0x3b  // movq         %rdi, (%rbx)
LBB0_83:
	LONG $0x28c48348  // addq         $40, %rsp
	BYTE $0x5b  // popq         %rbx
	WORD $0x5c41  // popq         %r12
	WORD $0x5d41  // popq         %r13
	WORD $0x5e41  // popq         %r14
	WORD $0x5f41  // popq         %r15
	BYTE $0x5d  // popq         %rbp
	BYTE $0xc3  // retq         
LBB0_84:
	WORD $0x8948; BYTE $0xcf  // movq         %rcx, %rdi
	LONG $0xd07d2b48  // subq         $-48(%rbp), %rdi
	LONG $0xdebc0f4d  // bsfq         %r14, %r11
	WORD $0x0149; BYTE $0xfb  // addq         %rdi, %r11
	WORD $0x0949; BYTE $0xd7  // orq          %rdx, %r15
	WORD $0x894c; BYTE $0xf2  // movq         %r14, %rdx
	WORD $0x094c; BYTE $0xc2  // orq          %r8, %rdx
	LONG $0xfc04840f; WORD $0xffff  // je           LBB0_33, $-1020(%rip)
	LONG $0xfffd11e9; BYTE $0xff  // jmp          LBB0_44, $-751(%rip)
LBB0_85:
	WORD $0x8948; BYTE $0xca  // movq         %rcx, %rdx
	LONG $0xd0552b48  // subq         $-48(%rbp), %rdx
	LONG $0xdfbc0f4d  // bsfq         %r15, %r11
	WORD $0x0149; BYTE $0xd3  // addq         %rdx, %r11
	LONG $0xfffcbde9; BYTE $0xff  // jmp          LBB0_40, $-835(%rip)
LBB0_86:
	WORD $0x8548; BYTE $0xc0  // testq        %rax, %rax
	LONG $0x0043840f; WORD $0x0000  // je           LBB0_89, $67(%rip)
	LONG $0xd0458b4c  // movq         $-48(%rbp), %r8
	WORD $0xf749; BYTE $0xd0  // notq         %r8
	WORD $0x0149; BYTE $0xc8  // addq         %rcx, %r8
	LONG $0xfffb8349  // cmpq         $-1, %r11
	WORD $0x894c; BYTE $0xda  // movq         %r11, %rdx
	LONG $0xd0440f49  // cmoveq       %r8, %rdx
	LONG $0xc3450f4d  // cmovneq      %r11, %r8
	WORD $0xff48; BYTE $0xc1  // incq         %rcx
	WORD $0xff48; BYTE $0xc8  // decq         %rax
	WORD $0x8949; BYTE $0xd3  // movq         %rdx, %r11
	LONG $0xffc7c748; WORD $0xffff; BYTE $0xff  // movq         $-1, %rdi
	WORD $0x8548; BYTE $0xc0  // testq        %rax, %rax
	LONG $0xfed0850f; WORD $0xffff  // jne          LBB0_70, $-304(%rip)
	LONG $0xffff72e9; BYTE $0xff  // jmp          LBB0_81, $-142(%rip)
LBB0_88:
	LONG $0xffc7c748; WORD $0xffff; BYTE $0xff  // movq         $-1, %rdi
	LONG $0xfffbb9e9; BYTE $0xff  // jmp          LBB0_36, $-1095(%rip)
LBB0_89:
	LONG $0xffc7c748; WORD $0xffff; BYTE $0xff  // movq         $-1, %rdi
	LONG $0xffff5ae9; BYTE $0xff  // jmp          LBB0_81, $-166(%rip)
	  // .p2align 2, 0x00
_MASK_USE_NUMBER:
	LONG $0x00000002  // .long 2

TEXT Â·__vstring(SB), NOSPLIT | NOFRAME, $0 - 32
	NO_LOCAL_POINTERS

_entry:
	MOVQ (TLS), R14
	LEAQ -88(SP), R12
	CMPQ R12, 16(R14)
	JBE  _stack_grow

_vstring:
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ v+16(FP), DX
	MOVQ flags+24(FP), CX
	MOVQ Â·_subr__vstring(SB), R9
	LONG $0x05158d4c; WORD $0x0000; BYTE $0x00  // leaq         $5(%rip), %r10
	WORD $0x5241  // pushq        %r10
	JMP R9
	RET

_stack_grow:
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry
