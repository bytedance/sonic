// +build !noasm !appengine
// Code generated by asm2asm, DO NOT EDIT.

#include "go_asm.h"
#include "textflag.h"

TEXT Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___(SB), NOSPLIT, $0
_lzero:
	BYTE $0x55               // pushq        %rbp
	WORD $0x8948; BYTE $0xe5 // movq         %rsp, %rbp
	CMPQ SI, $32
	JB   LBB0_3

LBB0_1:
	LONG $0x076ffec5             // vmovdqu      (%rdi), %ymm0
	LONG $0x177de2c4; BYTE $0xc0 // vptest       %ymm0, %ymm0
	JNE  LBB0_9
	ADDQ $32, DI
	ADDQ $-32, SI
	CMPQ SI, $31
	JA   LBB0_1

LBB0_3:
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	CMPQ SI, $16
	JB   LBB0_6

LBB0_4:
	LONG $0x076ffac5             // vmovdqu      (%rdi), %xmm0
	LONG $0x1779e2c4; BYTE $0xc0 // vptest       %xmm0, %xmm0
	JNE  LBB0_10
	ADDQ $16, DI
	ADDQ $-16, SI
	CMPQ SI, $15
	JA   LBB0_4

LBB0_6:
	CMPQ SI, $8
	JB   LBB0_12
	MOVL $1, AX
	CMPQ 0(DI), $0
	JNE  LBB0_8
	ADDQ $8, DI
	ADDQ $-8, SI

LBB0_12:
	CMPQ SI, $4
	JB   LBB0_15
	MOVL $1, AX
	CMPL 0(DI), $0
	JNE  LBB0_8
	ADDQ $4, DI
	ADDQ $-4, SI

LBB0_15:
	CMPQ SI, $2
	JB   LBB0_18
	MOVL $1, AX
	CMPW 0(DI), $0
	JNE  LBB0_8
	ADDQ $2, DI
	ADDQ $-2, SI

LBB0_18:
	XORL  AX, AX
	TESTQ SI, SI
	JE    LBB0_8
	CMPB  0(DI), $0
	SETNE AX
	BYTE  $0x5d     // popq         %rbp
	RET

LBB0_8:
	BYTE $0x5d // popq         %rbp
	RET

LBB0_9:
	WORD $0xf8c5; BYTE $0x77 // vzeroupper

LBB0_10:
	MOVL $1, AX
	BYTE $0x5d  // popq         %rbp
	RET

LCPI1_0:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI1_1:
	QUAD $0x0909090909090909; QUAD $0x0909090909090909 // .space 16, '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'
	QUAD $0x0909090909090909; QUAD $0x0909090909090909 // .space 16, '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'

LCPI1_2:
	QUAD $0x0a0a0a0a0a0a0a0a; QUAD $0x0a0a0a0a0a0a0a0a // .space 16, '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'
	QUAD $0x0a0a0a0a0a0a0a0a; QUAD $0x0a0a0a0a0a0a0a0a // .space 16, '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'

LCPI1_3:
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'

LCPI1_4:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI1_5:
	QUAD $0x0909090909090909; QUAD $0x0909090909090909 // .space 16, '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'

LCPI1_6:
	QUAD $0x0a0a0a0a0a0a0a0a; QUAD $0x0a0a0a0a0a0a0a0a // .space 16, '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'

LCPI1_7:
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'

_lspace:
	BYTE  $0x55               // pushq        %rbp
	WORD  $0x8948; BYTE $0xe5 // movq         %rsp, %rbp
	LEAQ  0(DI)(DX*1), AX
	SUBQ  DX, SI
	JE    LBB1_7
	MOVL  AX, CX
	ANDL  $31, CX
	TESTQ CX, CX
	JE    LBB1_7
	LEAQ  -1(SI), R9
	XORL  DX, DX
	MOVQ  $4294977024, R8

LBB1_3:
	MOVBLSX 0(AX)(DX*1), CX
	CMPL    CX, $32
	JA      LBB1_5
	BTQ     CX, R8
	JAE     LBB1_5
	LEAQ    1(DX), R10
	CMPQ    R9, DX
	JE      LBB1_6
	LEAQ    1(AX)(DX*1), CX
	ANDL    $31, CX
	MOVQ    R10, DX
	TESTQ   CX, CX
	JNE     LBB1_3

LBB1_6:
	ADDQ R10, AX
	SUBQ R10, SI

LBB1_7:
	CMPQ SI, $32
	JB   LBB1_14
	QUAD $0xfffffed5056ffec5 // vmovdqu      $-299(%rip), %ymm0  /* LCPI1_0(%rip) */
	QUAD $0xfffffeed0d6ffec5 // vmovdqu      $-275(%rip), %ymm1  /* LCPI1_1(%rip) */
	QUAD $0xffffff05156ffec5 // vmovdqu      $-251(%rip), %ymm2  /* LCPI1_2(%rip) */
	QUAD $0xffffff1d1d6ffec5 // vmovdqu      $-227(%rip), %ymm3  /* LCPI1_3(%rip) */

LBB1_9:
	LONG $0x206ffdc5 // vmovdqa      (%rax), %ymm4
	LONG $0xe874ddc5 // vpcmpeqb     %ymm0, %ymm4, %ymm5
	LONG $0xf174ddc5 // vpcmpeqb     %ymm1, %ymm4, %ymm6
	LONG $0xeeebd5c5 // vpor         %ymm6, %ymm5, %ymm5
	LONG $0xf274ddc5 // vpcmpeqb     %ymm2, %ymm4, %ymm6
	LONG $0xe374ddc5 // vpcmpeqb     %ymm3, %ymm4, %ymm4
	LONG $0xe6ebddc5 // vpor         %ymm6, %ymm4, %ymm4
	LONG $0xe5ebddc5 // vpor         %ymm5, %ymm4, %ymm4
	LONG $0xccd7fdc5 // vpmovmskb    %ymm4, %ecx
	CMPL CX, $-1
	JNE  LBB1_10
	ADDQ $32, AX
	ADDQ $-32, SI
	CMPQ SI, $31
	JA   LBB1_9

LBB1_14:
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	CMPQ SI, $16
	JB   LBB1_19
	QUAD $0xfffffef1056ffac5 // vmovdqu      $-271(%rip), %xmm0  /* LCPI1_4(%rip) */
	QUAD $0xfffffef90d6ffac5 // vmovdqu      $-263(%rip), %xmm1  /* LCPI1_5(%rip) */
	QUAD $0xffffff01156ffac5 // vmovdqu      $-255(%rip), %xmm2  /* LCPI1_6(%rip) */
	QUAD $0xffffff091d6ffac5 // vmovdqu      $-247(%rip), %xmm3  /* LCPI1_7(%rip) */

LBB1_16:
	LONG $0x206ff9c5 // vmovdqa      (%rax), %xmm4
	LONG $0xe874d9c5 // vpcmpeqb     %xmm0, %xmm4, %xmm5
	LONG $0xf174d9c5 // vpcmpeqb     %xmm1, %xmm4, %xmm6
	LONG $0xeeebd1c5 // vpor         %xmm6, %xmm5, %xmm5
	LONG $0xf274d9c5 // vpcmpeqb     %xmm2, %xmm4, %xmm6
	LONG $0xe374d9c5 // vpcmpeqb     %xmm3, %xmm4, %xmm4
	LONG $0xe6ebd9c5 // vpor         %xmm6, %xmm4, %xmm4
	LONG $0xe5ebd9c5 // vpor         %xmm5, %xmm4, %xmm4
	LONG $0xccd7f9c5 // vpmovmskb    %xmm4, %ecx
	CMPW CX, $-1
	JNE  LBB1_17
	ADDQ $16, AX
	ADDQ $-16, SI
	CMPQ SI, $15
	JA   LBB1_16

LBB1_19:
	TESTQ SI, SI
	JE    LBB1_26
	LEAQ  0(AX)(SI*1), R8
	INCQ  AX
	MOVQ  $4294977024, DX

LBB1_21:
	MOVBLSX -1(AX), CX
	CMPL    CX, $32
	JA      LBB1_23
	BTQ     CX, DX
	JAE     LBB1_23
	DECQ    SI
	INCQ    AX
	TESTQ   SI, SI
	JNE     LBB1_21
	MOVQ    R8, AX
	JMP     LBB1_26

LBB1_10:
	WORD    $0xf8c5; BYTE $0x77 // vzeroupper
	SUBQ    DI, AX
	NOTL    CX
	MOVLQSX CX, CX
	BSFQ    CX, CX
	ADDQ    CX, AX
	BYTE    $0x5d               // popq         %rbp
	RET

LBB1_5:
	ADDQ DX, AX

LBB1_26:
	SUBQ DI, AX
	BYTE $0x5d  // popq         %rbp
	RET

LBB1_17:
	MOVWLZX CX, CX
	SUBQ    DI, AX
	NOTL    CX
	BSFL    CX, CX
	ADDQ    CX, AX
	BYTE    $0x5d  // popq         %rbp
	RET

LBB1_23:
	NOTQ DI
	ADDQ DI, AX
	BYTE $0x5d  // popq         %rbp
	RET

LCPI2_0:
	QUAD $0x8000000000000000 // .quad 0x8000000000000000
	QUAD $0x8000000000000000 // .quad 0x8000000000000000

LCPI2_1:
	QUAD $0x3fd34413509f79fe // .quad 0x3fd34413509f79fe

LCPI2_2:
	QUAD $0x4075b00000000000 // .quad 0x4075b00000000000

LCPI2_3:
	QUAD $0x3030303030303030; QUAD $0x3030303030303030 // .space 16, '0000000000000000'
	QUAD $0x3030303030303030; QUAD $0x3030303030303030 // .space 16, '0000000000000000'

_f64toa:
	BYTE $0x55               // pushq        %rbp
	WORD $0x8948; BYTE $0xe5 // movq         %rsp, %rbp
	WORD $0x5741             // pushq        %r15
	WORD $0x5641             // pushq        %r14
	WORD $0x5541             // pushq        %r13
	WORD $0x5441             // pushq        %r12
	BYTE $0x53               // pushq        %rbx
	SUBQ $96, SP
	MOVQ DI, R15
	LONG $0xc957f1c5         // vxorpd       %xmm1, %xmm1, %xmm1
	LONG $0xc12ef9c5         // vucomisd     %xmm1, %xmm0
	JNE  LBB2_2
	JP   LBB2_2
	MOVB $48, 0(R15)
	MOVL $1, AX
	JMP  LBB2_89

LBB2_2:
	LONG $0xc82ef9c5         // vucomisd     %xmm0, %xmm1
	JBE  LBB2_4
	QUAD $0xffffff840557f9c5 // vxorpd       $-124(%rip), %xmm0, %xmm0  /* LCPI2_0(%rip) */
	MOVB $45, 0(R15)
	INCQ R15
	MOVL $1, -44(BP)
	JMP  LBB2_5

LBB2_4:
	MOVL $0, -44(BP)

LBB2_5:
	LONG    $0x7ef9e1c4; BYTE $0xc1               // vmovq        %xmm0, %rcx
	MOVQ    $4503599627370496, DX
	LEAQ    -1(DX), SI
	ANDQ    CX, SI
	SHRQ    $52, CX
	ANDL    $2047, CX
	LEAQ    0(SI)(DX*1), AX
	LEAL    -1075(CX), DI
	TESTL   CX, CX
	LONG    $0xc6440f48                           // cmoveq       %rsi, %rax
	MOVL    $-1074, SI
	WORD    $0x450f; BYTE $0xf7                   // cmovnel      %edi, %esi
	XORL    CX, CX
	CMPQ    AX, DX
	SETEQ   CX
	INCL    CX
	LEAQ    1(AX)(AX*1), R10
	BSRQ    R10, DX
	XORQ    $63, DX
	MOVL    DX, R12
	NOTL    R12
	ADDL    SI, R12
	SUBL    CX, SI
	MOVQ    AX, DI
	SHLQ    CX, DI
	DECQ    DI
	MOVL    DX, CX
	SHLQ    CX, R10
	SUBL    R12, SI
	MOVL    SI, CX
	SHLQ    CX, DI
	MOVL    $-61, CX
	SUBL    R12, CX
	LONG    $0xc12aebc5                           // vcvtsi2sd    %ecx, %xmm2, %xmm0
	QUAD    $0xfffffef90559fbc5                   // vmulsd       $-263(%rip), %xmm0, %xmm0  /* LCPI2_1(%rip) */
	QUAD    $0xfffffef90558fbc5                   // vaddsd       $-263(%rip), %xmm0, %xmm0  /* LCPI2_2(%rip) */
	LONG    $0xc82cfbc5                           // vcvttsd2si   %xmm0, %ecx
	LONG    $0xc8e6f9c5                           // vcvttpd2dq   %xmm0, %xmm1
	LONG    $0xc9e6fac5                           // vcvtdq2pd    %xmm1, %xmm1
	LONG    $0xc15cfbc5                           // vsubsd       %xmm1, %xmm0, %xmm0
	LONG    $0xc957f1c5                           // vxorpd       %xmm1, %xmm1, %xmm1
	XORL    DX, DX
	LONG    $0xc12ef9c5                           // vucomisd     %xmm1, %xmm0
	SETHI   DX
	ADDL    CX, DX
	SARL    $3, DX
	LEAL    8(DX*8), R14
	INCL    DX
	MOVL    $348, CX
	MOVQ    CX, -64(BP)
	LONG    $0xe90d8d48; WORD $0x0040; BYTE $0x00 // leaq         $16617(%rip), %rcx  /* _TabPowE(%rip) */
	MOVWLSX 0(CX)(DX*2), SI
	LONG    $0x8c0d8d48; WORD $0x0041; BYTE $0x00 // leaq         $16780(%rip), %rcx  /* _TabPowF(%rip) */
	MOVQ    0(CX)(DX*8), R8
	BSRQ    AX, CX
	XORL    $63, CX
	SHLQ    CX, AX
	MULQ    R8
	MOVQ    DX, R9
	MOVQ    AX, CX
	MOVQ    R10, AX
	MULQ    R8
	MOVQ    AX, BX
	MOVQ    DX, R11
	SARQ    $63, CX
	SHRQ    $63, BX
	MOVQ    DI, AX
	MULQ    R8
	ADDL    R12, SI
	SHRQ    $63, AX
	ADDQ    DX, AX
	MOVQ    AX, -88(BP)
	NOTQ    AX
	LEAQ    -1(R11)(BX*1), R12
	MOVQ    CX, -120(BP)
	MOVQ    CX, DX
	MOVL    $-64, R10
	SUBL    SI, R10
	NEGL    SI
	MOVL    $1, DI
	MOVL    SI, CX
	SHLQ    CX, DI
	MOVQ    R9, -112(BP)
	SUBQ    R9, DX
	MOVQ    R12, R9
	SHRQ    CX, R9
	MOVQ    R11, -104(BP)
	MOVQ    BX, -96(BP)
	ADDQ    BX, R11
	MOVQ    DI, -136(BP)
	DECQ    DI
	MOVL    $1, SI
	CMPQ    R9, $10
	JB      LBB2_14
	MOVL    $2, SI
	CMPQ    R9, $100
	JB      LBB2_14
	MOVL    $3, SI
	CMPQ    R9, $1000
	JB      LBB2_14
	MOVL    $4, SI
	CMPQ    R9, $10000
	JB      LBB2_14
	MOVL    $5, SI
	CMPQ    R9, $100000
	JB      LBB2_14
	MOVL    $6, SI
	CMPQ    R9, $1000000
	JB      LBB2_14
	MOVL    $7, SI
	CMPQ    R9, $10000000
	JB      LBB2_14
	MOVL    $8, SI
	CMPQ    R9, $100000000
	JB      LBB2_14
	CMPQ    R9, $1000000000
	MOVL    $10, SI
	SBBL    $0, SI

LBB2_14:
	MOVQ -64(BP), CX
	MOVQ R14, -72(BP)
	SUBL R14, CX
	MOVQ CX, -64(BP)
	LEAQ -1(AX)(R11*1), R8
	LEAQ -1(DX)(R11*1), AX
	MOVQ AX, -80(BP)
	MOVQ DI, -128(BP)
	ANDQ DI, R12
	LONG $0x813d8d48; WORD $0x0009; BYTE $0x00 // leaq         $2433(%rip), %rdi  /* LJTI2_0(%rip) */
	MOVQ R15, -56(BP)
	JMP  LBB2_17

LBB2_15:
	ADDB $48, R9
	MOVB R9, 0(R15)
	INCQ R15

LBB2_16:
	MOVQ R13, BX
	MOVL R10, CX
	SHLQ CX, BX
	LEAQ 0(BX)(R12*1), AX
	MOVQ R8, R14
	MOVQ R13, R9
	SUBQ AX, R14
	JAE  LBB2_43

LBB2_17:
	TESTL   SI, SI
	JLE     LBB2_31
	DECL    SI
	MOVLQSX 0(DI)(SI*4), AX
	ADDQ    DI, AX
	XORL    R13, R13
	JMP     AX

LBB2_19:
	MOVQ R9, AX
	MOVQ $-3689348814741910323, CX
	MULQ CX
	SHRQ $3, DX
	LEAQ 0(DX)(DX*1), AX
	LEAQ 0(AX)(AX*4), AX
	JMP  LBB2_28

LBB2_20:
	MOVQ   R9, AX
	SHRQ   $2, AX
	MOVQ   $2951479051793528259, CX
	MULQ   CX
	SHRQ   $2, DX
	IMUL3Q $100, DX, AX
	JMP    LBB2_28

LBB2_21:
	MOVQ   R9, AX
	SHRQ   $3, AX
	MOVQ   $2361183241434822607, CX
	MULQ   CX
	SHRQ   $4, DX
	IMUL3Q $1000, DX, AX
	JMP    LBB2_28

LBB2_22:
	MOVQ   R9, AX
	MOVQ   $3777893186295716171, CX
	MULQ   CX
	SHRQ   $11, DX
	IMUL3Q $10000, DX, AX
	JMP    LBB2_28

LBB2_23:
	MOVQ   R9, AX
	SHRQ   $5, AX
	MOVQ   $755578637259143235, CX
	MULQ   CX
	SHRQ   $7, DX
	IMUL3Q $100000, DX, AX
	JMP    LBB2_28

LBB2_24:
	MOVQ   R9, AX
	MOVQ   $4835703278458516699, CX
	MULQ   CX
	SHRQ   $18, DX
	IMUL3Q $1000000, DX, AX
	JMP    LBB2_28

LBB2_25:
	MOVQ   R9, AX
	MOVQ   $-2972493582642298179, CX
	MULQ   CX
	SHRQ   $23, DX
	IMUL3Q $10000000, DX, AX
	JMP    LBB2_28

LBB2_26:
	MOVQ   R9, AX
	MOVQ   $-6067343680855748867, CX
	MULQ   CX
	SHRQ   $26, DX
	IMUL3Q $100000000, DX, AX
	JMP    LBB2_28

LBB2_27:
	MOVQ   R9, AX
	SHRQ   $9, AX
	MOVQ   $19342813113834067, CX
	MULQ   CX
	SHRQ   $11, DX
	IMUL3Q $1000000000, DX, AX

LBB2_28:
	SUBQ AX, R9
	MOVQ R9, R13
	MOVQ DX, R9

LBB2_29:
	CMPQ  R15, -56(BP)
	JA    LBB2_15
	TESTL R9, R9
	JE    LBB2_16
	JMP   LBB2_15

LBB2_31:
	XORL SI, SI
	MOVQ -56(BP), R14
	MOVQ -136(BP), R9
	MOVQ -128(BP), DI
	JMP  LBB2_34

LBB2_32:
	ADDB $48, DX
	MOVB DX, 0(R15)
	INCQ R15

LBB2_33:
	DECL SI
	MOVQ R8, CX
	SUBQ R12, CX
	JA   LBB2_36

LBB2_34:
	MOVQ    R8, AX
	ADDQ    R12, R12
	LEAQ    0(R12)(R12*4), R12
	MOVQ    R12, DX
	MOVL    R10, CX
	SHRQ    CX, DX
	ADDQ    R8, AX
	LEAQ    0(AX)(AX*4), R8
	ANDQ    DI, R12
	CMPQ    R15, R14
	JA      LBB2_32
	MOVBLZX DX, CX
	TESTQ   CX, CX
	JE      LBB2_33
	JMP     LBB2_32

LBB2_36:
	CMPQ    CX, R9
	JB      LBB2_50
	MOVL    SI, CX
	NEGL    CX
	MOVLQSX CX, CX
	LONG    $0x32158d48; WORD $0x0041; BYTE $0x00 // leaq         $16690(%rip), %rdx  /* _TabPow10(%rip) */
	MOVQ    -80(BP), DI
	IMULQ   0(DX)(CX*8), DI
	CMPQ    R12, DI
	MOVQ    -64(BP), R10
	JAE     LBB2_53
	LEAQ    0(AX)(AX*4), AX
	LEAQ    0(R9)(R12*1), CX
	SUBQ    CX, AX
	MOVQ    DI, R8
	NEGQ    R8
	MOVQ    DI, BX
	SUBQ    R12, BX

LBB2_39:
	CMPQ CX, DI
	JB   LBB2_41
	LEAQ 0(R8)(CX*1), DX
	CMPQ BX, DX
	JBE  LBB2_53

LBB2_41:
	DECB  -1(R15)
	SUBQ  R9, AX
	SETCS DX
	CMPQ  CX, DI
	JAE   LBB2_53
	ADDQ  R9, CX
	SUBQ  R9, BX
	TESTB DX, DX
	JE    LBB2_39
	JMP   LBB2_53

LBB2_43:
	MOVL SI, CX
	LONG $0xc8158d48; WORD $0x0040; BYTE $0x00 // leaq         $16584(%rip), %rdx  /* _TabPow10(%rip) */
	MOVQ 0(DX)(CX*8), DI
	MOVL R10, CX
	SHLQ CX, DI
	MOVQ -80(BP), R8
	CMPQ AX, R8
	JAE  LBB2_51
	CMPQ R14, DI
	MOVQ -64(BP), R10
	JB   LBB2_52
	SUBQ -88(BP), R11
	ADDQ DI, R12
	LEAQ 0(R12)(BX*1), CX
	SUBQ CX, R11
	ADDQ $-2, R11
	MOVQ -112(BP), R9
	ADDQ R9, R12
	MOVQ -120(BP), DX
	SUBQ DX, R12
	MOVQ -96(BP), R13
	SUBQ R13, R12
	MOVQ -104(BP), R14
	SUBQ R14, R12
	LEAQ 1(R12)(BX*1), BX
	ADDQ R13, DX
	ADDQ R14, DX
	SUBQ R9, DX
	NOTQ AX
	ADDQ DX, AX
	MOVQ -56(BP), R14

LBB2_46:
	CMPQ CX, R8
	JB   LBB2_48
	CMPQ AX, BX
	JBE  LBB2_53

LBB2_48:
	DECB  -1(R15)
	SUBQ  DI, R11
	SETCS DX
	CMPQ  CX, R8
	JAE   LBB2_53
	ADDQ  DI, CX
	ADDQ  DI, BX
	SUBQ  DI, AX
	TESTB DX, DX
	JE    LBB2_46
	JMP   LBB2_53

LBB2_50:
	MOVQ -64(BP), R10
	JMP  LBB2_53

LBB2_51:
	MOVQ -56(BP), R14
	MOVQ -64(BP), R10
	JMP  LBB2_53

LBB2_52:
	MOVQ -56(BP), R14

LBB2_53:
	MOVQ    R15, R12
	SUBQ    R14, R12
	ADDL    SI, R10
	LEAL    0(R10)(R12*1), R11
	TESTL   R10, R10
	JS      LBB2_59
	CMPL    R11, $21
	JG      LBB2_59
	TESTL   R10, R10
	JE      LBB2_86
	MOVLQSX R12, R9
	ADDQ    R14, R9
	SUBL    -72(BP), SI
	ADDL    $347, SI
	CMPL    SI, $127
	JB      LBB2_84
	INCQ    SI
	MOVQ    SI, R8
	ANDQ    $-128, R8
	LEAQ    -128(R8), AX
	MOVQ    AX, BX
	SHRQ    $7, BX
	INCQ    BX
	MOVL    BX, CX
	ANDL    $3, CX
	CMPQ    AX, $384
	JAE     LBB2_77
	XORL    DX, DX
	JMP     LBB2_79

LBB2_59:
	LEAL    -1(R11), DI
	CMPL    DI, $20
	JA      LBB2_63
	LEAL    1(R12), AX
	CMPL    AX, R11
	JLE     LBB2_72
	MOVLQSX AX, DX
	MOVL    R11, CX

LBB2_62:
	MOVBLZX -2(R14)(DX*1), BX
	MOVB    BX, -1(R14)(DX*1)
	LEAQ    -1(DX), SI
	MOVQ    SI, DX
	CMPQ    SI, CX
	JG      LBB2_62
	JMP     LBB2_73

LBB2_63:
	LEAL  5(R11), AX
	CMPL  AX, $5
	JA    LBB2_74
	MOVQ  R10, R15
	MOVL  $2, AX
	MOVL  $2, DX
	SUBL  R11, DX
	LEAL  0(DX)(R12*1), CX
	TESTL CX, CX
	JLE   LBB2_68
	MOVL  CX, BX
	MOVL  DX, R10
	CMPL  CX, $128
	JAE   LBB2_96

LBB2_66:
	INCQ BX
	MOVQ R14, CX
	SUBQ R10, CX

LBB2_67:
	MOVBLZX -2(CX)(BX*1), DX
	MOVB    DX, -2(R14)(BX*1)
	DECQ    BX
	CMPQ    BX, $1
	JG      LBB2_67

LBB2_68:
	SUBL  R15, AX
	MOVW  $11824, 0(R14)
	TESTL R11, R11
	JE    LBB2_87
	NEGL  R11
	LEAQ  2(R14), DI
	MOVQ  -72(BP), DX
	SUBL  SI, DX
	SUBL  R12, DX
	ADDL  $-349, DX
	CMPL  DX, $127
	JB    LBB2_121
	INCQ  DX
	MOVQ  DX, R8
	ANDQ  $-128, DX
	LEAQ  -128(DX), BX
	MOVQ  BX, CX
	SHRQ  $7, CX
	INCQ  CX
	MOVL  CX, SI
	ANDL  $3, SI
	CMPQ  BX, $384
	JAE   LBB2_113
	XORL  BX, BX
	JMP   LBB2_115

LBB2_72:
	MOVL R11, CX

LBB2_73:
	MOVL -44(BP), BX
	MOVB $46, 0(R14)(CX*1)
	JMP  LBB2_88

LBB2_74:
	CMPL  R12, $1
	JNE   LBB2_90
	MOVB  $101, 1(R14)
	LEAQ  2(R14), DX
	TESTL DI, DI
	JS    LBB2_103
	MOVQ  DX, R14
	MOVL  DI, CX
	MOVL  -44(BP), BX
	JMP   LBB2_105

LBB2_77:
	MOVLQSX R12, AX
	LEAQ    480(AX)(R14*1), AX
	ANDQ    $-4, BX
	NEGQ    BX
	XORL    DX, DX
	QUAD    $0xfffff8f60528fdc5 // vmovapd      $-1802(%rip), %ymm0  /* LCPI2_3(%rip) */

LBB2_78:
	QUAD $0xfffe20108411fdc5; BYTE $0xff // vmovupd      %ymm0, $-480(%rax,%rdx)
	QUAD $0xfffe40108411fdc5; BYTE $0xff // vmovupd      %ymm0, $-448(%rax,%rdx)
	QUAD $0xfffe60108411fdc5; BYTE $0xff // vmovupd      %ymm0, $-416(%rax,%rdx)
	QUAD $0xfffe80108411fdc5; BYTE $0xff // vmovupd      %ymm0, $-384(%rax,%rdx)
	QUAD $0xfffea0108411fdc5; BYTE $0xff // vmovupd      %ymm0, $-352(%rax,%rdx)
	QUAD $0xfffec0108411fdc5; BYTE $0xff // vmovupd      %ymm0, $-320(%rax,%rdx)
	QUAD $0xfffee0108411fdc5; BYTE $0xff // vmovupd      %ymm0, $-288(%rax,%rdx)
	QUAD $0xffff00108411fdc5; BYTE $0xff // vmovupd      %ymm0, $-256(%rax,%rdx)
	QUAD $0xffff20108411fdc5; BYTE $0xff // vmovupd      %ymm0, $-224(%rax,%rdx)
	QUAD $0xffff40108411fdc5; BYTE $0xff // vmovupd      %ymm0, $-192(%rax,%rdx)
	QUAD $0xffff60108411fdc5; BYTE $0xff // vmovupd      %ymm0, $-160(%rax,%rdx)
	LONG $0x4411fdc5; WORD $0x8010       // vmovupd      %ymm0, $-128(%rax,%rdx)
	LONG $0x4411fdc5; WORD $0xa010       // vmovupd      %ymm0, $-96(%rax,%rdx)
	LONG $0x4411fdc5; WORD $0xc010       // vmovupd      %ymm0, $-64(%rax,%rdx)
	LONG $0x4411fdc5; WORD $0xe010       // vmovupd      %ymm0, $-32(%rax,%rdx)
	LONG $0x0411fdc5; BYTE $0x10         // vmovupd      %ymm0, (%rax,%rdx)
	ADDQ $512, DX
	ADDQ $4, BX
	JNE  LBB2_78

LBB2_79:
	TESTQ   CX, CX
	JE      LBB2_82
	SUBL    R14, R15
	MOVLQSX R15, AX
	ADDQ    AX, DX
	LEAQ    96(R14)(DX*1), AX
	NEGQ    CX
	QUAD    $0xfffff8470528fdc5 // vmovapd      $-1977(%rip), %ymm0  /* LCPI2_3(%rip) */

LBB2_81:
	LONG $0x4011fdc5; BYTE $0xa0 // vmovupd      %ymm0, $-96(%rax)
	LONG $0x4011fdc5; BYTE $0xc0 // vmovupd      %ymm0, $-64(%rax)
	LONG $0x4011fdc5; BYTE $0xe0 // vmovupd      %ymm0, $-32(%rax)
	LONG $0x0011fdc5             // vmovupd      %ymm0, (%rax)
	SUBQ $-128, AX
	INCQ CX
	JNE  LBB2_81

LBB2_82:
	CMPQ SI, R8
	JE   LBB2_86
	SUBL R8, R10
	ADDQ R8, R9

LBB2_84:
	MOVL R10, AX
	XORL CX, CX

LBB2_85:
	MOVB $48, 0(R9)(CX*1)
	INCQ CX
	CMPL AX, CX
	JNE  LBB2_85

LBB2_86:
	MOVL R11, AX

LBB2_87:
	MOVL -44(BP), BX

LBB2_88:
	ADDL BX, AX

LBB2_89:
	ADDQ $96, SP
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	RET

LBB2_90:
	LEAL 1(R12), AX
	CMPL AX, $2
	JL   LBB2_93
	MOVL AX, AX
	INCQ AX

LBB2_92:
	MOVBLZX -3(R14)(AX*1), CX
	MOVB    CX, -2(R14)(AX*1)
	DECQ    AX
	CMPQ    AX, $2
	JG      LBB2_92

LBB2_93:
	MOVB    $46, 1(R14)
	MOVLQSX R12, AX
	MOVB    $101, 1(R14)(AX*1)
	LEAQ    2(R14)(AX*1), DX
	TESTL   DI, DI
	MOVL    -44(BP), BX
	JS      LBB2_108
	MOVQ    DX, CX
	JMP     LBB2_109

LBB2_96:
	LEAQ  -1(BX), DI
	LEAQ  -1(R14)(BX*1), DX
	CMPQ  DI, DX
	JA    LBB2_66
	MOVQ  R10, R8
	NOTQ  R8
	LEAQ  0(R8)(BX*1), DX
	ADDQ  R14, DX
	CMPQ  DI, DX
	JA    LBB2_66
	TESTL CX, CX
	MOVL  $1, CX
	LONG  $0xcb440f48       // cmoveq       %rbx, %rcx
	LEAQ  -1(CX)(R14*1), DX
	MOVQ  BX, DI
	SUBQ  R10, DI
	ADDQ  R14, DI
	CMPQ  DX, DI
	JAE   LBB2_100
	LEAQ  0(R14)(BX*1), DX
	ADDQ  R8, CX
	ADDQ  R14, CX
	CMPQ  CX, DX
	JB    LBB2_66

LBB2_100:
	MOVL  BX, R8
	ANDL  $-128, R8
	LEAQ  -128(R8), CX
	MOVQ  CX, R9
	SHRQ  $7, R9
	INCQ  R9
	TESTQ CX, CX
	JE    LBB2_125
	LEAQ  -32(BX)(R14*1), CX
	MOVQ  R10, DI
	NEGQ  DI
	MOVQ  R9, DX
	ANDQ  $-2, DX
	NEGQ  DX
	MOVQ  $-1, R14

LBB2_102:
	LONG $0x4410fcc5; WORD $0xa039       // vmovups      $-96(%rcx,%rdi), %ymm0
	LONG $0x4c10fcc5; WORD $0xc039       // vmovups      $-64(%rcx,%rdi), %ymm1
	LONG $0x5410fcc5; WORD $0xe039       // vmovups      $-32(%rcx,%rdi), %ymm2
	LONG $0x1c10fcc5; BYTE $0x39         // vmovups      (%rcx,%rdi), %ymm3
	LONG $0x1911fcc5                     // vmovups      %ymm3, (%rcx)
	LONG $0x5111fcc5; BYTE $0xe0         // vmovups      %ymm2, $-32(%rcx)
	LONG $0x4911fcc5; BYTE $0xc0         // vmovups      %ymm1, $-64(%rcx)
	LONG $0x4111fcc5; BYTE $0xa0         // vmovups      %ymm0, $-96(%rcx)
	QUAD $0xffff20398410fdc5; BYTE $0xff // vmovupd      $-224(%rcx,%rdi), %ymm0
	QUAD $0xffff40398c10fdc5; BYTE $0xff // vmovupd      $-192(%rcx,%rdi), %ymm1
	QUAD $0xffff60399410fcc5; BYTE $0xff // vmovups      $-160(%rcx,%rdi), %ymm2
	LONG $0x5c10fcc5; WORD $0x8039       // vmovups      $-128(%rcx,%rdi), %ymm3
	LONG $0x5911fcc5; BYTE $0x80         // vmovups      %ymm3, $-128(%rcx)
	QUAD $0xffffff609111fcc5             // vmovups      %ymm2, $-160(%rcx)
	QUAD $0xffffff408911fdc5             // vmovupd      %ymm1, $-192(%rcx)
	QUAD $0xffffff208111fdc5             // vmovupd      %ymm0, $-224(%rcx)
	ADDQ $-256, R14
	ADDQ $-256, CX
	ADDQ $2, DX
	JNE  LBB2_102
	JMP  LBB2_126

LBB2_103:
	MOVL DI, CX
	NEGL CX
	MOVB $45, 2(R14)
	ADDQ $3, R14
	CMPL DI, $-9
	MOVL -44(BP), BX
	JL   LBB2_105
	ADDB $48, CX
	MOVB CX, 0(R14)
	MOVL $4, AX
	JMP  LBB2_88

LBB2_105:
	MOVL R14, AX
	SUBL DX, AX
	CMPL CX, $99
	JG   LBB2_107
	ADDL $4, AX
	MOVL CX, CX
	LONG $0x37358d48; WORD $0x003c; BYTE $0x00 // leaq         $15415(%rip), %rsi  /* _Digits(%rip) */
	MOVB 0(SI)(CX*2), DX
	ADDQ CX, CX
	MOVB DX, 0(R14)
	ORL  $1, CX
	MOVB 0(CX)(SI*1), CX
	MOVB CX, 1(R14)
	JMP  LBB2_88

LBB2_107:
	ADDL   $5, AX
	MOVL   CX, DX
	IMUL3Q $1374389535, DX, DX
	SHRQ   $37, DX
	LEAL   48(DX), SI
	MOVB   SI, 0(R14)
	WORD   $0xd26b; BYTE $0x64                   // imull        $100, %edx, %edx
	SUBL   DX, CX
	LONG   $0xfd358d48; WORD $0x003b; BYTE $0x00 // leaq         $15357(%rip), %rsi  /* _Digits(%rip) */
	MOVB   0(SI)(CX*2), DX
	MOVB   1(SI)(CX*2), CX
	MOVB   DX, 1(R14)
	MOVB   CX, 2(R14)
	JMP    LBB2_88

LBB2_108:
	NEGL DI
	LEAQ 1(DX), CX
	MOVB $45, 0(DX)

LBB2_109:
	CMPL DI, $9
	JG   LBB2_111
	MOVL CX, AX
	SUBL DX, AX
	LEAL 3(R12)(AX*1), AX
	ADDB $48, DI
	MOVB DI, 0(CX)
	JMP  LBB2_88

LBB2_111:
	LEAL 2(R12), SI
	MOVL CX, AX
	SUBL DX, AX
	ADDL SI, AX
	CMPL DI, $99
	JG   LBB2_124
	ADDL $2, AX
	MOVL DI, DX
	LONG $0xa6358d48; WORD $0x003b; BYTE $0x00 // leaq         $15270(%rip), %rsi  /* _Digits(%rip) */
	MOVB 0(SI)(DX*2), DI
	ADDQ DX, DX
	MOVB DI, 0(CX)
	ORL  $1, DX
	MOVB 0(DX)(SI*1), DX
	MOVB DX, 1(CX)
	JMP  LBB2_88

LBB2_113:
	ANDQ $-4, CX
	NEGQ CX
	XORL BX, BX
	QUAD $0xfffff5a30528fdc5 // vmovapd      $-2653(%rip), %ymm0  /* LCPI2_3(%rip) */

LBB2_114:
	LONG $0x117dc1c4; WORD $0x1e44; BYTE $0x02 // vmovupd      %ymm0, $2(%r14,%rbx)
	LONG $0x117dc1c4; WORD $0x1e44; BYTE $0x22 // vmovupd      %ymm0, $34(%r14,%rbx)
	LONG $0x117dc1c4; WORD $0x1e44; BYTE $0x42 // vmovupd      %ymm0, $66(%r14,%rbx)
	LONG $0x117dc1c4; WORD $0x1e44; BYTE $0x62 // vmovupd      %ymm0, $98(%r14,%rbx)
	QUAD $0x00821e84117dc1c4; WORD $0x0000     // vmovupd      %ymm0, $130(%r14,%rbx)
	QUAD $0x00a21e84117dc1c4; WORD $0x0000     // vmovupd      %ymm0, $162(%r14,%rbx)
	QUAD $0x00c21e84117dc1c4; WORD $0x0000     // vmovupd      %ymm0, $194(%r14,%rbx)
	QUAD $0x00e21e84117dc1c4; WORD $0x0000     // vmovupd      %ymm0, $226(%r14,%rbx)
	QUAD $0x01021e84117dc1c4; WORD $0x0000     // vmovupd      %ymm0, $258(%r14,%rbx)
	QUAD $0x01221e84117dc1c4; WORD $0x0000     // vmovupd      %ymm0, $290(%r14,%rbx)
	QUAD $0x01421e84117dc1c4; WORD $0x0000     // vmovupd      %ymm0, $322(%r14,%rbx)
	QUAD $0x01621e84117dc1c4; WORD $0x0000     // vmovupd      %ymm0, $354(%r14,%rbx)
	QUAD $0x01821e84117dc1c4; WORD $0x0000     // vmovupd      %ymm0, $386(%r14,%rbx)
	QUAD $0x01a21e84117dc1c4; WORD $0x0000     // vmovupd      %ymm0, $418(%r14,%rbx)
	QUAD $0x01c21e84117dc1c4; WORD $0x0000     // vmovupd      %ymm0, $450(%r14,%rbx)
	QUAD $0x01e21e84117dc1c4; WORD $0x0000     // vmovupd      %ymm0, $482(%r14,%rbx)
	ADDQ $512, BX
	ADDQ $4, CX
	JNE  LBB2_114

LBB2_115:
	TESTQ SI, SI
	JE    LBB2_118
	LEAQ  98(BX)(R14*1), CX
	NEGQ  SI
	QUAD  $0xfffff4e90528fdc5 // vmovapd      $-2839(%rip), %ymm0  /* LCPI2_3(%rip) */

LBB2_117:
	LONG $0x4111fdc5; BYTE $0xa0 // vmovupd      %ymm0, $-96(%rcx)
	LONG $0x4111fdc5; BYTE $0xc0 // vmovupd      %ymm0, $-64(%rcx)
	LONG $0x4111fdc5; BYTE $0xe0 // vmovupd      %ymm0, $-32(%rcx)
	LONG $0x0111fdc5             // vmovupd      %ymm0, (%rcx)
	SUBQ $-128, CX
	INCQ SI
	JNE  LBB2_117

LBB2_118:
	CMPQ R8, DX
	JE   LBB2_87
	SUBL DX, R11
	ADDQ DX, DI

LBB2_121:
	MOVL R11, CX
	XORL DX, DX

LBB2_122:
	MOVB $48, 0(DI)(DX*1)
	INCQ DX
	CMPL CX, DX
	JNE  LBB2_122
	JMP  LBB2_87

LBB2_124:
	ADDL   $3, AX
	MOVL   DI, DX
	IMUL3Q $1374389535, DX, DX
	SHRQ   $37, DX
	LEAL   48(DX), SI
	MOVB   SI, 0(CX)
	WORD   $0xd26b; BYTE $0x64                   // imull        $100, %edx, %edx
	SUBL   DX, DI
	LONG   $0x61158d48; WORD $0x003a; BYTE $0x00 // leaq         $14945(%rip), %rdx  /* _Digits(%rip) */
	MOVB   0(DX)(DI*2), SI
	MOVB   1(DX)(DI*2), DX
	MOVB   SI, 1(CX)
	MOVB   DX, 2(CX)
	JMP    LBB2_88

LBB2_125:
	MOVQ $-1, R14

LBB2_126:
	TESTB $1, R9
	JE    LBB2_128
	ADDQ  BX, R14
	MOVQ  R14, CX
	SUBQ  R10, CX
	MOVQ  -56(BP), DX
	LONG  $0x4410fdc5; WORD $0x810a             // vmovupd      $-127(%rdx,%rcx), %ymm0
	LONG  $0x4c10fdc5; WORD $0xa10a             // vmovupd      $-95(%rdx,%rcx), %ymm1
	LONG  $0x5410fcc5; WORD $0xc10a             // vmovups      $-63(%rdx,%rcx), %ymm2
	LONG  $0x5c10fcc5; WORD $0xe10a             // vmovups      $-31(%rdx,%rcx), %ymm3
	LONG  $0x117ca1c4; WORD $0x325c; BYTE $0xe1 // vmovups      %ymm3, $-31(%rdx,%r14)
	LONG  $0x117ca1c4; WORD $0x3254; BYTE $0xc1 // vmovups      %ymm2, $-63(%rdx,%r14)
	LONG  $0x117da1c4; WORD $0x324c; BYTE $0xa1 // vmovupd      %ymm1, $-95(%rdx,%r14)
	LONG  $0x117da1c4; WORD $0x3244; BYTE $0x81 // vmovupd      %ymm0, $-127(%rdx,%r14)

LBB2_128:
	CMPQ R8, BX
	MOVQ -56(BP), R14
	JE   LBB2_68
	ANDL $127, BX
	JMP  LBB2_66

// .set L2_0_set_29, LBB2_29-LJTI2_0
// .set L2_0_set_19, LBB2_19-LJTI2_0
// .set L2_0_set_20, LBB2_20-LJTI2_0
// .set L2_0_set_21, LBB2_21-LJTI2_0
// .set L2_0_set_22, LBB2_22-LJTI2_0
// .set L2_0_set_23, LBB2_23-LJTI2_0
// .set L2_0_set_24, LBB2_24-LJTI2_0
// .set L2_0_set_25, LBB2_25-LJTI2_0
// .set L2_0_set_26, LBB2_26-LJTI2_0
// .set L2_0_set_27, LBB2_27-LJTI2_0
LJTI2_0:
	LONG $0xfffff7e7 // .long L2_0_set_29
	LONG $0xfffff6c1 // .long L2_0_set_19
	LONG $0xfffff6e2 // .long L2_0_set_20
	LONG $0xfffff703 // .long L2_0_set_21
	LONG $0xfffff727 // .long L2_0_set_22
	LONG $0xfffff747 // .long L2_0_set_23
	LONG $0xfffff768 // .long L2_0_set_24
	LONG $0xfffff785 // .long L2_0_set_25
	LONG $0xfffff7a2 // .long L2_0_set_26
	LONG $0xfffff7bf // .long L2_0_set_27

_i64toa:
	TESTQ SI, SI
	JS    LBB3_1
	JMP   _u64toa

LBB3_1:
	BYTE $0x55                   // pushq        %rbp
	WORD $0x8948; BYTE $0xe5     // movq         %rsp, %rbp
	MOVB $45, 0(DI)
	INCQ DI
	NEGQ SI
	LONG $0x000044e8; BYTE $0x00 // callq        _u64toa
	INCL AX
	BYTE $0x5d                   // popq         %rbp
	RET

LCPI4_0:
	QUAD $0x00000000d1b71759 // .quad 3518437209
	QUAD $0x00000000d1b71759 // .quad 3518437209

LCPI4_3:
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10
	WORD $0x000a // .word 10

LCPI4_4:
	QUAD $0x3030303030303030; QUAD $0x3030303030303030 // .space 16, '0000000000000000'

LCPI4_1:
	QUAD $0x80003334147b20c5 // .quad -9223315738079846203

LCPI4_2:
	QUAD $0x8000200008000080 // .quad -9223336852348469120

_u64toa:
	BYTE    $0x55                                 // pushq        %rbp
	WORD    $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	CMPQ    SI, $9999
	JA      LBB4_8
	MOVWLZX SI, AX
	SHRL    $2, AX
	LONG    $0x147bc069; WORD $0x0000             // imull        $5243, %eax, %eax
	SHRL    $17, AX
	LEAQ    0(AX)(AX*1), DX
	WORD    $0xc06b; BYTE $0x64                   // imull        $100, %eax, %eax
	MOVL    SI, CX
	SUBL    AX, CX
	MOVWLZX CX, AX
	ADDQ    AX, AX
	CMPL    SI, $1000
	JB      LBB4_3
	LONG    $0x250d8d48; WORD $0x0039; BYTE $0x00 // leaq         $14629(%rip), %rcx  /* _Digits(%rip) */
	MOVB    0(DX)(CX*1), CX
	MOVB    CX, 0(DI)
	MOVL    $1, CX
	JMP     LBB4_4

LBB4_3:
	XORL CX, CX
	CMPL SI, $100
	JB   LBB4_5

LBB4_4:
	MOVWLZX DX, DX
	ORQ     $1, DX
	LONG    $0x04358d48; WORD $0x0039; BYTE $0x00 // leaq         $14596(%rip), %rsi  /* _Digits(%rip) */
	MOVB    0(DX)(SI*1), DX
	MOVL    CX, SI
	INCL    CX
	MOVB    DX, 0(DI)(SI*1)

LBB4_6:
	LONG $0xf3158d48; WORD $0x0038; BYTE $0x00 // leaq         $14579(%rip), %rdx  /* _Digits(%rip) */
	MOVB 0(AX)(DX*1), DX
	MOVL CX, SI
	INCL CX
	MOVB DX, 0(DI)(SI*1)

LBB4_7:
	MOVWLZX AX, AX
	ORQ     $1, AX
	LONG    $0xdb158d48; WORD $0x0038; BYTE $0x00 // leaq         $14555(%rip), %rdx  /* _Digits(%rip) */
	MOVB    0(AX)(DX*1), AX
	MOVL    CX, DX
	INCL    CX
	MOVB    AX, 0(DI)(DX*1)
	MOVL    CX, AX
	BYTE    $0x5d                                 // popq         %rbp
	RET

LBB4_5:
	XORL CX, CX
	CMPL SI, $10
	JAE  LBB4_6
	JMP  LBB4_7

LBB4_8:
	CMPQ    SI, $99999999
	JA      LBB4_16
	MOVL    SI, AX
	MOVL    $3518437209, DX
	IMULQ   AX, DX
	SHRQ    $45, DX
	LONG    $0x10c26944; WORD $0x0027; BYTE $0x00 // imull        $10000, %edx, %r8d
	MOVL    SI, CX
	SUBL    R8, CX
	IMUL3Q  $1125899907, AX, R10
	SHRQ    $49, R10
	ANDL    $-2, R10
	MOVWLZX DX, AX
	SHRL    $2, AX
	LONG    $0x147bc069; WORD $0x0000             // imull        $5243, %eax, %eax
	SHRL    $17, AX
	WORD    $0xc06b; BYTE $0x64                   // imull        $100, %eax, %eax
	SUBL    AX, DX
	MOVWLZX DX, R9
	ADDQ    R9, R9
	MOVWLZX CX, AX
	SHRL    $2, AX
	LONG    $0x147bc069; WORD $0x0000             // imull        $5243, %eax, %eax
	SHRL    $17, AX
	LEAQ    0(AX)(AX*1), R8
	WORD    $0xc06b; BYTE $0x64                   // imull        $100, %eax, %eax
	SUBL    AX, CX
	MOVWLZX CX, R11
	ADDQ    R11, R11
	CMPL    SI, $10000000
	JB      LBB4_11
	LONG    $0x44058d48; WORD $0x0038; BYTE $0x00 // leaq         $14404(%rip), %rax  /* _Digits(%rip) */
	MOVB    0(R10)(AX*1), AX
	MOVB    AX, 0(DI)
	MOVL    $1, CX
	JMP     LBB4_12

LBB4_11:
	XORL CX, CX
	CMPL SI, $1000000
	JB   LBB4_13

LBB4_12:
	MOVL R10, AX
	ORQ  $1, AX
	LONG $0x1f358d48; WORD $0x0038; BYTE $0x00 // leaq         $14367(%rip), %rsi  /* _Digits(%rip) */
	MOVB 0(AX)(SI*1), AX
	MOVL CX, SI
	INCL CX
	MOVB AX, 0(DI)(SI*1)

LBB4_14:
	LONG $0x0e058d48; WORD $0x0038; BYTE $0x00 // leaq         $14350(%rip), %rax  /* _Digits(%rip) */
	MOVB 0(R9)(AX*1), AX
	MOVL CX, SI
	INCL CX
	MOVB AX, 0(DI)(SI*1)

LBB4_15:
	MOVWLZX R9, AX
	ORQ     $1, AX
	LONG    $0xf4358d48; WORD $0x0037; BYTE $0x00 // leaq         $14324(%rip), %rsi  /* _Digits(%rip) */
	MOVB    0(AX)(SI*1), AX
	MOVL    CX, DX
	MOVB    AX, 0(DI)(DX*1)
	MOVB    0(R8)(SI*1), AX
	MOVB    AX, 1(DI)(DX*1)
	MOVWLZX R8, AX
	ORQ     $1, AX
	MOVB    0(AX)(SI*1), AX
	MOVB    AX, 2(DI)(DX*1)
	MOVB    0(R11)(SI*1), AX
	MOVB    AX, 3(DI)(DX*1)
	MOVWLZX R11, AX
	ORQ     $1, AX
	MOVB    0(AX)(SI*1), AX
	ADDL    $5, CX
	MOVB    AX, 4(DI)(DX*1)
	MOVL    CX, AX
	BYTE    $0x5d                                 // popq         %rbp
	RET

LBB4_13:
	XORL CX, CX
	CMPL SI, $100000
	JAE  LBB4_14
	JMP  LBB4_15

LBB4_16:
	MOVQ $9999999999999999, AX
	CMPQ SI, AX
	JA   LBB4_18
	MOVQ $-6067343680855748867, CX
	MOVQ SI, AX
	MULQ CX
	SHRQ $26, DX
	LONG $0xe100c269; WORD $0x05f5             // imull        $100000000, %edx, %eax
	SUBL AX, SI
	LONG $0xc26ef9c5                           // vmovd        %edx, %xmm0
	QUAD $0xfffffdcb0d6ffac5                   // vmovdqu      $-565(%rip), %xmm1  /* LCPI4_0(%rip) */
	LONG $0xd1f4f9c5                           // vpmuludq     %xmm1, %xmm0, %xmm2
	LONG $0xd273e9c5; BYTE $0x2d               // vpsrlq       $45, %xmm2, %xmm2
	MOVL $10000, AX
	LONG $0x6ef9e1c4; BYTE $0xd8               // vmovq        %rax, %xmm3
	LONG $0xe3f4e9c5                           // vpmuludq     %xmm3, %xmm2, %xmm4
	LONG $0xc4faf9c5                           // vpsubd       %xmm4, %xmm0, %xmm0
	LONG $0xc061e9c5                           // vpunpcklwd   %xmm0, %xmm2, %xmm0
	LONG $0xf073f9c5; BYTE $0x02               // vpsllq       $2, %xmm0, %xmm0
	LONG $0xc070fbc5; BYTE $0x50               // vpshuflw     $80, %xmm0, %xmm0
	LONG $0xc070f9c5; BYTE $0x50               // vpshufd      $80, %xmm0, %xmm0
	QUAD $0xfffdc4155979e2c4; BYTE $0xff       // vpbroadcastq $-572(%rip), %xmm2  /* LCPI4_1(%rip) */
	QUAD $0xfffdc3255979e2c4; BYTE $0xff       // vpbroadcastq $-573(%rip), %xmm4  /* LCPI4_2(%rip) */
	LONG $0xc2e4f9c5                           // vpmulhuw     %xmm2, %xmm0, %xmm0
	LONG $0xc4e4f9c5                           // vpmulhuw     %xmm4, %xmm0, %xmm0
	QUAD $0xfffffd8b2d6ffac5                   // vmovdqu      $-629(%rip), %xmm5  /* LCPI4_3(%rip) */
	LONG $0xf5d5f9c5                           // vpmullw      %xmm5, %xmm0, %xmm6
	LONG $0xf673c9c5; BYTE $0x10               // vpsllq       $16, %xmm6, %xmm6
	LONG $0xc6f9f9c5                           // vpsubw       %xmm6, %xmm0, %xmm0
	LONG $0xf66ef9c5                           // vmovd        %esi, %xmm6
	LONG $0xc9f4c9c5                           // vpmuludq     %xmm1, %xmm6, %xmm1
	LONG $0xd173f1c5; BYTE $0x2d               // vpsrlq       $45, %xmm1, %xmm1
	LONG $0xdbf4f1c5                           // vpmuludq     %xmm3, %xmm1, %xmm3
	LONG $0xdbfac9c5                           // vpsubd       %xmm3, %xmm6, %xmm3
	LONG $0xcb61f1c5                           // vpunpcklwd   %xmm3, %xmm1, %xmm1
	LONG $0xf173f1c5; BYTE $0x02               // vpsllq       $2, %xmm1, %xmm1
	LONG $0xc970fbc5; BYTE $0x50               // vpshuflw     $80, %xmm1, %xmm1
	LONG $0xc970f9c5; BYTE $0x50               // vpshufd      $80, %xmm1, %xmm1
	LONG $0xcae4f1c5                           // vpmulhuw     %xmm2, %xmm1, %xmm1
	LONG $0xcce4f1c5                           // vpmulhuw     %xmm4, %xmm1, %xmm1
	LONG $0xd5d5f1c5                           // vpmullw      %xmm5, %xmm1, %xmm2
	LONG $0xf273e9c5; BYTE $0x10               // vpsllq       $16, %xmm2, %xmm2
	LONG $0xcaf9f1c5                           // vpsubw       %xmm2, %xmm1, %xmm1
	LONG $0xc167f9c5                           // vpackuswb    %xmm1, %xmm0, %xmm0
	QUAD $0xfffffd450dfcf9c5                   // vpaddb       $-699(%rip), %xmm0, %xmm1  /* LCPI4_4(%rip) */
	LONG $0xd2efe9c5                           // vpxor        %xmm2, %xmm2, %xmm2
	LONG $0xc274f9c5                           // vpcmpeqb     %xmm2, %xmm0, %xmm0
	LONG $0xc0d7f9c5                           // vpmovmskb    %xmm0, %eax
	ORL  $32768, AX
	XORL $-32769, AX
	BSFL AX, AX
	MOVL $16, CX
	SUBL AX, CX
	SHLQ $4, AX
	LONG $0x67158d48; WORD $0x0037; BYTE $0x00 // leaq         $14183(%rip), %rdx  /* _VecShiftShuffles(%rip) */
	LONG $0x0071e2c4; WORD $0x1004             // vpshufb      (%rax,%rdx), %xmm1, %xmm0
	LONG $0x077ffac5                           // vmovdqu      %xmm0, (%rdi)
	MOVL CX, AX
	BYTE $0x5d                                 // popq         %rbp
	RET

LBB4_18:
	MOVQ  $4153837486827862103, CX
	MOVQ  SI, AX
	MULQ  CX
	SHRQ  $51, DX
	MOVQ  $10000000000000000, AX
	IMULQ DX, AX
	SUBQ  AX, SI
	CMPL  DX, $9
	JA    LBB4_20
	ADDB  $48, DX
	MOVB  DX, 0(DI)
	MOVL  $1, CX
	JMP   LBB4_25

LBB4_20:
	CMPL DX, $99
	JA   LBB4_22
	MOVL DX, AX
	LONG $0x4a0d8d48; WORD $0x0036; BYTE $0x00 // leaq         $13898(%rip), %rcx  /* _Digits(%rip) */
	MOVB 0(CX)(AX*2), DX
	MOVB 1(CX)(AX*2), AX
	MOVB DX, 0(DI)
	MOVB AX, 1(DI)
	MOVL $2, CX
	JMP  LBB4_25

LBB4_22:
	MOVL    DX, AX
	SHRL    $2, AX
	LONG    $0x147bc069; WORD $0x0000             // imull        $5243, %eax, %eax
	SHRL    $17, AX
	CMPL    DX, $999
	JA      LBB4_24
	ADDL    $48, AX
	MOVB    AX, 0(DI)
	MOVWLZX DX, AX
	MOVL    AX, CX
	SHRL    $2, CX
	LONG    $0x147bc969; WORD $0x0000             // imull        $5243, %ecx, %ecx
	SHRL    $17, CX
	WORD    $0xc96b; BYTE $0x64                   // imull        $100, %ecx, %ecx
	SUBL    CX, AX
	MOVWLZX AX, AX
	LONG    $0xf90d8d48; WORD $0x0035; BYTE $0x00 // leaq         $13817(%rip), %rcx  /* _Digits(%rip) */
	MOVB    0(CX)(AX*2), DX
	MOVB    1(CX)(AX*2), AX
	MOVB    DX, 1(DI)
	MOVB    AX, 2(DI)
	MOVL    $3, CX
	JMP     LBB4_25

LBB4_24:
	WORD    $0xc86b; BYTE $0x64                   // imull        $100, %eax, %ecx
	SUBL    CX, DX
	MOVWLZX AX, AX
	LONG    $0xd6058d4c; WORD $0x0035; BYTE $0x00 // leaq         $13782(%rip), %r8  /* _Digits(%rip) */
	MOVB    0(R8)(AX*2), CX
	MOVB    1(R8)(AX*2), AX
	MOVB    CX, 0(DI)
	MOVB    AX, 1(DI)
	MOVWLZX DX, AX
	MOVB    0(R8)(AX*2), CX
	ADDQ    AX, AX
	MOVB    CX, 2(DI)
	ORL     $1, AX
	MOVWLZX AX, AX
	MOVB    0(AX)(R8*1), AX
	MOVB    AX, 3(DI)
	MOVL    $4, CX

LBB4_25:
	MOVQ $-6067343680855748867, DX
	MOVQ SI, AX
	MULQ DX
	SHRQ $26, DX
	LONG $0xc26ef9c5                     // vmovd        %edx, %xmm0
	QUAD $0xfffffbe40d6ffac5             // vmovdqu      $-1052(%rip), %xmm1  /* LCPI4_0(%rip) */
	LONG $0xd1f4f9c5                     // vpmuludq     %xmm1, %xmm0, %xmm2
	LONG $0xd273e9c5; BYTE $0x2d         // vpsrlq       $45, %xmm2, %xmm2
	MOVL $10000, AX
	LONG $0x6ef9e1c4; BYTE $0xd8         // vmovq        %rax, %xmm3
	LONG $0xe3f4e9c5                     // vpmuludq     %xmm3, %xmm2, %xmm4
	LONG $0xc4faf9c5                     // vpsubd       %xmm4, %xmm0, %xmm0
	LONG $0xc061e9c5                     // vpunpcklwd   %xmm0, %xmm2, %xmm0
	LONG $0xf073f9c5; BYTE $0x02         // vpsllq       $2, %xmm0, %xmm0
	LONG $0xc070fbc5; BYTE $0x50         // vpshuflw     $80, %xmm0, %xmm0
	QUAD $0xfffbe2155979e2c4; BYTE $0xff // vpbroadcastq $-1054(%rip), %xmm2  /* LCPI4_1(%rip) */
	LONG $0xc070f9c5; BYTE $0x50         // vpshufd      $80, %xmm0, %xmm0
	LONG $0xc2e4f9c5                     // vpmulhuw     %xmm2, %xmm0, %xmm0
	QUAD $0xfffbd8255979e2c4; BYTE $0xff // vpbroadcastq $-1064(%rip), %xmm4  /* LCPI4_2(%rip) */
	LONG $0xc4e4f9c5                     // vpmulhuw     %xmm4, %xmm0, %xmm0
	QUAD $0xfffffba42d6ffac5             // vmovdqu      $-1116(%rip), %xmm5  /* LCPI4_3(%rip) */
	LONG $0xf5d5f9c5                     // vpmullw      %xmm5, %xmm0, %xmm6
	LONG $0xf673c9c5; BYTE $0x10         // vpsllq       $16, %xmm6, %xmm6
	LONG $0xc6f9f9c5                     // vpsubw       %xmm6, %xmm0, %xmm0
	LONG $0xe100c269; WORD $0x05f5       // imull        $100000000, %edx, %eax
	SUBL AX, SI
	LONG $0xf66ef9c5                     // vmovd        %esi, %xmm6
	LONG $0xc9f4c9c5                     // vpmuludq     %xmm1, %xmm6, %xmm1
	LONG $0xd173f1c5; BYTE $0x2d         // vpsrlq       $45, %xmm1, %xmm1
	LONG $0xdbf4f1c5                     // vpmuludq     %xmm3, %xmm1, %xmm3
	LONG $0xdbfac9c5                     // vpsubd       %xmm3, %xmm6, %xmm3
	LONG $0xcb61f1c5                     // vpunpcklwd   %xmm3, %xmm1, %xmm1
	LONG $0xf173f1c5; BYTE $0x02         // vpsllq       $2, %xmm1, %xmm1
	LONG $0xc970fbc5; BYTE $0x50         // vpshuflw     $80, %xmm1, %xmm1
	LONG $0xc970f9c5; BYTE $0x50         // vpshufd      $80, %xmm1, %xmm1
	LONG $0xcae4f1c5                     // vpmulhuw     %xmm2, %xmm1, %xmm1
	LONG $0xcce4f1c5                     // vpmulhuw     %xmm4, %xmm1, %xmm1
	LONG $0xd5d5f1c5                     // vpmullw      %xmm5, %xmm1, %xmm2
	LONG $0xf273e9c5; BYTE $0x10         // vpsllq       $16, %xmm2, %xmm2
	LONG $0xcaf9f1c5                     // vpsubw       %xmm2, %xmm1, %xmm1
	LONG $0xc167f9c5                     // vpackuswb    %xmm1, %xmm0, %xmm0
	QUAD $0xfffffb5605fcf9c5             // vpaddb       $-1194(%rip), %xmm0, %xmm0  /* LCPI4_4(%rip) */
	MOVL CX, AX
	LONG $0x047ffac5; BYTE $0x07         // vmovdqu      %xmm0, (%rdi,%rax)
	ORL  $16, CX
	MOVL CX, AX
	BYTE $0x5d                           // popq         %rbp
	RET

LCPI5_0:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI5_1:
	QUAD $0x2222222222222222; QUAD $0x2222222222222222 // .space 16, '""""""""""""""""'
	QUAD $0x2222222222222222; QUAD $0x2222222222222222 // .space 16, '""""""""""""""""'

LCPI5_2:
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'

LCPI5_3:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI5_4:
	QUAD $0x2222222222222222; QUAD $0x2222222222222222 // .space 16, '""""""""""""""""'

LCPI5_5:
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'

_quote:
	BYTE  $0x55                                 // pushq        %rbp
	WORD  $0x8948; BYTE $0xe5                   // movq         %rsp, %rbp
	WORD  $0x5741                               // pushq        %r15
	WORD  $0x5641                               // pushq        %r14
	WORD  $0x5541                               // pushq        %r13
	WORD  $0x5441                               // pushq        %r12
	BYTE  $0x53                                 // pushq        %rbx
	SUBQ  $16, SP
	MOVQ  CX, R14
	MOVQ  DI, R12
	TESTB $1, R8
	LONG  $0x73058d48; WORD $0x0035; BYTE $0x00 // leaq         $13683(%rip), %rax  /* __SingleQuoteTab(%rip) */
	LONG  $0x6c158d4c; WORD $0x0045; BYTE $0x00 // leaq         $17772(%rip), %r10  /* __DoubleQuoteTab(%rip) */
	LONG  $0xd0440f4c                           // cmoveq       %rax, %r10
	MOVQ  DX, R8
	MOVQ  DI, AX
	TESTQ SI, SI
	JE    LBB5_85
	MOVQ  0(R14), R11
	QUAD  $0xffffff290d6f7ec5                   // vmovdqu      $-215(%rip), %ymm9  /* LCPI5_0(%rip) */
	QUAD  $0xffffff41156f7ec5                   // vmovdqu      $-191(%rip), %ymm10  /* LCPI5_1(%rip) */
	QUAD  $0xffffff591d6f7ec5                   // vmovdqu      $-167(%rip), %ymm11  /* LCPI5_2(%rip) */
	LONG  $0x763d41c4; BYTE $0xc0               // vpcmpeqd     %ymm8, %ymm8, %ymm8
	MOVQ  R12, AX
	MOVQ  DX, R8
	MOVQ  DX, -56(BP)
	MOVQ  R12, -48(BP)

LBB5_2:
	CMPQ  SI, $31
	SETGT CX
	MOVQ  R11, R13
	MOVQ  R8, R12
	CMPQ  R11, $32
	JL    LBB5_13
	MOVQ  SI, R9
	MOVQ  AX, R15
	MOVQ  SI, DI
	CMPQ  SI, $32
	JL    LBB5_8
	MOVQ  AX, R15
	MOVQ  DI, SI
	MOVQ  R8, R12
	MOVQ  R11, BX

LBB5_5:
	LONG  $0x6f7ec1c4; BYTE $0x07   // vmovdqu      (%r15), %ymm0
	LONG  $0xc864b5c5               // vpcmpgtb     %ymm0, %ymm9, %ymm1
	LONG  $0xd074adc5               // vpcmpeqb     %ymm0, %ymm10, %ymm2
	LONG  $0xd874a5c5               // vpcmpeqb     %ymm0, %ymm11, %ymm3
	LONG  $0xd2ebe5c5               // vpor         %ymm2, %ymm3, %ymm2
	LONG  $0x7f7ec1c4; WORD $0x2404 // vmovdqu      %ymm0, (%r12)
	LONG  $0x647dc1c4; BYTE $0xc0   // vpcmpgtb     %ymm8, %ymm0, %ymm0
	LONG  $0xc0dbf5c5               // vpand        %ymm0, %ymm1, %ymm0
	LONG  $0xc0ebedc5               // vpor         %ymm0, %ymm2, %ymm0
	LONG  $0xc8d7fdc5               // vpmovmskb    %ymm0, %ecx
	TESTL CX, CX
	JNE   LBB5_12
	ADDQ  $32, R15
	ADDQ  $32, R12
	LEAQ  -32(SI), R9
	LEAQ  -32(BX), R13
	CMPQ  SI, $63
	SETGT CX
	CMPQ  SI, $64
	JL    LBB5_8
	MOVQ  R9, SI
	CMPQ  BX, $63
	MOVQ  R13, BX
	JG    LBB5_5

LBB5_8:
	TESTB CX, CX
	JE    LBB5_14

LBB5_9:
	LONG $0x6f7ec1c4; BYTE $0x07   // vmovdqu      (%r15), %ymm0
	LONG $0xc864b5c5               // vpcmpgtb     %ymm0, %ymm9, %ymm1
	LONG $0xd074adc5               // vpcmpeqb     %ymm0, %ymm10, %ymm2
	LONG $0xd874a5c5               // vpcmpeqb     %ymm0, %ymm11, %ymm3
	LONG $0xd2ebe5c5               // vpor         %ymm2, %ymm3, %ymm2
	LONG $0x647dc1c4; BYTE $0xc0   // vpcmpgtb     %ymm8, %ymm0, %ymm0
	LONG $0xc0dbf5c5               // vpand        %ymm0, %ymm1, %ymm0
	LONG $0xc0ebedc5               // vpor         %ymm0, %ymm2, %ymm0
	LONG $0xc8d7fdc5               // vpmovmskb    %ymm0, %ecx
	MOVQ $4294967296, DX
	ORQ  DX, CX
	BSFQ CX, CX
	LONG $0x6f7ac1c4; BYTE $0x07   // vmovdqu      (%r15), %xmm0
	LONG $0x16f9e3c4; WORD $0x01c6 // vpextrq      $1, %xmm0, %rsi
	LONG $0x7ef9e1c4; BYTE $0xc3   // vmovq        %xmm0, %rbx
	CMPQ CX, R13
	JLE  LBB5_24
	CMPQ R13, $16
	JB   LBB5_33
	MOVQ BX, 0(R12)
	MOVQ SI, 8(R12)
	LEAQ 16(R15), R9
	ADDQ $16, R12
	LEAQ -16(R13), SI
	CMPQ SI, $8
	JAE  LBB5_34
	JMP  LBB5_35

LBB5_12:
	SUBQ  AX, R15
	BSFL  CX, R13
	ADDQ  R15, R13
	MOVQ  -56(BP), DX
	MOVQ  -48(BP), R12
	TESTQ R13, R13
	JNS   LBB5_69
	JMP   LBB5_88

LBB5_13:
	MOVQ  SI, DI
	MOVQ  SI, R9
	MOVQ  AX, R15
	TESTB CX, CX
	JNE   LBB5_9

LBB5_14:
	MOVQ  R14, BX
	WORD  $0xf8c5; BYTE $0x77     // vzeroupper
	CMPQ  R9, $15
	SETGT R14
	CMPQ  R13, $16
	JL    LBB5_26
	CMPQ  R9, $16
	JL    LBB5_26
	QUAD  $0xfffffd960d6f7ec5     // vmovdqu      $-618(%rip), %ymm9  /* LCPI5_0(%rip) */
	QUAD  $0xfffffdae156f7ec5     // vmovdqu      $-594(%rip), %ymm10  /* LCPI5_1(%rip) */
	QUAD  $0xfffffdc61d6f7ec5     // vmovdqu      $-570(%rip), %ymm11  /* LCPI5_2(%rip) */
	LONG  $0x763d41c4; BYTE $0xc0 // vpcmpeqd     %ymm8, %ymm8, %ymm8
	QUAD  $0xfffffdd93d6ffac5     // vmovdqu      $-551(%rip), %xmm7  /* LCPI5_3(%rip) */
	QUAD  $0xfffffde1256ffac5     // vmovdqu      $-543(%rip), %xmm4  /* LCPI5_4(%rip) */
	QUAD  $0xfffffde92d6ffac5     // vmovdqu      $-535(%rip), %xmm5  /* LCPI5_5(%rip) */
	LONG  $0xf676c9c5             // vpcmpeqd     %xmm6, %xmm6, %xmm6

LBB5_17:
	LONG  $0x6f7ac1c4; BYTE $0x07   // vmovdqu      (%r15), %xmm0
	LONG  $0xc864c1c5               // vpcmpgtb     %xmm0, %xmm7, %xmm1
	LONG  $0xd474f9c5               // vpcmpeqb     %xmm4, %xmm0, %xmm2
	LONG  $0xdd74f9c5               // vpcmpeqb     %xmm5, %xmm0, %xmm3
	LONG  $0xd2ebe1c5               // vpor         %xmm2, %xmm3, %xmm2
	LONG  $0x7f7ac1c4; WORD $0x2404 // vmovdqu      %xmm0, (%r12)
	LONG  $0xc664f9c5               // vpcmpgtb     %xmm6, %xmm0, %xmm0
	LONG  $0xc0dbf1c5               // vpand        %xmm0, %xmm1, %xmm0
	LONG  $0xc0ebe9c5               // vpor         %xmm0, %xmm2, %xmm0
	LONG  $0xc8d7f9c5               // vpmovmskb    %xmm0, %ecx
	TESTW CX, CX
	JNE   LBB5_32
	ADDQ  $16, R15
	ADDQ  $16, R12
	LEAQ  -16(R9), SI
	LEAQ  -16(R13), CX
	CMPQ  R9, $31
	SETGT R14
	CMPQ  R9, $32
	JL    LBB5_20
	MOVQ  SI, R9
	CMPQ  R13, $31
	MOVQ  CX, R13
	JG    LBB5_17

LBB5_20:
	TESTB R14, R14
	JE    LBB5_27

LBB5_21:
	LONG $0x6f7ac1c4; BYTE $0x07 // vmovdqu      (%r15), %xmm0
	LONG $0xc864c1c5             // vpcmpgtb     %xmm0, %xmm7, %xmm1
	LONG $0xd474f9c5             // vpcmpeqb     %xmm4, %xmm0, %xmm2
	LONG $0xdd74f9c5             // vpcmpeqb     %xmm5, %xmm0, %xmm3
	LONG $0xd2ebe1c5             // vpor         %xmm2, %xmm3, %xmm2
	LONG $0xde64f9c5             // vpcmpgtb     %xmm6, %xmm0, %xmm3
	LONG $0xcbdbf1c5             // vpand        %xmm3, %xmm1, %xmm1
	LONG $0xc9ebe9c5             // vpor         %xmm1, %xmm2, %xmm1
	LONG $0xd1d7f9c5             // vpmovmskb    %xmm1, %edx
	ORL  $65536, DX
	BSFL DX, DX
	LONG $0x7ef9e1c4; BYTE $0xc6 // vmovq        %xmm0, %rsi
	CMPQ CX, DX
	MOVQ BX, R14
	JGE  LBB5_51
	CMPQ CX, $8
	JB   LBB5_54
	MOVQ SI, 0(R12)
	LEAQ 8(R15), SI
	ADDQ $8, R12
	LEAQ -8(CX), BX
	CMPQ BX, $4
	JAE  LBB5_81

LBB5_56:
	CMPQ BX, $2
	JB   LBB5_57

LBB5_82:
	MOVWLZX 0(SI), DX
	MOVW    DX, 0(R12)
	ADDQ    $2, SI
	ADDQ    $2, R12
	ADDQ    $-2, BX
	TESTQ   BX, BX
	JNE     LBB5_58
	JMP     LBB5_59

LBB5_24:
	CMPL CX, $16
	JB   LBB5_40
	MOVQ BX, 0(R12)
	MOVQ SI, 8(R12)
	LEAQ 16(R15), SI
	ADDQ $16, R12
	LEAQ -16(CX), BX
	CMPQ BX, $8
	JAE  LBB5_41
	JMP  LBB5_42

LBB5_26:
	MOVQ  R13, CX
	MOVQ  R9, SI
	QUAD  $0xfffffc340d6f7ec5     // vmovdqu      $-972(%rip), %ymm9  /* LCPI5_0(%rip) */
	QUAD  $0xfffffc4c156f7ec5     // vmovdqu      $-948(%rip), %ymm10  /* LCPI5_1(%rip) */
	QUAD  $0xfffffc641d6f7ec5     // vmovdqu      $-924(%rip), %ymm11  /* LCPI5_2(%rip) */
	LONG  $0x763d41c4; BYTE $0xc0 // vpcmpeqd     %ymm8, %ymm8, %ymm8
	QUAD  $0xfffffc773d6ffac5     // vmovdqu      $-905(%rip), %xmm7  /* LCPI5_3(%rip) */
	QUAD  $0xfffffc7f256ffac5     // vmovdqu      $-897(%rip), %xmm4  /* LCPI5_4(%rip) */
	QUAD  $0xfffffc872d6ffac5     // vmovdqu      $-889(%rip), %xmm5  /* LCPI5_5(%rip) */
	LONG  $0xf676c9c5             // vpcmpeqd     %xmm6, %xmm6, %xmm6
	TESTB R14, R14
	JNE   LBB5_21

LBB5_27:
	TESTQ CX, CX
	MOVQ  BX, R14
	LONG  $0x120d8d4c; WORD $0x0032; BYTE $0x00 // leaq         $12818(%rip), %r9  /* __SingleQuoteTab(%rip) */
	JLE   LBB5_60
	MOVQ  SI, DX
	TESTQ SI, SI
	JLE   LBB5_61

LBB5_29:
	MOVBLZX 0(R15), BX
	MOVQ    BX, DX
	SHLQ    $4, DX
	CMPQ    0(DX)(R9*1), $0
	JNE     LBB5_53
	LEAQ    -1(SI), DX
	INCQ    R15
	MOVB    BX, 0(R12)
	CMPQ    SI, $2
	JL      LBB5_61
	LEAQ    -1(CX), BX
	INCQ    R12
	MOVQ    DX, SI
	CMPQ    CX, $1
	MOVQ    BX, CX
	JG      LBB5_29
	JMP     LBB5_61

LBB5_32:
	MOVWLZX CX, CX
	SUBQ    AX, R15
	BSFL    CX, R13
	ADDQ    R15, R13
	MOVQ    BX, R14
	MOVQ    -56(BP), DX
	MOVQ    -48(BP), R12
	TESTQ   R13, R13
	JNS     LBB5_69
	JMP     LBB5_88

LBB5_33:
	MOVQ R15, R9
	MOVQ R13, SI
	CMPQ SI, $8
	JB   LBB5_35

LBB5_34:
	MOVQ 0(R9), CX
	MOVQ CX, 0(R12)
	ADDQ $8, R9
	ADDQ $8, R12
	ADDQ $-8, SI

LBB5_35:
	CMPQ SI, $4
	JB   LBB5_36
	MOVL 0(R9), CX
	MOVL CX, 0(R12)
	ADDQ $4, R9
	ADDQ $4, R12
	ADDQ $-4, SI
	CMPQ SI, $2
	JAE  LBB5_48

LBB5_37:
	TESTQ SI, SI
	JE    LBB5_39

LBB5_38:
	MOVB 0(R9), CX
	MOVB CX, 0(R12)

LBB5_39:
	SUBQ  AX, R13
	ADDQ  R15, R13
	NOTQ  R13
	MOVQ  -56(BP), DX
	MOVQ  -48(BP), R12
	TESTQ R13, R13
	JNS   LBB5_69
	JMP   LBB5_88

LBB5_36:
	CMPQ SI, $2
	JB   LBB5_37

LBB5_48:
	MOVWLZX 0(R9), CX
	MOVW    CX, 0(R12)
	ADDQ    $2, R9
	ADDQ    $2, R12
	ADDQ    $-2, SI
	TESTQ   SI, SI
	JNE     LBB5_38
	JMP     LBB5_39

LBB5_40:
	MOVQ R15, SI
	MOVQ CX, BX
	CMPQ BX, $8
	JB   LBB5_42

LBB5_41:
	MOVQ 0(SI), DX
	MOVQ DX, 0(R12)
	ADDQ $8, SI
	ADDQ $8, R12
	ADDQ $-8, BX

LBB5_42:
	CMPQ BX, $4
	JB   LBB5_43
	MOVL 0(SI), DX
	MOVL DX, 0(R12)
	ADDQ $4, SI
	ADDQ $4, R12
	ADDQ $-4, BX
	CMPQ BX, $2
	JAE  LBB5_50

LBB5_44:
	TESTQ BX, BX
	JE    LBB5_46

LBB5_45:
	MOVB 0(SI), DX
	MOVB DX, 0(R12)

LBB5_46:
	SUBQ AX, R15
	ADDQ CX, R15
	JMP  LBB5_68

LBB5_43:
	CMPQ BX, $2
	JB   LBB5_44

LBB5_50:
	MOVWLZX 0(SI), DX
	MOVW    DX, 0(R12)
	ADDQ    $2, SI
	ADDQ    $2, R12
	ADDQ    $-2, BX
	TESTQ   BX, BX
	JNE     LBB5_45
	JMP     LBB5_46

LBB5_51:
	CMPL DX, $8
	JB   LBB5_62
	MOVQ SI, 0(R12)
	LEAQ 8(R15), R9
	ADDQ $8, R12
	LEAQ -8(DX), SI
	CMPQ SI, $4
	JAE  LBB5_83

LBB5_64:
	CMPQ SI, $2
	JB   LBB5_65

LBB5_84:
	MOVWLZX 0(R9), CX
	MOVW    CX, 0(R12)
	ADDQ    $2, R9
	ADDQ    $2, R12
	ADDQ    $-2, SI
	TESTQ   SI, SI
	JNE     LBB5_66
	JMP     LBB5_67

LBB5_53:
	SUBQ AX, R15
	JMP  LBB5_68

LBB5_54:
	MOVQ R15, SI
	MOVQ CX, BX
	CMPQ BX, $4
	JB   LBB5_56

LBB5_81:
	MOVL 0(SI), DX
	MOVL DX, 0(R12)
	ADDQ $4, SI
	ADDQ $4, R12
	ADDQ $-4, BX
	CMPQ BX, $2
	JAE  LBB5_82

LBB5_57:
	TESTQ BX, BX
	JE    LBB5_59

LBB5_58:
	MOVB 0(SI), DX
	MOVB DX, 0(R12)

LBB5_59:
	SUBQ  AX, CX
	ADDQ  R15, CX
	NOTQ  CX
	MOVQ  CX, R13
	MOVQ  -56(BP), DX
	MOVQ  -48(BP), R12
	TESTQ R13, R13
	JNS   LBB5_69
	JMP   LBB5_88

LBB5_60:
	MOVQ SI, DX

LBB5_61:
	SUBQ  AX, R15
	NEGQ  DX
	SBBQ  R13, R13
	XORQ  R15, R13
	MOVQ  -56(BP), DX
	MOVQ  -48(BP), R12
	TESTQ R13, R13
	JNS   LBB5_69
	JMP   LBB5_88

LBB5_62:
	MOVQ R15, R9
	MOVQ DX, SI
	CMPQ SI, $4
	JB   LBB5_64

LBB5_83:
	MOVL 0(R9), CX
	MOVL CX, 0(R12)
	ADDQ $4, R9
	ADDQ $4, R12
	ADDQ $-4, SI
	CMPQ SI, $2
	JAE  LBB5_84

LBB5_65:
	TESTQ SI, SI
	JE    LBB5_67

LBB5_66:
	MOVB 0(R9), CX
	MOVB CX, 0(R12)

LBB5_67:
	SUBQ AX, R15
	ADDQ DX, R15

LBB5_68:
	MOVQ  R15, R13
	MOVQ  -56(BP), DX
	MOVQ  -48(BP), R12
	TESTQ R13, R13
	JS    LBB5_88

LBB5_69:
	ADDQ R13, AX
	ADDQ R13, R8
	CMPQ DI, R13
	JE   LBB5_85
	SUBQ R13, R11
	SUBQ DI, R13
	JMP  LBB5_72

LBB5_71:
	INCQ AX
	ADDQ SI, R8
	INCQ R13
	JE   LBB5_85

LBB5_72:
	MOVBLZX 0(AX), BX
	SHLQ    $4, BX
	MOVQ    0(R10)(BX*1), CX
	TESTL   CX, CX
	JE      LBB5_80
	MOVLQSX CX, SI
	SUBQ    SI, R11
	JL      LBB5_86
	LEAQ    8(R10)(BX*1), R15
	CMPQ    SI, $4
	JB      LBB5_76
	MOVL    0(R15), CX
	MOVL    CX, 0(R8)
	LEAQ    12(R10)(BX*1), R15
	LEAQ    4(R8), R9
	LEAQ    -4(SI), BX
	CMPQ    BX, $2
	JAE     LBB5_77
	JMP     LBB5_78

LBB5_76:
	MOVQ R8, R9
	MOVQ SI, BX
	CMPQ BX, $2
	JB   LBB5_78

LBB5_77:
	MOVWLZX 0(R15), CX
	MOVW    CX, 0(R9)
	ADDQ    $2, R15
	ADDQ    $2, R9
	ADDQ    $-2, BX

LBB5_78:
	TESTQ   BX, BX
	JE      LBB5_71
	MOVBLZX 0(R15), CX
	MOVB    CX, 0(R9)
	JMP     LBB5_71

LBB5_80:
	MOVQ  R13, SI
	NEGQ  SI
	TESTQ R13, R13
	JNE   LBB5_2

LBB5_85:
	SUBQ DX, R8
	MOVQ R8, 0(R14)
	SUBQ R12, AX
	JMP  LBB5_87

LBB5_86:
	SUBQ DX, R8
	MOVQ R8, 0(R14)
	NOTQ AX
	ADDQ R12, AX

LBB5_87:
	ADDQ $16, SP
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	RET

LBB5_88:
	SUBQ DX, R8
	MOVQ R13, CX
	NOTQ CX
	ADDQ R8, CX
	MOVQ CX, 0(R14)
	SUBQ AX, R12
	ADDQ R13, R12
	MOVQ R12, AX
	JMP  LBB5_87

LCPI6_0:
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'

LCPI6_1:
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'

_unquote:
	BYTE  $0x55               // pushq        %rbp
	WORD  $0x8948; BYTE $0xe5 // movq         %rsp, %rbp
	WORD  $0x5741             // pushq        %r15
	WORD  $0x5641             // pushq        %r14
	WORD  $0x5541             // pushq        %r13
	WORD  $0x5441             // pushq        %r12
	BYTE  $0x53               // pushq        %rbx
	BYTE  $0x50               // pushq        %rax
	TESTQ SI, SI
	JE    LBB6_1
	MOVQ  CX, -48(BP)
	MOVL  R8, R10
	ANDL  $1, R10
	QUAD  $0xffffffaa0d6ffec5 // vmovdqu      $-86(%rip), %ymm1  /* LCPI6_0(%rip) */
	QUAD  $0xffffffc2156ffac5 // vmovdqu      $-62(%rip), %xmm2  /* LCPI6_1(%rip) */
	MOVQ  DI, R9
	MOVQ  SI, R14
	MOVQ  DX, AX
	JMP   LBB6_3

LBB6_1:
	XORL R14, R14
	MOVQ DX, AX

LBB6_95:
	ADDQ R14, AX
	SUBQ DX, AX

LBB6_96:
	ADDQ $8, SP
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	RET

LBB6_53:
	MOVB R11, 0(AX)
	INCQ AX

LBB6_54:
	MOVQ R12, R14
	MOVQ R15, R9

LBB6_93:
	TESTQ R14, R14
	JE    LBB6_94

LBB6_3:
	CMPB 0(R9), $92
	JNE  LBB6_5
	XORL BX, BX
	JMP  LBB6_20

LBB6_5:
	MOVQ R14, R12
	MOVQ AX, R13
	MOVQ R9, R15
	CMPQ R14, $32
	JL   LBB6_10
	MOVQ R9, R15
	MOVQ AX, R13
	MOVQ R14, R11

LBB6_7:
	LONG  $0x6f7ec1c4; BYTE $0x07   // vmovdqu      (%r15), %ymm0
	LONG  $0x7f7ec1c4; WORD $0x0045 // vmovdqu      %ymm0, (%r13)
	LONG  $0xc174fdc5               // vpcmpeqb     %ymm1, %ymm0, %ymm0
	LONG  $0xc8d7fdc5               // vpmovmskb    %ymm0, %ecx
	TESTL CX, CX
	JNE   LBB6_8
	ADDQ  $32, R15
	ADDQ  $32, R13
	LEAQ  -32(R11), R12
	CMPQ  R11, $63
	MOVQ  R12, R11
	JG    LBB6_7

LBB6_10:
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	QUAD $0xffffff24156ffac5 // vmovdqu      $-220(%rip), %xmm2  /* LCPI6_1(%rip) */
	CMPQ R12, $16
	JL   LBB6_11

LBB6_16:
	LONG  $0x6f7ac1c4; BYTE $0x07   // vmovdqu      (%r15), %xmm0
	LONG  $0x7f7ac1c4; WORD $0x0045 // vmovdqu      %xmm0, (%r13)
	LONG  $0xc274f9c5               // vpcmpeqb     %xmm2, %xmm0, %xmm0
	LONG  $0xc8d7f9c5               // vpmovmskb    %xmm0, %ecx
	TESTW CX, CX
	JNE   LBB6_17
	ADDQ  $16, R15
	ADDQ  $16, R13
	LEAQ  -16(R12), CX
	CMPQ  R12, $31
	MOVQ  CX, R12
	JG    LBB6_16

LBB6_11:
	TESTQ R12, R12
	JE    LBB6_95
	XORL  CX, CX
	QUAD  $0xfffffebd0d6ffec5 // vmovdqu      $-323(%rip), %ymm1  /* LCPI6_0(%rip) */

LBB6_13:
	MOVBLZX 0(R15)(CX*1), BX
	CMPB    BX, $92
	JE      LBB6_18
	MOVB    BX, 0(R13)(CX*1)
	INCQ    CX
	CMPQ    R12, CX
	JNE     LBB6_13
	JMP     LBB6_95

LBB6_18:
	ADDQ CX, R15
	SUBQ R9, R15
	MOVQ R15, BX
	CMPQ BX, $-1
	JNE  LBB6_20
	JMP  LBB6_95

LBB6_8:
	MOVLQSX CX, CX
	SUBQ    R9, R15
	BSFQ    CX, BX
	ADDQ    R15, BX
	CMPQ    BX, $-1
	JNE     LBB6_20
	JMP     LBB6_95

LBB6_17:
	MOVWLZX CX, CX
	SUBQ    R9, R15
	BSFQ    CX, BX
	ADDQ    R15, BX
	QUAD    $0xfffffe600d6ffec5 // vmovdqu      $-416(%rip), %ymm1  /* LCPI6_0(%rip) */
	CMPQ    BX, $-1
	JE      LBB6_95

LBB6_20:
	LEAQ  2(BX), CX
	SUBQ  CX, R14
	JS    LBB6_21
	LEAQ  2(R9)(BX*1), R9
	TESTQ R10, R10
	JNE   LBB6_23

LBB6_34:
	ADDQ    BX, AX
	MOVBLZX -1(R9), CX
	LONG    $0xc41d8d48; WORD $0x004c; BYTE $0x00 // leaq         $19652(%rip), %rbx  /* __UnquoteTab(%rip) */
	MOVB    0(CX)(BX*1), CX
	CMPB    CX, $-1
	JE      LBB6_38
	TESTB   CX, CX
	JE      LBB6_36
	MOVB    CX, 0(AX)
	INCQ    AX
	JMP     LBB6_93

LBB6_38:
	CMPQ    R14, $3
	JLE     LBB6_21
	MOVL    0(R9), R15
	MOVL    R15, CX
	NOTL    CX
	LEAL    -808464432(R15), BX
	ANDL    $-2139062144, CX
	TESTL   BX, CX
	JNE     LBB6_43
	LEAL    421075225(R15), BX
	ORL     R15, BX
	TESTL   $-2139062144, BX
	JNE     LBB6_43
	MOVL    R15, BX
	ANDL    $2139062143, BX
	MOVL    $-1061109568, R11
	SUBL    BX, R11
	LEAL    1179010630(BX), R12
	ANDL    CX, R11
	TESTL   R12, R11
	JNE     LBB6_43
	MOVL    $-522133280, R11
	SUBL    BX, R11
	ADDL    $960051513, BX
	ANDL    R11, CX
	TESTL   BX, CX
	JNE     LBB6_43
	BSWAPL  R15
	MOVL    R15, CX
	SHRL    $4, CX
	NOTL    CX
	ANDL    $16843009, CX
	LEAL    0(CX)(CX*8), CX
	ANDL    $252645135, R15
	ADDL    CX, R15
	MOVL    R15, R11
	SHRL    $4, R11
	ORL     R15, R11
	MOVL    R11, CX
	SHRL    $8, CX
	ANDL    $65280, CX
	MOVBLZX R11, R13
	ORL     CX, R13
	LEAQ    4(R9), R15
	LEAQ    -4(R14), R12
	CMPL    R13, $127
	JBE     LBB6_53
	CMPL    R13, $2047
	JBE     LBB6_56
	MOVL    R11, BX
	ANDL    $16252928, BX
	CMPL    BX, $14155776
	JE      LBB6_59
	SHRL    $12, CX
	ORB     $-32, CX
	MOVB    CX, 0(AX)
	SHRL    $6, R13
	ANDB    $63, R13
	ORB     $-128, R13
	MOVB    R13, 1(AX)
	ANDB    $63, R11
	ORB     $-128, R11
	MOVB    R11, 2(AX)
	ADDQ    $3, AX
	JMP     LBB6_54

LBB6_23:
	TESTL R14, R14
	JE    LBB6_21
	CMPB  -1(R9), $92
	JNE   LBB6_25
	CMPB  0(R9), $92
	JNE   LBB6_33
	CMPL  R14, $1
	JLE   LBB6_21
	MOVB  1(R9), CX
	CMPB  CX, $34
	JE    LBB6_32
	CMPB  CX, $92
	JNE   LBB6_31

LBB6_32:
	INCQ R9
	DECQ R14

LBB6_33:
	INCQ R9
	DECQ R14
	JMP  LBB6_34

LBB6_56:
	SHRL $6, R13
	ORB  $-64, R13
	MOVB R13, 0(AX)
	ANDB $63, R11
	ORB  $-128, R11
	MOVB R11, 1(AX)
	ADDQ $2, AX
	JMP  LBB6_54

LBB6_59:
	TESTQ R10, R10
	JNE   LBB6_61
	MOVQ  R12, R14
	MOVQ  R15, R9
	JMP   LBB6_65

LBB6_61:
	CMPQ R14, $4
	JLE  LBB6_21
	CMPB 0(R15), $92
	JNE  LBB6_63
	ADDQ $-5, R14
	ADDQ $5, R9

LBB6_65:
	CMPL    R13, $56319
	JA      LBB6_69
	CMPQ    R14, $6
	JL      LBB6_69
	CMPB    0(R9), $92
	JNE     LBB6_69
	CMPB    1(R9), $117
	JNE     LBB6_69
	MOVL    2(R9), R11
	MOVL    R11, CX
	NOTL    CX
	LEAL    -808464432(R11), BX
	ANDL    $-2139062144, CX
	TESTL   BX, CX
	JNE     LBB6_77
	LEAL    421075225(R11), BX
	ORL     R11, BX
	TESTL   $-2139062144, BX
	JNE     LBB6_77
	MOVL    R11, BX
	ANDL    $2139062143, BX
	MOVL    $-1061109568, R15
	SUBL    BX, R15
	LEAL    1179010630(BX), R12
	ANDL    CX, R15
	TESTL   R12, R15
	JNE     LBB6_77
	MOVL    $-522133280, R15
	SUBL    BX, R15
	ADDL    $960051513, BX
	ANDL    R15, CX
	TESTL   BX, CX
	JNE     LBB6_77
	BSWAPL  R11
	MOVL    R11, CX
	SHRL    $4, CX
	NOTL    CX
	ANDL    $16843009, CX
	LEAL    0(CX)(CX*8), CX
	ANDL    $252645135, R11
	ADDL    CX, R11
	MOVL    R11, BX
	SHRL    $4, BX
	ORL     R11, BX
	ADDQ    $6, R9
	ADDQ    $-6, R14
	MOVL    BX, CX
	ANDL    $16515072, CX
	CMPL    CX, $14417920
	JNE     LBB6_87
	MOVL    BX, CX
	SHRL    $8, CX
	ANDL    $65280, CX
	MOVBLZX BX, BX
	ORL     CX, BX
	SHLL    $10, R13
	LEAL    -56613888(R13)(BX*1), BX
	CMPL    BX, $1114112
	JB      LBB6_92
	TESTB   $2, R8
	JE      LBB6_88
	JMP     LBB6_70

LBB6_69:
	TESTB $2, R8
	JE    LBB6_71

LBB6_70:
	MOVW $-16401, 0(AX)
	MOVB $-67, 2(AX)
	ADDQ $3, AX
	JMP  LBB6_93

LBB6_87:
	TESTB $2, R8
	JE    LBB6_88
	MOVL  $-272777233, 0(AX)
	MOVW  $-16961, 4(AX)
	ADDQ  $6, AX
	JMP   LBB6_93

LBB6_92:
	MOVL BX, CX
	SHRL $18, CX
	ORB  $-16, CX
	MOVB CX, 0(AX)
	MOVL BX, CX
	SHRL $12, CX
	ANDB $63, CX
	ORB  $-128, CX
	MOVB CX, 1(AX)
	MOVL BX, CX
	SHRL $6, CX
	ANDB $63, CX
	ORB  $-128, CX
	MOVB CX, 2(AX)
	ANDB $63, BX
	ORB  $-128, BX
	MOVB BX, 3(AX)
	ADDQ $4, AX
	JMP  LBB6_93

LBB6_43:
	MOVQ R9, DX
	SUBQ DI, DX
	MOVQ -48(BP), DI
	MOVQ DX, 0(DI)
	MOVB 0(R9), CX
	LEAL -48(CX), SI
	MOVQ $-2, AX
	CMPB SI, $10
	JB   LBB6_45
	ANDB $-33, CX
	ADDB $-65, CX
	CMPB CX, $5
	JA   LBB6_96

LBB6_45:
	LEAQ 1(DX), CX
	MOVQ CX, 0(DI)
	MOVB 1(R9), CX
	LEAL -48(CX), SI
	CMPB SI, $10
	JB   LBB6_47
	ANDB $-33, CX
	ADDB $-65, CX
	CMPB CX, $5
	JA   LBB6_96

LBB6_47:
	LEAQ 2(DX), CX
	MOVQ CX, 0(DI)
	MOVB 2(R9), CX
	LEAL -48(CX), SI
	CMPB SI, $10
	JB   LBB6_49
	ANDB $-33, CX
	ADDB $-65, CX
	CMPB CX, $5
	JA   LBB6_96

LBB6_49:
	LEAQ 3(DX), CX
	MOVQ CX, 0(DI)
	MOVB 3(R9), CX
	LEAL -48(CX), SI
	CMPB SI, $10
	JB   LBB6_51
	ANDB $-33, CX
	ADDB $-65, CX
	CMPB CX, $5
	JA   LBB6_96

LBB6_51:
	ADDQ $4, DX
	MOVQ DX, 0(DI)
	JMP  LBB6_96

LBB6_21:
	MOVQ -48(BP), AX
	MOVQ SI, 0(AX)
	MOVQ $-1, AX
	JMP  LBB6_96

LBB6_36:
	NOTQ DI
	ADDQ DI, R9
	MOVQ -48(BP), AX
	MOVQ R9, 0(AX)
	MOVQ $-3, AX
	JMP  LBB6_96

LBB6_94:
	XORL R14, R14
	JMP  LBB6_95

LBB6_88:
	SUBQ DI, R9
	ADDQ $-4, R9

LBB6_72:
	MOVQ -48(BP), AX
	MOVQ R9, 0(AX)
	MOVQ $-4, AX
	JMP  LBB6_96

LBB6_25:
	NOTQ DI
	ADDQ DI, R9
	JMP  LBB6_26

LBB6_31:
	SUBQ DI, R9
	INCQ R9

LBB6_26:
	MOVQ -48(BP), AX
	MOVQ R9, 0(AX)
	MOVQ $-2, AX
	JMP  LBB6_96

LBB6_63:
	SUBQ DI, R15
	ADDQ $-4, R15
	MOVQ -48(BP), AX
	MOVQ R15, 0(AX)
	MOVQ $-4, AX
	JMP  LBB6_96

LBB6_77:
	MOVQ R9, DX
	SUBQ DI, DX
	ADDQ $2, DX
	MOVQ -48(BP), AX
	MOVQ DX, 0(AX)
	MOVB 2(R9), CX
	LEAL -48(CX), SI
	MOVQ $-2, AX
	CMPB SI, $10
	JB   LBB6_79
	ANDB $-33, CX
	ADDB $-65, CX
	CMPB CX, $5
	JA   LBB6_96

LBB6_79:
	LEAQ 1(DX), CX
	MOVQ -48(BP), SI
	MOVQ CX, 0(SI)
	MOVB 3(R9), CX
	LEAL -48(CX), SI
	CMPB SI, $10
	JB   LBB6_81
	ANDB $-33, CX
	ADDB $-65, CX
	CMPB CX, $5
	JA   LBB6_96

LBB6_81:
	LEAQ 2(DX), CX
	MOVQ -48(BP), SI
	MOVQ CX, 0(SI)
	MOVB 4(R9), CX
	LEAL -48(CX), SI
	CMPB SI, $10
	JB   LBB6_83
	ANDB $-33, CX
	ADDB $-65, CX
	CMPB CX, $5
	JA   LBB6_96

LBB6_83:
	LEAQ 3(DX), CX
	MOVQ -48(BP), SI
	MOVQ CX, 0(SI)
	MOVB 5(R9), CX
	LEAL -48(CX), SI
	CMPB SI, $10
	JB   LBB6_85
	ANDB $-33, CX
	ADDB $-65, CX
	CMPB CX, $5
	JA   LBB6_96

LBB6_85:
	ADDQ $4, DX
	MOVQ -48(BP), CX
	MOVQ DX, 0(CX)
	JMP  LBB6_96

LBB6_71:
	LEAQ 4(R10)(DI*1), AX
	SUBQ AX, R9
	JMP  LBB6_72

LCPI7_0:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI7_1:
	QUAD $0x0909090909090909; QUAD $0x0909090909090909 // .space 16, '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'
	QUAD $0x0909090909090909; QUAD $0x0909090909090909 // .space 16, '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'

LCPI7_2:
	QUAD $0x0a0a0a0a0a0a0a0a; QUAD $0x0a0a0a0a0a0a0a0a // .space 16, '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'
	QUAD $0x0a0a0a0a0a0a0a0a; QUAD $0x0a0a0a0a0a0a0a0a // .space 16, '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'

LCPI7_3:
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'

LCPI7_4:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI7_5:
	QUAD $0x0909090909090909; QUAD $0x0909090909090909 // .space 16, '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'

LCPI7_6:
	QUAD $0x0a0a0a0a0a0a0a0a; QUAD $0x0a0a0a0a0a0a0a0a // .space 16, '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'

LCPI7_7:
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'

_value:
	BYTE $0x55               // pushq        %rbp
	WORD $0x8948; BYTE $0xe5 // movq         %rsp, %rbp
	WORD $0x5741             // pushq        %r15
	WORD $0x5641             // pushq        %r14
	WORD $0x5441             // pushq        %r12
	BYTE $0x53               // pushq        %rbx
	SUBQ $32, SP
	MOVQ CX, R14
	MOVQ DX, R12
	MOVQ SI, R15
	MOVQ DX, -40(BP)
	MOVQ DI, -56(BP)
	MOVQ SI, -48(BP)
	MOVQ DX, AX
	CMPQ DX, SI
	JAE  LBB7_18
	MOVB 0(DI)(R12*1), CX
	CMPB CX, $13
	JE   LBB7_5
	CMPB CX, $32
	JE   LBB7_5
	LEAL -9(CX), AX
	CMPB AX, $1
	JBE  LBB7_5
	MOVQ R12, AX
	JMP  LBB7_45

LBB7_5:
	LEAQ 1(R12), AX
	CMPQ AX, R15
	JAE  LBB7_18
	MOVB 0(DI)(AX*1), CX
	CMPB CX, $13
	JE   LBB7_9
	CMPB CX, $32
	JE   LBB7_9
	LEAL -9(CX), DX
	CMPB DX, $1
	JA   LBB7_45

LBB7_9:
	LEAQ 2(R12), AX
	CMPQ AX, R15
	JAE  LBB7_18
	MOVB 0(DI)(AX*1), CX
	CMPB CX, $13
	JE   LBB7_13
	CMPB CX, $32
	JE   LBB7_13
	LEAL -9(CX), DX
	CMPB DX, $1
	JA   LBB7_45

LBB7_13:
	LEAQ 3(R12), AX
	CMPQ AX, R15
	JAE  LBB7_18
	MOVB 0(DI)(AX*1), CX
	CMPB CX, $13
	JE   LBB7_17
	CMPB CX, $32
	JE   LBB7_17
	LEAL -9(CX), DX
	CMPB DX, $1
	JA   LBB7_45

LBB7_17:
	LEAQ 4(R12), AX

LBB7_18:
	LEAQ  0(DI)(AX*1), CX
	MOVQ  R15, DX
	SUBQ  AX, DX
	JE    LBB7_26
	MOVL  CX, AX
	ANDL  $31, AX
	TESTQ AX, AX
	JE    LBB7_26
	LEAQ  -1(DX), R10
	XORL  BX, BX
	MOVQ  $4294977024, R9

LBB7_21:
	MOVBLSX 0(CX)(BX*1), SI
	CMPL    SI, $32
	JA      LBB7_41
	BTQ     SI, R9
	JAE     LBB7_41
	LEAQ    1(BX), SI
	CMPQ    R10, BX
	JE      LBB7_25
	LEAQ    1(CX)(BX*1), AX
	ANDL    $31, AX
	MOVQ    SI, BX
	TESTQ   AX, AX
	JNE     LBB7_21

LBB7_25:
	ADDQ SI, CX
	SUBQ SI, DX

LBB7_26:
	CMPQ DX, $32
	JB   LBB7_30
	QUAD $0xfffffe1b056ffec5 // vmovdqu      $-485(%rip), %ymm0  /* LCPI7_0(%rip) */
	QUAD $0xfffffe330d6ffec5 // vmovdqu      $-461(%rip), %ymm1  /* LCPI7_1(%rip) */
	QUAD $0xfffffe4b156ffec5 // vmovdqu      $-437(%rip), %ymm2  /* LCPI7_2(%rip) */
	QUAD $0xfffffe631d6ffec5 // vmovdqu      $-413(%rip), %ymm3  /* LCPI7_3(%rip) */

LBB7_28:
	LONG $0x216ffdc5 // vmovdqa      (%rcx), %ymm4
	LONG $0xe874ddc5 // vpcmpeqb     %ymm0, %ymm4, %ymm5
	LONG $0xf174ddc5 // vpcmpeqb     %ymm1, %ymm4, %ymm6
	LONG $0xeeebd5c5 // vpor         %ymm6, %ymm5, %ymm5
	LONG $0xf274ddc5 // vpcmpeqb     %ymm2, %ymm4, %ymm6
	LONG $0xe374ddc5 // vpcmpeqb     %ymm3, %ymm4, %ymm4
	LONG $0xe6ebddc5 // vpor         %ymm6, %ymm4, %ymm4
	LONG $0xe5ebddc5 // vpor         %ymm5, %ymm4, %ymm4
	LONG $0xc4d7fdc5 // vpmovmskb    %ymm4, %eax
	CMPL AX, $-1
	JNE  LBB7_40
	ADDQ $32, CX
	ADDQ $-32, DX
	CMPQ DX, $31
	JA   LBB7_28

LBB7_30:
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	CMPQ DX, $16
	JB   LBB7_34
	QUAD $0xfffffe37056ffac5 // vmovdqu      $-457(%rip), %xmm0  /* LCPI7_4(%rip) */
	QUAD $0xfffffe3f0d6ffac5 // vmovdqu      $-449(%rip), %xmm1  /* LCPI7_5(%rip) */
	QUAD $0xfffffe47156ffac5 // vmovdqu      $-441(%rip), %xmm2  /* LCPI7_6(%rip) */
	QUAD $0xfffffe4f1d6ffac5 // vmovdqu      $-433(%rip), %xmm3  /* LCPI7_7(%rip) */

LBB7_32:
	LONG $0x216ff9c5 // vmovdqa      (%rcx), %xmm4
	LONG $0xe874d9c5 // vpcmpeqb     %xmm0, %xmm4, %xmm5
	LONG $0xf174d9c5 // vpcmpeqb     %xmm1, %xmm4, %xmm6
	LONG $0xeeebd1c5 // vpor         %xmm6, %xmm5, %xmm5
	LONG $0xf274d9c5 // vpcmpeqb     %xmm2, %xmm4, %xmm6
	LONG $0xe374d9c5 // vpcmpeqb     %xmm3, %xmm4, %xmm4
	LONG $0xe6ebd9c5 // vpor         %xmm6, %xmm4, %xmm4
	LONG $0xe5ebd9c5 // vpor         %xmm5, %xmm4, %xmm4
	LONG $0xc4d7f9c5 // vpmovmskb    %xmm4, %eax
	CMPW AX, $-1
	JNE  LBB7_71
	ADDQ $16, CX
	ADDQ $-16, DX
	CMPQ DX, $15
	JA   LBB7_32

LBB7_34:
	TESTQ DX, DX
	JE    LBB7_42
	LEAQ  0(CX)(DX*1), SI
	INCQ  CX
	MOVQ  $4294977024, BX
	MOVQ  CX, AX

LBB7_36:
	MOVBLSX -1(AX), CX
	CMPL    CX, $32
	JA      LBB7_87
	BTQ     CX, BX
	JAE     LBB7_87
	DECQ    DX
	INCQ    AX
	TESTQ   DX, DX
	JNE     LBB7_36
	MOVQ    SI, CX
	JMP     LBB7_42

LBB7_40:
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	SUBQ DI, CX
	NOTL AX
	WORD $0x9848             // cltq
	BSFQ AX, AX
	ADDQ CX, AX
	JMP  LBB7_43

LBB7_41:
	ADDQ BX, CX

LBB7_42:
	SUBQ DI, CX
	MOVQ CX, AX

LBB7_43:
	CMPQ AX, R15
	JAE  LBB7_48
	MOVB 0(DI)(AX*1), CX

LBB7_45:
	LEAQ    1(AX), R12
	MOVQ    R12, -40(BP)
	MOVBLSX CX, CX
	CMPL    CX, $125
	JA      LBB7_51
	LONG    $0x3e158d48; WORD $0x0002; BYTE $0x00 // leaq         $574(%rip), %rdx  /* LJTI7_0(%rip) */
	MOVLQSX 0(DX)(CX*4), CX
	ADDQ    DX, CX
	JMP     CX

LBB7_47:
	MOVQ AX, -40(BP)
	LEAQ -56(BP), DI
	LEAQ -40(BP), SI
	MOVQ R14, DX
	LONG $0x00071ae8; BYTE $0x00 // callq        _vnumber
	MOVQ -40(BP), AX
	JMP  LBB7_50

LBB7_48:
	MOVQ $1, 0(R14)

LBB7_49:
	MOVQ R12, AX

LBB7_50:
	ADDQ $32, SP
	BYTE $0x5b   // popq         %rbx
	WORD $0x5c41 // popq         %r12
	WORD $0x5e41 // popq         %r14
	WORD $0x5f41 // popq         %r15
	BYTE $0x5d   // popq         %rbp
	RET

LBB7_51:
	MOVQ $-2, 0(R14)
	JMP  LBB7_50

LBB7_52:
	LEAQ  24(R14), CX
	MOVQ  R15, SI
	MOVQ  R12, DX
	LONG  $0x000476e8; BYTE $0x00 // callq        _advance_string
	TESTQ AX, AX
	JS    LBB7_72
	MOVQ  AX, -40(BP)
	MOVQ  R12, 16(R14)
	MOVL  $7, CX
	MOVQ  CX, 0(R14)
	JMP   LBB7_50

LBB7_54:
	XORL  AX, AX
	TESTL R8, R8
	SETEQ AX
	MOVQ  $-2, CX
	MOVL  $11, DX
	JMP   LBB7_70

LBB7_55:
	XORL  AX, AX
	TESTL R8, R8
	SETEQ AX
	MOVQ  $-2, CX
	MOVL  $10, DX
	JMP   LBB7_70

LBB7_56:
	MOVQ $5, 0(R14)
	JMP  LBB7_49

LBB7_57:
	XORL  AX, AX
	TESTL R8, R8
	SETEQ AX
	MOVQ  $-2, CX
	MOVL  $12, DX
	JMP   LBB7_70

LBB7_58:
	LEAQ -4(R15), CX
	CMPQ AX, CX
	JAE  LBB7_67
	MOVL 0(DI)(R12*1), DX
	CMPL DX, $1702063201
	JNE  LBB7_73
	ADDQ $5, AX
	MOVQ AX, -40(BP)
	MOVL $4, CX
	JMP  LBB7_85

LBB7_61:
	LEAQ -3(R15), CX
	CMPQ AX, CX
	JAE  LBB7_67
	MOVL 0(DI)(AX*1), DX
	CMPL DX, $1819047278
	JNE  LBB7_78
	ADDQ $4, AX
	MOVQ AX, -40(BP)
	MOVL $2, CX
	JMP  LBB7_85

LBB7_64:
	LEAQ -3(R15), CX
	CMPQ AX, CX
	JAE  LBB7_67
	MOVL 0(DI)(AX*1), DX
	CMPL DX, $1702195828
	JNE  LBB7_81
	ADDQ $4, AX
	MOVQ AX, -40(BP)
	MOVL $3, CX
	JMP  LBB7_85

LBB7_67:
	MOVQ R15, -40(BP)
	MOVQ $-1, CX
	JMP  LBB7_86

LBB7_68:
	MOVQ $6, 0(R14)
	JMP  LBB7_49

LBB7_69:
	XORL  AX, AX
	TESTL R8, R8
	SETEQ AX
	MOVQ  $-2, CX
	MOVL  $13, DX

LBB7_70:
	LONG $0xd1440f48 // cmoveq       %rcx, %rdx
	MOVQ DX, 0(R14)
	SUBQ AX, R12
	JMP  LBB7_49

LBB7_71:
	MOVWLZX AX, AX
	SUBQ    DI, CX
	NOTL    AX
	BSFL    AX, AX
	ADDQ    CX, AX
	JMP     LBB7_43

LBB7_72:
	MOVQ R15, -40(BP)
	MOVQ AX, 0(R14)
	MOVQ R15, AX
	JMP  LBB7_50

LBB7_73:
	MOVQ $-2, CX
	CMPB DX, $97
	JNE  LBB7_77
	MOVL $1702063201, AX

LBB7_75:
	SHRL    $8, AX
	MOVBLSX 1(DI)(R12*1), DX
	INCQ    R12
	MOVBLZX AX, SI
	CMPL    SI, DX
	JE      LBB7_75
	MOVQ    R12, -40(BP)

LBB7_77:
	MOVQ R12, R15
	JMP  LBB7_86

LBB7_78:
	MOVQ AX, -40(BP)
	MOVQ $-2, CX
	CMPB DX, $110
	JNE  LBB7_85
	MOVL $1819047278, DX

LBB7_80:
	SHRL    $8, DX
	MOVBLSX 1(DI)(AX*1), SI
	INCQ    AX
	MOVBLZX DX, BX
	CMPL    BX, SI
	JE      LBB7_80
	JMP     LBB7_84

LBB7_81:
	MOVQ AX, -40(BP)
	MOVQ $-2, CX
	CMPB DX, $116
	JNE  LBB7_85
	MOVL $1702195828, DX

LBB7_83:
	SHRL    $8, DX
	MOVBLSX 1(DI)(AX*1), SI
	INCQ    AX
	MOVBLZX DX, BX
	CMPL    BX, SI
	JE      LBB7_83

LBB7_84:
	MOVQ AX, -40(BP)

LBB7_85:
	MOVQ AX, R15

LBB7_86:
	MOVQ CX, 0(R14)
	MOVQ R15, AX
	JMP  LBB7_50

LBB7_87:
	MOVQ DI, CX
	NOTQ CX
	ADDQ CX, AX
	JMP  LBB7_43

// .set L7_0_set_48, LBB7_48-LJTI7_0
// .set L7_0_set_51, LBB7_51-LJTI7_0
// .set L7_0_set_52, LBB7_52-LJTI7_0
// .set L7_0_set_54, LBB7_54-LJTI7_0
// .set L7_0_set_47, LBB7_47-LJTI7_0
// .set L7_0_set_55, LBB7_55-LJTI7_0
// .set L7_0_set_56, LBB7_56-LJTI7_0
// .set L7_0_set_57, LBB7_57-LJTI7_0
// .set L7_0_set_58, LBB7_58-LJTI7_0
// .set L7_0_set_61, LBB7_61-LJTI7_0
// .set L7_0_set_64, LBB7_64-LJTI7_0
// .set L7_0_set_68, LBB7_68-LJTI7_0
// .set L7_0_set_69, LBB7_69-LJTI7_0
LJTI7_0:
	LONG $0xfffffde5 // .long L7_0_set_48
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffe05 // .long L7_0_set_52
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffe2f // .long L7_0_set_54
	LONG $0xfffffdcb // .long L7_0_set_47
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdcb // .long L7_0_set_47
	LONG $0xfffffdcb // .long L7_0_set_47
	LONG $0xfffffdcb // .long L7_0_set_47
	LONG $0xfffffdcb // .long L7_0_set_47
	LONG $0xfffffdcb // .long L7_0_set_47
	LONG $0xfffffdcb // .long L7_0_set_47
	LONG $0xfffffdcb // .long L7_0_set_47
	LONG $0xfffffdcb // .long L7_0_set_47
	LONG $0xfffffdcb // .long L7_0_set_47
	LONG $0xfffffdcb // .long L7_0_set_47
	LONG $0xfffffe48 // .long L7_0_set_55
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffe61 // .long L7_0_set_56
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffe6a // .long L7_0_set_57
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffe83 // .long L7_0_set_58
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffeae // .long L7_0_set_61
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffed8 // .long L7_0_set_64
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xffffff12 // .long L7_0_set_68
	LONG $0xfffffdfc // .long L7_0_set_51
	LONG $0xffffff1e // .long L7_0_set_69

_vstring:
	BYTE  $0x55                   // pushq        %rbp
	WORD  $0x8948; BYTE $0xe5     // movq         %rsp, %rbp
	WORD  $0x5741                 // pushq        %r15
	WORD  $0x5641                 // pushq        %r14
	WORD  $0x5441                 // pushq        %r12
	BYTE  $0x53                   // pushq        %rbx
	MOVQ  DX, R14
	MOVQ  SI, R12
	MOVQ  DI, BX
	MOVQ  0(SI), R15
	LEAQ  24(DX), CX
	MOVQ  0(DI), DI
	MOVQ  8(BX), SI
	MOVQ  R15, DX
	LONG  $0x000068e8; BYTE $0x00 // callq        _advance_string
	TESTQ AX, AX
	JS    LBB8_1
	MOVQ  AX, 0(R12)
	MOVQ  R15, 16(R14)
	MOVL  $7, AX
	JMP   LBB8_3

LBB8_1:
	MOVQ 8(BX), CX
	MOVQ CX, 0(R12)

LBB8_3:
	MOVQ AX, 0(R14)
	BYTE $0x5b      // popq         %rbx
	WORD $0x5c41    // popq         %r12
	WORD $0x5e41    // popq         %r14
	WORD $0x5f41    // popq         %r15
	BYTE $0x5d      // popq         %rbp
	RET

LCPI9_0:
	QUAD $0x2222222222222222; QUAD $0x2222222222222222 // .space 16, '""""""""""""""""'
	QUAD $0x2222222222222222; QUAD $0x2222222222222222 // .space 16, '""""""""""""""""'

LCPI9_1:
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'
	QUAD $0x5c5c5c5c5c5c5c5c; QUAD $0x5c5c5c5c5c5c5c5c // .space 16, '\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'

_advance_string:
	BYTE $0x55                     // pushq        %rbp
	WORD $0x8948; BYTE $0xe5       // movq         %rsp, %rbp
	WORD $0x5741                   // pushq        %r15
	WORD $0x5641                   // pushq        %r14
	WORD $0x5441                   // pushq        %r12
	BYTE $0x53                     // pushq        %rbx
	SUBQ DX, SI
	ADDQ DI, DX
	MOVQ $-1, 0(CX)
	MOVQ $-1, R8
	XORL R11, R11
	CMPQ SI, $64
	JB   LBB9_12
	QUAD $0xffffff8c056ffec5       // vmovdqu      $-116(%rip), %ymm0  /* LCPI9_0(%rip) */
	QUAD $0xffffffa40d6ffec5       // vmovdqu      $-92(%rip), %ymm1  /* LCPI9_1(%rip) */
	MOVQ $-6148914691236517206, R9
	MOVQ $6148914691236517205, R10

LBB9_2:
	LONG  $0x126ffec5             // vmovdqu      (%rdx), %ymm2
	LONG  $0x5a6ffec5; BYTE $0x20 // vmovdqu      $32(%rdx), %ymm3
	LONG  $0xe074edc5             // vpcmpeqb     %ymm0, %ymm2, %ymm4
	LONG  $0xf4d77dc5             // vpmovmskb    %ymm4, %r14d
	LONG  $0xe074e5c5             // vpcmpeqb     %ymm0, %ymm3, %ymm4
	LONG  $0xc4d7fdc5             // vpmovmskb    %ymm4, %eax
	LONG  $0xd174edc5             // vpcmpeqb     %ymm1, %ymm2, %ymm2
	LONG  $0xfad77dc5             // vpmovmskb    %ymm2, %r15d
	LONG  $0xd174e5c5             // vpcmpeqb     %ymm1, %ymm3, %ymm2
	LONG  $0xdad7fdc5             // vpmovmskb    %ymm2, %ebx
	SHLQ  $32, AX
	ORQ   AX, R14
	SHLQ  $32, BX
	ORQ   BX, R15
	JNE   LBB9_3
	TESTQ R11, R11
	JNE   LBB9_5
	XORL  R11, R11
	TESTQ R14, R14
	JNE   LBB9_9

LBB9_11:
	ADDQ $64, DX
	ADDQ $-64, SI
	CMPQ SI, $63
	JA   LBB9_2
	JMP  LBB9_12

LBB9_3:
	CMPQ R8, $-1
	JNE  LBB9_5
	MOVQ DX, AX
	SUBQ DI, AX
	BSFQ R15, R8
	ADDQ AX, R8
	MOVQ R8, 0(CX)

LBB9_5:
	MOVQ  R11, AX
	NOTQ  AX
	ANDQ  R15, AX
	LEAQ  0(AX)(AX*1), R12
	ORQ   R11, R12
	MOVQ  R12, BX
	NOTQ  BX
	ANDQ  R15, BX
	ANDQ  R9, BX
	XORL  R11, R11
	ADDQ  AX, BX
	SETCS R11
	ADDQ  BX, BX
	XORQ  R10, BX
	ANDQ  R12, BX
	NOTQ  BX
	ANDQ  BX, R14
	TESTQ R14, R14
	JE    LBB9_11

LBB9_9:
	BSFQ R14, AX

LBB9_10:
	SUBQ DI, DX
	LEAQ 1(DX)(AX*1), AX

LBB9_39:
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	RET

LBB9_12:
	CMPQ  SI, $32
	JB    LBB9_22
	LONG  $0x026ffec5         // vmovdqu      (%rdx), %ymm0
	QUAD  $0xfffffe9c0d74fdc5 // vpcmpeqb     $-356(%rip), %ymm0, %ymm1  /* LCPI9_0(%rip) */
	LONG  $0xc1d7fdc5         // vpmovmskb    %ymm1, %eax
	QUAD  $0xfffffeb00574fdc5 // vpcmpeqb     $-336(%rip), %ymm0, %ymm0  /* LCPI9_1(%rip) */
	LONG  $0xd8d7fdc5         // vpmovmskb    %ymm0, %ebx
	TESTL BX, BX
	JNE   LBB9_14
	TESTQ R11, R11
	JNE   LBB9_16
	XORL  R11, R11
	TESTQ AX, AX
	JE    LBB9_21

LBB9_20:
	BSFQ AX, AX
	JMP  LBB9_10

LBB9_14:
	CMPQ R8, $-1
	JNE  LBB9_16
	MOVQ DX, R9
	SUBQ DI, R9
	BSFQ BX, R8
	ADDQ R9, R8
	MOVQ R8, 0(CX)

LBB9_16:
	MOVL  R11, R9
	NOTL  R9
	ANDL  BX, R9
	LEAL  0(R9)(R9*1), R10
	LEAL  0(R11)(R9*2), R14
	NOTL  R10
	ANDL  BX, R10
	ANDL  $-1431655766, R10
	XORL  R11, R11
	ADDL  R9, R10
	SETCS R11
	ADDL  R10, R10
	XORL  $1431655765, R10
	ANDL  R14, R10
	NOTL  R10
	ANDL  R10, AX
	TESTQ AX, AX
	JNE   LBB9_20

LBB9_21:
	ADDQ $32, DX
	ADDQ $-32, SI

LBB9_22:
	TESTQ R11, R11
	JNE   LBB9_23
	MOVQ  $-1, AX
	TESTQ SI, SI
	JE    LBB9_39

LBB9_29:
	MOVQ DI, R9
	NOTQ R9

LBB9_30:
	LEAQ    1(DX), R11
	MOVBLZX 0(DX), BX
	CMPB    BX, $34
	JE      LBB9_38
	LEAQ    -1(SI), R10
	CMPB    BX, $92
	JE      LBB9_33
	MOVQ    R10, SI
	MOVQ    R11, DX
	TESTQ   R10, R10
	JNE     LBB9_30
	JMP     LBB9_39

LBB9_33:
	TESTQ R10, R10
	JE    LBB9_39
	CMPQ  R8, $-1
	JNE   LBB9_36
	ADDQ  R9, R11
	MOVQ  R11, 0(CX)
	MOVQ  R11, R8

LBB9_36:
	ADDQ  $2, DX
	ADDQ  $-2, SI
	MOVQ  SI, R10
	TESTQ R10, R10
	JNE   LBB9_30
	JMP   LBB9_39

LBB9_38:
	SUBQ DI, R11
	MOVQ R11, AX
	JMP  LBB9_39

LBB9_23:
	TESTQ SI, SI
	JE    LBB9_24
	CMPQ  R8, $-1
	JNE   LBB9_27
	MOVQ  DI, R8
	NOTQ  R8
	ADDQ  DX, R8
	MOVQ  R8, 0(CX)

LBB9_27:
	INCQ  DX
	DECQ  SI
	MOVQ  $-1, AX
	TESTQ SI, SI
	JNE   LBB9_29
	JMP   LBB9_39

LBB9_24:
	MOVQ $-1, AX
	JMP  LBB9_39

LCPI10_0:
	QUAD $0x4024000000000000 // .quad 0x4024000000000000

LCPI10_1:
	QUAD $0x7ff0000000000000 // .quad 0x7ff0000000000000

_vnumber:
	BYTE $0x55                   // pushq        %rbp
	WORD $0x8948; BYTE $0xe5     // movq         %rsp, %rbp
	WORD $0x5741                 // pushq        %r15
	WORD $0x5641                 // pushq        %r14
	WORD $0x5541                 // pushq        %r13
	WORD $0x5441                 // pushq        %r12
	BYTE $0x53                   // pushq        %rbx
	MOVQ 0(SI), AX
	MOVQ 0(DI), R8
	MOVQ 8(DI), R15
	MOVQ $9, 0(DX)
	LONG $0xc057f9c5             // vxorpd       %xmm0, %xmm0, %xmm0
	LONG $0x4211f9c5; BYTE $0x08 // vmovupd      %xmm0, $8(%rdx)
	MOVQ 0(SI), CX
	MOVQ CX, 24(DX)
	CMPQ AX, R15
	JAE  LBB10_56
	MOVB 0(R8)(AX*1), CX
	MOVL $1, R10
	CMPB CX, $45
	JNE  LBB10_4
	INCQ AX
	CMPQ AX, R15
	JAE  LBB10_56
	MOVB 0(R8)(AX*1), CX
	MOVL $-1, R10

LBB10_4:
	LEAL -48(CX), DI
	CMPB DI, $10
	JB   LBB10_6
	MOVQ AX, 0(SI)
	MOVQ $-2, 0(DX)
	JMP  LBB10_57

LBB10_6:
	CMPB    CX, $48
	JNE     LBB10_10
	LEAQ    1(AX), CX
	CMPQ    AX, R15
	JAE     LBB10_21
	MOVB    0(R8)(CX*1), BX
	ADDB    $-46, BX
	CMPB    BX, $55
	JA      LBB10_21
	MOVBLZX BX, DI
	MOVQ    $36028797027352577, BX
	BTQ     DI, BX
	JAE     LBB10_21

LBB10_10:
	CMPQ AX, R15
	MOVQ R15, R9
	LONG $0xc8470f4c // cmovaq       %rax, %r9
	XORL R12, R12

LBB10_11:
	MOVQ    R12, DI
	CMPQ    R9, AX
	JE      LBB10_22
	MOVQ    AX, R13
	MOVBLZX 0(R8)(AX*1), BX
	LEAL    -48(BX), AX
	CMPB    AX, $9
	JA      LBB10_23
	ADDL    $-48, BX
	IMULL   R10, BX
	IMUL3Q  $10, DI, R12
	JO      LBB10_15
	LEAQ    1(R13), AX
	MOVLQSX BX, CX
	ADDQ    CX, R12
	JNO     LBB10_11

LBB10_15:
	LONG  $0x2af3e1c4; BYTE $0xc7 // vcvtsi2sd    %rdi, %xmm1, %xmm0
	QUAD  $0xfffffef10559fbc5     // vmulsd       $-271(%rip), %xmm0, %xmm0  /* LCPI10_0(%rip) */
	LONG  $0xcb2af3c5             // vcvtsi2sd    %ebx, %xmm1, %xmm1
	LONG  $0xc158fbc5             // vaddsd       %xmm1, %xmm0, %xmm0
	MOVQ  $8, 0(DX)
	LEAQ  1(R13), AX
	CMPQ  AX, R15
	SETCS CX
	JAE   LBB10_26
	MOVB  1(R8)(R13*1), DI
	LEAL  -48(DI), BX
	MOVB  $1, CX
	CMPB  BX, $9
	JA    LBB10_26
	ADDQ  $2, R13
	QUAD  $0xfffffeb70d10fbc5     // vmovsd       $-329(%rip), %xmm1  /* LCPI10_0(%rip) */

LBB10_18:
	MOVQ    R13, CX
	MOVBLZX DI, AX
	LONG    $0xc159fbc5     // vmulsd       %xmm1, %xmm0, %xmm0
	ADDL    $-48, AX
	IMULL   R10, AX
	LONG    $0xd02ae3c5     // vcvtsi2sd    %eax, %xmm3, %xmm2
	LONG    $0xc258fbc5     // vaddsd       %xmm2, %xmm0, %xmm0
	CMPQ    R15, R13
	JE      LBB10_24
	MOVBLZX 0(R8)(CX*1), DI
	LEAL    -48(DI), AX
	LEAQ    1(CX), R13
	CMPB    AX, $9
	JBE     LBB10_18
	DECQ    R13
	MOVQ    R13, AX
	JMP     LBB10_25

LBB10_21:
	MOVQ CX, 0(SI)
	JMP  LBB10_57

LBB10_22:
	LONG $0x2af3e1c4; BYTE $0xc7 // vcvtsi2sd    %rdi, %xmm1, %xmm0
	MOVQ R9, R15
	MOVQ DI, R12
	JMP  LBB10_75

LBB10_23:
	LONG $0x2af3e1c4; BYTE $0xc7 // vcvtsi2sd    %rdi, %xmm1, %xmm0
	MOVB $1, R9
	MOVQ DI, R12
	CMPQ R13, R15
	JB   LBB10_27
	JMP  LBB10_49

LBB10_24:
	MOVQ R15, AX

LBB10_25:
	CMPQ  CX, R15
	SETCS CX

LBB10_26:
	XORL  R9, R9
	MOVQ  AX, R13
	TESTB CX, CX
	JE    LBB10_49

LBB10_27:
	CMPB 0(R8)(R13*1), $46
	JNE  LBB10_49
	LEAQ 1(R13), R11
	MOVQ $8, 0(DX)
	CMPQ R11, R15
	JAE  LBB10_56
	MOVB 0(R8)(R11*1), R14
	LEAL -48(R14), CX
	CMPB CX, $9
	JBE  LBB10_31
	MOVQ R11, 0(SI)
	MOVQ $-2, 0(DX)
	JMP  LBB10_57

LBB10_31:
	LONG    $0xc957f1c5 // vxorpd       %xmm1, %xmm1, %xmm1
	MOVQ    R11, AX
	LONG    $0xd257e9c5 // vxorpd       %xmm2, %xmm2, %xmm2
	CMPB    CX, $9
	JA      LBB10_40
	LEAL    18(R13), AX
	MOVLQSX AX, DI
	MOVQ    R11, AX
	LONG    $0xd257e9c5 // vxorpd       %xmm2, %xmm2, %xmm2
	CMPQ    R13, DI
	JGE     LBB10_40
	ADDQ    $2, R13
	XORL    CX, CX

LBB10_34:
	MOVBLZX R14, AX
	LEAQ    0(CX)(CX*4), CX
	ADDL    $-48, AX
	IMULL   R10, AX
	WORD    $0x9848           // cltq
	LEAQ    0(AX)(CX*2), CX
	CMPQ    R15, R13
	JE      LBB10_38
	MOVBLZX 0(R8)(R13*1), R14
	LEAL    -48(R14), BX
	LEAQ    1(R13), AX
	CMPB    BX, $9
	JA      LBB10_37
	CMPQ    R13, DI
	MOVQ    AX, R13
	JLE     LBB10_34

LBB10_37:
	DECQ AX
	JMP  LBB10_39

LBB10_38:
	MOVQ R15, AX

LBB10_39:
	LONG $0x2ae3e1c4; BYTE $0xd1 // vcvtsi2sd    %rcx, %xmm3, %xmm2

LBB10_40:
	SUBQ AX, R11
	CMPL R11, $-323
	JL   LBB10_44
	CMPL R11, $308
	JLE  LBB10_43
	QUAD $0xfffffd820d10fbc5 // vmovsd       $-638(%rip), %xmm1  /* LCPI10_1(%rip) */
	JMP  LBB10_44

LBB10_43:
	ADDL $323, R11
	LONG $0xb90d8d48; WORD $0x003b; BYTE $0x00 // leaq         $15289(%rip), %rcx  /* _P10_TAB(%rip) */
	LONG $0x596ba1c4; WORD $0xd90c             // vmulsd       (%rcx,%r11,8), %xmm2, %xmm1

LBB10_44:
	LONG $0xc158fbc5 // vaddsd       %xmm1, %xmm0, %xmm0
	CMPQ AX, R15
	JAE  LBB10_48

LBB10_45:
	MOVBLZX 0(R8)(AX*1), CX
	ADDB    $-48, CX
	CMPB    CX, $9
	JA      LBB10_48
	INCQ    AX
	CMPQ    R15, AX
	JNE     LBB10_45
	JMP     LBB10_74

LBB10_48:
	MOVQ AX, R13

LBB10_49:
	CMPQ R13, R15
	JAE  LBB10_73
	MOVB 0(R8)(R13*1), AX
	ORB  $32, AX
	CMPB AX, $101
	JNE  LBB10_73
	LEAQ 1(R13), CX
	MOVQ $8, 0(DX)
	CMPQ CX, R15
	JAE  LBB10_56
	MOVB 0(R8)(CX*1), AX
	CMPB AX, $45
	JE   LBB10_54
	MOVL $1, R10
	CMPB AX, $43
	JNE  LBB10_58

LBB10_54:
	ADDQ  $2, R13
	CMPQ  R13, R15
	JAE   LBB10_56
	XORL  CX, CX
	CMPB  AX, $43
	SETEQ CX
	LEAL  -1(CX)(CX*1), R10
	MOVB  0(R8)(R13*1), AX
	JMP   LBB10_59

LBB10_56:
	MOVQ R15, 0(SI)
	MOVQ $-1, 0(DX)

LBB10_57:
	BYTE $0x5b   // popq         %rbx
	WORD $0x5c41 // popq         %r12
	WORD $0x5d41 // popq         %r13
	WORD $0x5e41 // popq         %r14
	WORD $0x5f41 // popq         %r15
	BYTE $0x5d   // popq         %rbp
	RET

LBB10_58:
	MOVQ CX, R13

LBB10_59:
	LEAL -48(AX), CX
	CMPB CX, $9
	JBE  LBB10_61
	MOVQ R13, 0(SI)
	MOVQ $-2, 0(DX)
	JMP  LBB10_57

LBB10_61:
	XORL R11, R11
	CMPQ R13, R15
	JAE  LBB10_72
	XORL R11, R11
	CMPB CX, $9
	JA   LBB10_67
	LEAQ -1(R15), CX
	XORL R11, R11

LBB10_64:
	LEAL    0(R11)(R11*4), DI
	MOVBLZX AX, AX
	ADDL    $-48, AX
	IMULL   R10, AX
	LEAL    0(AX)(DI*2), R11
	CMPQ    CX, R13
	JE      LBB10_66
	MOVBLZX 1(R8)(R13*1), AX
	INCQ    R13
	LEAL    -48(AX), DI
	CMPB    DI, $10
	JB      LBB10_64
	JMP     LBB10_67

LBB10_66:
	MOVQ R15, R13

LBB10_67:
	CMPL R11, $1
	JE   LBB10_73
	CMPL R11, $-323
	JGE  LBB10_70
	LONG $0xc057f9c5 // vxorpd       %xmm0, %xmm0, %xmm0
	JMP  LBB10_73

LBB10_70:
	CMPL R11, $308
	JLE  LBB10_72
	QUAD $0xfffffc5b0510fbc5 // vmovsd       $-933(%rip), %xmm0  /* LCPI10_1(%rip) */
	JMP  LBB10_73

LBB10_72:
	ADDL $323, R11
	LONG $0x92058d48; WORD $0x003a; BYTE $0x00 // leaq         $14994(%rip), %rax  /* _P10_TAB(%rip) */
	LONG $0x597ba1c4; WORD $0xd804             // vmulsd       (%rax,%r11,8), %xmm0, %xmm0

LBB10_73:
	MOVQ R13, R15

LBB10_74:
	TESTB R9, R9
	JE    LBB10_76

LBB10_75:
	MOVQ R12, 16(DX)

LBB10_76:
	MOVQ R15, 0(SI)
	LONG $0x4211fbc5; BYTE $0x08 // vmovsd       %xmm0, $8(%rdx)
	JMP  LBB10_57

_vsigned:
	BYTE $0x55                   // pushq        %rbp
	WORD $0x8948; BYTE $0xe5     // movq         %rsp, %rbp
	BYTE $0x53                   // pushq        %rbx
	MOVQ 0(SI), AX
	MOVQ 0(DI), R8
	MOVQ 8(DI), R11
	MOVQ $9, 0(DX)
	LONG $0xc057f8c5             // vxorps       %xmm0, %xmm0, %xmm0
	LONG $0x4211f8c5; BYTE $0x08 // vmovups      %xmm0, $8(%rdx)
	MOVQ 0(SI), CX
	MOVQ CX, 24(DX)
	CMPQ AX, R11
	JAE  LBB11_1
	MOVB 0(R8)(AX*1), CX
	MOVL $1, R9
	CMPB CX, $45
	JNE  LBB11_5
	INCQ AX
	CMPQ AX, R11
	JAE  LBB11_1
	MOVB 0(R8)(AX*1), CX
	MOVQ $-1, R9

LBB11_5:
	LEAL -48(CX), DI
	CMPB DI, $10
	JB   LBB11_7
	MOVQ AX, 0(SI)
	MOVQ $-2, 0(DX)
	BYTE $0x5b       // popq         %rbx
	BYTE $0x5d       // popq         %rbp
	RET

LBB11_1:
	MOVQ R11, 0(SI)
	MOVQ $-1, 0(DX)
	BYTE $0x5b      // popq         %rbx
	BYTE $0x5d      // popq         %rbp
	RET

LBB11_7:
	CMPB    CX, $48
	JNE     LBB11_12
	LEAQ    1(AX), DI
	CMPQ    AX, R11
	JAE     LBB11_11
	MOVB    0(R8)(DI*1), CX
	ADDB    $-46, CX
	CMPB    CX, $55
	JA      LBB11_11
	MOVBLZX CX, R10
	MOVQ    $36028797027352577, CX
	BTQ     R10, CX
	JAE     LBB11_11

LBB11_12:
	CMPQ AX, R11
	MOVQ R11, R10
	LONG $0xd0470f4c // cmovaq       %rax, %r10
	XORL DI, DI

LBB11_13:
	CMPQ    R10, AX
	JE      LBB11_23
	MOVBQSX 0(R8)(AX*1), CX
	LEAL    -48(CX), BX
	CMPB    BX, $9
	JA      LBB11_18
	IMUL3Q  $10, DI, DI
	JO      LBB11_17
	INCQ    AX
	ADDL    $-48, CX
	IMULQ   R9, CX
	ADDQ    CX, DI
	JNO     LBB11_13

LBB11_17:
	DECQ AX
	MOVQ AX, 0(SI)
	MOVQ $-5, 0(DX)
	BYTE $0x5b      // popq         %rbx
	BYTE $0x5d      // popq         %rbp
	RET

LBB11_11:
	MOVQ DI, 0(SI)
	BYTE $0x5b     // popq         %rbx
	BYTE $0x5d     // popq         %rbp
	RET

LBB11_18:
	CMPQ AX, R11
	JAE  LBB11_22
	CMPB CX, $46
	JE   LBB11_25
	CMPB CX, $69
	JE   LBB11_25
	CMPB CX, $101
	JNE  LBB11_22

LBB11_25:
	MOVQ AX, 0(SI)
	MOVQ $-6, 0(DX)
	BYTE $0x5b      // popq         %rbx
	BYTE $0x5d      // popq         %rbp
	RET

LBB11_22:
	MOVQ AX, R10

LBB11_23:
	MOVQ R10, 0(SI)
	MOVQ DI, 16(DX)
	BYTE $0x5b      // popq         %rbx
	BYTE $0x5d      // popq         %rbp
	RET

_vunsigned:
	BYTE $0x55                   // pushq        %rbp
	WORD $0x8948; BYTE $0xe5     // movq         %rsp, %rbp
	BYTE $0x53                   // pushq        %rbx
	MOVQ DX, R8
	MOVQ 0(SI), CX
	MOVQ 0(DI), R9
	MOVQ 8(DI), R11
	MOVQ $9, 0(DX)
	LONG $0xc057f8c5             // vxorps       %xmm0, %xmm0, %xmm0
	LONG $0x4211f8c5; BYTE $0x08 // vmovups      %xmm0, $8(%rdx)
	MOVQ 0(SI), AX
	MOVQ AX, 24(DX)
	CMPQ CX, R11
	JAE  LBB12_1
	MOVB 0(R9)(CX*1), AX
	CMPB AX, $45
	JNE  LBB12_4

LBB12_3:
	MOVQ CX, 0(SI)
	MOVQ $-6, 0(R8)
	BYTE $0x5b      // popq         %rbx
	BYTE $0x5d      // popq         %rbp
	RET

LBB12_1:
	MOVQ R11, 0(SI)
	MOVQ $-1, 0(R8)
	BYTE $0x5b      // popq         %rbx
	BYTE $0x5d      // popq         %rbp
	RET

LBB12_4:
	LEAL -48(AX), DX
	CMPB DX, $10
	JB   LBB12_6
	MOVQ CX, 0(SI)
	MOVQ $-2, 0(R8)
	BYTE $0x5b       // popq         %rbx
	BYTE $0x5d       // popq         %rbp
	RET

LBB12_6:
	CMPB    AX, $48
	JNE     LBB12_7
	MOVB    1(R9)(CX*1), AX
	ADDB    $-46, AX
	CMPB    AX, $55
	JA      LBB12_16
	MOVBLZX AX, AX
	MOVQ    $36028797027352577, DX
	BTQ     AX, DX
	JAE     LBB12_16

LBB12_7:
	XORL AX, AX
	MOVL $10, R10

LBB12_8:
	CMPQ    R11, CX
	JE      LBB12_22
	MOVBLSX 0(R9)(CX*1), DI
	LEAL    -48(DI), DX
	CMPB    DX, $9
	JA      LBB12_17
	MULQ    R10
	JO      LBB12_13
	INCQ    CX
	ADDL    $-48, DI
	XORL    BX, BX
	ADDQ    DI, AX
	SETCS   BX
	MOVQ    BX, DX
	NEGQ    DX
	XORQ    DX, BX
	JNE     LBB12_13
	TESTQ   DX, DX
	JNS     LBB12_8

LBB12_13:
	DECQ CX
	MOVQ CX, 0(SI)
	MOVQ $-5, 0(R8)
	BYTE $0x5b      // popq         %rbx
	BYTE $0x5d      // popq         %rbp
	RET

LBB12_17:
	CMPQ CX, R11
	JAE  LBB12_21
	CMPB DI, $46
	JE   LBB12_3
	CMPB DI, $69
	JE   LBB12_3
	CMPB DI, $101
	JE   LBB12_3

LBB12_21:
	MOVQ CX, R11

LBB12_22:
	MOVQ R11, 0(SI)
	MOVQ AX, 16(R8)
	BYTE $0x5b      // popq         %rbx
	BYTE $0x5d      // popq         %rbp
	RET

LBB12_16:
	INCQ CX
	MOVQ CX, 0(SI)
	BYTE $0x5b     // popq         %rbx
	BYTE $0x5d     // popq         %rbp
	RET

_skip_one:
	BYTE $0x55               // pushq        %rbp
	WORD $0x8948; BYTE $0xe5 // movq         %rsp, %rbp
	MOVQ DX, AX
	MOVQ SI, DX
	MOVQ DI, SI
	MOVQ $1, 0(AX)
	MOVQ AX, DI
	BYTE $0x5d               // popq         %rbp
	JMP  _fsm_exec

LCPI14_0:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI14_1:
	QUAD $0x0909090909090909; QUAD $0x0909090909090909 // .space 16, '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'
	QUAD $0x0909090909090909; QUAD $0x0909090909090909 // .space 16, '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'

LCPI14_2:
	QUAD $0x0a0a0a0a0a0a0a0a; QUAD $0x0a0a0a0a0a0a0a0a // .space 16, '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'
	QUAD $0x0a0a0a0a0a0a0a0a; QUAD $0x0a0a0a0a0a0a0a0a // .space 16, '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'

LCPI14_3:
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'

LCPI14_4:
	QUAD $0x2020202020202020; QUAD $0x2020202020202020 // .space 16, '                '

LCPI14_5:
	QUAD $0x0909090909090909; QUAD $0x0909090909090909 // .space 16, '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'

LCPI14_6:
	QUAD $0x0a0a0a0a0a0a0a0a; QUAD $0x0a0a0a0a0a0a0a0a // .space 16, '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n'

LCPI14_7:
	QUAD $0x0d0d0d0d0d0d0d0d; QUAD $0x0d0d0d0d0d0d0d0d // .space 16, '\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r'

_fsm_exec:
	BYTE $0x55               // pushq        %rbp
	WORD $0x8948; BYTE $0xe5 // movq         %rsp, %rbp
	WORD $0x5741             // pushq        %r15
	WORD $0x5641             // pushq        %r14
	WORD $0x5541             // pushq        %r13
	WORD $0x5441             // pushq        %r12
	BYTE $0x53               // pushq        %rbx
	SUBQ $24, SP
	CMPL 0(DI), $0
	JE   LBB14_2
	MOVQ DX, R10
	MOVQ DI, R13
	MOVQ $-1, R15
	MOVQ $4294977024, R14
	QUAD $0xffffff0b1d6ffec5 // vmovdqu      $-245(%rip), %ymm3  /* LCPI14_0(%rip) */
	QUAD $0xffffff23256ffec5 // vmovdqu      $-221(%rip), %ymm4  /* LCPI14_1(%rip) */
	QUAD $0xffffff3b2d6ffec5 // vmovdqu      $-197(%rip), %ymm5  /* LCPI14_2(%rip) */
	QUAD $0xffffff53356ffec5 // vmovdqu      $-173(%rip), %ymm6  /* LCPI14_3(%rip) */
	MOVQ SI, -48(BP)
	JMP  LBB14_4

LBB14_2:
	MOVQ $-1, BX
	JMP  LBB14_112

LBB14_3:
	LEAQ  3(AX), CX
	MOVQ  CX, 0(R10)
	TESTQ AX, AX
	JLE   LBB14_109

LBB14_85:
	MOVL  0(R13), AX
	MOVQ  R15, BX
	TESTL AX, AX
	JE    LBB14_112

LBB14_4:
	MOVQ 0(R10), CX
	MOVQ 0(SI), R9
	MOVQ 8(SI), R8
	CMPQ CX, R8
	JAE  LBB14_24
	MOVB 0(R9)(CX*1), AX
	CMPB AX, $13
	JE   LBB14_8
	CMPB AX, $32
	JE   LBB14_8
	ADDB $-9, AX
	CMPB AX, $1
	JA   LBB14_49

LBB14_8:
	LEAQ 1(CX), DX
	CMPQ DX, R8
	JAE  LBB14_23
	MOVB 0(R9)(DX*1), AX
	CMPB AX, $13
	JE   LBB14_13
	CMPB AX, $32
	JE   LBB14_13
	ADDB $-9, AX
	CMPB AX, $1
	JA   LBB14_12

LBB14_13:
	LEAQ 2(CX), DX
	CMPQ DX, R8
	JAE  LBB14_23
	MOVB 0(R9)(DX*1), AX
	CMPB AX, $13
	JE   LBB14_18
	CMPB AX, $32
	JE   LBB14_18
	ADDB $-9, AX
	CMPB AX, $1
	JA   LBB14_12

LBB14_18:
	LEAQ 3(CX), DX
	CMPQ DX, R8
	JAE  LBB14_23
	MOVB 0(R9)(DX*1), AX
	CMPB AX, $13
	JE   LBB14_86
	CMPB AX, $32
	JE   LBB14_86
	ADDB $-9, AX
	CMPB AX, $1
	JBE  LBB14_86

LBB14_12:
	MOVQ DX, CX
	JMP  LBB14_49

LBB14_23:
	MOVQ DX, CX

LBB14_24:
	LEAQ 0(R9)(CX*1), DX
	MOVQ R8, DI
	SUBQ CX, DI
	JE   LBB14_32

LBB14_25:
	MOVL  DX, AX
	ANDL  $31, AX
	TESTQ AX, AX
	JE    LBB14_32
	LEAQ  -1(DI), R11
	XORL  BX, BX

LBB14_27:
	MOVBLSX 0(DX)(BX*1), AX
	CMPL    AX, $32
	JA      LBB14_45
	BTQ     AX, R14
	JAE     LBB14_45
	LEAQ    1(BX), AX
	CMPQ    R11, BX
	JE      LBB14_31
	LEAQ    1(DX)(BX*1), CX
	ANDL    $31, CX
	MOVQ    AX, BX
	TESTQ   CX, CX
	JNE     LBB14_27

LBB14_31:
	ADDQ AX, DX
	SUBQ AX, DI

LBB14_32:
	CMPQ DI, $32
	JB   LBB14_35

LBB14_33:
	LONG $0x026ffdc5 // vmovdqa      (%rdx), %ymm0
	LONG $0xcb74fdc5 // vpcmpeqb     %ymm3, %ymm0, %ymm1
	LONG $0xd474fdc5 // vpcmpeqb     %ymm4, %ymm0, %ymm2
	LONG $0xcaebf5c5 // vpor         %ymm2, %ymm1, %ymm1
	LONG $0xd574fdc5 // vpcmpeqb     %ymm5, %ymm0, %ymm2
	LONG $0xc674fdc5 // vpcmpeqb     %ymm6, %ymm0, %ymm0
	LONG $0xc2ebfdc5 // vpor         %ymm2, %ymm0, %ymm0
	LONG $0xc1ebfdc5 // vpor         %ymm1, %ymm0, %ymm0
	LONG $0xc0d7fdc5 // vpmovmskb    %ymm0, %eax
	CMPL AX, $-1
	JNE  LBB14_44
	ADDQ $32, DX
	ADDQ $-32, DI
	CMPQ DI, $31
	JA   LBB14_33

LBB14_35:
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	CMPQ DI, $16
	QUAD $0xfffffe131d6ffac5 // vmovdqu      $-493(%rip), %xmm3  /* LCPI14_4(%rip) */
	QUAD $0xfffffe1b256ffac5 // vmovdqu      $-485(%rip), %xmm4  /* LCPI14_5(%rip) */
	QUAD $0xfffffe232d6ffac5 // vmovdqu      $-477(%rip), %xmm5  /* LCPI14_6(%rip) */
	QUAD $0xfffffe2b356ffac5 // vmovdqu      $-469(%rip), %xmm6  /* LCPI14_7(%rip) */
	JB   LBB14_38

LBB14_36:
	LONG $0x026ff9c5 // vmovdqa      (%rdx), %xmm0
	LONG $0xcb74f9c5 // vpcmpeqb     %xmm3, %xmm0, %xmm1
	LONG $0xd474f9c5 // vpcmpeqb     %xmm4, %xmm0, %xmm2
	LONG $0xcaebf1c5 // vpor         %xmm2, %xmm1, %xmm1
	LONG $0xd574f9c5 // vpcmpeqb     %xmm5, %xmm0, %xmm2
	LONG $0xc674f9c5 // vpcmpeqb     %xmm6, %xmm0, %xmm0
	LONG $0xc2ebf9c5 // vpor         %xmm2, %xmm0, %xmm0
	LONG $0xc1ebf9c5 // vpor         %xmm1, %xmm0, %xmm0
	LONG $0xc0d7f9c5 // vpmovmskb    %xmm0, %eax
	CMPW AX, $-1
	JNE  LBB14_101
	ADDQ $16, DX
	ADDQ $-16, DI
	CMPQ DI, $15
	JA   LBB14_36

LBB14_38:
	TESTQ DI, DI
	JE    LBB14_46
	LEAQ  0(DX)(DI*1), BX
	INCQ  DX
	MOVQ  DX, CX

LBB14_40:
	MOVBLSX -1(CX), AX
	CMPL    AX, $32
	JA      LBB14_102
	BTQ     AX, R14
	JAE     LBB14_102
	DECQ    DI
	INCQ    CX
	TESTQ   DI, DI
	JNE     LBB14_40
	MOVQ    BX, DX
	JMP     LBB14_46

LBB14_44:
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	SUBQ R9, DX
	NOTL AX
	WORD $0x9848             // cltq
	BSFQ AX, CX
	ADDQ DX, CX
	JMP  LBB14_47

LBB14_45:
	ADDQ BX, DX

LBB14_46:
	SUBQ R9, DX
	MOVQ DX, CX

LBB14_47:
	CMPQ CX, R8
	JAE  LBB14_50
	MOVQ 0(SI), R9
	QUAD $0xfffffcdb1d6ffec5 // vmovdqu      $-805(%rip), %ymm3  /* LCPI14_0(%rip) */
	QUAD $0xfffffcf3256ffec5 // vmovdqu      $-781(%rip), %ymm4  /* LCPI14_1(%rip) */
	QUAD $0xfffffd0b2d6ffec5 // vmovdqu      $-757(%rip), %ymm5  /* LCPI14_2(%rip) */
	QUAD $0xfffffd23356ffec5 // vmovdqu      $-733(%rip), %ymm6  /* LCPI14_3(%rip) */

LBB14_49:
	LEAQ 1(CX), AX
	MOVQ AX, 0(R10)
	MOVB 0(R9)(CX*1), DX
	JMP  LBB14_51

LBB14_50:
	XORL DX, DX
	QUAD $0xfffffcac1d6ffec5 // vmovdqu      $-852(%rip), %ymm3  /* LCPI14_0(%rip) */
	QUAD $0xfffffcc4256ffec5 // vmovdqu      $-828(%rip), %ymm4  /* LCPI14_1(%rip) */
	QUAD $0xfffffcdc2d6ffec5 // vmovdqu      $-804(%rip), %ymm5  /* LCPI14_2(%rip) */
	QUAD $0xfffffcf4356ffec5 // vmovdqu      $-780(%rip), %ymm6  /* LCPI14_3(%rip) */

LBB14_51:
	MOVLQSX 0(R13), CX
	LEAQ    -1(CX), AX
	MOVL    0(R13)(CX*4), DI
	CMPQ    R15, $-1
	JNE     LBB14_53
	MOVQ    0(R10), R15
	DECQ    R15

LBB14_53:
	DECL    DI
	CMPL    DI, $5
	JA      LBB14_58
	LONG    $0x381d8d48; WORD $0x0005; BYTE $0x00 // leaq         $1336(%rip), %rbx  /* LJTI14_0(%rip) */
	MOVLQSX 0(BX)(DI*4), DI
	ADDQ    BX, DI
	JMP     DI

LBB14_55:
	MOVBLSX DX, DX
	CMPL    DX, $44
	JE      LBB14_77
	CMPL    DX, $93
	JNE     LBB14_111
	MOVL    AX, 0(R13)
	MOVQ    R15, BX
	TESTL   AX, AX
	JNE     LBB14_4
	JMP     LBB14_112

LBB14_58:
	MOVL    AX, 0(R13)
	MOVBLSX DX, AX
	CMPL    AX, $123
	JBE     LBB14_74
	JMP     LBB14_111

LBB14_59:
	MOVBLSX DX, DX
	CMPL    DX, $44
	JE      LBB14_79
	CMPL    DX, $125
	JNE     LBB14_111
	MOVL    AX, 0(R13)
	MOVQ    R15, BX
	TESTL   AX, AX
	JNE     LBB14_4
	JMP     LBB14_112

LBB14_62:
	CMPB DX, $34
	JNE  LBB14_111
	MOVQ R15, R14
	MOVL $4, 0(R13)(CX*4)

LBB14_64:
	MOVQ  0(R10), R12
	MOVQ  0(SI), DI
	MOVQ  8(SI), SI
	MOVQ  R12, DX
	LEAQ  -56(BP), CX
	MOVQ  R10, R15
	WORD  $0xf8c5; BYTE $0x77     // vzeroupper
	LONG  $0xfff34ee8; BYTE $0xff // callq        _advance_string
	MOVQ  AX, BX
	TESTQ AX, AX
	JS    LBB14_103
	MOVQ  BX, 0(R15)
	TESTQ R12, R12
	MOVQ  R15, R10
	MOVQ  -48(BP), SI
	MOVQ  R14, R15
	MOVQ  $4294977024, R14
	QUAD  $0xfffffb9e1d6ffec5     // vmovdqu      $-1122(%rip), %ymm3  /* LCPI14_0(%rip) */
	QUAD  $0xfffffbb6256ffec5     // vmovdqu      $-1098(%rip), %ymm4  /* LCPI14_1(%rip) */
	QUAD  $0xfffffbce2d6ffec5     // vmovdqu      $-1074(%rip), %ymm5  /* LCPI14_2(%rip) */
	QUAD  $0xfffffbe6356ffec5     // vmovdqu      $-1050(%rip), %ymm6  /* LCPI14_3(%rip) */
	JG    LBB14_85
	JMP   LBB14_104

LBB14_66:
	CMPB DX, $58
	JNE  LBB14_111
	MOVL $0, 0(R13)(CX*4)
	JMP  LBB14_85

LBB14_68:
	CMPB  DX, $93
	JNE   LBB14_73
	MOVL  AX, 0(R13)
	MOVQ  R15, BX
	TESTL AX, AX
	JNE   LBB14_4
	JMP   LBB14_112

LBB14_70:
	MOVBLSX DX, DX
	CMPL    DX, $34
	JE      LBB14_81
	CMPL    DX, $125
	JNE     LBB14_111
	MOVL    AX, 0(R13)
	MOVQ    R15, BX
	TESTL   AX, AX
	JNE     LBB14_4
	JMP     LBB14_112

LBB14_73:
	MOVL    $1, 0(R13)(CX*4)
	MOVBLSX DX, AX
	CMPL    AX, $123
	JA      LBB14_111

LBB14_74:
	MOVQ    $-1, BX
	LONG    $0xe20d8d48; WORD $0x0003; BYTE $0x00 // leaq         $994(%rip), %rcx  /* LJTI14_1(%rip) */
	MOVLQSX 0(CX)(AX*4), AX
	ADDQ    CX, AX
	JMP     AX

LBB14_75:
	MOVQ  R15, R14
	MOVQ  0(R10), R12
	LEAQ  -1(R12), BX
	MOVQ  0(SI), DI
	ADDQ  BX, DI
	MOVQ  8(SI), SI
	SUBQ  BX, SI
	MOVQ  R10, R15
	WORD  $0xf8c5; BYTE $0x77     // vzeroupper
	LONG  $0x0007c8e8; BYTE $0x00 // callq        _skip_number
	TESTQ AX, AX
	JS    LBB14_105
	MOVQ  0(R15), CX
	LEAQ  -1(AX)(CX*1), AX
	MOVQ  AX, 0(R15)
	TESTQ R12, R12
	MOVQ  R15, R10
	MOVQ  -48(BP), SI
	MOVQ  R14, R15
	MOVQ  $4294977024, R14
	QUAD  $0xfffffaa01d6ffec5     // vmovdqu      $-1376(%rip), %ymm3  /* LCPI14_0(%rip) */
	QUAD  $0xfffffab8256ffec5     // vmovdqu      $-1352(%rip), %ymm4  /* LCPI14_1(%rip) */
	QUAD  $0xfffffad02d6ffec5     // vmovdqu      $-1328(%rip), %ymm5  /* LCPI14_2(%rip) */
	QUAD  $0xfffffae8356ffec5     // vmovdqu      $-1304(%rip), %ymm6  /* LCPI14_3(%rip) */
	JG    LBB14_85
	JMP   LBB14_112

LBB14_77:
	CMPL CX, $65535
	JG   LBB14_106
	LEAL 1(CX), AX
	MOVL AX, 0(R13)
	MOVL $0, 4(R13)(CX*4)
	JMP  LBB14_85

LBB14_79:
	CMPL CX, $65535
	JG   LBB14_106
	LEAL 1(CX), AX
	MOVL AX, 0(R13)
	MOVL $3, 4(R13)(CX*4)
	JMP  LBB14_85

LBB14_81:
	MOVQ    R15, -64(BP)
	MOVL    $2, 0(R13)(CX*4)
	MOVQ    0(R10), R12
	MOVQ    0(SI), DI
	MOVQ    8(SI), SI
	MOVQ    R12, DX
	LEAQ    -56(BP), CX
	MOVQ    R10, R15
	WORD    $0xf8c5; BYTE $0x77     // vzeroupper
	LONG    $0xfff194e8; BYTE $0xff // callq        _advance_string
	MOVQ    AX, BX
	TESTQ   AX, AX
	JS      LBB14_103
	MOVQ    BX, 0(R15)
	TESTQ   R12, R12
	JLE     LBB14_104
	MOVLQSX 0(R13), AX
	CMPQ    AX, $65535
	JG      LBB14_106
	MOVQ    R15, R10
	LEAL    1(AX), CX
	MOVL    CX, 0(R13)
	MOVL    $4, 4(R13)(AX*4)
	MOVQ    -48(BP), SI
	MOVQ    -64(BP), R15
	QUAD    $0xfffff9c71d6ffec5     // vmovdqu      $-1593(%rip), %ymm3  /* LCPI14_0(%rip) */
	QUAD    $0xfffff9df256ffec5     // vmovdqu      $-1569(%rip), %ymm4  /* LCPI14_1(%rip) */
	QUAD    $0xfffff9f72d6ffec5     // vmovdqu      $-1545(%rip), %ymm5  /* LCPI14_2(%rip) */
	QUAD    $0xfffffa0f356ffec5     // vmovdqu      $-1521(%rip), %ymm6  /* LCPI14_3(%rip) */
	JMP     LBB14_85

LBB14_86:
	ADDQ $4, CX
	LEAQ 0(R9)(CX*1), DX
	MOVQ R8, DI
	SUBQ CX, DI
	JNE  LBB14_25
	JMP  LBB14_32

LBB14_87:
	MOVQ R15, R14
	JMP  LBB14_64

LBB14_88:
	MOVQ  R15, R14
	MOVQ  0(R10), BX
	MOVQ  0(SI), DI
	ADDQ  BX, DI
	MOVQ  8(SI), SI
	SUBQ  BX, SI
	MOVQ  R10, R15
	WORD  $0xf8c5; BYTE $0x77     // vzeroupper
	LONG  $0x000660e8; BYTE $0x00 // callq        _skip_number
	TESTQ AX, AX
	JS    LBB14_110
	ADDQ  AX, 0(R15)
	TESTQ BX, BX
	MOVQ  R15, R10
	MOVQ  -48(BP), SI
	MOVQ  R14, R15
	MOVQ  $4294977024, R14
	QUAD  $0xfffff9401d6ffec5     // vmovdqu      $-1728(%rip), %ymm3  /* LCPI14_0(%rip) */
	QUAD  $0xfffff958256ffec5     // vmovdqu      $-1704(%rip), %ymm4  /* LCPI14_1(%rip) */
	QUAD  $0xfffff9702d6ffec5     // vmovdqu      $-1680(%rip), %ymm5  /* LCPI14_2(%rip) */
	QUAD  $0xfffff988356ffec5     // vmovdqu      $-1656(%rip), %ymm6  /* LCPI14_3(%rip) */
	JG    LBB14_85
	JMP   LBB14_118

LBB14_90:
	MOVLQSX 0(R13), AX
	CMPQ    AX, $65535
	JG      LBB14_106
	LEAL    1(AX), CX
	MOVL    CX, 0(R13)
	MOVL    $5, 4(R13)(AX*4)
	JMP     LBB14_85

LBB14_92:
	MOVQ  0(R10), AX
	MOVQ  8(SI), CX
	LEAQ  -4(CX), DX
	CMPQ  AX, DX
	JA    LBB14_115
	MOVQ  0(SI), CX
	MOVL  0(CX)(AX*1), DX
	CMPL  DX, $1702063201
	JNE   LBB14_119
	LEAQ  4(AX), CX
	MOVQ  CX, 0(R10)
	TESTQ AX, AX
	JG    LBB14_85
	JMP   LBB14_109

LBB14_95:
	MOVQ 0(R10), AX
	MOVQ 8(SI), CX
	LEAQ -3(CX), DX
	CMPQ AX, DX
	JA   LBB14_115
	MOVQ 0(SI), CX
	CMPL -1(CX)(AX*1), $1819047278
	JE   LBB14_3
	JMP  LBB14_122

LBB14_97:
	MOVQ 0(R10), AX
	MOVQ 8(SI), CX
	LEAQ -3(CX), DX
	CMPQ AX, DX
	JA   LBB14_115
	MOVQ 0(SI), CX
	CMPL -1(CX)(AX*1), $1702195828
	JE   LBB14_3
	JMP  LBB14_125

LBB14_99:
	MOVLQSX 0(R13), AX
	CMPQ    AX, $65535
	JG      LBB14_106
	LEAL    1(AX), CX
	MOVL    CX, 0(R13)
	MOVL    $6, 4(R13)(AX*4)
	JMP     LBB14_85

LBB14_101:
	MOVWLZX AX, AX
	SUBQ    R9, DX
	NOTL    AX
	BSFL    AX, CX
	ADDQ    DX, CX
	JMP     LBB14_47

LBB14_102:
	NOTQ R9
	ADDQ R9, CX
	JMP  LBB14_47

LBB14_106:
	MOVQ $-7, BX
	JMP  LBB14_112

LBB14_103:
	MOVQ -48(BP), AX
	MOVQ 8(AX), AX
	MOVQ AX, 0(R15)
	JMP  LBB14_112

LBB14_104:
	DECQ R12
	MOVQ R12, BX
	JMP  LBB14_112

LBB14_105:
	MOVQ 0(R15), CX
	SUBQ AX, CX
	ADDQ $-2, CX
	MOVQ CX, 0(R15)

LBB14_111:
	MOVQ $-2, BX

LBB14_112:
	MOVQ BX, AX
	ADDQ $24, SP
	BYTE $0x5b               // popq         %rbx
	WORD $0x5c41             // popq         %r12
	WORD $0x5d41             // popq         %r13
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	RET

LBB14_115:
	MOVQ CX, 0(R10)
	JMP  LBB14_112

LBB14_109:
	DECQ AX
	MOVQ AX, BX
	JMP  LBB14_112

LBB14_110:
	NOTQ AX
	ADDQ AX, 0(R15)
	JMP  LBB14_111

LBB14_118:
	DECQ BX
	JMP  LBB14_112

LBB14_119:
	MOVQ $-2, BX
	CMPB DX, $97
	JNE  LBB14_112
	INCQ AX
	MOVL $1702063201, DX

LBB14_121:
	SHRL    $8, DX
	MOVQ    AX, 0(R10)
	MOVBLSX 0(CX)(AX*1), SI
	MOVBLZX DX, DI
	INCQ    AX
	CMPL    DI, SI
	JE      LBB14_121
	JMP     LBB14_112

LBB14_122:
	LEAQ -1(AX), DX
	MOVQ DX, 0(R10)
	MOVQ $-2, BX
	CMPB -1(CX)(AX*1), $110
	JNE  LBB14_112
	MOVL $1819047278, DX

LBB14_124:
	SHRL    $8, DX
	MOVQ    AX, 0(R10)
	MOVBLSX 0(CX)(AX*1), SI
	MOVBLZX DX, DI
	INCQ    AX
	CMPL    DI, SI
	JE      LBB14_124
	JMP     LBB14_112

LBB14_125:
	LEAQ -1(AX), DX
	MOVQ DX, 0(R10)
	MOVQ $-2, BX
	CMPB -1(CX)(AX*1), $116
	JNE  LBB14_112
	MOVL $1702195828, DX

LBB14_127:
	SHRL    $8, DX
	MOVQ    AX, 0(R10)
	MOVBLSX 0(CX)(AX*1), SI
	MOVBLZX DX, DI
	INCQ    AX
	CMPL    DI, SI
	JE      LBB14_127
	JMP     LBB14_112

// .set L14_0_set_55, LBB14_55-LJTI14_0
// .set L14_0_set_59, LBB14_59-LJTI14_0
// .set L14_0_set_62, LBB14_62-LJTI14_0
// .set L14_0_set_66, LBB14_66-LJTI14_0
// .set L14_0_set_68, LBB14_68-LJTI14_0
// .set L14_0_set_70, LBB14_70-LJTI14_0
LJTI14_0:
	LONG $0xfffffad1 // .long L14_0_set_55
	LONG $0xfffffb0f // .long L14_0_set_59
	LONG $0xfffffb38 // .long L14_0_set_62
	LONG $0xfffffbba // .long L14_0_set_66
	LONG $0xfffffbd1 // .long L14_0_set_68
	LONG $0xfffffbea // .long L14_0_set_70

	// .set L14_1_set_112, LBB14_112-LJTI14_1
	// .set L14_1_set_111, LBB14_111-LJTI14_1
	// .set L14_1_set_87, LBB14_87-LJTI14_1
	// .set L14_1_set_88, LBB14_88-LJTI14_1
	// .set L14_1_set_75, LBB14_75-LJTI14_1
	// .set L14_1_set_90, LBB14_90-LJTI14_1
	// .set L14_1_set_92, LBB14_92-LJTI14_1
	// .set L14_1_set_95, LBB14_95-LJTI14_1
	// .set L14_1_set_97, LBB14_97-LJTI14_1
	// .set L14_1_set_99, LBB14_99-LJTI14_1
LJTI14_1:
	LONG $0xffffff25 // .long L14_1_set_112
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xfffffd8c // .long L14_1_set_87
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xfffffd94 // .long L14_1_set_88
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xfffffc27 // .long L14_1_set_75
	LONG $0xfffffc27 // .long L14_1_set_75
	LONG $0xfffffc27 // .long L14_1_set_75
	LONG $0xfffffc27 // .long L14_1_set_75
	LONG $0xfffffc27 // .long L14_1_set_75
	LONG $0xfffffc27 // .long L14_1_set_75
	LONG $0xfffffc27 // .long L14_1_set_75
	LONG $0xfffffc27 // .long L14_1_set_75
	LONG $0xfffffc27 // .long L14_1_set_75
	LONG $0xfffffc27 // .long L14_1_set_75
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xfffffe00 // .long L14_1_set_90
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xfffffe25 // .long L14_1_set_92
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xfffffe60 // .long L14_1_set_95
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xfffffe8a // .long L14_1_set_97
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xffffff1e // .long L14_1_set_111
	LONG $0xfffffeb4 // .long L14_1_set_99

_skip_array:
	BYTE $0x55               // pushq        %rbp
	WORD $0x8948; BYTE $0xe5 // movq         %rsp, %rbp
	MOVQ DX, AX
	MOVQ SI, DX
	MOVQ DI, SI
	MOVQ $21474836481, CX
	MOVQ CX, 0(AX)
	MOVQ AX, DI
	BYTE $0x5d               // popq         %rbp
	JMP  _fsm_exec

_skip_object:
	BYTE $0x55               // pushq        %rbp
	WORD $0x8948; BYTE $0xe5 // movq         %rsp, %rbp
	MOVQ DX, AX
	MOVQ SI, DX
	MOVQ DI, SI
	MOVQ $25769803777, CX
	MOVQ CX, 0(AX)
	MOVQ AX, DI
	BYTE $0x5d               // popq         %rbp
	JMP  _fsm_exec

_skip_string:
	BYTE  $0x55                   // pushq        %rbp
	WORD  $0x8948; BYTE $0xe5     // movq         %rsp, %rbp
	WORD  $0x5741                 // pushq        %r15
	WORD  $0x5641                 // pushq        %r14
	BYTE  $0x53                   // pushq        %rbx
	BYTE  $0x50                   // pushq        %rax
	MOVQ  SI, R14
	MOVQ  DI, R15
	MOVQ  0(SI), BX
	MOVQ  0(DI), DI
	MOVQ  8(R15), SI
	LEAQ  -32(BP), CX
	MOVQ  BX, DX
	LONG  $0xffec43e8; BYTE $0xff // callq        _advance_string
	TESTQ AX, AX
	JS    LBB17_2
	DECQ  BX
	MOVQ  AX, CX
	MOVQ  BX, AX
	JMP   LBB17_3

LBB17_2:
	MOVQ 8(R15), CX

LBB17_3:
	MOVQ CX, 0(R14)
	ADDQ $8, SP
	BYTE $0x5b      // popq         %rbx
	WORD $0x5e41    // popq         %r14
	WORD $0x5f41    // popq         %r15
	BYTE $0x5d      // popq         %rbp
	RET

_skip_negative:
	BYTE  $0x55                   // pushq        %rbp
	WORD  $0x8948; BYTE $0xe5     // movq         %rsp, %rbp
	WORD  $0x5641                 // pushq        %r14
	BYTE  $0x53                   // pushq        %rbx
	MOVQ  SI, R14
	MOVQ  0(SI), BX
	MOVQ  0(DI), AX
	ADDQ  BX, AX
	MOVQ  8(DI), SI
	SUBQ  BX, SI
	MOVQ  AX, DI
	LONG  $0x000172e8; BYTE $0x00 // callq        _skip_number
	TESTQ AX, AX
	JS    LBB18_1
	ADDQ  AX, 0(R14)
	DECQ  BX
	JMP   LBB18_3

LBB18_1:
	NOTQ AX
	ADDQ AX, 0(R14)
	MOVQ $-2, BX

LBB18_3:
	MOVQ BX, AX
	BYTE $0x5b   // popq         %rbx
	WORD $0x5e41 // popq         %r14
	BYTE $0x5d   // popq         %rbp
	RET

LCPI19_0:
	QUAD $0x2f2f2f2f2f2f2f2f; QUAD $0x2f2f2f2f2f2f2f2f // .space 16, '////////////////'
	QUAD $0x2f2f2f2f2f2f2f2f; QUAD $0x2f2f2f2f2f2f2f2f // .space 16, '////////////////'

LCPI19_1:
	QUAD $0x3a3a3a3a3a3a3a3a; QUAD $0x3a3a3a3a3a3a3a3a // .space 16, '::::::::::::::::'
	QUAD $0x3a3a3a3a3a3a3a3a; QUAD $0x3a3a3a3a3a3a3a3a // .space 16, '::::::::::::::::'

LCPI19_2:
	QUAD $0x2b2b2b2b2b2b2b2b; QUAD $0x2b2b2b2b2b2b2b2b // .space 16, '++++++++++++++++'
	QUAD $0x2b2b2b2b2b2b2b2b; QUAD $0x2b2b2b2b2b2b2b2b // .space 16, '++++++++++++++++'

LCPI19_3:
	QUAD $0x2d2d2d2d2d2d2d2d; QUAD $0x2d2d2d2d2d2d2d2d // .space 16, '----------------'
	QUAD $0x2d2d2d2d2d2d2d2d; QUAD $0x2d2d2d2d2d2d2d2d // .space 16, '----------------'

LCPI19_4:
	QUAD $0xdfdfdfdfdfdfdfdf; QUAD $0xdfdfdfdfdfdfdfdf // .space 16, '\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf'
	QUAD $0xdfdfdfdfdfdfdfdf; QUAD $0xdfdfdfdfdfdfdfdf // .space 16, '\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf'

LCPI19_5:
	QUAD $0x2e2e2e2e2e2e2e2e; QUAD $0x2e2e2e2e2e2e2e2e // .space 16, '................'
	QUAD $0x2e2e2e2e2e2e2e2e; QUAD $0x2e2e2e2e2e2e2e2e // .space 16, '................'

LCPI19_6:
	QUAD $0x4545454545454545; QUAD $0x4545454545454545 // .space 16, 'EEEEEEEEEEEEEEEE'
	QUAD $0x4545454545454545; QUAD $0x4545454545454545 // .space 16, 'EEEEEEEEEEEEEEEE'

LCPI19_7:
	QUAD $0x2f2f2f2f2f2f2f2f; QUAD $0x2f2f2f2f2f2f2f2f // .space 16, '////////////////'

LCPI19_8:
	QUAD $0x3a3a3a3a3a3a3a3a; QUAD $0x3a3a3a3a3a3a3a3a // .space 16, '::::::::::::::::'

LCPI19_9:
	QUAD $0x2b2b2b2b2b2b2b2b; QUAD $0x2b2b2b2b2b2b2b2b // .space 16, '++++++++++++++++'

LCPI19_10:
	QUAD $0x2d2d2d2d2d2d2d2d; QUAD $0x2d2d2d2d2d2d2d2d // .space 16, '----------------'

LCPI19_11:
	QUAD $0xdfdfdfdfdfdfdfdf; QUAD $0xdfdfdfdfdfdfdfdf // .space 16, '\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf\xdf'

LCPI19_12:
	QUAD $0x2e2e2e2e2e2e2e2e; QUAD $0x2e2e2e2e2e2e2e2e // .space 16, '................'

LCPI19_13:
	QUAD $0x4545454545454545; QUAD $0x4545454545454545 // .space 16, 'EEEEEEEEEEEEEEEE'

_skip_number:
	BYTE  $0x55               // pushq        %rbp
	WORD  $0x8948; BYTE $0xe5 // movq         %rsp, %rbp
	WORD  $0x5741             // pushq        %r15
	WORD  $0x5641             // pushq        %r14
	BYTE  $0x53               // pushq        %rbx
	TESTQ SI, SI
	JE    LBB19_49
	CMPB  0(DI), $48
	JNE   LBB19_4
	MOVL  $1, AX
	CMPQ  SI, $1
	JE    LBB19_50
	CMPB  1(DI), $46
	JNE   LBB19_50

LBB19_4:
	MOVQ $-1, R10
	CMPQ SI, $32
	JB   LBB19_69
	QUAD $0xfffffe67056ffec5 // vmovdqu      $-409(%rip), %ymm0  /* LCPI19_0(%rip) */
	QUAD $0xfffffe7f0d6ffec5 // vmovdqu      $-385(%rip), %ymm1  /* LCPI19_1(%rip) */
	QUAD $0xfffffe97156ffec5 // vmovdqu      $-361(%rip), %ymm2  /* LCPI19_2(%rip) */
	QUAD $0xfffffeaf1d6ffec5 // vmovdqu      $-337(%rip), %ymm3  /* LCPI19_3(%rip) */
	QUAD $0xfffffec7256ffec5 // vmovdqu      $-313(%rip), %ymm4  /* LCPI19_4(%rip) */
	QUAD $0xfffffedf2d6ffec5 // vmovdqu      $-289(%rip), %ymm5  /* LCPI19_5(%rip) */
	QUAD $0xfffffef7356ffec5 // vmovdqu      $-265(%rip), %ymm6  /* LCPI19_6(%rip) */
	MOVQ $-1, R8
	MOVQ $-1, R9
	MOVQ DI, R14

LBB19_6:
	LONG $0x6f7ec1c4; BYTE $0x3e // vmovdqu      (%r14), %ymm7
	LONG $0xc06445c5             // vpcmpgtb     %ymm0, %ymm7, %ymm8
	LONG $0xcf6475c5             // vpcmpgtb     %ymm7, %ymm1, %ymm9
	LONG $0xdb3541c4; BYTE $0xc0 // vpand        %ymm8, %ymm9, %ymm8
	LONG $0xca7445c5             // vpcmpeqb     %ymm2, %ymm7, %ymm9
	LONG $0xd37445c5             // vpcmpeqb     %ymm3, %ymm7, %ymm10
	LONG $0xeb2d41c4; BYTE $0xc9 // vpor         %ymm9, %ymm10, %ymm9
	LONG $0xd4db45c5             // vpand        %ymm4, %ymm7, %ymm10
	LONG $0xd6742dc5             // vpcmpeqb     %ymm6, %ymm10, %ymm10
	LONG $0xfd74c5c5             // vpcmpeqb     %ymm5, %ymm7, %ymm7
	LONG $0xc7d7fdc5             // vpmovmskb    %ymm7, %eax
	LONG $0xd77dc1c4; BYTE $0xda // vpmovmskb    %ymm10, %ebx
	LONG $0xd77d41c4; BYTE $0xd9 // vpmovmskb    %ymm9, %r11d
	LONG $0xffebbdc5             // vpor         %ymm7, %ymm8, %ymm7
	LONG $0xeb2d41c4; BYTE $0xc1 // vpor         %ymm9, %ymm10, %ymm8
	LONG $0xffebbdc5             // vpor         %ymm7, %ymm8, %ymm7
	LONG $0xcfd7fdc5             // vpmovmskb    %ymm7, %ecx
	NOTQ CX
	BSFQ CX, CX
	CMPL CX, $32
	JE   LBB19_8
	MOVL $-1, DX
	SHLL CX, DX
	NOTL DX
	ANDL DX, AX
	ANDL DX, BX
	ANDL R11, DX
	MOVL DX, R11

LBB19_8:
	LEAL  -1(AX), DX
	ANDL  AX, DX
	JNE   LBB19_66
	LEAL  -1(BX), DX
	ANDL  BX, DX
	JNE   LBB19_66
	LEAL  -1(R11), DX
	ANDL  R11, DX
	JNE   LBB19_66
	TESTL AX, AX
	JE    LBB19_14
	MOVQ  R14, DX
	SUBQ  DI, DX
	BSFL  AX, AX
	ADDQ  DX, AX
	CMPQ  R9, $-1
	JNE   LBB19_67
	MOVQ  AX, R9

LBB19_14:
	TESTL BX, BX
	JE    LBB19_17
	MOVQ  R14, DX
	SUBQ  DI, DX
	BSFL  BX, AX
	ADDQ  DX, AX
	CMPQ  R8, $-1
	JNE   LBB19_67
	MOVQ  AX, R8

LBB19_17:
	TESTL R11, R11
	JE    LBB19_20
	MOVQ  R14, DX
	SUBQ  DI, DX
	BSFL  R11, AX
	ADDQ  DX, AX
	CMPQ  R10, $-1
	JNE   LBB19_67
	MOVQ  AX, R10

LBB19_20:
	CMPL CX, $32
	JNE  LBB19_51
	ADDQ $32, R14
	ADDQ $-32, SI
	CMPQ SI, $31
	JA   LBB19_6
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	CMPQ SI, $16
	JB   LBB19_40

LBB19_23:
	QUAD $0xfffffdf1056f7ac5 // vmovdqu      $-527(%rip), %xmm8  /* LCPI19_7(%rip) */
	QUAD $0xfffffdf90d6f7ac5 // vmovdqu      $-519(%rip), %xmm9  /* LCPI19_8(%rip) */
	QUAD $0xfffffe01156f7ac5 // vmovdqu      $-511(%rip), %xmm10  /* LCPI19_9(%rip) */
	QUAD $0xfffffe091d6f7ac5 // vmovdqu      $-503(%rip), %xmm11  /* LCPI19_10(%rip) */
	QUAD $0xfffffe11256ffac5 // vmovdqu      $-495(%rip), %xmm4  /* LCPI19_11(%rip) */
	QUAD $0xfffffe192d6ffac5 // vmovdqu      $-487(%rip), %xmm5  /* LCPI19_12(%rip) */
	QUAD $0xfffffe21356ffac5 // vmovdqu      $-479(%rip), %xmm6  /* LCPI19_13(%rip) */
	MOVL $4294967295, R11

LBB19_24:
	LONG $0x6f7ac1c4; BYTE $0x3e // vmovdqu      (%r14), %xmm7
	LONG $0x6441c1c4; BYTE $0xc0 // vpcmpgtb     %xmm8, %xmm7, %xmm0
	LONG $0xcf64b1c5             // vpcmpgtb     %xmm7, %xmm9, %xmm1
	LONG $0xc1dbf9c5             // vpand        %xmm1, %xmm0, %xmm0
	LONG $0xcf74a9c5             // vpcmpeqb     %xmm7, %xmm10, %xmm1
	LONG $0xd774a1c5             // vpcmpeqb     %xmm7, %xmm11, %xmm2
	LONG $0xc9ebe9c5             // vpor         %xmm1, %xmm2, %xmm1
	LONG $0xd4dbc1c5             // vpand        %xmm4, %xmm7, %xmm2
	LONG $0xd674e9c5             // vpcmpeqb     %xmm6, %xmm2, %xmm2
	LONG $0xfd74c1c5             // vpcmpeqb     %xmm5, %xmm7, %xmm7
	LONG $0xdfebe9c5             // vpor         %xmm7, %xmm2, %xmm3
	LONG $0xc0ebf1c5             // vpor         %xmm0, %xmm1, %xmm0
	LONG $0xc0ebe1c5             // vpor         %xmm0, %xmm3, %xmm0
	LONG $0xc7d7f9c5             // vpmovmskb    %xmm7, %eax
	LONG $0xdad7f9c5             // vpmovmskb    %xmm2, %ebx
	LONG $0xf9d779c5             // vpmovmskb    %xmm1, %r15d
	LONG $0xc8d7f9c5             // vpmovmskb    %xmm0, %ecx
	XORQ R11, CX
	BSFQ CX, CX
	CMPL CX, $16
	JE   LBB19_26
	MOVL $-1, DX
	SHLL CX, DX
	NOTL DX
	ANDL DX, AX
	ANDL DX, BX
	ANDL R15, DX
	MOVL DX, R15

LBB19_26:
	LEAL  -1(AX), DX
	ANDL  AX, DX
	JNE   LBB19_66
	LEAL  -1(BX), DX
	ANDL  BX, DX
	JNE   LBB19_66
	LEAL  -1(R15), DX
	ANDL  R15, DX
	JNE   LBB19_66
	TESTL AX, AX
	JE    LBB19_32
	MOVQ  R14, DX
	SUBQ  DI, DX
	BSFL  AX, AX
	ADDQ  DX, AX
	CMPQ  R9, $-1
	JNE   LBB19_67
	MOVQ  AX, R9

LBB19_32:
	TESTL BX, BX
	JE    LBB19_35
	MOVQ  R14, DX
	SUBQ  DI, DX
	BSFL  BX, AX
	ADDQ  DX, AX
	CMPQ  R8, $-1
	JNE   LBB19_67
	MOVQ  AX, R8

LBB19_35:
	TESTL R15, R15
	JE    LBB19_38
	MOVQ  R14, DX
	SUBQ  DI, DX
	BSFL  R15, AX
	ADDQ  DX, AX
	CMPQ  R10, $-1
	JNE   LBB19_67
	MOVQ  AX, R10

LBB19_38:
	CMPL CX, $16
	JNE  LBB19_52
	ADDQ $16, R14
	ADDQ $-16, SI
	CMPQ SI, $15
	JA   LBB19_24

LBB19_40:
	LONG $0x19158d48; WORD $0x0001; BYTE $0x00 // leaq         $281(%rip), %rdx  /* LJTI19_0(%rip) */

LBB19_41:
	MOVQ    R14, CX
	MOVBLSX 0(R14), AX
	ADDL    $-43, AX
	CMPL    AX, $58
	JA      LBB19_54
	LEAQ    1(CX), R14
	MOVLQSX 0(DX)(AX*4), AX
	ADDQ    DX, AX
	JMP     AX

LBB19_43:
	MOVQ R14, AX
	SUBQ DI, AX
	CMPQ R10, $-1
	JNE  LBB19_68
	DECQ AX
	MOVQ AX, R10
	JMP  LBB19_41

LBB19_45:
	MOVQ R14, AX
	SUBQ DI, AX
	CMPQ R8, $-1
	JNE  LBB19_68
	DECQ AX
	MOVQ AX, R8
	JMP  LBB19_41

LBB19_47:
	MOVQ R14, AX
	SUBQ DI, AX
	CMPQ R9, $-1
	JNE  LBB19_68
	DECQ AX
	MOVQ AX, R9
	JMP  LBB19_41

LBB19_49:
	MOVQ $-1, AX

LBB19_50:
	BYTE $0x5b               // popq         %rbx
	WORD $0x5e41             // popq         %r14
	WORD $0x5f41             // popq         %r15
	BYTE $0x5d               // popq         %rbp
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	RET

LBB19_51:
	ADDQ CX, R14
	WORD $0xf8c5; BYTE $0x77 // vzeroupper
	JMP  LBB19_53

LBB19_52:
	ADDQ CX, R14

LBB19_53:
	MOVQ R14, CX

LBB19_54:
	MOVQ  $-1, AX
	TESTQ R10, R10
	JE    LBB19_50
	TESTQ R9, R9
	JE    LBB19_50
	TESTQ R10, R10
	JLE   LBB19_59
	LEAQ  -1(R10), AX
	CMPQ  R8, AX
	JE    LBB19_59
	NOTQ  R10
	MOVQ  R10, AX
	JMP   LBB19_50

LBB19_59:
	MOVQ  R9, AX
	ORQ   R8, AX
	CMPQ  R9, R8
	JL    LBB19_62
	TESTQ AX, AX
	JS    LBB19_62
	NOTQ  R9
	MOVQ  R9, AX
	JMP   LBB19_50

LBB19_62:
	LEAQ  -1(R8), DX
	CMPQ  R9, DX
	JNE   LBB19_65
	TESTQ AX, AX
	JS    LBB19_65
	NOTQ  R8
	MOVQ  R8, AX
	JMP   LBB19_50

LBB19_65:
	SUBQ DI, CX
	MOVQ CX, AX
	JMP  LBB19_50

LBB19_66:
	SUBQ DI, R14
	BSFL DX, AX
	ADDQ R14, AX

LBB19_67:
	NOTQ AX
	JMP  LBB19_50

LBB19_68:
	NEGQ AX
	JMP  LBB19_50

LBB19_69:
	MOVQ $-1, R8
	MOVQ $-1, R9
	MOVQ DI, R14
	CMPQ SI, $16
	JAE  LBB19_23
	JMP  LBB19_40

// .set L19_0_set_43, LBB19_43-LJTI19_0
// .set L19_0_set_54, LBB19_54-LJTI19_0
// .set L19_0_set_47, LBB19_47-LJTI19_0
// .set L19_0_set_41, LBB19_41-LJTI19_0
// .set L19_0_set_45, LBB19_45-LJTI19_0
LJTI19_0:
	LONG $0xffffff03 // .long L19_0_set_43
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff03 // .long L19_0_set_43
	LONG $0xffffff33 // .long L19_0_set_47
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xfffffee7 // .long L19_0_set_41
	LONG $0xfffffee7 // .long L19_0_set_41
	LONG $0xfffffee7 // .long L19_0_set_41
	LONG $0xfffffee7 // .long L19_0_set_41
	LONG $0xfffffee7 // .long L19_0_set_41
	LONG $0xfffffee7 // .long L19_0_set_41
	LONG $0xfffffee7 // .long L19_0_set_41
	LONG $0xfffffee7 // .long L19_0_set_41
	LONG $0xfffffee7 // .long L19_0_set_41
	LONG $0xfffffee7 // .long L19_0_set_41
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff1b // .long L19_0_set_45
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff6a // .long L19_0_set_54
	LONG $0xffffff1b // .long L19_0_set_45

_skip_positive:
	BYTE  $0x55                   // pushq        %rbp
	WORD  $0x8948; BYTE $0xe5     // movq         %rsp, %rbp
	WORD  $0x5641                 // pushq        %r14
	BYTE  $0x53                   // pushq        %rbx
	MOVQ  SI, R14
	MOVQ  0(SI), BX
	DECQ  BX
	MOVQ  0(DI), AX
	ADDQ  BX, AX
	MOVQ  8(DI), SI
	SUBQ  BX, SI
	MOVQ  AX, DI
	LONG  $0xfffafee8; BYTE $0xff // callq        _skip_number
	TESTQ AX, AX
	JS    LBB20_1
	MOVQ  0(R14), CX
	LEAQ  -1(AX)(CX*1), CX
	JMP   LBB20_3

LBB20_1:
	MOVQ 0(R14), CX
	SUBQ AX, CX
	ADDQ $-2, CX
	MOVQ $-2, BX

LBB20_3:
	MOVQ CX, 0(R14)
	MOVQ BX, AX
	BYTE $0x5b      // popq         %rbx
	WORD $0x5e41    // popq         %r14
	BYTE $0x5d      // popq         %rbp
	RET

_TabPowE:
	WORD $0xfb3c // .word 64316
	WORD $0xfb57 // .word 64343
	WORD $0xfb72 // .word 64370
	WORD $0xfb8c // .word 64396
	WORD $0xfba7 // .word 64423
	WORD $0xfbc1 // .word 64449
	WORD $0xfbdc // .word 64476
	WORD $0xfbf6 // .word 64502
	WORD $0xfc11 // .word 64529
	WORD $0xfc2c // .word 64556
	WORD $0xfc46 // .word 64582
	WORD $0xfc61 // .word 64609
	WORD $0xfc7b // .word 64635
	WORD $0xfc96 // .word 64662
	WORD $0xfcb1 // .word 64689
	WORD $0xfccb // .word 64715
	WORD $0xfce6 // .word 64742
	WORD $0xfd00 // .word 64768
	WORD $0xfd1b // .word 64795
	WORD $0xfd35 // .word 64821
	WORD $0xfd50 // .word 64848
	WORD $0xfd6b // .word 64875
	WORD $0xfd85 // .word 64901
	WORD $0xfda0 // .word 64928
	WORD $0xfdba // .word 64954
	WORD $0xfdd5 // .word 64981
	WORD $0xfdef // .word 65007
	WORD $0xfe0a // .word 65034
	WORD $0xfe25 // .word 65061
	WORD $0xfe3f // .word 65087
	WORD $0xfe5a // .word 65114
	WORD $0xfe74 // .word 65140
	WORD $0xfe8f // .word 65167
	WORD $0xfea9 // .word 65193
	WORD $0xfec4 // .word 65220
	WORD $0xfedf // .word 65247
	WORD $0xfef9 // .word 65273
	WORD $0xff14 // .word 65300
	WORD $0xff2e // .word 65326
	WORD $0xff49 // .word 65353
	WORD $0xff63 // .word 65379
	WORD $0xff7e // .word 65406
	WORD $0xff99 // .word 65433
	WORD $0xffb3 // .word 65459
	WORD $0xffce // .word 65486
	WORD $0xffe8 // .word 65512
	WORD $0x0003 // .word 3
	WORD $0x001e // .word 30
	WORD $0x0038 // .word 56
	WORD $0x0053 // .word 83
	WORD $0x006d // .word 109
	WORD $0x0088 // .word 136
	WORD $0x00a2 // .word 162
	WORD $0x00bd // .word 189
	WORD $0x00d8 // .word 216
	WORD $0x00f2 // .word 242
	WORD $0x010d // .word 269
	WORD $0x0127 // .word 295
	WORD $0x0142 // .word 322
	WORD $0x015c // .word 348
	WORD $0x0177 // .word 375
	WORD $0x0192 // .word 402
	WORD $0x01ac // .word 428
	WORD $0x01c7 // .word 455
	WORD $0x01e1 // .word 481
	WORD $0x01fc // .word 508
	WORD $0x0216 // .word 534
	WORD $0x0231 // .word 561
	WORD $0x024c // .word 588
	WORD $0x0266 // .word 614
	WORD $0x0281 // .word 641
	WORD $0x029b // .word 667
	WORD $0x02b6 // .word 694
	WORD $0x02d0 // .word 720
	WORD $0x02eb // .word 747
	WORD $0x0306 // .word 774
	WORD $0x0320 // .word 800
	WORD $0x033b // .word 827
	WORD $0x0355 // .word 853
	WORD $0x0370 // .word 880
	WORD $0x038b // .word 907
	WORD $0x03a5 // .word 933
	WORD $0x03c0 // .word 960
	WORD $0x03da // .word 986
	WORD $0x03f5 // .word 1013
	WORD $0x040f // .word 1039
	WORD $0x042a // .word 1066

_TabPowF:
	QUAD $0xfa8fd5a0081c0288 // .quad -391859759250406776
	QUAD $0xbaaee17fa23ebf76 // .quad -4994806998408183946
	QUAD $0x8b16fb203055ac76 // .quad -8424269937281487754
	QUAD $0xcf42894a5dce35ea // .quad -3512093806901185046
	QUAD $0x9a6bb0aa55653b2d // .quad -7319562523736982739
	QUAD $0xe61acf033d1a45df // .quad -1865951482774665761
	QUAD $0xab70fe17c79ac6ca // .quad -6093090917745768758
	QUAD $0xff77b1fcbebcdc4f // .quad -38366372719436721
	QUAD $0xbe5691ef416bd60c // .quad -4731433901725329908
	QUAD $0x8dd01fad907ffc3c // .quad -8228041688891786180
	QUAD $0xd3515c2831559a83 // .quad -3219690930897053053
	QUAD $0x9d71ac8fada6c9b5 // .quad -7101705404292871755
	QUAD $0xea9c227723ee8bcb // .quad -1541319077368263733
	QUAD $0xaecc49914078536d // .quad -5851220927660403859
	QUAD $0x823c12795db6ce57 // .quad -9062348037703676329
	QUAD $0xc21094364dfb5637 // .quad -4462904269766699465
	QUAD $0x9096ea6f3848984f // .quad -8027971522334779313
	QUAD $0xd77485cb25823ac7 // .quad -2921563150702462265
	QUAD $0xa086cfcd97bf97f4 // .quad -6879582898840692748
	QUAD $0xef340a98172aace5 // .quad -1210330751515841307
	QUAD $0xb23867fb2a35b28e // .quad -5604615407819967858
	QUAD $0x84c8d4dfd2c63f3b // .quad -8878612607581929669
	QUAD $0xc5dd44271ad3cdba // .quad -4189117143640191558
	QUAD $0x936b9fcebb25c996 // .quad -7823984217374209642
	QUAD $0xdbac6c247d62a584 // .quad -2617598379430861436
	QUAD $0xa3ab66580d5fdaf6 // .quad -6653111496142234890
	QUAD $0xf3e2f893dec3f126 // .quad -872862063775190746
	QUAD $0xb5b5ada8aaff80b8 // .quad -5353181642124984136
	QUAD $0x87625f056c7c4a8b // .quad -8691279853972075893
	QUAD $0xc9bcff6034c13053 // .quad -3909969587797413805
	QUAD $0x964e858c91ba2655 // .quad -7616003081050118571
	QUAD $0xdff9772470297ebd // .quad -2307682335666372931
	QUAD $0xa6dfbd9fb8e5b88f // .quad -6422206049907525489
	QUAD $0xf8a95fcf88747d94 // .quad -528786136287117932
	QUAD $0xb94470938fa89bcf // .quad -5096825099203863601
	QUAD $0x8a08f0f8bf0f156b // .quad -8500279345513818773
	QUAD $0xcdb02555653131b6 // .quad -3625356651333078602
	QUAD $0x993fe2c6d07b7fac // .quad -7403949918844649556
	QUAD $0xe45c10c42a2b3b06 // .quad -1991698500497491194
	QUAD $0xaa242499697392d3 // .quad -6186779746782440749
	QUAD $0xfd87b5f28300ca0e // .quad -177973607073265138
	QUAD $0xbce5086492111aeb // .quad -4835449396872013077
	QUAD $0x8cbccc096f5088cc // .quad -8305539271883716404
	QUAD $0xd1b71758e219652c // .quad -3335171328526686932
	QUAD $0x9c40000000000000 // .quad -7187745005283311616
	QUAD $0xe8d4a51000000000 // .quad -1669528073709551616
	QUAD $0xad78ebc5ac620000 // .quad -5946744073709551616
	QUAD $0x813f3978f8940984 // .quad -9133518327554766460
	QUAD $0xc097ce7bc90715b3 // .quad -4568956265895094861
	QUAD $0x8f7e32ce7bea5c70 // .quad -8106986416796705680
	QUAD $0xd5d238a4abe98068 // .quad -3039304518611664792
	QUAD $0x9f4f2726179a2245 // .quad -6967307053960650171
	QUAD $0xed63a231d4c4fb27 // .quad -1341049929119499481
	QUAD $0xb0de65388cc8ada8 // .quad -5702008784649933400
	QUAD $0x83c7088e1aab65db // .quad -8951176327949752869
	QUAD $0xc45d1df942711d9a // .quad -4297245513042813542
	QUAD $0x924d692ca61be758 // .quad -7904546130479028392
	QUAD $0xda01ee641a708dea // .quad -2737644984756826646
	QUAD $0xa26da3999aef774a // .quad -6742553186979055798
	QUAD $0xf209787bb47d6b85 // .quad -1006140569036166267
	QUAD $0xb454e4a179dd1877 // .quad -5452481866653427593
	QUAD $0x865b86925b9bc5c2 // .quad -8765264286586255934
	QUAD $0xc83553c5c8965d3d // .quad -4020214983419339459
	QUAD $0x952ab45cfa97a0b3 // .quad -7698142301602209613
	QUAD $0xde469fbd99a05fe3 // .quad -2430079312244744221
	QUAD $0xa59bc234db398c25 // .quad -6513398903789220827
	QUAD $0xf6c69a72a3989f5c // .quad -664674077828931748
	QUAD $0xb7dcbf5354e9bece // .quad -5198069505264599346
	QUAD $0x88fcf317f22241e2 // .quad -8575712306248138270
	QUAD $0xcc20ce9bd35c78a5 // .quad -3737760522056206171
	QUAD $0x98165af37b2153df // .quad -7487697328667536417
	QUAD $0xe2a0b5dc971f303a // .quad -2116491865831296966
	QUAD $0xa8d9d1535ce3b396 // .quad -6279758049420528746
	QUAD $0xfb9b7cd9a4a7443c // .quad -316522074587315140
	QUAD $0xbb764c4ca7a44410 // .quad -4938676049251384304
	QUAD $0x8bab8eefb6409c1a // .quad -8382449121214030822
	QUAD $0xd01fef10a657842c // .quad -3449775934753242068
	QUAD $0x9b10a4e5e9913129 // .quad -7273132090830278359
	QUAD $0xe7109bfba19c0c9d // .quad -1796764746270372707
	QUAD $0xac2820d9623bf429 // .quad -6041542782089432023
	QUAD $0x80444b5e7aa7cf85 // .quad -9204148869281624187
	QUAD $0xbf21e44003acdd2d // .quad -4674203974643163859
	QUAD $0x8e679c2f5e44ff8f // .quad -8185402070463610993
	QUAD $0xd433179d9c8cb841 // .quad -3156152948152813503
	QUAD $0x9e19db92b4e31ba9 // .quad -7054365918152680535
	QUAD $0xeb96bf6ebadf77d9 // .quad -1470777745987373095
	QUAD $0xaf87023b9bf0ee6b // .quad -5798663540173640085

_TabPow10:
	QUAD $0x0000000000000001 // .quad 1
	QUAD $0x000000000000000a // .quad 10
	QUAD $0x0000000000000064 // .quad 100
	QUAD $0x00000000000003e8 // .quad 1000
	QUAD $0x0000000000002710 // .quad 10000
	QUAD $0x00000000000186a0 // .quad 100000
	QUAD $0x00000000000f4240 // .quad 1000000
	QUAD $0x0000000000989680 // .quad 10000000
	QUAD $0x0000000005f5e100 // .quad 100000000
	QUAD $0x000000003b9aca00 // .quad 1000000000

_Digits:
	QUAD $0x3330323031303030; QUAD $0x3730363035303430 // .ascii 16, '0001020304050607'
	QUAD $0x3131303139303830; QUAD $0x3531343133313231 // .ascii 16, '0809101112131415'
	QUAD $0x3931383137313631; QUAD $0x3332323231323032 // .ascii 16, '1617181920212223'
	QUAD $0x3732363235323432; QUAD $0x3133303339323832 // .ascii 16, '2425262728293031'
	QUAD $0x3533343333333233; QUAD $0x3933383337333633 // .ascii 16, '3233343536373839'
	QUAD $0x3334323431343034; QUAD $0x3734363435343434 // .ascii 16, '4041424344454647'
	QUAD $0x3135303539343834; QUAD $0x3535343533353235 // .ascii 16, '4849505152535455'
	QUAD $0x3935383537353635; QUAD $0x3336323631363036 // .ascii 16, '5657585960616263'
	QUAD $0x3736363635363436; QUAD $0x3137303739363836 // .ascii 16, '6465666768697071'
	QUAD $0x3537343733373237; QUAD $0x3937383737373637 // .ascii 16, '7273747576777879'
	QUAD $0x3338323831383038; QUAD $0x3738363835383438 // .ascii 16, '8081828384858687'
	QUAD $0x3139303939383838; QUAD $0x3539343933393239 // .ascii 16, '8889909192939495'
	QUAD $0x3939383937393639                           // .ascii 8, '96979899'

_VecShiftShuffles:
	QUAD $0x0706050403020100; QUAD $0x0f0e0d0c0b0a0908 // .ascii 16, '\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f'
	QUAD $0x0807060504030201; QUAD $0xff0f0e0d0c0b0a09 // .ascii 16, '\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff'
	QUAD $0x0908070605040302; QUAD $0xffff0f0e0d0c0b0a // .ascii 16, '\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff'
	QUAD $0x0a09080706050403; QUAD $0xffffff0f0e0d0c0b // .ascii 16, '\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff\xff'
	QUAD $0x0b0a090807060504; QUAD $0xffffffff0f0e0d0c // .ascii 16, '\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff\xff\xff'
	QUAD $0x0c0b0a0908070605; QUAD $0xffffffffff0f0e0d // .ascii 16, '\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff\xff\xff\xff'
	QUAD $0x0d0c0b0a09080706; QUAD $0xffffffffffff0f0e // .ascii 16, '\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff\xff\xff\xff\xff'
	QUAD $0x0e0d0c0b0a090807; QUAD $0xffffffffffffff0f // .ascii 16, '\x07\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff\xff\xff\xff\xff\xff'
	QUAD $0x0f0e0d0c0b0a0908; QUAD $0xffffffffffffffff // .ascii 16, '\x08\t\n\x0b\x0c\r\x0e\x0f\xff\xff\xff\xff\xff\xff\xff\xff'

__SingleQuoteTab:
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000030303030755c                           // .asciz 8, '\\u0000\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000031303030755c                           // .asciz 8, '\\u0001\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000032303030755c                           // .asciz 8, '\\u0002\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000033303030755c                           // .asciz 8, '\\u0003\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000034303030755c                           // .asciz 8, '\\u0004\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000035303030755c                           // .asciz 8, '\\u0005\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000036303030755c                           // .asciz 8, '\\u0006\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000037303030755c                           // .asciz 8, '\\u0007\x00\x00'
	QUAD $0x0000000000000002                           // .quad 2
	QUAD $0x000000000000625c                           // .asciz 8, '\\b\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000002                           // .quad 2
	QUAD $0x000000000000745c                           // .asciz 8, '\\t\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000002                           // .quad 2
	QUAD $0x0000000000006e5c                           // .asciz 8, '\\n\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000062303030755c                           // .asciz 8, '\\u000b\x00\x00'
	QUAD $0x0000000000000002                           // .quad 2
	QUAD $0x000000000000665c                           // .asciz 8, '\\f\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000002                           // .quad 2
	QUAD $0x000000000000725c                           // .asciz 8, '\\r\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000065303030755c                           // .asciz 8, '\\u000e\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000066303030755c                           // .asciz 8, '\\u000f\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000030313030755c                           // .asciz 8, '\\u0010\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000031313030755c                           // .asciz 8, '\\u0011\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000032313030755c                           // .asciz 8, '\\u0012\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000033313030755c                           // .asciz 8, '\\u0013\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000034313030755c                           // .asciz 8, '\\u0014\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000035313030755c                           // .asciz 8, '\\u0015\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000036313030755c                           // .asciz 8, '\\u0016\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000037313030755c                           // .asciz 8, '\\u0017\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000038313030755c                           // .asciz 8, '\\u0018\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000039313030755c                           // .asciz 8, '\\u0019\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000061313030755c                           // .asciz 8, '\\u001a\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000062313030755c                           // .asciz 8, '\\u001b\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000063313030755c                           // .asciz 8, '\\u001c\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000064313030755c                           // .asciz 8, '\\u001d\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000065313030755c                           // .asciz 8, '\\u001e\x00\x00'
	QUAD $0x0000000000000006                           // .quad 6
	QUAD $0x000066313030755c                           // .asciz 8, '\\u001f\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000002                           // .quad 2
	QUAD $0x000000000000225c                           // .asciz 8, '\\"\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000002                           // .quad 2
	QUAD $0x0000000000005c5c                           // .asciz 8, '\\\\\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

__DoubleQuoteTab:
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0030303030755c5c                           // .asciz 8, '\\\\u0000\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0031303030755c5c                           // .asciz 8, '\\\\u0001\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0032303030755c5c                           // .asciz 8, '\\\\u0002\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0033303030755c5c                           // .asciz 8, '\\\\u0003\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0034303030755c5c                           // .asciz 8, '\\\\u0004\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0035303030755c5c                           // .asciz 8, '\\\\u0005\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0036303030755c5c                           // .asciz 8, '\\\\u0006\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0037303030755c5c                           // .asciz 8, '\\\\u0007\x00'
	QUAD $0x0000000000000003                           // .quad 3
	QUAD $0x0000000000625c5c                           // .asciz 8, '\\\\b\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000003                           // .quad 3
	QUAD $0x0000000000745c5c                           // .asciz 8, '\\\\t\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000003                           // .quad 3
	QUAD $0x00000000006e5c5c                           // .asciz 8, '\\\\n\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0062303030755c5c                           // .asciz 8, '\\\\u000b\x00'
	QUAD $0x0000000000000003                           // .quad 3
	QUAD $0x0000000000665c5c                           // .asciz 8, '\\\\f\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000003                           // .quad 3
	QUAD $0x0000000000725c5c                           // .asciz 8, '\\\\r\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0065303030755c5c                           // .asciz 8, '\\\\u000e\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0066303030755c5c                           // .asciz 8, '\\\\u000f\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0030313030755c5c                           // .asciz 8, '\\\\u0010\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0031313030755c5c                           // .asciz 8, '\\\\u0011\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0032313030755c5c                           // .asciz 8, '\\\\u0012\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0033313030755c5c                           // .asciz 8, '\\\\u0013\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0034313030755c5c                           // .asciz 8, '\\\\u0014\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0035313030755c5c                           // .asciz 8, '\\\\u0015\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0036313030755c5c                           // .asciz 8, '\\\\u0016\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0037313030755c5c                           // .asciz 8, '\\\\u0017\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0038313030755c5c                           // .asciz 8, '\\\\u0018\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0039313030755c5c                           // .asciz 8, '\\\\u0019\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0061313030755c5c                           // .asciz 8, '\\\\u001a\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0062313030755c5c                           // .asciz 8, '\\\\u001b\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0063313030755c5c                           // .asciz 8, '\\\\u001c\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0064313030755c5c                           // .asciz 8, '\\\\u001d\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0065313030755c5c                           // .asciz 8, '\\\\u001e\x00'
	QUAD $0x0000000000000007                           // .quad 7
	QUAD $0x0066313030755c5c                           // .asciz 8, '\\\\u001f\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000004                           // .quad 4
	QUAD $0x00000000225c5c5c                           // .asciz 8, '\\\\\\"\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000004                           // .quad 4
	QUAD $0x000000005c5c5c5c                           // .asciz 8, '\\\\\\\\\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

__UnquoteTab:
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000220000; QUAD $0x2f00000000000000 // .ascii 16, '\x00\x00"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00/'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000005c00000000 // .ascii 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\\\x00\x00\x00'
	QUAD $0x000c000000080000; QUAD $0x000a000000000000 // .ascii 16, '\x00\x00\x08\x00\x00\x00\x0c\x00\x00\x00\x00\x00\x00\x00\n\x00'
	LONG $0x000d0000; WORD $0xff09                     // .ascii 6, '\x00\x00\r\x00\t\xff'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; QUAD $0x0000000000000000 // .space 16, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
	QUAD $0x0000000000000000; WORD $0x0000             // .space 10, '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

_P10_TAB:
	QUAD $0x0000000000000002 // .quad 0x0000000000000002
	QUAD $0x0000000000000014 // .quad 0x0000000000000014
	QUAD $0x00000000000000ca // .quad 0x00000000000000ca
	QUAD $0x00000000000007e8 // .quad 0x00000000000007e8
	QUAD $0x0000000000004f10 // .quad 0x0000000000004f10
	QUAD $0x00000000000316a2 // .quad 0x00000000000316a2
	QUAD $0x00000000001ee257 // .quad 0x00000000001ee257
	QUAD $0x000000000134d761 // .quad 0x000000000134d761
	QUAD $0x000000000c1069cd // .quad 0x000000000c1069cd
	QUAD $0x0000000078a42205 // .quad 0x0000000078a42205
	QUAD $0x00000004b6695433 // .quad 0x00000004b6695433
	QUAD $0x0000002f201d49fb // .quad 0x0000002f201d49fb
	QUAD $0x000001d74124e3d1 // .quad 0x000001d74124e3d1
	QUAD $0x000012688b70e62b // .quad 0x000012688b70e62b
	QUAD $0x0000b8157268fdaf // .quad 0x0000b8157268fdaf
	QUAD $0x000730d67819e8d2 // .quad 0x000730d67819e8d2
	QUAD $0x0031fa182c40c60d // .quad 0x0031fa182c40c60d
	QUAD $0x0066789e3750f791 // .quad 0x0066789e3750f791
	QUAD $0x009c16c5c5253575 // .quad 0x009c16c5c5253575
	QUAD $0x00d18e3b9b374169 // .quad 0x00d18e3b9b374169
	QUAD $0x0105f1ca820511c3 // .quad 0x0105f1ca820511c3
	QUAD $0x013b6e3d22865634 // .quad 0x013b6e3d22865634
	QUAD $0x017124e63593f5e1 // .quad 0x017124e63593f5e1
	QUAD $0x01a56e1fc2f8f359 // .quad 0x01a56e1fc2f8f359
	QUAD $0x01dac9a7b3b7302f // .quad 0x01dac9a7b3b7302f
	QUAD $0x0210be08d0527e1d // .quad 0x0210be08d0527e1d
	QUAD $0x0244ed8b04671da5 // .quad 0x0244ed8b04671da5
	QUAD $0x027a28edc580e50e // .quad 0x027a28edc580e50e
	QUAD $0x02b059949b708f29 // .quad 0x02b059949b708f29
	QUAD $0x02e46ff9c24cb2f3 // .quad 0x02e46ff9c24cb2f3
	QUAD $0x03198bf832dfdfb0 // .quad 0x03198bf832dfdfb0
	QUAD $0x034feef63f97d79c // .quad 0x034feef63f97d79c
	QUAD $0x0383f559e7bee6c1 // .quad 0x0383f559e7bee6c1
	QUAD $0x03b8f2b061aea072 // .quad 0x03b8f2b061aea072
	QUAD $0x03ef2f5c7a1a488e // .quad 0x03ef2f5c7a1a488e
	QUAD $0x04237d99cc506d59 // .quad 0x04237d99cc506d59
	QUAD $0x04585d003f6488af // .quad 0x04585d003f6488af
	QUAD $0x048e74404f3daadb // .quad 0x048e74404f3daadb
	QUAD $0x04c308a831868ac9 // .quad 0x04c308a831868ac9
	QUAD $0x04f7cad23de82d7b // .quad 0x04f7cad23de82d7b
	QUAD $0x052dbd86cd6238d9 // .quad 0x052dbd86cd6238d9
	QUAD $0x05629674405d6388 // .quad 0x05629674405d6388
	QUAD $0x05973c115074bc6a // .quad 0x05973c115074bc6a
	QUAD $0x05cd0b15a491eb84 // .quad 0x05cd0b15a491eb84
	QUAD $0x060226ed86db3333 // .quad 0x060226ed86db3333
	QUAD $0x0636b0a8e891ffff // .quad 0x0636b0a8e891ffff
	QUAD $0x066c5cd322b67fff // .quad 0x066c5cd322b67fff
	QUAD $0x06a1ba03f5b21000 // .quad 0x06a1ba03f5b21000
	QUAD $0x06d62884f31e93ff // .quad 0x06d62884f31e93ff
	QUAD $0x070bb2a62fe638ff // .quad 0x070bb2a62fe638ff
	QUAD $0x07414fa7ddefe3a0 // .quad 0x07414fa7ddefe3a0
	QUAD $0x0775a391d56bdc87 // .quad 0x0775a391d56bdc87
	QUAD $0x07ab0c764ac6d3a9 // .quad 0x07ab0c764ac6d3a9
	QUAD $0x07e0e7c9eebc444a // .quad 0x07e0e7c9eebc444a
	QUAD $0x081521bc6a6b555c // .quad 0x081521bc6a6b555c
	QUAD $0x084a6a2b85062ab3 // .quad 0x084a6a2b85062ab3
	QUAD $0x0880825b3323dab0 // .quad 0x0880825b3323dab0
	QUAD $0x08b4a2f1ffecd15c // .quad 0x08b4a2f1ffecd15c
	QUAD $0x08e9cbae7fe805b3 // .quad 0x08e9cbae7fe805b3
	QUAD $0x09201f4d0ff10390 // .quad 0x09201f4d0ff10390
	QUAD $0x0954272053ed4474 // .quad 0x0954272053ed4474
	QUAD $0x098930e868e89591 // .quad 0x098930e868e89591
	QUAD $0x09bf7d228322baf5 // .quad 0x09bf7d228322baf5
	QUAD $0x09f3ae3591f5b4d9 // .quad 0x09f3ae3591f5b4d9
	QUAD $0x0a2899c2f6732210 // .quad 0x0a2899c2f6732210
	QUAD $0x0a5ec033b40fea93 // .quad 0x0a5ec033b40fea93
	QUAD $0x0a9338205089f29c // .quad 0x0a9338205089f29c
	QUAD $0x0ac8062864ac6f43 // .quad 0x0ac8062864ac6f43
	QUAD $0x0afe07b27dd78b14 // .quad 0x0afe07b27dd78b14
	QUAD $0x0b32c4cf8ea6b6ec // .quad 0x0b32c4cf8ea6b6ec
	QUAD $0x0b677603725064a8 // .quad 0x0b677603725064a8
	QUAD $0x0b9d53844ee47dd1 // .quad 0x0b9d53844ee47dd1
	QUAD $0x0bd25432b14ecea3 // .quad 0x0bd25432b14ecea3
	QUAD $0x0c06e93f5da2824c // .quad 0x0c06e93f5da2824c
	QUAD $0x0c3ca38f350b22df // .quad 0x0c3ca38f350b22df
	QUAD $0x0c71e6398126f5cb // .quad 0x0c71e6398126f5cb
	QUAD $0x0ca65fc7e170b33e // .quad 0x0ca65fc7e170b33e
	QUAD $0x0cdbf7b9d9cce00d // .quad 0x0cdbf7b9d9cce00d
	QUAD $0x0d117ad428200c08 // .quad 0x0d117ad428200c08
	QUAD $0x0d45d98932280f0a // .quad 0x0d45d98932280f0a
	QUAD $0x0d7b4feb7eb212cd // .quad 0x0d7b4feb7eb212cd
	QUAD $0x0db111f32f2f4bc0 // .quad 0x0db111f32f2f4bc0
	QUAD $0x0de5566ffafb1eb0 // .quad 0x0de5566ffafb1eb0
	QUAD $0x0e1aac0bf9b9e65c // .quad 0x0e1aac0bf9b9e65c
	QUAD $0x0e50ab877c142ffa // .quad 0x0e50ab877c142ffa
	QUAD $0x0e84d6695b193bf8 // .quad 0x0e84d6695b193bf8
	QUAD $0x0eba0c03b1df8af6 // .quad 0x0eba0c03b1df8af6
	QUAD $0x0ef047824f2bb6da // .quad 0x0ef047824f2bb6da
	QUAD $0x0f245962e2f6a490 // .quad 0x0f245962e2f6a490
	QUAD $0x0f596fbb9bb44db4 // .quad 0x0f596fbb9bb44db4
	QUAD $0x0f8fcbaa82a16121 // .quad 0x0f8fcbaa82a16121
	QUAD $0x0fc3df4a91a4dcb5 // .quad 0x0fc3df4a91a4dcb5
	QUAD $0x0ff8d71d360e13e2 // .quad 0x0ff8d71d360e13e2
	QUAD $0x102f0ce4839198db // .quad 0x102f0ce4839198db
	QUAD $0x1063680ed23aff89 // .quad 0x1063680ed23aff89
	QUAD $0x1098421286c9bf6b // .quad 0x1098421286c9bf6b
	QUAD $0x10ce5297287c2f45 // .quad 0x10ce5297287c2f45
	QUAD $0x1102f39e794d9d8b // .quad 0x1102f39e794d9d8b
	QUAD $0x1137b08617a104ee // .quad 0x1137b08617a104ee
	QUAD $0x116d9ca79d89462a // .quad 0x116d9ca79d89462a
	QUAD $0x11a281e8c275cbda // .quad 0x11a281e8c275cbda
	QUAD $0x11d72262f3133ed1 // .quad 0x11d72262f3133ed1
	QUAD $0x120ceafbafd80e85 // .quad 0x120ceafbafd80e85
	QUAD $0x124212dd4de70913 // .quad 0x124212dd4de70913
	QUAD $0x12769794a160cb58 // .quad 0x12769794a160cb58
	QUAD $0x12ac3d79c9b8fe2e // .quad 0x12ac3d79c9b8fe2e
	QUAD $0x12e1a66c1e139edd // .quad 0x12e1a66c1e139edd
	QUAD $0x1316100725988694 // .quad 0x1316100725988694
	QUAD $0x134b9408eefea839 // .quad 0x134b9408eefea839
	QUAD $0x13813c85955f2923 // .quad 0x13813c85955f2923
	QUAD $0x13b58ba6fab6f36c // .quad 0x13b58ba6fab6f36c
	QUAD $0x13eaee90b964b047 // .quad 0x13eaee90b964b047
	QUAD $0x1420d51a73deee2d // .quad 0x1420d51a73deee2d
	QUAD $0x14550a6110d6a9b8 // .quad 0x14550a6110d6a9b8
	QUAD $0x148a4cf9550c5426 // .quad 0x148a4cf9550c5426
	QUAD $0x14c0701bd527b498 // .quad 0x14c0701bd527b498
	QUAD $0x14f48c22ca71a1bd // .quad 0x14f48c22ca71a1bd
	QUAD $0x1529af2b7d0e0a2d // .quad 0x1529af2b7d0e0a2d
	QUAD $0x15600d7b2e28c65c // .quad 0x15600d7b2e28c65c
	QUAD $0x159410d9f9b2f7f3 // .quad 0x159410d9f9b2f7f3
	QUAD $0x15c91510781fb5f0 // .quad 0x15c91510781fb5f0
	QUAD $0x15ff5a549627a36c // .quad 0x15ff5a549627a36c
	QUAD $0x16339874ddd8c623 // .quad 0x16339874ddd8c623
	QUAD $0x16687e92154ef7ac // .quad 0x16687e92154ef7ac
	QUAD $0x169e9e369aa2b597 // .quad 0x169e9e369aa2b597
	QUAD $0x16d322e220a5b17e // .quad 0x16d322e220a5b17e
	QUAD $0x1707eb9aa8cf1dde // .quad 0x1707eb9aa8cf1dde
	QUAD $0x173de6815302e556 // .quad 0x173de6815302e556
	QUAD $0x1772b010d3e1cf56 // .quad 0x1772b010d3e1cf56
	QUAD $0x17a75c1508da432b // .quad 0x17a75c1508da432b
	QUAD $0x17dd331a4b10d3f6 // .quad 0x17dd331a4b10d3f6
	QUAD $0x18123ff06eea847a // .quad 0x18123ff06eea847a
	QUAD $0x1846cfec8aa52598 // .quad 0x1846cfec8aa52598
	QUAD $0x187c83e7ad4e6efe // .quad 0x187c83e7ad4e6efe
	QUAD $0x18b1d270cc51055f // .quad 0x18b1d270cc51055f
	QUAD $0x18e6470cff6546b6 // .quad 0x18e6470cff6546b6
	QUAD $0x191bd8d03f3e9864 // .quad 0x191bd8d03f3e9864
	QUAD $0x1951678227871f3e // .quad 0x1951678227871f3e
	QUAD $0x1985c162b168e70e // .quad 0x1985c162b168e70e
	QUAD $0x19bb31bb5dc320d2 // .quad 0x19bb31bb5dc320d2
	QUAD $0x19f0ff151a99f483 // .quad 0x19f0ff151a99f483
	QUAD $0x1a253eda614071a4 // .quad 0x1a253eda614071a4
	QUAD $0x1a5a8e90f9908e0d // .quad 0x1a5a8e90f9908e0d
	QUAD $0x1a90991a9bfa58c8 // .quad 0x1a90991a9bfa58c8
	QUAD $0x1ac4bf6142f8eefa // .quad 0x1ac4bf6142f8eefa
	QUAD $0x1af9ef3993b72ab8 // .quad 0x1af9ef3993b72ab8
	QUAD $0x1b303583fc527ab3 // .quad 0x1b303583fc527ab3
	QUAD $0x1b6442e4fb671960 // .quad 0x1b6442e4fb671960
	QUAD $0x1b99539e3a40dfb8 // .quad 0x1b99539e3a40dfb8
	QUAD $0x1bcfa885c8d117a6 // .quad 0x1bcfa885c8d117a6
	QUAD $0x1c03c9539d82aec8 // .quad 0x1c03c9539d82aec8
	QUAD $0x1c38bba884e35a7a // .quad 0x1c38bba884e35a7a
	QUAD $0x1c6eea92a61c3118 // .quad 0x1c6eea92a61c3118
	QUAD $0x1ca3529ba7d19eaf // .quad 0x1ca3529ba7d19eaf
	QUAD $0x1cd8274291c6065b // .quad 0x1cd8274291c6065b
	QUAD $0x1d0e3113363787f2 // .quad 0x1d0e3113363787f2
	QUAD $0x1d42deac01e2b4f7 // .quad 0x1d42deac01e2b4f7
	QUAD $0x1d779657025b6235 // .quad 0x1d779657025b6235
	QUAD $0x1dad7becc2f23ac2 // .quad 0x1dad7becc2f23ac2
	QUAD $0x1de26d73f9d764b9 // .quad 0x1de26d73f9d764b9
	QUAD $0x1e1708d0f84d3de7 // .quad 0x1e1708d0f84d3de7
	QUAD $0x1e4ccb0536608d61 // .quad 0x1e4ccb0536608d61
	QUAD $0x1e81fee341fc585d // .quad 0x1e81fee341fc585d
	QUAD $0x1eb67e9c127b6e74 // .quad 0x1eb67e9c127b6e74
	QUAD $0x1eec1e43171a4a11 // .quad 0x1eec1e43171a4a11
	QUAD $0x1f2192e9ee706e4b // .quad 0x1f2192e9ee706e4b
	QUAD $0x1f55f7a46a0c89dd // .quad 0x1f55f7a46a0c89dd
	QUAD $0x1f8b758d848fac55 // .quad 0x1f8b758d848fac55
	QUAD $0x1fc1297872d9cbb5 // .quad 0x1fc1297872d9cbb5
	QUAD $0x1ff573d68f903ea2 // .quad 0x1ff573d68f903ea2
	QUAD $0x202ad0cc33744e4b // .quad 0x202ad0cc33744e4b
	QUAD $0x2060c27fa028b0ef // .quad 0x2060c27fa028b0ef
	QUAD $0x2094f31f8832dd2a // .quad 0x2094f31f8832dd2a
	QUAD $0x20ca2fe76a3f9475 // .quad 0x20ca2fe76a3f9475
	QUAD $0x21005df0a267bcc9 // .quad 0x21005df0a267bcc9
	QUAD $0x2134756ccb01abfb // .quad 0x2134756ccb01abfb
	QUAD $0x216992c7fdc216fa // .quad 0x216992c7fdc216fa
	QUAD $0x219ff779fd329cb9 // .quad 0x219ff779fd329cb9
	QUAD $0x21d3faac3e3fa1f3 // .quad 0x21d3faac3e3fa1f3
	QUAD $0x2208f9574dcf8a70 // .quad 0x2208f9574dcf8a70
	QUAD $0x223f37ad21436d0c // .quad 0x223f37ad21436d0c
	QUAD $0x227382cc34ca2428 // .quad 0x227382cc34ca2428
	QUAD $0x22a8637f41fcad32 // .quad 0x22a8637f41fcad32
	QUAD $0x22de7c5f127bd87e // .quad 0x22de7c5f127bd87e
	QUAD $0x23130dbb6b8d674f // .quad 0x23130dbb6b8d674f
	QUAD $0x2347d12a4670c123 // .quad 0x2347d12a4670c123
	QUAD $0x237dc574d80cf16b // .quad 0x237dc574d80cf16b
	QUAD $0x23b29b69070816e3 // .quad 0x23b29b69070816e3
	QUAD $0x23e7424348ca1c9c // .quad 0x23e7424348ca1c9c
	QUAD $0x241d12d41afca3c3 // .quad 0x241d12d41afca3c3
	QUAD $0x24522bc490dde65a // .quad 0x24522bc490dde65a
	QUAD $0x2486b6b5b5155ff0 // .quad 0x2486b6b5b5155ff0
	QUAD $0x24bc6463225ab7ec // .quad 0x24bc6463225ab7ec
	QUAD $0x24f1bebdf578b2f4 // .quad 0x24f1bebdf578b2f4
	QUAD $0x25262e6d72d6dfb0 // .quad 0x25262e6d72d6dfb0
	QUAD $0x255bba08cf8c979d // .quad 0x255bba08cf8c979d
	QUAD $0x2591544581b7dec2 // .quad 0x2591544581b7dec2
	QUAD $0x25c5a956e225d672 // .quad 0x25c5a956e225d672
	QUAD $0x25fb13ac9aaf4c0f // .quad 0x25fb13ac9aaf4c0f
	QUAD $0x2630ec4be0ad8f89 // .quad 0x2630ec4be0ad8f89
	QUAD $0x2665275ed8d8f36c // .quad 0x2665275ed8d8f36c
	QUAD $0x269a71368f0f3047 // .quad 0x269a71368f0f3047
	QUAD $0x26d086c219697e2c // .quad 0x26d086c219697e2c
	QUAD $0x2704a8729fc3ddb7 // .quad 0x2704a8729fc3ddb7
	QUAD $0x2739d28f47b4d525 // .quad 0x2739d28f47b4d525
	QUAD $0x277023998cd10537 // .quad 0x277023998cd10537
	QUAD $0x27a42c7ff0054685 // .quad 0x27a42c7ff0054685
	QUAD $0x27d9379fec069826 // .quad 0x27d9379fec069826
	QUAD $0x280f8587e7083e30 // .quad 0x280f8587e7083e30
	QUAD $0x2843b374f06526de // .quad 0x2843b374f06526de
	QUAD $0x2878a0522c7e7095 // .quad 0x2878a0522c7e7095
	QUAD $0x28aec866b79e0cba // .quad 0x28aec866b79e0cba
	QUAD $0x28e33d4032c2c7f5 // .quad 0x28e33d4032c2c7f5
	QUAD $0x29180c903f7379f2 // .quad 0x29180c903f7379f2
	QUAD $0x294e0fb44f50586e // .quad 0x294e0fb44f50586e
	QUAD $0x2982c9d0b1923745 // .quad 0x2982c9d0b1923745
	QUAD $0x29b77c44ddf6c516 // .quad 0x29b77c44ddf6c516
	QUAD $0x29ed5b561574765b // .quad 0x29ed5b561574765b
	QUAD $0x2a225915cd68c9f9 // .quad 0x2a225915cd68c9f9
	QUAD $0x2a56ef5b40c2fc77 // .quad 0x2a56ef5b40c2fc77
	QUAD $0x2a8cab3210f3bb95 // .quad 0x2a8cab3210f3bb95
	QUAD $0x2ac1eaff4a98553d // .quad 0x2ac1eaff4a98553d
	QUAD $0x2af665bf1d3e6a8d // .quad 0x2af665bf1d3e6a8d
	QUAD $0x2b2bff2ee48e0530 // .quad 0x2b2bff2ee48e0530
	QUAD $0x2b617f7d4ed8c33e // .quad 0x2b617f7d4ed8c33e
	QUAD $0x2b95df5ca28ef40d // .quad 0x2b95df5ca28ef40d
	QUAD $0x2bcb5733cb32b111 // .quad 0x2bcb5733cb32b111
	QUAD $0x2c0116805effaeaa // .quad 0x2c0116805effaeaa
	QUAD $0x2c355c2076bf9a55 // .quad 0x2c355c2076bf9a55
	QUAD $0x2c6ab328946f80ea // .quad 0x2c6ab328946f80ea
	QUAD $0x2ca0aff95cc5b092 // .quad 0x2ca0aff95cc5b092
	QUAD $0x2cd4dbf7b3f71cb7 // .quad 0x2cd4dbf7b3f71cb7
	QUAD $0x2d0a12f5a0f4e3e5 // .quad 0x2d0a12f5a0f4e3e5
	QUAD $0x2d404bd984990e6f // .quad 0x2d404bd984990e6f
	QUAD $0x2d745ecfe5bf520b // .quad 0x2d745ecfe5bf520b
	QUAD $0x2da97683df2f268d // .quad 0x2da97683df2f268d
	QUAD $0x2ddfd424d6faf031 // .quad 0x2ddfd424d6faf031
	QUAD $0x2e13e497065cd61f // .quad 0x2e13e497065cd61f
	QUAD $0x2e48ddbcc7f40ba6 // .quad 0x2e48ddbcc7f40ba6
	QUAD $0x2e7f152bf9f10e90 // .quad 0x2e7f152bf9f10e90
	QUAD $0x2eb36d3b7c36a91a // .quad 0x2eb36d3b7c36a91a
	QUAD $0x2ee8488a5b445360 // .quad 0x2ee8488a5b445360
	QUAD $0x2f1e5aacf2156838 // .quad 0x2f1e5aacf2156838
	QUAD $0x2f52f8ac174d6123 // .quad 0x2f52f8ac174d6123
	QUAD $0x2f87b6d71d20b96c // .quad 0x2f87b6d71d20b96c
	QUAD $0x2fbda48ce468e7c7 // .quad 0x2fbda48ce468e7c7
	QUAD $0x2ff286d80ec190dc // .quad 0x2ff286d80ec190dc
	QUAD $0x3027288e1271f513 // .quad 0x3027288e1271f513
	QUAD $0x305cf2b1970e7258 // .quad 0x305cf2b1970e7258
	QUAD $0x309217aefe690777 // .quad 0x309217aefe690777
	QUAD $0x30c69d9abe034955 // .quad 0x30c69d9abe034955
	QUAD $0x30fc45016d841baa // .quad 0x30fc45016d841baa
	QUAD $0x3131ab20e472914a // .quad 0x3131ab20e472914a
	QUAD $0x316615e91d8f359d // .quad 0x316615e91d8f359d
	QUAD $0x319b9b6364f30304 // .quad 0x319b9b6364f30304
	QUAD $0x31d1411e1f17e1e3 // .quad 0x31d1411e1f17e1e3
	QUAD $0x32059165a6ddda5b // .quad 0x32059165a6ddda5b
	QUAD $0x323af5bf109550f2 // .quad 0x323af5bf109550f2
	QUAD $0x3270d9976a5d5297 // .quad 0x3270d9976a5d5297
	QUAD $0x32a50ffd44f4a73d // .quad 0x32a50ffd44f4a73d
	QUAD $0x32da53fc9631d10d // .quad 0x32da53fc9631d10d
	QUAD $0x3310747ddddf22a8 // .quad 0x3310747ddddf22a8
	QUAD $0x3344919d5556eb52 // .quad 0x3344919d5556eb52
	QUAD $0x3379b604aaaca626 // .quad 0x3379b604aaaca626
	QUAD $0x33b011c2eaabe7d8 // .quad 0x33b011c2eaabe7d8
	QUAD $0x33e41633a556e1ce // .quad 0x33e41633a556e1ce
	QUAD $0x34191bc08eac9a41 // .quad 0x34191bc08eac9a41
	QUAD $0x344f62b0b257c0d2 // .quad 0x344f62b0b257c0d2
	QUAD $0x34839dae6f76d883 // .quad 0x34839dae6f76d883
	QUAD $0x34b8851a0b548ea4 // .quad 0x34b8851a0b548ea4
	QUAD $0x34eea6608e29b24d // .quad 0x34eea6608e29b24d
	QUAD $0x352327fc58da0f70 // .quad 0x352327fc58da0f70
	QUAD $0x3557f1fb6f10934c // .quad 0x3557f1fb6f10934c
	QUAD $0x358dee7a4ad4b81f // .quad 0x358dee7a4ad4b81f
	QUAD $0x35c2b50c6ec4f313 // .quad 0x35c2b50c6ec4f313
	QUAD $0x35f7624f8a762fd8 // .quad 0x35f7624f8a762fd8
	QUAD $0x362d3ae36d13bbce // .quad 0x362d3ae36d13bbce
	QUAD $0x366244ce242c5561 // .quad 0x366244ce242c5561
	QUAD $0x3696d601ad376ab9 // .quad 0x3696d601ad376ab9
	QUAD $0x36cc8b8218854567 // .quad 0x36cc8b8218854567
	QUAD $0x3701d7314f534b61 // .quad 0x3701d7314f534b61
	QUAD $0x37364cfda3281e39 // .quad 0x37364cfda3281e39
	QUAD $0x376be03d0bf225c7 // .quad 0x376be03d0bf225c7
	QUAD $0x37a16c262777579c // .quad 0x37a16c262777579c
	QUAD $0x37d5c72fb1552d83 // .quad 0x37d5c72fb1552d83
	QUAD $0x380b38fb9daa78e4 // .quad 0x380b38fb9daa78e4
	QUAD $0x3841039d428a8b8f // .quad 0x3841039d428a8b8f
	QUAD $0x38754484932d2e72 // .quad 0x38754484932d2e72
	QUAD $0x38aa95a5b7f87a0f // .quad 0x38aa95a5b7f87a0f
	QUAD $0x38e09d8792fb4c49 // .quad 0x38e09d8792fb4c49
	QUAD $0x3914c4e977ba1f5c // .quad 0x3914c4e977ba1f5c
	QUAD $0x3949f623d5a8a733 // .quad 0x3949f623d5a8a733
	QUAD $0x398039d665896880 // .quad 0x398039d665896880
	QUAD $0x39b4484bfeebc2a0 // .quad 0x39b4484bfeebc2a0
	QUAD $0x39e95a5efea6b347 // .quad 0x39e95a5efea6b347
	QUAD $0x3a1fb0f6be506019 // .quad 0x3a1fb0f6be506019
	QUAD $0x3a53ce9a36f23c10 // .quad 0x3a53ce9a36f23c10
	QUAD $0x3a88c240c4aecb14 // .quad 0x3a88c240c4aecb14
	QUAD $0x3abef2d0f5da7dd9 // .quad 0x3abef2d0f5da7dd9
	QUAD $0x3af357c299a88ea7 // .quad 0x3af357c299a88ea7
	QUAD $0x3b282db34012b251 // .quad 0x3b282db34012b251
	QUAD $0x3b5e392010175ee6 // .quad 0x3b5e392010175ee6
	QUAD $0x3b92e3b40a0e9b4f // .quad 0x3b92e3b40a0e9b4f
	QUAD $0x3bc79ca10c924223 // .quad 0x3bc79ca10c924223
	QUAD $0x3bfd83c94fb6d2ac // .quad 0x3bfd83c94fb6d2ac
	QUAD $0x3c32725dd1d243ac // .quad 0x3c32725dd1d243ac
	QUAD $0x3c670ef54646d497 // .quad 0x3c670ef54646d497
	QUAD $0x3c9cd2b297d889bc // .quad 0x3c9cd2b297d889bc
	QUAD $0x3cd203af9ee75616 // .quad 0x3cd203af9ee75616
	QUAD $0x3d06849b86a12b9b // .quad 0x3d06849b86a12b9b
	QUAD $0x3d3c25c268497682 // .quad 0x3d3c25c268497682
	QUAD $0x3d719799812dea11 // .quad 0x3d719799812dea11
	QUAD $0x3da5fd7fe1796495 // .quad 0x3da5fd7fe1796495
	QUAD $0x3ddb7cdfd9d7bdbb // .quad 0x3ddb7cdfd9d7bdbb
	QUAD $0x3e112e0be826d695 // .quad 0x3e112e0be826d695
	QUAD $0x3e45798ee2308c3a // .quad 0x3e45798ee2308c3a
	QUAD $0x3e7ad7f29abcaf48 // .quad 0x3e7ad7f29abcaf48
	QUAD $0x3eb0c6f7a0b5ed8d // .quad 0x3eb0c6f7a0b5ed8d
	QUAD $0x3ee4f8b588e368f1 // .quad 0x3ee4f8b588e368f1
	QUAD $0x3f1a36e2eb1c432d // .quad 0x3f1a36e2eb1c432d
	QUAD $0x3f50624dd2f1a9fc // .quad 0x3f50624dd2f1a9fc
	QUAD $0x3f847ae147ae147b // .quad 0x3f847ae147ae147b
	QUAD $0x3fb999999999999a // .quad 0x3fb999999999999a
	QUAD $0x3ff0000000000000 // .quad 0x3ff0000000000000
	QUAD $0x4024000000000000 // .quad 0x4024000000000000
	QUAD $0x4059000000000000 // .quad 0x4059000000000000
	QUAD $0x408f400000000000 // .quad 0x408f400000000000
	QUAD $0x40c3880000000000 // .quad 0x40c3880000000000
	QUAD $0x40f86a0000000000 // .quad 0x40f86a0000000000
	QUAD $0x412e848000000000 // .quad 0x412e848000000000
	QUAD $0x416312d000000000 // .quad 0x416312d000000000
	QUAD $0x4197d78400000000 // .quad 0x4197d78400000000
	QUAD $0x41cdcd6500000000 // .quad 0x41cdcd6500000000
	QUAD $0x4202a05f20000000 // .quad 0x4202a05f20000000
	QUAD $0x42374876e8000000 // .quad 0x42374876e8000000
	QUAD $0x426d1a94a2000000 // .quad 0x426d1a94a2000000
	QUAD $0x42a2309ce5400000 // .quad 0x42a2309ce5400000
	QUAD $0x42d6bcc41e900000 // .quad 0x42d6bcc41e900000
	QUAD $0x430c6bf526340000 // .quad 0x430c6bf526340000
	QUAD $0x4341c37937e08000 // .quad 0x4341c37937e08000
	QUAD $0x4376345785d8a000 // .quad 0x4376345785d8a000
	QUAD $0x43abc16d674ec800 // .quad 0x43abc16d674ec800
	QUAD $0x43e158e460913d00 // .quad 0x43e158e460913d00
	QUAD $0x4415af1d78b58c40 // .quad 0x4415af1d78b58c40
	QUAD $0x444b1ae4d6e2ef50 // .quad 0x444b1ae4d6e2ef50
	QUAD $0x4480f0cf064dd592 // .quad 0x4480f0cf064dd592
	QUAD $0x44b52d02c7e14af6 // .quad 0x44b52d02c7e14af6
	QUAD $0x44ea784379d99db4 // .quad 0x44ea784379d99db4
	QUAD $0x45208b2a2c280291 // .quad 0x45208b2a2c280291
	QUAD $0x4554adf4b7320335 // .quad 0x4554adf4b7320335
	QUAD $0x4589d971e4fe8402 // .quad 0x4589d971e4fe8402
	QUAD $0x45c027e72f1f1281 // .quad 0x45c027e72f1f1281
	QUAD $0x45f431e0fae6d721 // .quad 0x45f431e0fae6d721
	QUAD $0x46293e5939a08cea // .quad 0x46293e5939a08cea
	QUAD $0x465f8def8808b024 // .quad 0x465f8def8808b024
	QUAD $0x4693b8b5b5056e17 // .quad 0x4693b8b5b5056e17
	QUAD $0x46c8a6e32246c99c // .quad 0x46c8a6e32246c99c
	QUAD $0x46fed09bead87c03 // .quad 0x46fed09bead87c03
	QUAD $0x4733426172c74d82 // .quad 0x4733426172c74d82
	QUAD $0x476812f9cf7920e3 // .quad 0x476812f9cf7920e3
	QUAD $0x479e17b84357691b // .quad 0x479e17b84357691b
	QUAD $0x47d2ced32a16a1b1 // .quad 0x47d2ced32a16a1b1
	QUAD $0x48078287f49c4a1d // .quad 0x48078287f49c4a1d
	QUAD $0x483d6329f1c35ca5 // .quad 0x483d6329f1c35ca5
	QUAD $0x48725dfa371a19e7 // .quad 0x48725dfa371a19e7
	QUAD $0x48a6f578c4e0a061 // .quad 0x48a6f578c4e0a061
	QUAD $0x48dcb2d6f618c879 // .quad 0x48dcb2d6f618c879
	QUAD $0x4911efc659cf7d4c // .quad 0x4911efc659cf7d4c
	QUAD $0x49466bb7f0435c9e // .quad 0x49466bb7f0435c9e
	QUAD $0x497c06a5ec5433c6 // .quad 0x497c06a5ec5433c6
	QUAD $0x49b18427b3b4a05c // .quad 0x49b18427b3b4a05c
	QUAD $0x49e5e531a0a1c873 // .quad 0x49e5e531a0a1c873
	QUAD $0x4a1b5e7e08ca3a8f // .quad 0x4a1b5e7e08ca3a8f
	QUAD $0x4a511b0ec57e649a // .quad 0x4a511b0ec57e649a
	QUAD $0x4a8561d276ddfdc0 // .quad 0x4a8561d276ddfdc0
	QUAD $0x4ababa4714957d30 // .quad 0x4ababa4714957d30
	QUAD $0x4af0b46c6cdd6e3e // .quad 0x4af0b46c6cdd6e3e
	QUAD $0x4b24e1878814c9ce // .quad 0x4b24e1878814c9ce
	QUAD $0x4b5a19e96a19fc41 // .quad 0x4b5a19e96a19fc41
	QUAD $0x4b905031e2503da9 // .quad 0x4b905031e2503da9
	QUAD $0x4bc4643e5ae44d13 // .quad 0x4bc4643e5ae44d13
	QUAD $0x4bf97d4df19d6057 // .quad 0x4bf97d4df19d6057
	QUAD $0x4c2fdca16e04b86d // .quad 0x4c2fdca16e04b86d
	QUAD $0x4c63e9e4e4c2f344 // .quad 0x4c63e9e4e4c2f344
	QUAD $0x4c98e45e1df3b015 // .quad 0x4c98e45e1df3b015
	QUAD $0x4ccf1d75a5709c1b // .quad 0x4ccf1d75a5709c1b
	QUAD $0x4d03726987666191 // .quad 0x4d03726987666191
	QUAD $0x4d384f03e93ff9f5 // .quad 0x4d384f03e93ff9f5
	QUAD $0x4d6e62c4e38ff872 // .quad 0x4d6e62c4e38ff872
	QUAD $0x4da2fdbb0e39fb47 // .quad 0x4da2fdbb0e39fb47
	QUAD $0x4dd7bd29d1c87a19 // .quad 0x4dd7bd29d1c87a19
	QUAD $0x4e0dac74463a989f // .quad 0x4e0dac74463a989f
	QUAD $0x4e428bc8abe49f64 // .quad 0x4e428bc8abe49f64
	QUAD $0x4e772ebad6ddc73d // .quad 0x4e772ebad6ddc73d
	QUAD $0x4eacfa698c95390c // .quad 0x4eacfa698c95390c
	QUAD $0x4ee21c81f7dd43a7 // .quad 0x4ee21c81f7dd43a7
	QUAD $0x4f16a3a275d49491 // .quad 0x4f16a3a275d49491
	QUAD $0x4f4c4c8b1349b9b5 // .quad 0x4f4c4c8b1349b9b5
	QUAD $0x4f81afd6ec0e1411 // .quad 0x4f81afd6ec0e1411
	QUAD $0x4fb61bcca7119916 // .quad 0x4fb61bcca7119916
	QUAD $0x4feba2bfd0d5ff5b // .quad 0x4feba2bfd0d5ff5b
	QUAD $0x502145b7e285bf99 // .quad 0x502145b7e285bf99
	QUAD $0x50559725db272f7f // .quad 0x50559725db272f7f
	QUAD $0x508afcef51f0fb5f // .quad 0x508afcef51f0fb5f
	QUAD $0x50c0de1593369d1b // .quad 0x50c0de1593369d1b
	QUAD $0x50f5159af8044462 // .quad 0x50f5159af8044462
	QUAD $0x512a5b01b605557b // .quad 0x512a5b01b605557b
	QUAD $0x516078e111c3556d // .quad 0x516078e111c3556d
	QUAD $0x5194971956342ac8 // .quad 0x5194971956342ac8
	QUAD $0x51c9bcdfabc1357a // .quad 0x51c9bcdfabc1357a
	QUAD $0x5200160bcb58c16c // .quad 0x5200160bcb58c16c
	QUAD $0x52341b8ebe2ef1c7 // .quad 0x52341b8ebe2ef1c7
	QUAD $0x526922726dbaae39 // .quad 0x526922726dbaae39
	QUAD $0x529f6b0f092959c7 // .quad 0x529f6b0f092959c7
	QUAD $0x52d3a2e965b9d81d // .quad 0x52d3a2e965b9d81d
	QUAD $0x53088ba3bf284e24 // .quad 0x53088ba3bf284e24
	QUAD $0x533eae8caef261ad // .quad 0x533eae8caef261ad
	QUAD $0x53732d17ed577d0c // .quad 0x53732d17ed577d0c
	QUAD $0x53a7f85de8ad5c4f // .quad 0x53a7f85de8ad5c4f
	QUAD $0x53ddf67562d8b363 // .quad 0x53ddf67562d8b363
	QUAD $0x5412ba095dc7701e // .quad 0x5412ba095dc7701e
	QUAD $0x5447688bb5394c25 // .quad 0x5447688bb5394c25
	QUAD $0x547d42aea2879f2e // .quad 0x547d42aea2879f2e
	QUAD $0x54b249ad2594c37d // .quad 0x54b249ad2594c37d
	QUAD $0x54e6dc186ef9f45c // .quad 0x54e6dc186ef9f45c
	QUAD $0x551c931e8ab87173 // .quad 0x551c931e8ab87173
	QUAD $0x5551dbf316b346e8 // .quad 0x5551dbf316b346e8
	QUAD $0x558652efdc6018a2 // .quad 0x558652efdc6018a2
	QUAD $0x55bbe7abd3781eca // .quad 0x55bbe7abd3781eca
	QUAD $0x55f170cb642b133f // .quad 0x55f170cb642b133f
	QUAD $0x5625ccfe3d35d80e // .quad 0x5625ccfe3d35d80e
	QUAD $0x565b403dcc834e12 // .quad 0x565b403dcc834e12
	QUAD $0x569108269fd210cb // .quad 0x569108269fd210cb
	QUAD $0x56c54a3047c694fe // .quad 0x56c54a3047c694fe
	QUAD $0x56fa9cbc59b83a3d // .quad 0x56fa9cbc59b83a3d
	QUAD $0x5730a1f5b8132466 // .quad 0x5730a1f5b8132466
	QUAD $0x5764ca732617ed80 // .quad 0x5764ca732617ed80
	QUAD $0x5799fd0fef9de8e0 // .quad 0x5799fd0fef9de8e0
	QUAD $0x57d03e29f5c2b18c // .quad 0x57d03e29f5c2b18c
	QUAD $0x58044db473335def // .quad 0x58044db473335def
	QUAD $0x583961219000356b // .quad 0x583961219000356b
	QUAD $0x586fb969f40042c5 // .quad 0x586fb969f40042c5
	QUAD $0x58a3d3e2388029bb // .quad 0x58a3d3e2388029bb
	QUAD $0x58d8c8dac6a0342a // .quad 0x58d8c8dac6a0342a
	QUAD $0x590efb1178484135 // .quad 0x590efb1178484135
	QUAD $0x59435ceaeb2d28c1 // .quad 0x59435ceaeb2d28c1
	QUAD $0x59783425a5f872f1 // .quad 0x59783425a5f872f1
	QUAD $0x59ae412f0f768fad // .quad 0x59ae412f0f768fad
	QUAD $0x59e2e8bd69aa19cc // .quad 0x59e2e8bd69aa19cc
	QUAD $0x5a17a2ecc414a03f // .quad 0x5a17a2ecc414a03f
	QUAD $0x5a4d8ba7f519c84f // .quad 0x5a4d8ba7f519c84f
	QUAD $0x5a827748f9301d32 // .quad 0x5a827748f9301d32
	QUAD $0x5ab7151b377c247e // .quad 0x5ab7151b377c247e
	QUAD $0x5aecda62055b2d9e // .quad 0x5aecda62055b2d9e
	QUAD $0x5b22087d4358fc82 // .quad 0x5b22087d4358fc82
	QUAD $0x5b568a9c942f3ba3 // .quad 0x5b568a9c942f3ba3
	QUAD $0x5b8c2d43b93b0a8c // .quad 0x5b8c2d43b93b0a8c
	QUAD $0x5bc19c4a53c4e697 // .quad 0x5bc19c4a53c4e697
	QUAD $0x5bf6035ce8b6203d // .quad 0x5bf6035ce8b6203d
	QUAD $0x5c2b843422e3a84d // .quad 0x5c2b843422e3a84d
	QUAD $0x5c6132a095ce4930 // .quad 0x5c6132a095ce4930
	QUAD $0x5c957f48bb41db7c // .quad 0x5c957f48bb41db7c
	QUAD $0x5ccadf1aea12525b // .quad 0x5ccadf1aea12525b
	QUAD $0x5d00cb70d24b7379 // .quad 0x5d00cb70d24b7379
	QUAD $0x5d34fe4d06de5057 // .quad 0x5d34fe4d06de5057
	QUAD $0x5d6a3de04895e46d // .quad 0x5d6a3de04895e46d
	QUAD $0x5da066ac2d5daec4 // .quad 0x5da066ac2d5daec4
	QUAD $0x5dd4805738b51a75 // .quad 0x5dd4805738b51a75
	QUAD $0x5e09a06d06e26112 // .quad 0x5e09a06d06e26112
	QUAD $0x5e400444244d7cab // .quad 0x5e400444244d7cab
	QUAD $0x5e7405552d60dbd6 // .quad 0x5e7405552d60dbd6
	QUAD $0x5ea906aa78b912cc // .quad 0x5ea906aa78b912cc
	QUAD $0x5edf485516e7577f // .quad 0x5edf485516e7577f
	QUAD $0x5f138d352e5096af // .quad 0x5f138d352e5096af
	QUAD $0x5f48708279e4bc5b // .quad 0x5f48708279e4bc5b
	QUAD $0x5f7e8ca3185deb72 // .quad 0x5f7e8ca3185deb72
	QUAD $0x5fb317e5ef3ab327 // .quad 0x5fb317e5ef3ab327
	QUAD $0x5fe7dddf6b095ff1 // .quad 0x5fe7dddf6b095ff1
	QUAD $0x601dd55745cbb7ed // .quad 0x601dd55745cbb7ed
	QUAD $0x6052a5568b9f52f4 // .quad 0x6052a5568b9f52f4
	QUAD $0x60874eac2e8727b1 // .quad 0x60874eac2e8727b1
	QUAD $0x60bd22573a28f19d // .quad 0x60bd22573a28f19d
	QUAD $0x60f2357684599702 // .quad 0x60f2357684599702
	QUAD $0x6126c2d4256ffcc3 // .quad 0x6126c2d4256ffcc3
	QUAD $0x615c73892ecbfbf4 // .quad 0x615c73892ecbfbf4
	QUAD $0x6191c835bd3f7d78 // .quad 0x6191c835bd3f7d78
	QUAD $0x61c63a432c8f5cd6 // .quad 0x61c63a432c8f5cd6
	QUAD $0x61fbc8d3f7b3340c // .quad 0x61fbc8d3f7b3340c
	QUAD $0x62315d847ad00087 // .quad 0x62315d847ad00087
	QUAD $0x6265b4e5998400a9 // .quad 0x6265b4e5998400a9
	QUAD $0x629b221effe500d4 // .quad 0x629b221effe500d4
	QUAD $0x62d0f5535fef2084 // .quad 0x62d0f5535fef2084
	QUAD $0x630532a837eae8a5 // .quad 0x630532a837eae8a5
	QUAD $0x633a7f5245e5a2cf // .quad 0x633a7f5245e5a2cf
	QUAD $0x63708f936baf85c1 // .quad 0x63708f936baf85c1
	QUAD $0x63a4b378469b6732 // .quad 0x63a4b378469b6732
	QUAD $0x63d9e056584240fe // .quad 0x63d9e056584240fe
	QUAD $0x64102c35f729689f // .quad 0x64102c35f729689f
	QUAD $0x6444374374f3c2c6 // .quad 0x6444374374f3c2c6
	QUAD $0x647945145230b378 // .quad 0x647945145230b378
	QUAD $0x64af965966bce056 // .quad 0x64af965966bce056
	QUAD $0x64e3bdf7e0360c36 // .quad 0x64e3bdf7e0360c36
	QUAD $0x6518ad75d8438f43 // .quad 0x6518ad75d8438f43
	QUAD $0x654ed8d34e547314 // .quad 0x654ed8d34e547314
	QUAD $0x6583478410f4c7ec // .quad 0x6583478410f4c7ec
	QUAD $0x65b819651531f9e8 // .quad 0x65b819651531f9e8
	QUAD $0x65ee1fbe5a7e7861 // .quad 0x65ee1fbe5a7e7861
	QUAD $0x6622d3d6f88f0b3d // .quad 0x6622d3d6f88f0b3d
	QUAD $0x665788ccb6b2ce0c // .quad 0x665788ccb6b2ce0c
	QUAD $0x668d6affe45f818f // .quad 0x668d6affe45f818f
	QUAD $0x66c262dfeebbb0f9 // .quad 0x66c262dfeebbb0f9
	QUAD $0x66f6fb97ea6a9d38 // .quad 0x66f6fb97ea6a9d38
	QUAD $0x672cba7de5054486 // .quad 0x672cba7de5054486
	QUAD $0x6761f48eaf234ad4 // .quad 0x6761f48eaf234ad4
	QUAD $0x679671b25aec1d89 // .quad 0x679671b25aec1d89
	QUAD $0x67cc0e1ef1a724eb // .quad 0x67cc0e1ef1a724eb
	QUAD $0x680188d357087713 // .quad 0x680188d357087713
	QUAD $0x6835eb082cca94d7 // .quad 0x6835eb082cca94d7
	QUAD $0x686b65ca37fd3a0d // .quad 0x686b65ca37fd3a0d
	QUAD $0x68a11f9e62fe4448 // .quad 0x68a11f9e62fe4448
	QUAD $0x68d56785fbbdd55a // .quad 0x68d56785fbbdd55a
	QUAD $0x690ac1677aad4ab1 // .quad 0x690ac1677aad4ab1
	QUAD $0x6940b8e0acac4eaf // .quad 0x6940b8e0acac4eaf
	QUAD $0x6974e718d7d7625a // .quad 0x6974e718d7d7625a
	QUAD $0x69aa20df0dcd3af1 // .quad 0x69aa20df0dcd3af1
	QUAD $0x69e0548b68a044d6 // .quad 0x69e0548b68a044d6
	QUAD $0x6a1469ae42c8560c // .quad 0x6a1469ae42c8560c
	QUAD $0x6a498419d37a6b8f // .quad 0x6a498419d37a6b8f
	QUAD $0x6a7fe52048590673 // .quad 0x6a7fe52048590673
	QUAD $0x6ab3ef342d37a408 // .quad 0x6ab3ef342d37a408
	QUAD $0x6ae8eb0138858d0a // .quad 0x6ae8eb0138858d0a
	QUAD $0x6b1f25c186a6f04c // .quad 0x6b1f25c186a6f04c
	QUAD $0x6b537798f4285630 // .quad 0x6b537798f4285630
	QUAD $0x6b88557f31326bbb // .quad 0x6b88557f31326bbb
	QUAD $0x6bbe6adefd7f06aa // .quad 0x6bbe6adefd7f06aa
	QUAD $0x6bf302cb5e6f642a // .quad 0x6bf302cb5e6f642a
	QUAD $0x6c27c37e360b3d35 // .quad 0x6c27c37e360b3d35
	QUAD $0x6c5db45dc38e0c82 // .quad 0x6c5db45dc38e0c82
	QUAD $0x6c9290ba9a38c7d1 // .quad 0x6c9290ba9a38c7d1
	QUAD $0x6cc734e940c6f9c6 // .quad 0x6cc734e940c6f9c6
	QUAD $0x6cfd022390f8b837 // .quad 0x6cfd022390f8b837
	QUAD $0x6d3221563a9b7323 // .quad 0x6d3221563a9b7323
	QUAD $0x6d66a9abc9424feb // .quad 0x6d66a9abc9424feb
	QUAD $0x6d9c5416bb92e3e6 // .quad 0x6d9c5416bb92e3e6
	QUAD $0x6dd1b48e353bce70 // .quad 0x6dd1b48e353bce70
	QUAD $0x6e0621b1c28ac20c // .quad 0x6e0621b1c28ac20c
	QUAD $0x6e3baa1e332d728f // .quad 0x6e3baa1e332d728f
	QUAD $0x6e714a52dffc6799 // .quad 0x6e714a52dffc6799
	QUAD $0x6ea59ce797fb817f // .quad 0x6ea59ce797fb817f
	QUAD $0x6edb04217dfa61df // .quad 0x6edb04217dfa61df
	QUAD $0x6f10e294eebc7d2c // .quad 0x6f10e294eebc7d2c
	QUAD $0x6f451b3a2a6b9c76 // .quad 0x6f451b3a2a6b9c76
	QUAD $0x6f7a6208b5068394 // .quad 0x6f7a6208b5068394
	QUAD $0x6fb07d457124123d // .quad 0x6fb07d457124123d
	QUAD $0x6fe49c96cd6d16cc // .quad 0x6fe49c96cd6d16cc
	QUAD $0x7019c3bc80c85c7f // .quad 0x7019c3bc80c85c7f
	QUAD $0x70501a55d07d39cf // .quad 0x70501a55d07d39cf
	QUAD $0x708420eb449c8843 // .quad 0x708420eb449c8843
	QUAD $0x70b9292615c3aa54 // .quad 0x70b9292615c3aa54
	QUAD $0x70ef736f9b3494e9 // .quad 0x70ef736f9b3494e9
	QUAD $0x7123a825c100dd11 // .quad 0x7123a825c100dd11
	QUAD $0x7158922f31411456 // .quad 0x7158922f31411456
	QUAD $0x718eb6bafd91596b // .quad 0x718eb6bafd91596b
	QUAD $0x71c33234de7ad7e3 // .quad 0x71c33234de7ad7e3
	QUAD $0x71f7fec216198ddc // .quad 0x71f7fec216198ddc
	QUAD $0x722dfe729b9ff153 // .quad 0x722dfe729b9ff153
	QUAD $0x7262bf07a143f6d4 // .quad 0x7262bf07a143f6d4
	QUAD $0x72976ec98994f489 // .quad 0x72976ec98994f489
	QUAD $0x72cd4a7bebfa31ab // .quad 0x72cd4a7bebfa31ab
	QUAD $0x73024e8d737c5f0b // .quad 0x73024e8d737c5f0b
	QUAD $0x7336e230d05b76cd // .quad 0x7336e230d05b76cd
	QUAD $0x736c9abd04725481 // .quad 0x736c9abd04725481
	QUAD $0x73a1e0b622c774d0 // .quad 0x73a1e0b622c774d0
	QUAD $0x73d658e3ab795204 // .quad 0x73d658e3ab795204
	QUAD $0x740bef1c9657a686 // .quad 0x740bef1c9657a686
	QUAD $0x74417571ddf6c814 // .quad 0x74417571ddf6c814
	QUAD $0x7475d2ce55747a18 // .quad 0x7475d2ce55747a18
	QUAD $0x74ab4781ead1989e // .quad 0x74ab4781ead1989e
	QUAD $0x74e10cb132c2ff63 // .quad 0x74e10cb132c2ff63
	QUAD $0x75154fdd7f73bf3c // .quad 0x75154fdd7f73bf3c
	QUAD $0x754aa3d4df50af0b // .quad 0x754aa3d4df50af0b
	QUAD $0x7580a6650b926d67 // .quad 0x7580a6650b926d67
	QUAD $0x75b4cffe4e7708c0 // .quad 0x75b4cffe4e7708c0
	QUAD $0x75ea03fde214caf1 // .quad 0x75ea03fde214caf1
	QUAD $0x7620427ead4cfed6 // .quad 0x7620427ead4cfed6
	QUAD $0x7654531e58a03e8c // .quad 0x7654531e58a03e8c
	QUAD $0x768967e5eec84e2f // .quad 0x768967e5eec84e2f
	QUAD $0x76bfc1df6a7a61bb // .quad 0x76bfc1df6a7a61bb
	QUAD $0x76f3d92ba28c7d15 // .quad 0x76f3d92ba28c7d15
	QUAD $0x7728cf768b2f9c5a // .quad 0x7728cf768b2f9c5a
	QUAD $0x775f03542dfb8370 // .quad 0x775f03542dfb8370
	QUAD $0x779362149cbd3226 // .quad 0x779362149cbd3226
	QUAD $0x77c83a99c3ec7eb0 // .quad 0x77c83a99c3ec7eb0
	QUAD $0x77fe494034e79e5c // .quad 0x77fe494034e79e5c
	QUAD $0x7832edc82110c2f9 // .quad 0x7832edc82110c2f9
	QUAD $0x7867a93a2954f3b8 // .quad 0x7867a93a2954f3b8
	QUAD $0x789d9388b3aa30a5 // .quad 0x789d9388b3aa30a5
	QUAD $0x78d27c35704a5e67 // .quad 0x78d27c35704a5e67
	QUAD $0x79071b42cc5cf601 // .quad 0x79071b42cc5cf601
	QUAD $0x793ce2137f743382 // .quad 0x793ce2137f743382
	QUAD $0x79720d4c2fa8a031 // .quad 0x79720d4c2fa8a031
	QUAD $0x79a6909f3b92c83d // .quad 0x79a6909f3b92c83d
	QUAD $0x79dc34c70a777a4d // .quad 0x79dc34c70a777a4d
	QUAD $0x7a11a0fc668aac70 // .quad 0x7a11a0fc668aac70
	QUAD $0x7a46093b802d578c // .quad 0x7a46093b802d578c
	QUAD $0x7a7b8b8a6038ad6f // .quad 0x7a7b8b8a6038ad6f
	QUAD $0x7ab137367c236c65 // .quad 0x7ab137367c236c65
	QUAD $0x7ae585041b2c477f // .quad 0x7ae585041b2c477f
	QUAD $0x7b1ae64521f7595e // .quad 0x7b1ae64521f7595e
	QUAD $0x7b50cfeb353a97db // .quad 0x7b50cfeb353a97db
	QUAD $0x7b8503e602893dd2 // .quad 0x7b8503e602893dd2
	QUAD $0x7bba44df832b8d46 // .quad 0x7bba44df832b8d46
	QUAD $0x7bf06b0bb1fb384c // .quad 0x7bf06b0bb1fb384c
	QUAD $0x7c2485ce9e7a065f // .quad 0x7c2485ce9e7a065f
	QUAD $0x7c59a742461887f6 // .quad 0x7c59a742461887f6
	QUAD $0x7c9008896bcf54fa // .quad 0x7c9008896bcf54fa
	QUAD $0x7cc40aabc6c32a38 // .quad 0x7cc40aabc6c32a38
	QUAD $0x7cf90d56b873f4c7 // .quad 0x7cf90d56b873f4c7
	QUAD $0x7d2f50ac6690f1f8 // .quad 0x7d2f50ac6690f1f8
	QUAD $0x7d63926bc01a973b // .quad 0x7d63926bc01a973b
	QUAD $0x7d987706b0213d0a // .quad 0x7d987706b0213d0a
	QUAD $0x7dce94c85c298c4c // .quad 0x7dce94c85c298c4c
	QUAD $0x7e031cfd3999f7b0 // .quad 0x7e031cfd3999f7b0
	QUAD $0x7e37e43c8800759c // .quad 0x7e37e43c8800759c
	QUAD $0x7e6ddd4baa009303 // .quad 0x7e6ddd4baa009303
	QUAD $0x7ea2aa4f4a405be2 // .quad 0x7ea2aa4f4a405be2
	QUAD $0x7ed754e31cd072da // .quad 0x7ed754e31cd072da
	QUAD $0x7f0d2a1be4048f90 // .quad 0x7f0d2a1be4048f90
	QUAD $0x7f423a516e82d9ba // .quad 0x7f423a516e82d9ba
	QUAD $0x7f76c8e5ca239029 // .quad 0x7f76c8e5ca239029
	QUAD $0x7fac7b1f3cac7433 // .quad 0x7fac7b1f3cac7433
	QUAD $0x7fe1ccf385ebc8a0 // .quad 0x7fe1ccf385ebc8a0

TEXT Â·__f64toa(SB), NOSPLIT, $0 - 24
	MOVQ  out+0(FP), DI
	MOVSD val+8(FP), X0
	CALL  Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+822(SB) // _f64toa
	MOVQ  AX, ret+16(FP)
	RET

TEXT Â·__i64toa(SB), NOSPLIT, $0 - 24
	MOVQ out+0(FP), DI
	MOVQ val+8(FP), SI
	CALL Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+3886(SB) // _i64toa
	MOVQ AX, ret+16(FP)
	RET

TEXT Â·__lspace(SB), NOSPLIT, $0 - 32
	MOVQ sp+0(FP), DI
	MOVQ nb+8(FP), SI
	MOVQ off+16(FP), DX
	CALL Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+366(SB) // _lspace
	MOVQ AX, ret+24(FP)
	RET

TEXT Â·__lzero(SB), NOSPLIT, $0 - 24
	MOVQ p+0(FP), DI
	MOVQ n+8(FP), SI
	CALL Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+0(SB) // _lzero
	MOVQ AX, ret+16(FP)
	RET

TEXT Â·__quote(SB), NOSPLIT, $0 - 48
	MOVQ sp+0(FP), DI
	MOVQ nb+8(FP), SI
	MOVQ dp+16(FP), DX
	MOVQ dn+24(FP), CX
	MOVQ flags+32(FP), R8
	CALL Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+5299(SB) // _quote
	MOVQ AX, ret+40(FP)
	RET

TEXT Â·__skip_array(SB), NOSPLIT, $0 - 32
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ m+16(FP), DX
	CALL Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+15851(SB) // _skip_array
	MOVQ AX, ret+24(FP)
	RET

TEXT Â·__skip_object(SB), NOSPLIT, $0 - 32
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ m+16(FP), DX
	CALL Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+15886(SB) // _skip_object
	MOVQ AX, ret+24(FP)
	RET

TEXT Â·__skip_one(SB), NOSPLIT, $0 - 32
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ m+16(FP), DX
	CALL Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+13051(SB) // _skip_one
	MOVQ AX, ret+24(FP)
	RET

TEXT Â·__u64toa(SB), NOSPLIT, $0 - 24
	MOVQ out+0(FP), DI
	MOVQ val+8(FP), SI
	CALL Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+3979(SB) // _u64toa
	MOVQ AX, ret+16(FP)
	RET

TEXT Â·__unquote(SB), NOSPLIT, $0 - 48
	MOVQ sp+0(FP), DI
	MOVQ nb+8(FP), SI
	MOVQ dp+16(FP), DX
	MOVQ ep+24(FP), CX
	MOVQ flags+32(FP), R8
	CALL Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+7136(SB) // _unquote
	MOVQ AX, ret+40(FP)
	RET

TEXT Â·__value(SB), NOSPLIT, $0 - 48
	MOVQ s+0(FP), DI
	MOVQ n+8(FP), SI
	MOVQ p+16(FP), DX
	MOVQ v+24(FP), CX
	MOVQ allow_control+32(FP), R8
	CALL Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+9082(SB) // _value
	MOVQ AX, ret+40(FP)
	RET

TEXT Â·__vnumber(SB), NOSPLIT, $0 - 24
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ v+16(FP), DX
	LEAQ Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+11529(SB), AX // _vnumber
	JMP  AX

TEXT Â·__vsigned(SB), NOSPLIT, $0 - 24
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ v+16(FP), DX
	LEAQ Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+12501(SB), AX // _vsigned
	JMP  AX

TEXT Â·__vstring(SB), NOSPLIT, $0 - 24
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ v+16(FP), DX
	LEAQ Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+10760(SB), AX // _vstring
	JMP  AX

TEXT Â·__vunsigned(SB), NOSPLIT, $0 - 24
	MOVQ s+0(FP), DI
	MOVQ p+8(FP), SI
	MOVQ v+16(FP), DX
	LEAQ Â·___asm2asm_compiled_code__DO_NOT_CALL_THIS_SYMBOL___+12778(SB), AX // _vunsigned
	JMP  AX
