//+build !noasm !appengine
// AUTO-GENERATED BY C2GOASM -- DO NOT EDIT

#include "go_asm.h"
#include "funcdata.h"
#include "textflag.h"
	
DATA LCDATA1<>+0x000(SB)/8, $0x8040201008040201
DATA LCDATA1<>+0x008(SB)/8, $0x8040201008040201
DATA LCDATA1<>+0x010(SB)/8, $0x0b030a0209010800
DATA LCDATA1<>+0x018(SB)/8, $0x0f070e060d050c04
GLOBL LCDATA1<>(SB), 8, $32

TEXT 路__lookup_small_key_entry__(SB), NOSPLIT, $16
	NO_LOCAL_POINTERS
	WORD $0x100000a0 // adr x0, .+20
	MOVD R0, ret(FP)
	RET
	// .p2align 4, 0x00

LCPI0_0:
    WORD $0x08040201
    WORD $0x80402010
    WORD $0x08040201
    WORD $0x80402010
LCPI0_1:
    WORD $0x09010800
    WORD $0x0b030a02
    WORD $0x0d050c04
    WORD $0x0f070e06

lookup_small_key:
    WORD $0xd10083ff // sub    sp, sp, #32
    WORD $0xa940280d // ldp    x13, x10, [x0]
    WORD $0x6f00e400 // movi    v0.2d, #0000000000000000
    WORD $0xf940002b // ldr    x11, [x1]
    WORD $0x12001d49 // and    w9, w10, #0xff
    WORD $0xad0003e0 // stp    q0, q0, [sp]
    WORD $0x8b294928 // add    x8, x9, w9, uxtw #2
    WORD $0x8b08016c // add    x12, x11, x8
    WORD $0x39400188 // ldrb    w8, [x12]
    WORD $0xb840118c // ldur    w12, [x12, #1]
    CMP $0, R8
    BEQ LBB0_46
    WORD $0x1102958e // add    w14, w12, #165
    WORD $0x92401d4f // and    x15, x10, #0xff
    WORD $0x8b0e016e // add    x14, x11, x14
    WORD $0x7100253f // cmp    w9, #9
    BHS LBB0_20
    WORD $0x394001b0 // ldrb    w16, [x13]
    WORD $0x11000531 // add    w17, w9, #1
    WORD $0x528000f2 // mov    w18, #7
    WORD $0x2a0803e0 // mov    w0, w8
    B LBB0_5
LBB0_3:
    WORD $0xaa1f03e1 // mov    x1, xzr
    WORD $0xeb0f03ff // cmp    xzr, x15
    BHS LBB0_19
LBB0_4:
    WORD $0x8b1101ce // add    x14, x14, x17
    WORD $0x71000400 // subs    w0, w0, #1
    BEQ LBB0_23
LBB0_5:
    WORD $0x394001c1 // ldrb    w1, [x14]
    WORD $0x6b10003f // cmp    w1, w16
    BNE LBB0_3
    WORD $0x394005c1 // ldrb    w1, [x14, #1]
    WORD $0x394005a3 // ldrb    w3, [x13, #1]
    WORD $0x6b03003f // cmp    w1, w3
    BNE LBB0_13
    WORD $0x394009c1 // ldrb    w1, [x14, #2]
    WORD $0x394009a3 // ldrb    w3, [x13, #2]
    WORD $0x6b03003f // cmp    w1, w3
    BNE LBB0_14
    WORD $0x39400dc1 // ldrb    w1, [x14, #3]
    WORD $0x39400da3 // ldrb    w3, [x13, #3]
    WORD $0x6b03003f // cmp    w1, w3
    BNE LBB0_15
    WORD $0x394011c1 // ldrb    w1, [x14, #4]
    WORD $0x394011a3 // ldrb    w3, [x13, #4]
    WORD $0x6b03003f // cmp    w1, w3
    BNE LBB0_16
    WORD $0x394015c1 // ldrb    w1, [x14, #5]
    WORD $0x394015a3 // ldrb    w3, [x13, #5]
    WORD $0x6b03003f // cmp    w1, w3
    BNE LBB0_17
    WORD $0x394019c1 // ldrb    w1, [x14, #6]
    WORD $0x394019a3 // ldrb    w3, [x13, #6]
    WORD $0x6b03003f // cmp    w1, w3
    BNE LBB0_18
    WORD $0x39401dc1 // ldrb    w1, [x14, #7]
    WORD $0x39401da3 // ldrb    w3, [x13, #7]
    WORD $0x6b03003f // cmp    w1, w3
    WORD $0x9a921641 // cinc    x1, x18, eq
    WORD $0xeb0f003f // cmp    x1, x15
    BLO LBB0_4
    B LBB0_19
LBB0_13:
    WORD $0x52800021 // mov    w1, #1
    WORD $0xeb0f003f // cmp    x1, x15
    BLO LBB0_4
    B LBB0_19
LBB0_14:
    WORD $0x52800041 // mov    w1, #2
    WORD $0xeb0f003f // cmp    x1, x15
    BLO LBB0_4
    B LBB0_19
LBB0_15:
    WORD $0x52800061 // mov    w1, #3
    WORD $0xeb0f003f // cmp    x1, x15
    BLO LBB0_4
    B LBB0_19
LBB0_16:
    WORD $0x52800081 // mov    w1, #4
    WORD $0xeb0f003f // cmp    x1, x15
    BLO LBB0_4
    B LBB0_19
LBB0_17:
    WORD $0x528000a1 // mov    w1, #5
    WORD $0xeb0f003f // cmp    x1, x15
    BLO LBB0_4
    B LBB0_19
LBB0_18:
    WORD $0x528000c1 // mov    w1, #6
    WORD $0xeb0f003f // cmp    x1, x15
    BLO LBB0_4
LBB0_19:
    WORD $0x8b0f01c8 // add    x8, x14, x15
    WORD $0x39400100 // ldrb    w0, [x8]
    WORD $0x910083ff // add    sp, sp, #32
    WORD $0xd65f03c0 // ret
LBB0_20:
    ADR LCPI0_0, R18_PLATFORM
    ADR LCPI0_1, R0
    WORD $0xad4005a0 // ldp    q0, q1, [x13]
    WORD $0x92800011 // mov    x17, #-1
    WORD $0x11000530 // add    w16, w9, #1
    WORD $0x9acf2231 // lsl    x17, x17, x15
    WORD $0x3dc00242 // ldr    q2, [x18, :lo12:.LCPI0_0]
    WORD $0x2a0803f2 // mov    w18, w8
    WORD $0x3dc00003 // ldr    q3, [x0, :lo12:.LCPI0_1]
LBB0_21:
    WORD $0xad4011c5 // ldp    q5, q4, [x14]
    WORD $0x6e258c05 // cmeq    v5.16b, v0.16b, v5.16b
    WORD $0x6e248c24 // cmeq    v4.16b, v1.16b, v4.16b
    WORD $0x4e221ca5 // and    v5.16b, v5.16b, v2.16b
    WORD $0x4e221c84 // and    v4.16b, v4.16b, v2.16b
    WORD $0x4e030084 // tbl    v4.16b, { v4.16b }, v3.16b
    WORD $0x4e0300a5 // tbl    v5.16b, { v5.16b }, v3.16b
    WORD $0x4e71b884 // addv    h4, v4.8h
    WORD $0x4e71b8a5 // addv    h5, v5.8h
    WORD $0x1e260080 // fmov    w0, s4
    WORD $0x1e2600a1 // fmov    w1, s5
    WORD $0x33103c01 // bfi    w1, w0, #16, #16
    WORD $0x2a110020 // orr    w0, w1, w17
    WORD $0x3100041f // cmn    w0, #1
    BEQ LBB0_19
    WORD $0x8b1001ce // add    x14, x14, x16
    WORD $0x71000652 // subs    w18, w18, #1
    BNE LBB0_21
LBB0_23:
    WORD $0xb100045f // cmn    x2, #1
    BEQ LBB0_46
    WORD $0x2518e3e0 // ptrue    p0.b
    WORD $0x2538c801 // mov    z1.b, #64
    WORD $0xa400a1a0 // ld1b    { z0.b }, p0/z, [x13]
    WORD $0x8b02018c // add    x12, x12, x2
    WORD $0x8b0c016b // add    x11, x11, x12
    WORD $0x92401d4a // and    x10, x10, #0xff
    WORD $0x24018011 // cmpgt    p1.b, p0/z, z0.b, z1.b
    WORD $0x2538cb61 // mov    z1.b, #91
    WORD $0x24008431 // cmpgt    p1.b, p1/z, z1.b, z0.b
    WORD $0x05111fe1 // mov    z1.b, p1/z, #-1
    WORD $0x7100253f // cmp    w9, #9
    WORD $0x05801e01 // and    z1.b, z1.b, #0x20
    WORD $0x04210000 // add    z0.b, z0.b, z1.b
    WORD $0xe400e3e0 // st1b    { z0.b }, p0, [sp]
    BHS LBB0_43
    WORD $0x7100051f // cmp    w8, #1
    WORD $0x394003ec // ldrb    w12, [sp]
    WORD $0x394007ed // ldrb    w13, [sp, #1]
    WORD $0x11000529 // add    w9, w9, #1
    WORD $0x39400bee // ldrb    w14, [sp, #2]
    WORD $0x1a9f8508 // csinc    w8, w8, wzr, hi
    WORD $0x39400fef // ldrb    w15, [sp, #3]
    WORD $0x528000e0 // mov    w0, #7
    WORD $0x394013f0 // ldrb    w16, [sp, #4]
    WORD $0x394017f1 // ldrb    w17, [sp, #5]
    WORD $0x39401bf2 // ldrb    w18, [sp, #6]
    WORD $0x39401fe1 // ldrb    w1, [sp, #7]
LBB0_26:
    WORD $0x39400162 // ldrb    w2, [x11]
    WORD $0x6b0c005f // cmp    w2, w12
    BNE LBB0_34
    WORD $0x39400562 // ldrb    w2, [x11, #1]
    WORD $0x6b0d005f // cmp    w2, w13
    BNE LBB0_35
    WORD $0x39400962 // ldrb    w2, [x11, #2]
    WORD $0x6b0e005f // cmp    w2, w14
    BNE LBB0_36
    WORD $0x39400d62 // ldrb    w2, [x11, #3]
    WORD $0x6b0f005f // cmp    w2, w15
    BNE LBB0_37
    WORD $0x39401162 // ldrb    w2, [x11, #4]
    WORD $0x6b10005f // cmp    w2, w16
    BNE LBB0_38
    WORD $0x39401562 // ldrb    w2, [x11, #5]
    WORD $0x6b11005f // cmp    w2, w17
    BNE LBB0_39
    WORD $0x39401962 // ldrb    w2, [x11, #6]
    WORD $0x6b12005f // cmp    w2, w18
    BNE LBB0_40
    WORD $0x39401d62 // ldrb    w2, [x11, #7]
    WORD $0x6b01005f // cmp    w2, w1
    WORD $0x9a801402 // cinc    x2, x0, eq
    B LBB0_41
LBB0_34:
    WORD $0xaa1f03e2 // mov    x2, xzr
    B LBB0_41
LBB0_35:
    WORD $0x52800022 // mov    w2, #1
    B LBB0_41
LBB0_36:
    WORD $0x52800042 // mov    w2, #2
    B LBB0_41
LBB0_37:
    WORD $0x52800062 // mov    w2, #3
    B LBB0_41
LBB0_38:
    WORD $0x52800082 // mov    w2, #4
    B LBB0_41
LBB0_39:
    WORD $0x528000a2 // mov    w2, #5
    B LBB0_41
LBB0_40:
    WORD $0x528000c2 // mov    w2, #6
LBB0_41:
    WORD $0xeb0a005f // cmp    x2, x10
    BHS LBB0_47
    WORD $0x8b09016b // add    x11, x11, x9
    WORD $0x71000508 // subs    w8, w8, #1
    BNE LBB0_26
    B LBB0_46
LBB0_43:
    WORD $0xad4007e0 // ldp    q0, q1, [sp]
    ADR LCPI0_0, R13
    ADR LCPI0_1, R14
    WORD $0x9280000c // mov    x12, #-1
    WORD $0x7100051f // cmp    w8, #1
    WORD $0x11000529 // add    w9, w9, #1
    WORD $0x9aca218c // lsl    x12, x12, x10
    WORD $0x1a9f8508 // csinc    w8, w8, wzr, hi
    WORD $0x3dc001a2 // ldr    q2, [x13, :lo12:.LCPI0_0]
    WORD $0x3dc001c3 // ldr    q3, [x14, :lo12:.LCPI0_1]
LBB0_44:
    WORD $0xad401165 // ldp    q5, q4, [x11]
    WORD $0x6e258c05 // cmeq    v5.16b, v0.16b, v5.16b
    WORD $0x6e248c24 // cmeq    v4.16b, v1.16b, v4.16b
    WORD $0x4e221ca5 // and    v5.16b, v5.16b, v2.16b
    WORD $0x4e221c84 // and    v4.16b, v4.16b, v2.16b
    WORD $0x4e030084 // tbl    v4.16b, { v4.16b }, v3.16b
    WORD $0x4e0300a5 // tbl    v5.16b, { v5.16b }, v3.16b
    WORD $0x4e71b884 // addv    h4, v4.8h
    WORD $0x4e71b8a5 // addv    h5, v5.8h
    WORD $0x1e26008d // fmov    w13, s4
    WORD $0x1e2600ae // fmov    w14, s5
    WORD $0x33103dae // bfi    w14, w13, #16, #16
    WORD $0x2a0c01cd // orr    w13, w14, w12
    WORD $0x310005bf // cmn    w13, #1
    BEQ LBB0_47
    WORD $0x8b09016b // add    x11, x11, x9
    WORD $0x71000508 // subs    w8, w8, #1
    BNE LBB0_44
LBB0_46:
    WORD $0x92800000 // mov    x0, #-1
    WORD $0x910083ff // add    sp, sp, #32
    WORD $0xd65f03c0 // ret
LBB0_47:
    WORD $0x8b0a0168 // add    x8, x11, x10
    WORD $0x39400100 // ldrb    w0, [x8]
    WORD $0x910083ff // add    sp, sp, #32
    WORD $0xd65f03c0 // ret

TEXT 路__lookup_small_key(SB), NOSPLIT, $0-32
	NO_LOCAL_POINTERS

_entry:
	MOVD 16(g), R16
	SUB $96, RSP, R17
	CMP  R16, R17
	BLS  _stack_grow

_lookup_small_key:
	MOVD key+0(FP), R0
	MOVD table+8(FP), R1
	MOVD lowerOff+16(FP), R2
	MOVD 路_subr__lookup_small_key(SB), R11
	WORD $0x1000005e // adr x30, .+8
	JMP (R11)
	MOVD R0, ret+24(FP)
	RET

_stack_grow:
	MOVD R30, R3
	CALL runtime路morestack_noctxt<>(SB)
	JMP  _entry
