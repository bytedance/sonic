// +build !noasm !appengine
// Code generated by asm2asm, DO NOT EDIT.

#include "go_asm.h"
#include "funcdata.h"
#include "textflag.h"

TEXT Â·__skip_number_entry__(SB), $32
	NO_LOCAL_POINTERS
	WORD $0x10000000  // adr x0, . $0(%rip)
	WORD $0x9100c3ff  // add sp, sp, #48
	WORD $0xd65f03c0  // ret
	WORD $0x00000000  // .p2align 4, 0x00
lCPI0_0:
	WORD $0x08040201
	WORD $0x80402010
	WORD $0x08040201
	WORD $0x80402010
	// // .byte 1
// .byte 2
// .byte 4
// .byte 8
// .byte 16
// .byte 32
// .byte 64
// .byte 128
// .byte 1
// .byte 2
// .byte 4
// .byte 8
// .byte 16
// .byte 32
// .byte 64
// .byte 128

lCPI0_1:
	WORD $0x09010800
	WORD $0x0b030a02
	WORD $0x0d050c04
	WORD $0x0f070e06
	// // .byte 0
// .byte 8
// .byte 1
// .byte 9
// .byte 2
// .byte 10
// .byte 3
// .byte 11
// .byte 4
// .byte 12
// .byte 5
// .byte 13
// .byte 6
// .byte 14
// .byte 7
// .byte 15

_skip_number:
	MOVD.W R30, -48(RSP)	// 	WORD $0xf81d0ffe  // str	x30, [sp, #-48]!
	WORD $0xa9024ff4  // stp	x20, x19, [sp, #32]
	WORD $0xa9402808  // ldp	x8, x10, [x0]
	WORD $0xf9400020  // ldr	x0, [x1]
	WORD $0x8b000109  // add	x9, x8, x0
	WORD $0xaa0903eb  // mov	x11, x9
	WORD $0x3840156c  // ldrb	w12, [x11], #1
	WORD $0x7100b59f  // cmp	w12, #45
	WORD $0x1a9f17ee  // cset	w14, eq
	WORD $0x9a8b1129  // csel	x9, x9, x11, ne
	WORD $0xcb00014a  // sub	x10, x10, x0
	WORD $0xeb0e014f  // subs	x15, x10, x14
	WORD $0x54001c60  // b.eq	LBB0_56 $908(%rip)
	WORD $0x3940012a  // ldrb	w10, [x9]
	WORD $0x5100e94b  // sub	w11, w10, #58
	WORD $0x3100297f  // cmn	w11, #10
	WORD $0x54001863  // b.lo	LBB0_50 $780(%rip)
	WORD $0x7100c15f  // cmp	w10, #48
	WORD $0x54000281  // b.ne	LBB0_6 $80(%rip)
	WORD $0xf10005ff  // cmp	x15, #1
	WORD $0x54000101  // b.ne	LBB0_5 $32(%rip)
LBB0_4:
	WORD $0x5280002e  // mov	w14, #1
	WORD $0x8b0e0129  // add	x9, x9, x14
	WORD $0xcb080128  // sub	x8, x9, x8
	WORD $0xf9000028  // str	x8, [x1]
	WORD $0xa9424ff4  // ldp	x20, x19, [sp, #32]
	WORD $0x9100c3ff  // add	sp, sp, #48
	WORD $0xd65f03c0  // ret
LBB0_5:
	WORD $0x3940052a  // ldrb	w10, [x9, #1]
	WORD $0x5100b94a  // sub	w10, w10, #46
	WORD $0x7100dd5f  // cmp	w10, #55
	WORD $0x5280002b  // mov	w11, #1
	WORD $0x9aca216a  // lsl	x10, x11, x10
	WORD $0xb20903eb  // mov	x11, #36028797027352576
	WORD $0xf280002b  // movk	x11, #1
	WORD $0x8a0b014a  // and	x10, x10, x11
	WORD $0xfa409944  // ccmp	x10, #0, #4, ls
	WORD $0x54fffe00  // b.eq	LBB0_4 $-64(%rip)
LBB0_6:
	WORD $0xf10041ff  // cmp	x15, #16
	WORD $0x540019c3  // b.lo	LBB0_57 $824(%rip)
	WORD $0xd2800010  // mov	x16, #0
	WORD $0x9280000a  // mov	x10, #-1
	WORD $0x4f01e5c0  // movi.16b	v0, #46
	WORD $0x4f01e561  // movi.16b	v1, #43
	WORD $0x4f01e5a2  // movi.16b	v2, #45
	WORD $0x4f06e603  // movi.16b	v3, #208
Lloh0:
	WORD $0x10fff94b  // adr	x11, lCPI0_0 $-216(%rip)
Lloh1:
	WORD $0x3dc00164  // ldr	q4, [x11, lCPI0_0@PAGEOFF] $0(%rip)
	WORD $0x4f00e545  // movi.16b	v5, #10
	WORD $0x4f06e7e6  // movi.16b	v6, #223
Lloh2:
	WORD $0x10fff94b  // adr	x11, lCPI0_1 $-216(%rip)
Lloh3:
	WORD $0x3dc00167  // ldr	q7, [x11, lCPI0_1@PAGEOFF] $0(%rip)
	WORD $0x4f02e4b0  // movi.16b	v16, #69
	WORD $0x12800011  // mov	w17, #-1
	WORD $0x9280000c  // mov	x12, #-1
	WORD $0x9280000b  // mov	x11, #-1
	WORD $0xaa0f03ed  // mov	x13, x15
LBB0_8:
	WORD $0x3cf06931  // ldr	q17, [x9, x16]
	WORD $0x6e208e32  // cmeq.16b	v18, v17, v0
	WORD $0x6e218e33  // cmeq.16b	v19, v17, v1
	WORD $0x6e228e34  // cmeq.16b	v20, v17, v2
	WORD $0x4e238635  // add.16b	v21, v17, v3
	WORD $0x6e3534b5  // cmhi.16b	v21, v5, v21
	WORD $0x4e261e31  // and.16b	v17, v17, v6
	WORD $0x6e308e31  // cmeq.16b	v17, v17, v16
	WORD $0x4eb31e93  // orr.16b	v19, v20, v19
	WORD $0x4eb21e34  // orr.16b	v20, v17, v18
	WORD $0x4eb31e94  // orr.16b	v20, v20, v19
	WORD $0x4eb51e94  // orr.16b	v20, v20, v21
	WORD $0x4e241e52  // and.16b	v18, v18, v4
	WORD $0x4e070252  // tbl.16b	v18, { v18 }, v7
	WORD $0x4e71ba52  // addv.8h	h18, v18
	WORD $0x1e260243  // fmov	w3, s18
	WORD $0x4e241e31  // and.16b	v17, v17, v4
	WORD $0x4e070231  // tbl.16b	v17, { v17 }, v7
	WORD $0x4e71ba31  // addv.8h	h17, v17
	WORD $0x1e260224  // fmov	w4, s17
	WORD $0x4e241e71  // and.16b	v17, v19, v4
	WORD $0x4e070231  // tbl.16b	v17, { v17 }, v7
	WORD $0x4e71ba31  // addv.8h	h17, v17
	WORD $0x1e260226  // fmov	w6, s17
	WORD $0x4e241e91  // and.16b	v17, v20, v4
	WORD $0x4e070231  // tbl.16b	v17, { v17 }, v7
	WORD $0x4e71ba31  // addv.8h	h17, v17
	WORD $0x1e260222  // fmov	w2, s17
	WORD $0x2a2203e2  // mvn	w2, w2
	WORD $0x32103c42  // orr	w2, w2, #0xffff0000
	WORD $0x5ac00042  // rbit	w2, w2
	WORD $0x5ac01042  // clz	w2, w2
	WORD $0x1ac22225  // lsl	w5, w17, w2
	WORD $0x0a250067  // bic	w7, w3, w5
	WORD $0x0a250093  // bic	w19, w4, w5
	WORD $0x0a2500d4  // bic	w20, w6, w5
	WORD $0x7100405f  // cmp	w2, #16
	WORD $0x1a870065  // csel	w5, w3, w7, eq
	WORD $0x1a930084  // csel	w4, w4, w19, eq
	WORD $0x1a9400c3  // csel	w3, w6, w20, eq
	WORD $0x510004a6  // sub	w6, w5, #1
	WORD $0x6a0500c6  // ands	w6, w6, w5
	WORD $0x54000fc1  // b.ne	LBB0_52 $504(%rip)
	WORD $0x51000486  // sub	w6, w4, #1
	WORD $0x6a0400c6  // ands	w6, w6, w4
	WORD $0x54000f61  // b.ne	LBB0_52 $492(%rip)
	WORD $0x51000466  // sub	w6, w3, #1
	WORD $0x6a0300c6  // ands	w6, w6, w3
	WORD $0x54000f01  // b.ne	LBB0_52 $480(%rip)
	WORD $0x340000c5  // cbz	w5, LBB0_14 $24(%rip)
	WORD $0x5ac000a5  // rbit	w5, w5
	WORD $0x5ac010a5  // clz	w5, w5
	WORD $0xb100057f  // cmn	x11, #1
	WORD $0x54000f01  // b.ne	LBB0_53 $480(%rip)
	WORD $0x8b05020b  // add	x11, x16, x5
LBB0_14:
	WORD $0x340000c4  // cbz	w4, LBB0_17 $24(%rip)
	WORD $0x5ac00084  // rbit	w4, w4
	WORD $0x5ac01084  // clz	w4, w4
	WORD $0xb100059f  // cmn	x12, #1
	WORD $0x54000ea1  // b.ne	LBB0_54 $468(%rip)
	WORD $0x8b04020c  // add	x12, x16, x4
LBB0_17:
	WORD $0x340000c3  // cbz	w3, LBB0_20 $24(%rip)
	WORD $0x5ac00063  // rbit	w3, w3
	WORD $0x5ac01063  // clz	w3, w3
	WORD $0xb100055f  // cmn	x10, #1
	WORD $0x54000e41  // b.ne	LBB0_55 $456(%rip)
	WORD $0x8b03020a  // add	x10, x16, x3
LBB0_20:
	WORD $0x7100405f  // cmp	w2, #16
	WORD $0x540005e1  // b.ne	LBB0_32 $188(%rip)
	WORD $0xd10041ad  // sub	x13, x13, #16
	WORD $0x91004210  // add	x16, x16, #16
	WORD $0xf1003dbf  // cmp	x13, #15
	WORD $0x54fff708  // b.hi	LBB0_8 $-288(%rip)
	WORD $0x8b100131  // add	x17, x9, x16
	WORD $0xeb1001ff  // cmp	x15, x16
	WORD $0x54000540  // b.eq	LBB0_33 $168(%rip)
LBB0_23:
	WORD $0x8b0d022f  // add	x15, x17, x13
	WORD $0x8b080010  // add	x16, x0, x8
	WORD $0x8b0e020e  // add	x14, x16, x14
	WORD $0xaa3103f0  // mvn	x16, x17
	WORD $0x8b0e020e  // add	x14, x16, x14
	WORD $0xcb090230  // sub	x16, x17, x9
	WORD $0xaa1103e2  // mov	x2, x17
Lloh4:
	WORD $0x10000de3  // adr	x3, LJTI0_0 $444(%rip)
Lloh5:
	WORD $0x91000063  // add	x3, x3, LJTI0_0@PAGEOFF $0(%rip)
	WORD $0x1400000b  // b	LBB0_27 $44(%rip)
LBB0_24:
	WORD $0x7101949f  // cmp	w4, #101
	WORD $0x540003c1  // b.ne	LBB0_33 $120(%rip)
LBB0_25:
	WORD $0xb100059f  // cmn	x12, #1
	WORD $0xaa1003ec  // mov	x12, x16
	WORD $0x540005c1  // b.ne	LBB0_43 $184(%rip)
LBB0_26:
	WORD $0xd10005ce  // sub	x14, x14, #1
	WORD $0x91000610  // add	x16, x16, #1
	WORD $0xaa0203f1  // mov	x17, x2
	WORD $0xd10005ad  // sub	x13, x13, #1
	WORD $0xb40006cd  // cbz	x13, LBB0_48 $216(%rip)
LBB0_27:
	WORD $0x38c01444  // ldrsb	w4, [x2], #1
	WORD $0x5100c085  // sub	w5, w4, #48
	WORD $0x710028bf  // cmp	w5, #10
	WORD $0x54ffff03  // b.lo	LBB0_26 $-32(%rip)
	WORD $0x5100ac85  // sub	w5, w4, #43
	WORD $0x710068bf  // cmp	w5, #26
	WORD $0x54fffe08  // b.hi	LBB0_24 $-64(%rip)
	WORD $0x10fffe24  // adr	x4, LBB0_25 $-60(%rip)
	WORD $0x38656866  // ldrb	w6, [x3, x5]
	WORD $0x8b060884  // add	x4, x4, x6, lsl #2
	WORD $0xd61f0080  // br	x4
LBB0_30:
	WORD $0xb100055f  // cmn	x10, #1
	WORD $0xaa1003ea  // mov	x10, x16
	WORD $0x54fffdc0  // b.eq	LBB0_26 $-72(%rip)
	WORD $0x1400001a  // b	LBB0_43 $104(%rip)
LBB0_31:
	WORD $0xb100057f  // cmn	x11, #1
	WORD $0xaa1003eb  // mov	x11, x16
	WORD $0x54fffd40  // b.eq	LBB0_26 $-88(%rip)
	WORD $0x14000016  // b	LBB0_43 $88(%rip)
LBB0_32:
	WORD $0x8b22412d  // add	x13, x9, w2, uxtw
	WORD $0x8b1001b1  // add	x17, x13, x16
LBB0_33:
	WORD $0x9280000e  // mov	x14, #-1
	WORD $0xb400044b  // cbz	x11, LBB0_49 $136(%rip)
LBB0_34:
	WORD $0xb400042a  // cbz	x10, LBB0_49 $132(%rip)
	WORD $0xb400040c  // cbz	x12, LBB0_49 $128(%rip)
	WORD $0xcb09022d  // sub	x13, x17, x9
	WORD $0xd10005ae  // sub	x14, x13, #1
	WORD $0xeb0e017f  // cmp	x11, x14
	WORD $0x54000160  // b.eq	LBB0_42 $44(%rip)
	WORD $0xeb0e015f  // cmp	x10, x14
	WORD $0x54000120  // b.eq	LBB0_42 $36(%rip)
	WORD $0xeb0e019f  // cmp	x12, x14
	WORD $0x540000e0  // b.eq	LBB0_42 $28(%rip)
	WORD $0xf100054e  // subs	x14, x10, #1
	WORD $0x540001ab  // b.lt	LBB0_45 $52(%rip)
	WORD $0xeb0e019f  // cmp	x12, x14
	WORD $0x54000160  // b.eq	LBB0_45 $44(%rip)
	WORD $0xaa2a03ee  // mvn	x14, x10
	WORD $0x14000002  // b	LBB0_43 $8(%rip)
LBB0_42:
	WORD $0xcb0d03ee  // neg	x14, x13
LBB0_43:
	WORD $0xb7f8020e  // tbnz	x14, #63, LBB0_49 $64(%rip)
	WORD $0x8b0e0129  // add	x9, x9, x14
	WORD $0xcb080128  // sub	x8, x9, x8
	WORD $0xf9000028  // str	x8, [x1]
	WORD $0xa9424ff4  // ldp	x20, x19, [sp, #32]
	WORD $0x9100c3ff  // add	sp, sp, #48
	WORD $0xd65f03c0  // ret
LBB0_45:
	WORD $0xaa0c016a  // orr	x10, x11, x12
	WORD $0xb7f8020a  // tbnz	x10, #63, LBB0_51 $64(%rip)
	WORD $0xeb0c017f  // cmp	x11, x12
	WORD $0x540001cb  // b.lt	LBB0_51 $56(%rip)
	WORD $0xaa2b03ee  // mvn	x14, x11
	WORD $0x17fffff4  // b	LBB0_43 $-48(%rip)
LBB0_48:
	WORD $0xaa0f03f1  // mov	x17, x15
	WORD $0x9280000e  // mov	x14, #-1
	WORD $0xb5fffc0b  // cbnz	x11, LBB0_34 $-128(%rip)
LBB0_49:
	WORD $0xaa2e03ea  // mvn	x10, x14
	WORD $0x8b0a0129  // add	x9, x9, x10
LBB0_50:
	WORD $0x92800020  // mov	x0, #-2
	WORD $0xcb080128  // sub	x8, x9, x8
	WORD $0xf9000028  // str	x8, [x1]
	WORD $0xa9424ff4  // ldp	x20, x19, [sp, #32]
	WORD $0x9100c3ff  // add	sp, sp, #48
	WORD $0xd65f03c0  // ret
LBB0_51:
	WORD $0xd37ffd4a  // lsr	x10, x10, #63
	WORD $0x5200014a  // eor	w10, w10, #0x1
	WORD $0xd100058e  // sub	x14, x12, #1
	WORD $0xeb0e017f  // cmp	x11, x14
	WORD $0x1a9f17eb  // cset	w11, eq
	WORD $0x6a0b015f  // tst	w10, w11
	WORD $0xda8c01ae  // csinv	x14, x13, x12, eq
	WORD $0x17ffffe1  // b	LBB0_43 $-124(%rip)
LBB0_52:
	WORD $0x5ac000ca  // rbit	w10, w6
	WORD $0x5ac0114a  // clz	w10, w10
	WORD $0xaa3003eb  // mvn	x11, x16
	WORD $0xcb0a016e  // sub	x14, x11, x10
	WORD $0x17ffffdc  // b	LBB0_43 $-144(%rip)
LBB0_53:
	WORD $0xaa3003ea  // mvn	x10, x16
	WORD $0xcb25414e  // sub	x14, x10, w5, uxtw
	WORD $0x17ffffd9  // b	LBB0_43 $-156(%rip)
LBB0_54:
	WORD $0xaa3003ea  // mvn	x10, x16
	WORD $0xcb24414e  // sub	x14, x10, w4, uxtw
	WORD $0x17ffffd6  // b	LBB0_43 $-168(%rip)
LBB0_55:
	WORD $0xaa3003ea  // mvn	x10, x16
	WORD $0xcb23414e  // sub	x14, x10, w3, uxtw
	WORD $0x17ffffd3  // b	LBB0_43 $-180(%rip)
LBB0_56:
	WORD $0x92800000  // mov	x0, #-1
	WORD $0xcb080128  // sub	x8, x9, x8
	WORD $0xf9000028  // str	x8, [x1]
	WORD $0xa9424ff4  // ldp	x20, x19, [sp, #32]
	WORD $0x9100c3ff  // add	sp, sp, #48
	WORD $0xd65f03c0  // ret
LBB0_57:
	WORD $0x9280000b  // mov	x11, #-1
	WORD $0xaa0903f1  // mov	x17, x9
	WORD $0xaa0f03ed  // mov	x13, x15
	WORD $0x9280000c  // mov	x12, #-1
	WORD $0x9280000a  // mov	x10, #-1
	WORD $0x17ffff8b  // b	LBB0_23 $-468(%rip)
LJTI0_0:
	WORD $0x17131d13
	WORD $0x1d1d1d1d
	WORD $0x1d1d1d1d
	WORD $0x1d1d1d1d
	WORD $0x1d1d1d1d
	WORD $0x1d1d1d1d
	WORD $0x00001d1d
	// // .byte (LBB0_30-LBB0_25)>>2
// .byte (LBB0_33-LBB0_25)>>2
// .byte (LBB0_30-LBB0_25)>>2
// .byte (LBB0_31-LBB0_25)>>2
// .byte (LBB0_33-LBB0_25)>>2
// .byte (LBB0_33-LBB0_25)>>2
// .byte (LBB0_33-LBB0_25)>>2
// .byte (LBB0_33-LBB0_25)>>2
// .byte (LBB0_33-LBB0_25)>>2
// .byte (LBB0_33-LBB0_25)>>2
// .byte (LBB0_33-LBB0_25)>>2
// .byte (LBB0_33-LBB0_25)>>2
// .byte (LBB0_33-LBB0_25)>>2
// .byte (LBB0_33-LBB0_25)>>2
// .byte (LBB0_33-LBB0_25)>>2
// .byte (LBB0_33-LBB0_25)>>2
// .byte (LBB0_33-LBB0_25)>>2
// .byte (LBB0_33-LBB0_25)>>2
// .byte (LBB0_33-LBB0_25)>>2
// .byte (LBB0_33-LBB0_25)>>2
// .byte (LBB0_33-LBB0_25)>>2
// .byte (LBB0_33-LBB0_25)>>2
// .byte (LBB0_33-LBB0_25)>>2
// .byte (LBB0_33-LBB0_25)>>2
// .byte (LBB0_33-LBB0_25)>>2
// .byte (LBB0_33-LBB0_25)>>2
// .byte (LBB0_25-LBB0_25)>>2

_MASK_USE_NUMBER:
	WORD $0x00000002  // .long 2

TEXT Â·__skip_number(SB), $0-24
	NO_LOCAL_POINTERS

_entry:
	MOVD 16(g), R16
	SUB $80, RSP, R17
	CMP  R16, R17
	BLS  _stack_grow

_skip_number:
	MOVD s+0(FP), R0
	MOVD p+8(FP), R1
	CALL Â·__skip_number_entry__+60(SB)  // _skip_number
	MOVD R0, ret+16(FP)
	RET

_stack_grow:
	MOVD R30, R3
	CALL runtimeÂ·morestack_noctxt<>(SB)
	JMP  _entry
